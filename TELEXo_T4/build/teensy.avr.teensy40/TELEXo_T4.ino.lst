
/private/var/folders/rr/vx0td18110v1z2t2_7cpm6lw0000gn/T/arduino/sketches/1A45862705C6A7C8D249B61812C4294E/TELEXo_T4.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	2001a2c0 	.word	0x2001a2c0
6000142c:	2001acc0 	.word	0x2001acc0

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 f940 	bl	600016c4 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b67      	ldr	r3, [pc, #412]	; (600015e4 <ResetHandler2+0x1b4>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5e      	ldr	r2, [pc, #376]	; (600015e8 <ResetHandler2+0x1b8>)
6000146e:	495f      	ldr	r1, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
60001470:	485f      	ldr	r0, [pc, #380]	; (600015f0 <ResetHandler2+0x1c0>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a5f      	ldr	r2, [pc, #380]	; (600015f4 <ResetHandler2+0x1c4>)
60001478:	495f      	ldr	r1, [pc, #380]	; (600015f8 <ResetHandler2+0x1c8>)
6000147a:	4860      	ldr	r0, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c5f      	ldr	r4, [pc, #380]	; (60001600 <ResetHandler2+0x1d0>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5c      	ldr	r2, [pc, #368]	; (60001604 <ResetHandler2+0x1d4>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b59      	ldr	r3, [pc, #356]	; (60001608 <ResetHandler2+0x1d8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a59      	ldr	r2, [pc, #356]	; (6000160c <ResetHandler2+0x1dc>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4c      	ldr	r6, [pc, #304]	; (600015e4 <ResetHandler2+0x1b4>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b180 	ldr.w	fp, [pc, #384]	; 6000163c <ResetHandler2+0x20c>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a180 	ldr.w	sl, [pc, #384]	; 60001640 <ResetHandler2+0x210>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8164 	ldr.w	r8, [pc, #356]	; 60001644 <ResetHandler2+0x214>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4a      	ldr	r2, [pc, #296]	; (60001610 <ResetHandler2+0x1e0>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 f8de 	bl	600016d4 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3e      	ldr	r3, [pc, #248]	; (60001614 <ResetHandler2+0x1e4>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	493f      	ldr	r1, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b3f      	ldr	r3, [pc, #252]	; (6000161c <ResetHandler2+0x1ec>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3c      	ldr	r3, [pc, #240]	; (60001620 <ResetHandler2+0x1f0>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b39      	ldr	r3, [pc, #228]	; (60001624 <ResetHandler2+0x1f4>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 f94a 	bl	600017e4 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4834      	ldr	r0, [pc, #208]	; (60001628 <ResetHandler2+0x1f8>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f000 faa9 	bl	60001ab8 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b30      	ldr	r3, [pc, #192]	; (6000162c <ResetHandler2+0x1fc>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a30      	ldr	r2, [pc, #192]	; (60001630 <ResetHandler2+0x200>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4928      	ldr	r1, [pc, #160]	; (60001634 <ResetHandler2+0x204>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a23      	ldr	r2, [pc, #140]	; (60001630 <ResetHandler2+0x200>)
600015a2:	4c25      	ldr	r4, [pc, #148]	; (60001638 <ResetHandler2+0x208>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	analog_init();
600015ac:	f000 f860 	bl	60001670 <analog_init>
	pwm_init();
600015b0:	f000 fa96 	bl	60001ae0 <__pwm_init_veneer>
	tempmon_init();
600015b4:	f000 f944 	bl	60001840 <tempmon_init>
	startup_middle_hook();
600015b8:	f000 f886 	bl	600016c8 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015bc:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015be:	2b13      	cmp	r3, #19
600015c0:	d9fc      	bls.n	600015bc <ResetHandler2+0x18c>
	usb_init();
600015c2:	f000 f9d5 	bl	60001970 <usb_init>
600015c6:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015cc:	d3fb      	bcc.n	600015c6 <ResetHandler2+0x196>
	startup_debug_reset();
600015ce:	f000 f87f 	bl	600016d0 <startup_debug_reset>
	startup_late_hook();
600015d2:	f000 f87b 	bl	600016cc <startup_default_late_hook>
	__libc_init_array();
600015d6:	f000 fa7b 	bl	60001ad0 <____libc_init_array_veneer>
	main();
600015da:	f000 fa75 	bl	60001ac8 <__main_veneer>
	while (1) asm("WFI");
600015de:	bf30      	wfi
600015e0:	e7fd      	b.n	600015de <ResetHandler2+0x1ae>
600015e2:	bf00      	nop
600015e4:	400d8000 	.word	0x400d8000
600015e8:	0000cae8 	.word	0x0000cae8
600015ec:	600a4920 	.word	0x600a4920
600015f0:	00000000 	.word	0x00000000
600015f4:	2001a2c0 	.word	0x2001a2c0
600015f8:	600b140c 	.word	0x600b140c
600015fc:	20000000 	.word	0x20000000
60001600:	2001a000 	.word	0x2001a000
60001604:	000050a1 	.word	0x000050a1
60001608:	e000e400 	.word	0xe000e400
6000160c:	e000e4a0 	.word	0xe000e4a0
60001610:	400ac000 	.word	0x400ac000
60001614:	00004125 	.word	0x00004125
60001618:	2001ac3c 	.word	0x2001ac3c
6000161c:	00004129 	.word	0x00004129
60001620:	20200000 	.word	0x20200000
60001624:	e0001000 	.word	0xe0001000
60001628:	23c34600 	.word	0x23c34600
6000162c:	40084000 	.word	0x40084000
60001630:	400d4000 	.word	0x400d4000
60001634:	56c00000 	.word	0x56c00000
60001638:	2001ac40 	.word	0x2001ac40
6000163c:	2018101b 	.word	0x2018101b
60001640:	13110d0c 	.word	0x13110d0c
60001644:	400fc000 	.word	0x400fc000

60001648 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001648:	4b05      	ldr	r3, [pc, #20]	; (60001660 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164a:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164e:	4a05      	ldr	r2, [pc, #20]	; (60001664 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001650:	4805      	ldr	r0, [pc, #20]	; (60001668 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
60001656:	4a05      	ldr	r2, [pc, #20]	; (6000166c <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001658:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4695      	mov	sp, r2
	ResetHandler2();
6000165c:	f7ff fee8 	bl	60001430 <ResetHandler2>
60001660:	400ac000 	.word	0x400ac000
60001664:	aaaaaaaf 	.word	0xaaaaaaaf
60001668:	00200007 	.word	0x00200007
6000166c:	20070000 	.word	0x20070000

60001670 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001670:	4b10      	ldr	r3, [pc, #64]	; (600016b4 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001672:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001674:	4a10      	ldr	r2, [pc, #64]	; (600016b8 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001676:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001678:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
6000167c:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000167e:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001680:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001684:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001686:	f441 7140 	orr.w	r1, r1, #768	; 0x300
6000168a:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000168c:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000168e:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001690:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001692:	061b      	lsls	r3, r3, #24
60001694:	d4fc      	bmi.n	60001690 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001696:	4a09      	ldr	r2, [pc, #36]	; (600016bc <analog_init+0x4c>)
60001698:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
6000169c:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000169e:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600016a0:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
600016a2:	6c93      	ldr	r3, [r2, #72]	; 0x48
600016a4:	f013 0380 	ands.w	r3, r3, #128	; 0x80
600016a8:	d1fb      	bne.n	600016a2 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
600016aa:	4a05      	ldr	r2, [pc, #20]	; (600016c0 <analog_init+0x50>)
600016ac:	7013      	strb	r3, [r2, #0]
}
600016ae:	f85d 4b04 	ldr.w	r4, [sp], #4
600016b2:	4770      	bx	lr
600016b4:	400fc000 	.word	0x400fc000
600016b8:	400c4000 	.word	0x400c4000
600016bc:	400c8000 	.word	0x400c8000
600016c0:	2001ac79 	.word	0x2001ac79

600016c4 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
600016c4:	4770      	bx	lr
600016c6:	bf00      	nop

600016c8 <startup_default_middle_hook>:
600016c8:	4770      	bx	lr
600016ca:	bf00      	nop

600016cc <startup_default_late_hook>:
600016cc:	4770      	bx	lr
600016ce:	bf00      	nop

600016d0 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
600016d0:	bf00      	nop
600016d2:	4770      	bx	lr

600016d4 <configure_cache>:
{
600016d4:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
600016d6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600016da:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600016dc:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600016de:	4831      	ldr	r0, [pc, #196]	; (600017a4 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
600016e0:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600016e4:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600016e8:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600016ea:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
600016ee:	482e      	ldr	r0, [pc, #184]	; (600017a8 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600016f0:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016f4:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
600016f6:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016fa:	482c      	ldr	r0, [pc, #176]	; (600017ac <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016fc:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001700:	4a2b      	ldr	r2, [pc, #172]	; (600017b0 <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001702:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001706:	4c2b      	ldr	r4, [pc, #172]	; (600017b4 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001708:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000170c:	482a      	ldr	r0, [pc, #168]	; (600017b8 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000170e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001712:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001716:	4c29      	ldr	r4, [pc, #164]	; (600017bc <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001718:	4829      	ldr	r0, [pc, #164]	; (600017c0 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
6000171a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000171e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001722:	4c28      	ldr	r4, [pc, #160]	; (600017c4 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001724:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001728:	4827      	ldr	r0, [pc, #156]	; (600017c8 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000172a:	4a28      	ldr	r2, [pc, #160]	; (600017cc <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000172c:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001730:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001734:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001738:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000173c:	4c24      	ldr	r4, [pc, #144]	; (600017d0 <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000173e:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001740:	4824      	ldr	r0, [pc, #144]	; (600017d4 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001742:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001746:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000174a:	4a23      	ldr	r2, [pc, #140]	; (600017d8 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000174c:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001750:	4c22      	ldr	r4, [pc, #136]	; (600017dc <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001752:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001756:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000175a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
6000175e:	4820      	ldr	r0, [pc, #128]	; (600017e0 <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001760:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001764:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001766:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
6000176a:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
6000176e:	bf00      	nop
	asm("nop");
60001770:	bf00      	nop
	asm("nop");
60001772:	bf00      	nop
	asm("nop");
60001774:	bf00      	nop
	asm("nop");
60001776:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001778:	2201      	movs	r2, #1
6000177a:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
6000177e:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001782:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001786:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
6000178a:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000178e:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001792:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60001796:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000179a:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
6000179e:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
600017a2:	4770      	bx	lr
600017a4:	1000003f 	.word	0x1000003f
600017a8:	07080025 	.word	0x07080025
600017ac:	00100009 	.word	0x00100009
600017b0:	2001acc0 	.word	0x2001acc0
600017b4:	00200013 	.word	0x00200013
600017b8:	07020021 	.word	0x07020021
600017bc:	20000014 	.word	0x20000014
600017c0:	13080025 	.word	0x13080025
600017c4:	10000009 	.word	0x10000009
600017c8:	20200016 	.word	0x20200016
600017cc:	130b0027 	.word	0x130b0027
600017d0:	40000017 	.word	0x40000017
600017d4:	60000018 	.word	0x60000018
600017d8:	070b002f 	.word	0x070b002f
600017dc:	70000019 	.word	0x70000019
600017e0:	8000001a 	.word	0x8000001a

600017e4 <usb_pll_start>:
{
600017e4:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600017e6:	4a15      	ldr	r2, [pc, #84]	; (6000183c <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600017e8:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600017ea:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600017ee:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600017f2:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600017f6:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600017fa:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600017fe:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001800:	f013 0f02 	tst.w	r3, #2
60001804:	d10e      	bne.n	60001824 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001806:	f413 5f00 	tst.w	r3, #8192	; 0x2000
6000180a:	d00f      	beq.n	6000182c <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
6000180c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001810:	d00e      	beq.n	60001830 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001812:	2b00      	cmp	r3, #0
60001814:	daf3      	bge.n	600017fe <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001816:	f413 3f80 	tst.w	r3, #65536	; 0x10000
6000181a:	d10b      	bne.n	60001834 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000181c:	065b      	lsls	r3, r3, #25
6000181e:	d50b      	bpl.n	60001838 <usb_pll_start+0x54>
}
60001820:	bcf0      	pop	{r4, r5, r6, r7}
60001822:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001824:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001826:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001828:	6190      	str	r0, [r2, #24]
			continue;
6000182a:	e7e8      	b.n	600017fe <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000182c:	6155      	str	r5, [r2, #20]
			continue;
6000182e:	e7e6      	b.n	600017fe <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001830:	6156      	str	r6, [r2, #20]
			continue;
60001832:	e7e4      	b.n	600017fe <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001834:	6191      	str	r1, [r2, #24]
			continue;
60001836:	e7e2      	b.n	600017fe <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001838:	6157      	str	r7, [r2, #20]
			continue;
6000183a:	e7e0      	b.n	600017fe <usb_pll_start+0x1a>
6000183c:	400d8000 	.word	0x400d8000

60001840 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001840:	4a3f      	ldr	r2, [pc, #252]	; (60001940 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001842:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001844:	493f      	ldr	r1, [pc, #252]	; (60001944 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001846:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000184a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
6000184e:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001852:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001948 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001856:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000185a:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 6000194c <tempmon_init+0x10c>
{
6000185e:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001860:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001864:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001868:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000186c:	4d38      	ldr	r5, [pc, #224]	; (60001950 <tempmon_init+0x110>)
6000186e:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001870:	4c38      	ldr	r4, [pc, #224]	; (60001954 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001872:	4839      	ldr	r0, [pc, #228]	; (60001958 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001874:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001876:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
6000187a:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000187c:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001880:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001884:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001888:	ee07 1a10 	vmov	s14, r1
6000188c:	4b33      	ldr	r3, [pc, #204]	; (6000195c <tempmon_init+0x11c>)
6000188e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001892:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001894:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001898:	4931      	ldr	r1, [pc, #196]	; (60001960 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000189a:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000189e:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
600018a2:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600018a6:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018aa:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
600018ae:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018b2:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600018b6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018ba:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600018be:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018c2:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600018c6:	4827      	ldr	r0, [pc, #156]	; (60001964 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018c8:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018cc:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018d0:	ee75 5a87 	vadd.f32	s11, s11, s14
600018d4:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018d8:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600018dc:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018e0:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600018e4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018e8:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600018ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600018f0:	ee16 3a10 	vmov	r3, s12
600018f4:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600018fc:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001900:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001902:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001906:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000190a:	f3c3 030b 	ubfx	r3, r3, #0, #12
6000190e:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001912:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001914:	4914      	ldr	r1, [pc, #80]	; (60001968 <tempmon_init+0x128>)
60001916:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
6000191a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
6000191e:	f043 0302 	orr.w	r3, r3, #2
60001922:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001926:	4b11      	ldr	r3, [pc, #68]	; (6000196c <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001928:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
6000192c:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001930:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001934:	2201      	movs	r2, #1
}
60001936:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001938:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
6000193c:	4770      	bx	lr
6000193e:	bf00      	nop
60001940:	400d8100 	.word	0x400d8100
60001944:	401f4400 	.word	0x401f4400
60001948:	42aa0000 	.word	0x42aa0000
6000194c:	42b40000 	.word	0x42b40000
60001950:	2001ac0c 	.word	0x2001ac0c
60001954:	2001ac08 	.word	0x2001ac08
60001958:	2001ac10 	.word	0x2001ac10
6000195c:	2001ac14 	.word	0x2001ac14
60001960:	0fff0000 	.word	0x0fff0000
60001964:	e000e400 	.word	0xe000e400
60001968:	2001a000 	.word	0x2001a000
6000196c:	0000528d 	.word	0x0000528d

60001970 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001970:	4b31      	ldr	r3, [pc, #196]	; (60001a38 <usb_init+0xc8>)
60001972:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001976:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001978:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000197c:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001980:	f000 f89e 	bl	60001ac0 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001984:	4a2d      	ldr	r2, [pc, #180]	; (60001a3c <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001986:	492e      	ldr	r1, [pc, #184]	; (60001a40 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001988:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000198c:	482d      	ldr	r0, [pc, #180]	; (60001a44 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000198e:	f043 0303 	orr.w	r3, r3, #3
60001992:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001996:	4b2c      	ldr	r3, [pc, #176]	; (60001a48 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001998:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000199c:	6802      	ldr	r2, [r0, #0]
6000199e:	421a      	tst	r2, r3
600019a0:	d103      	bne.n	600019aa <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600019a2:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
600019a6:	079a      	lsls	r2, r3, #30
600019a8:	d01b      	beq.n	600019e2 <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600019aa:	4a25      	ldr	r2, [pc, #148]	; (60001a40 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600019ac:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
600019b0:	4b24      	ldr	r3, [pc, #144]	; (60001a44 <usb_init+0xd4>)
600019b2:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600019b4:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600019b8:	f043 0302 	orr.w	r3, r3, #2
600019bc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600019c0:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600019c4:	079b      	lsls	r3, r3, #30
600019c6:	d4fb      	bmi.n	600019c0 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600019c8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
600019cc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600019d0:	4b1c      	ldr	r3, [pc, #112]	; (60001a44 <usb_init+0xd4>)
600019d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
600019d6:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600019da:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600019dc:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
600019de:	f000 f883 	bl	60001ae8 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600019e2:	4a18      	ldr	r2, [pc, #96]	; (60001a44 <usb_init+0xd4>)
600019e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600019e8:	4c15      	ldr	r4, [pc, #84]	; (60001a40 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
600019ea:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600019ec:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600019ee:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600019f0:	4b16      	ldr	r3, [pc, #88]	; (60001a4c <usb_init+0xdc>)
	USBPHY1_PWD = 0;
600019f2:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600019f4:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600019f8:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600019fc:	4618      	mov	r0, r3
600019fe:	f000 f86b 	bl	60001ad8 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001a02:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001a06:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001a08:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001a0c:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001a10:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001a12:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001a16:	641a      	str	r2, [r3, #64]	; 0x40
60001a18:	4b0d      	ldr	r3, [pc, #52]	; (60001a50 <usb_init+0xe0>)
60001a1a:	4a0e      	ldr	r2, [pc, #56]	; (60001a54 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001a1c:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001a20:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001a24:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001a28:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001a2c:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001a2e:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001a32:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001a36:	bd10      	pop	{r4, pc}
60001a38:	400d8000 	.word	0x400d8000
60001a3c:	400fc000 	.word	0x400fc000
60001a40:	402e0000 	.word	0x402e0000
60001a44:	400d9000 	.word	0x400d9000
60001a48:	001e1c00 	.word	0x001e1c00
60001a4c:	20000000 	.word	0x20000000
60001a50:	2001a000 	.word	0x2001a000
60001a54:	00005475 	.word	0x00005475

60001a58 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001a58:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001a5a:	4b0e      	ldr	r3, [pc, #56]	; (60001a94 <_reboot_Teensyduino_+0x3c>)
60001a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001a5e:	079b      	lsls	r3, r3, #30
60001a60:	d400      	bmi.n	60001a64 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001a62:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001a64:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001a66:	4b0c      	ldr	r3, [pc, #48]	; (60001a98 <_reboot_Teensyduino_+0x40>)
60001a68:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001a6a:	4a0c      	ldr	r2, [pc, #48]	; (60001a9c <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001a6c:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001a70:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001a74:	490a      	ldr	r1, [pc, #40]	; (60001aa0 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001a76:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001a7a:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001a7c:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001a7e:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001a82:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001a86:	4807      	ldr	r0, [pc, #28]	; (60001aa4 <_reboot_Teensyduino_+0x4c>)
60001a88:	4a07      	ldr	r2, [pc, #28]	; (60001aa8 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001a8a:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001a8c:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001a8e:	689b      	ldr	r3, [r3, #8]
60001a90:	4798      	blx	r3
	}
	__builtin_unreachable();
60001a92:	bf00      	nop
60001a94:	401f4400 	.word	0x401f4400
60001a98:	402e0000 	.word	0x402e0000
60001a9c:	400ac000 	.word	0x400ac000
60001aa0:	00200003 	.word	0x00200003
60001aa4:	20208000 	.word	0x20208000
60001aa8:	eb120000 	.word	0xeb120000

60001aac <_init>:
60001aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001aae:	bf00      	nop
60001ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001ab2:	bc08      	pop	{r3}
60001ab4:	469e      	mov	lr, r3
60001ab6:	4770      	bx	lr

60001ab8 <__set_arm_clock_veneer>:
60001ab8:	f85f f000 	ldr.w	pc, [pc]	; 60001abc <__set_arm_clock_veneer+0x4>
60001abc:	00006489 	.word	0x00006489

60001ac0 <__usb_init_serialnumber_veneer>:
60001ac0:	f85f f000 	ldr.w	pc, [pc]	; 60001ac4 <__usb_init_serialnumber_veneer+0x4>
60001ac4:	00005be5 	.word	0x00005be5

60001ac8 <__main_veneer>:
60001ac8:	f85f f000 	ldr.w	pc, [pc]	; 60001acc <__main_veneer+0x4>
60001acc:	00004c01 	.word	0x00004c01

60001ad0 <____libc_init_array_veneer>:
60001ad0:	f85f f000 	ldr.w	pc, [pc]	; 60001ad4 <____libc_init_array_veneer+0x4>
60001ad4:	00007621 	.word	0x00007621

60001ad8 <__memset_veneer>:
60001ad8:	f85f f000 	ldr.w	pc, [pc]	; 60001adc <__memset_veneer+0x4>
60001adc:	00007441 	.word	0x00007441

60001ae0 <__pwm_init_veneer>:
60001ae0:	f85f f000 	ldr.w	pc, [pc]	; 60001ae4 <__pwm_init_veneer+0x4>
60001ae4:	00004fad 	.word	0x00004fad

60001ae8 <__delay_veneer>:
60001ae8:	f85f f000 	ldr.w	pc, [pc]	; 60001aec <__delay_veneer+0x4>
60001aec:	000044f5 	.word	0x000044f5

60001af0 <__frame_dummy_init_array_entry>:
60001af0:	00000321 0000285d 00003035 00003b0d     !...](..50...;..
60001b00:	00004371                                qC..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <CVOutput::UpdateDAC(int)>:
  decoded.Port = io % 8;
  
  // output mode (0-7 = normal; 8-15 = Quantized; 16-23 = Note Number)
  decoded.Mode = io >> 3;

  return decoded;
      20:	b538      	push	{r3, r4, r5, lr}
}
      22:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
      26:	4605      	mov	r5, r0
    attachInterruptVector(irq, nullptr);
}

IMX_RT1060_I2CMaster::IMX_RT1060_I2CMaster(IMXRT_LPI2C_Registers* port, IMX_RT1060_I2CBase::Config& config, void (* isr)())
        : port(port), config(config), isr(isr) {
}
      28:	460c      	mov	r4, r1
      2a:	b193      	cbz	r3, 52 <_teensy_model_identifier+0x2e>
      2c:	2900      	cmp	r1, #0
      2e:	f890 30dd 	ldrb.w	r3, [r0, #221]	; 0xdd
      32:	db15      	blt.n	60 <_teensy_model_identifier+0x3c>
      34:	409c      	lsls	r4, r3
      36:	4a24      	ldr	r2, [pc, #144]	; (c8 <_teensy_model_identifier+0xa4>)
 */
void CVOutput::SharedOscil(int value){

  // reset the phase if it isn't currently oscillation mode
  if (!_oscilMode)
    _oscillator->ResetPhase(_target);
      38:	2100      	movs	r1, #0
      3a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
      _multiplyInterval = _tempMultiplyInterval;
      _multiplication = _tempMultiplication;
      _multiplyCount = 0;
    }
  }
  _metro = m;
      3e:	f880 10de 	strb.w	r1, [r0, #222]	; 0xde

uint8_t I2CDriverWire::endTransmission(int stop) {
    master.write_async(write_address, tx_buffer, tx_next_byte_to_write, stop);
    finish();
    return toWireResult(master.error());
}
      42:	bfa8      	it	ge

  else if (channel == DAC_CHANNEL_ALL)
    data |= DAC_BROADCAST_UPDATE | DAC_MASK_DACSEL1 ;

  // Send to chip
  write (data);
      44:	f44f 4400 	movge.w	r4, #32768	; 0x8000
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
      48:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
      4c:	f932 4014 	ldrsh.w	r4, [r2, r4, lsl #1]
      50:	411c      	asrs	r4, r3
      52:	f895 306c 	ldrb.w	r3, [r5, #108]	; 0x6c
	if (x == 0) x = 123459876;
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
      56:	b9fb      	cbnz	r3, 98 <_teensy_model_identifier+0x74>
      58:	6d6b      	ldr	r3, [r5, #84]	; 0x54
      5a:	42a3      	cmp	r3, r4
      5c:	d111      	bne.n	82 <_teensy_model_identifier+0x5e>
      5e:	bd38      	pop	{r3, r4, r5, pc}
      60:	424c      	negs	r4, r1
      62:	4a19      	ldr	r2, [pc, #100]	; (c8 <_teensy_model_identifier+0xa4>)
      64:	2101      	movs	r1, #1
      66:	409c      	lsls	r4, r3
      68:	f880 10de 	strb.w	r1, [r0, #222]	; 0xde
    SetFreq(freq);
  } else {
    _targetUlstep = (int)((freq / SAMPLINGRATE) * FULLPHASE);
    if (_targetUlstep > _ulstep){
      _delta = (_targetUlstep - _ulstep) / _stepsCalculated;
      _sign = true;
      6c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
      70:	bfa8      	it	ge
      72:	f44f 4400 	movge.w	r4, #32768	; 0x8000
      76:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
      7a:	f932 4014 	ldrsh.w	r4, [r2, r4, lsl #1]
}
      7e:	4264      	negs	r4, r4
      80:	e7e6      	b.n	50 <_teensy_model_identifier+0x2c>
      82:	6f2a      	ldr	r2, [r5, #112]	; 0x70
      84:	f105 0058 	add.w	r0, r5, #88	; 0x58
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      88:	7929      	ldrb	r1, [r5, #4]
      8a:	1b12      	subs	r2, r2, r4
      8c:	656c      	str	r4, [r5, #84]	; 0x54
      8e:	b292      	uxth	r2, r2
      90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
      94:	f001 b962 	b.w	135c <DAC::writeChannel(unsigned char, unsigned short)>
      98:	6ea8      	ldr	r0, [r5, #104]	; 0x68
      9a:	f001 fc51 	bl	1940 <Oscillator::Oscillate()>
      9e:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
      a2:	ee07 4a90 	vmov	s15, r4
      a6:	ed9f 6b06 	vldr	d6, [pc, #24]	; c0 <_teensy_model_identifier+0x9c>
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FF8000;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	flash_wait();
      aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
      ae:	ee20 0b06 	vmul.f64	d0, d0, d6
      b2:	ee27 7b00 	vmul.f64	d7, d7, d0
      b6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
      ba:	ee17 4a90 	vmov	r4, s15
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
      be:	e7cb      	b.n	58 <_teensy_model_identifier+0x34>
      c0:	00000000 	.word	0x00000000
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
      c4:	3f000000 	.word	0x3f000000
      c8:	2000038c 	.word	0x2000038c

000000cc <CVOutput::Update()>:
      cc:	f890 3020 	ldrb.w	r3, [r0, #32]
}
      d0:	b510      	push	{r4, lr}
	while (newdiv > 65535 && prescale < 7) {
      d2:	4604      	mov	r4, r0
      d4:	b94b      	cbnz	r3, ea <CVOutput::Update()+0x1e>
      d6:	6a83      	ldr	r3, [r0, #40]	; 0x28
      d8:	2b01      	cmp	r3, #1
      da:	d006      	beq.n	ea <CVOutput::Update()+0x1e>
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
			remainder -= n; 
		}
		count += write(buf, count);
      dc:	f300 8089 	bgt.w	1f2 <CVOutput::Update()+0x126>
	}
	return count;
}
      e0:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
      e4:	2b00      	cmp	r3, #0
      e6:	d17f      	bne.n	1e8 <CVOutput::Update()+0x11c>
      e8:	bd10      	pop	{r4, pc}
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
      ea:	6961      	ldr	r1, [r4, #20]
      ec:	4620      	mov	r0, r4
      ee:	13c9      	asrs	r1, r1, #15
      f0:	61e1      	str	r1, [r4, #28]
      f2:	f7ff ff95 	bl	20 <CVOutput::UpdateDAC(int)>
      f6:	2301      	movs	r3, #1
      f8:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
      fc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
     100:	b35a      	cbz	r2, 15a <CVOutput::Update()+0x8e>
     102:	f894 20b2 	ldrb.w	r2, [r4, #178]	; 0xb2
		number = -number;
     106:	2a00      	cmp	r2, #0
     108:	d15b      	bne.n	1c2 <CVOutput::Update()+0xf6>
		sign = 1;
     10a:	f894 10a8 	ldrb.w	r1, [r4, #168]	; 0xa8
     10e:	2900      	cmp	r1, #0
     110:	d17e      	bne.n	210 <CVOutput::Update()+0x144>
     112:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
	number += rounding;
     116:	f104 0290 	add.w	r2, r4, #144	; 0x90
     11a:	f884 10b0 	strb.w	r1, [r4, #176]	; 0xb0
     11e:	f104 0c24 	add.w	ip, r4, #36	; 0x24
     122:	6be1      	ldr	r1, [r4, #60]	; 0x3c
     124:	6120      	str	r0, [r4, #16]
}
     126:	6161      	str	r1, [r4, #20]
     128:	ca07      	ldmia	r2, {r0, r1, r2}
     12a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
     12e:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
     132:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
     136:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
     13a:	b152      	cbz	r2, 152 <CVOutput::Update()+0x86>
     13c:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
     140:	b13b      	cbz	r3, 152 <CVOutput::Update()+0x86>
     142:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
     146:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
     14a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
     14e:	f002 fc29 	bl	29a4 <TriggerOutput::Pulse()>
     152:	6923      	ldr	r3, [r4, #16]
     154:	13db      	asrs	r3, r3, #15
     156:	61e3      	str	r3, [r4, #28]
     158:	bd10      	pop	{r4, pc}
     15a:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
     15e:	b133      	cbz	r3, 16e <CVOutput::Update()+0xa2>
     160:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
      }
      
    } else {

      // pulse the EOC trigger (if set)
      if (_envelopeMode && _decaying && _triggerEOC) 
     164:	b11b      	cbz	r3, 16e <CVOutput::Update()+0xa2>
     166:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
     16a:	2b00      	cmp	r3, #0
     16c:	d156      	bne.n	21c <CVOutput::Update()+0x150>
        _triggerOutputs[_triggerForEOC]->Pulse();
      
      // set the current to the target and turn off the set boolean
      _current = _target;
      _set = false; 
     16e:	2300      	movs	r3, #0
      _current = _target;
     170:	6961      	ldr	r1, [r4, #20]
      _slew.Steps = 0;  
      _decaying = false;

      // retrigger if looping and loop count has replays left
      if (_envLoop){
     172:	f894 20b3 	ldrb.w	r2, [r4, #179]	; 0xb3
      _current = _target;
     176:	6121      	str	r1, [r4, #16]
      _set = false; 
     178:	f884 3020 	strb.w	r3, [r4, #32]
      _slew.Steps = 0;  
     17c:	62a3      	str	r3, [r4, #40]	; 0x28
      _decaying = false;
     17e:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
      if (_envLoop){
     182:	2a00      	cmp	r2, #0
     184:	d0e5      	beq.n	152 <CVOutput::Update()+0x86>
        if (_infLoop || ++_loopCount < _loopTimes)
     186:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
     18a:	b932      	cbnz	r2, 19a <CVOutput::Update()+0xce>
     18c:	e9d4 132e 	ldrd	r1, r3, [r4, #184]	; 0xb8
     190:	3301      	adds	r3, #1
     192:	428b      	cmp	r3, r1
     194:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
     198:	da3d      	bge.n	216 <CVOutput::Update()+0x14a>
  if (_envelopeMode) {
     19a:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
     19e:	2b00      	cmp	r3, #0
     1a0:	d0d7      	beq.n	152 <CVOutput::Update()+0x86>
      _current = _lOffset;
     1a2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      _slew = _attackSlew;
     1a4:	f104 0284 	add.w	r2, r4, #132	; 0x84
      _target = _envTarget;
     1a8:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
      _slew = _attackSlew;
     1ac:	f104 0324 	add.w	r3, r4, #36	; 0x24
      _current = _lOffset;
     1b0:	6120      	str	r0, [r4, #16]
      _target = _envTarget;
     1b2:	6161      	str	r1, [r4, #20]
      _slew = _attackSlew;
     1b4:	ca07      	ldmia	r2, {r0, r1, r2}
     1b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    _envelopeActive = true;
     1ba:	2301      	movs	r3, #1
     1bc:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
}
     1c0:	e7c7      	b.n	152 <CVOutput::Update()+0x86>
        _current = _lOffset;
     1c2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        _slew = _attackSlew;
     1c4:	f104 0284 	add.w	r2, r4, #132	; 0x84
        _target = _envTarget;
     1c8:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
        _slew = _attackSlew;
     1cc:	f104 0324 	add.w	r3, r4, #36	; 0x24
        _current = _lOffset;
     1d0:	6120      	str	r0, [r4, #16]
        _target = _envTarget;
     1d2:	6161      	str	r1, [r4, #20]
        _slew = _attackSlew;
     1d4:	ca07      	ldmia	r2, {r0, r1, r2}
     1d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        _retrigger = false;
     1da:	2300      	movs	r3, #0
     1dc:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
          _envLoop = false;
      }
      
    }

    _smallCurrent = _current >> 15;
     1e0:	6923      	ldr	r3, [r4, #16]
     1e2:	13db      	asrs	r3, r3, #15
     1e4:	61e3      	str	r3, [r4, #28]
     1e6:	e7b7      	b.n	158 <CVOutput::Update()+0x8c>
    _updateLED = true;
    
  } else if (_oscilMode) { 
    
    // just update the dac
    UpdateDAC(_smallCurrent);
     1e8:	69c1      	ldr	r1, [r0, #28]

  }

}
     1ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UpdateDAC(_smallCurrent);
     1ee:	f7ff bf17 	b.w	20 <CVOutput::UpdateDAC(int)>
    _current += _slew.Delta;
     1f2:	6902      	ldr	r2, [r0, #16]
    _slew.Steps--;
     1f4:	3b01      	subs	r3, #1
    _current += _slew.Delta;
     1f6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    _slew.Steps--;
     1f8:	6283      	str	r3, [r0, #40]	; 0x28
    _current += _slew.Delta;
     1fa:	440a      	add	r2, r1
     1fc:	6102      	str	r2, [r0, #16]
    _smallCurrent = _current >> 15;
     1fe:	6901      	ldr	r1, [r0, #16]
     200:	13c9      	asrs	r1, r1, #15
     202:	61c1      	str	r1, [r0, #28]
    UpdateDAC(_smallCurrent);
     204:	f7ff ff0c 	bl	20 <CVOutput::UpdateDAC(int)>
    _updateLED = true;
     208:	2301      	movs	r3, #1
     20a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
     20e:	bd10      	pop	{r4, pc}
        _updateLED = false;
     210:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
     214:	e79d      	b.n	152 <CVOutput::Update()+0x86>
          _envLoop = false;
     216:	f884 20b3 	strb.w	r2, [r4, #179]	; 0xb3
     21a:	e79a      	b.n	152 <CVOutput::Update()+0x86>
        _triggerOutputs[_triggerForEOC]->Pulse();
     21c:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
     220:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
     224:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
     228:	f002 fbbc 	bl	29a4 <TriggerOutput::Pulse()>
     22c:	e79f      	b.n	16e <CVOutput::Update()+0xa2>

		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
	} else {
		// Half duplex maybe different pin pad config like PU...		
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
     22e:	bf00      	nop

00000230 <TriggerOutput::Update(unsigned long)>:
}

/*
 * Update Function (Call This a Lot)
 */
void FASTRUN TriggerOutput::Update(unsigned long currentTime){
     230:	b538      	push	{r3, r4, r5, lr}
    unsigned long _nextNormal = 0;
    int _multiplyCount = 0;
   */

  // turn off the pulse
  if (currentTime >= _toggle) {
     232:	6903      	ldr	r3, [r0, #16]
void FASTRUN TriggerOutput::Update(unsigned long currentTime){
     234:	4604      	mov	r4, r0
     236:	460d      	mov	r5, r1
  if (currentTime >= _toggle) {
     238:	428b      	cmp	r3, r1
     23a:	d806      	bhi.n	24a <TriggerOutput::Update(unsigned long)+0x1a>
    if (_state == _polarity)
     23c:	7b83      	ldrb	r3, [r0, #14]
     23e:	7b41      	ldrb	r1, [r0, #13]
     240:	4299      	cmp	r1, r3
     242:	d028      	beq.n	296 <TriggerOutput::Update(unsigned long)+0x66>
      SetState(!_polarity);
    _toggle = MAXTIME;
     244:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     248:	6123      	str	r3, [r4, #16]
  }

  // evaluate pinging the metro event
  if (_metro && currentTime >= _nextEvent){
     24a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
     24e:	b1a3      	cbz	r3, 27a <TriggerOutput::Update(unsigned long)+0x4a>
     250:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     252:	42ab      	cmp	r3, r5
     254:	d811      	bhi.n	27a <TriggerOutput::Update(unsigned long)+0x4a>

    if (_multiply){
     256:	7ea2      	ldrb	r2, [r4, #26]
     258:	b182      	cbz	r2, 27c <TriggerOutput::Update(unsigned long)+0x4c>

      if (_multiplyCount == 0){
     25a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     25c:	2a00      	cmp	r2, #0
     25e:	d033      	beq.n	2c8 <TriggerOutput::Update(unsigned long)+0x98>
          // we have beat for the expected count - disable the metro
          _metro = false;
        }
      }
      
      if (++_multiplyCount < _multiplication) {
     260:	3201      	adds	r2, #1
     262:	8ba1      	ldrh	r1, [r4, #28]
     264:	4291      	cmp	r1, r2
     266:	62e2      	str	r2, [r4, #44]	; 0x2c
     268:	dd29      	ble.n	2be <TriggerOutput::Update(unsigned long)+0x8e>
        // set the next event to the multiply interval
        _nextEvent = _nextEvent + _multiplyInterval;
     26a:	6a22      	ldr	r2, [r4, #32]
     26c:	441a      	add	r2, r3
     26e:	63a2      	str	r2, [r4, #56]	; 0x38
      } else
        _metro = false;
      
    }
      
    Pulse();
     270:	4620      	mov	r0, r4
  }
  
}
     272:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Pulse();
     276:	f002 bb95 	b.w	29a4 <TriggerOutput::Pulse()>
}
     27a:	bd38      	pop	{r3, r4, r5, pc}
      if (_metroCount == 0 || (_metroCount > 0 && --_actualCount > 0)){
     27c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     27e:	2b00      	cmp	r3, #0
     280:	d017      	beq.n	2b2 <TriggerOutput::Update(unsigned long)+0x82>
     282:	dd04      	ble.n	28e <TriggerOutput::Update(unsigned long)+0x5e>
     284:	6c23      	ldr	r3, [r4, #64]	; 0x40
     286:	3b01      	subs	r3, #1
     288:	2b00      	cmp	r3, #0
     28a:	6423      	str	r3, [r4, #64]	; 0x40
     28c:	dc11      	bgt.n	2b2 <TriggerOutput::Update(unsigned long)+0x82>
        _metro = false;
     28e:	2300      	movs	r3, #0
     290:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
     294:	e7ec      	b.n	270 <TriggerOutput::Update(unsigned long)+0x40>
      SetState(!_polarity);
     296:	f081 0101 	eor.w	r1, r1, #1
  digitalWrite(_output, _state ? HIGH : LOW);
     29a:	7900      	ldrb	r0, [r0, #4]
  _state = state;
     29c:	7361      	strb	r1, [r4, #13]
  digitalWrite(_output, _state ? HIGH : LOW);
     29e:	f004 f9a5 	bl	45ec <digitalWrite>
  digitalWrite(_led, _state ? HIGH : LOW);
     2a2:	7b61      	ldrb	r1, [r4, #13]
     2a4:	7a20      	ldrb	r0, [r4, #8]
     2a6:	f004 f9a1 	bl	45ec <digitalWrite>
    _toggle = MAXTIME;
     2aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     2ae:	6123      	str	r3, [r4, #16]
     2b0:	e7cb      	b.n	24a <TriggerOutput::Update(unsigned long)+0x1a>
        _nextEvent = _nextNormal + _metroInterval;
     2b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     2b4:	6b62      	ldr	r2, [r4, #52]	; 0x34
     2b6:	4413      	add	r3, r2
     2b8:	63a3      	str	r3, [r4, #56]	; 0x38
        _nextNormal = _nextEvent;
     2ba:	62a3      	str	r3, [r4, #40]	; 0x28
     2bc:	e7d8      	b.n	270 <TriggerOutput::Update(unsigned long)+0x40>
        _nextEvent = _nextNormal;
     2be:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        _multiplyCount = 0;
     2c0:	2300      	movs	r3, #0
        _nextEvent = _nextNormal;
     2c2:	63a2      	str	r2, [r4, #56]	; 0x38
        _multiplyCount = 0;
     2c4:	62e3      	str	r3, [r4, #44]	; 0x2c
     2c6:	e7d3      	b.n	270 <TriggerOutput::Update(unsigned long)+0x40>
        if (_metroCount == 0 || (_metroCount > 0 && --_actualCount > 0)){
     2c8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     2ca:	2a00      	cmp	r2, #0
     2cc:	d00b      	beq.n	2e6 <TriggerOutput::Update(unsigned long)+0xb6>
     2ce:	dd04      	ble.n	2da <TriggerOutput::Update(unsigned long)+0xaa>
     2d0:	6c22      	ldr	r2, [r4, #64]	; 0x40
     2d2:	3a01      	subs	r2, #1
     2d4:	2a00      	cmp	r2, #0
     2d6:	6422      	str	r2, [r4, #64]	; 0x40
     2d8:	dc05      	bgt.n	2e6 <TriggerOutput::Update(unsigned long)+0xb6>
          _metro = false;
     2da:	2000      	movs	r0, #0
      if (++_multiplyCount < _multiplication) {
     2dc:	8ba1      	ldrh	r1, [r4, #28]
     2de:	2201      	movs	r2, #1
          _metro = false;
     2e0:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
     2e4:	e7be      	b.n	264 <TriggerOutput::Update(unsigned long)+0x34>
          _nextNormal = _nextNormal + _metroInterval;
     2e6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          _multiplyInterval = _tempMultiplyInterval;
     2e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
          _nextNormal = _nextNormal + _metroInterval;
     2ea:	6b60      	ldr	r0, [r4, #52]	; 0x34
          _multiplyInterval = _tempMultiplyInterval;
     2ec:	6221      	str	r1, [r4, #32]
          _nextNormal = _nextNormal + _metroInterval;
     2ee:	4410      	add	r0, r2
          _multiplication = _tempMultiplication;
     2f0:	8be1      	ldrh	r1, [r4, #30]
     2f2:	2201      	movs	r2, #1
          _nextNormal = _nextNormal + _metroInterval;
     2f4:	62a0      	str	r0, [r4, #40]	; 0x28
          _multiplication = _tempMultiplication;
     2f6:	83a1      	strh	r1, [r4, #28]
          _multiplyCount = 0;
     2f8:	e7b4      	b.n	264 <TriggerOutput::Update(unsigned long)+0x34>
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
     2fa:	bf00      	nop

000002fc <register_tm_clones>:
     2fc:	4805      	ldr	r0, [pc, #20]	; (314 <register_tm_clones+0x18>)
     2fe:	4b06      	ldr	r3, [pc, #24]	; (318 <register_tm_clones+0x1c>)
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
     300:	1a1b      	subs	r3, r3, r0
			while (awidth) {
     302:	0fd9      	lsrs	r1, r3, #31
				*buf++ = ' ';
     304:	eb01 01a3 	add.w	r1, r1, r3, asr #2
     308:	1049      	asrs	r1, r1, #1
     30a:	d002      	beq.n	312 <register_tm_clones+0x16>
     30c:	4b03      	ldr	r3, [pc, #12]	; (31c <register_tm_clones+0x20>)
		if (copysignf(1.0f, val)<0) *buf++ = '-';
     30e:	b103      	cbz	r3, 312 <register_tm_clones+0x16>
     310:	4718      	bx	r3
     312:	4770      	bx	lr
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     314:	2001a2c0 	.word	0x2001a2c0
		if (copysignf(1.0f, val)<0) *buf++ = '-';
     318:	2001a2c0 	.word	0x2001a2c0
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     31c:	00000000 	.word	0x00000000

00000320 <frame_dummy>:
     320:	b508      	push	{r3, lr}
     322:	4b05      	ldr	r3, [pc, #20]	; (338 <frame_dummy+0x18>)
		while (awidth) {
     324:	b11b      	cbz	r3, 32e <frame_dummy+0xe>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
     326:	4905      	ldr	r1, [pc, #20]	; (33c <frame_dummy+0x1c>)
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     328:	4805      	ldr	r0, [pc, #20]	; (340 <frame_dummy+0x20>)
     32a:	f3af 8000 	nop.w
		if (copysignf(1.0f, val)<0) *buf++ = '-';
     32e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     332:	f7ff bfe3 	b.w	2fc <register_tm_clones>
		if (val<0) *buf++ = '-';
     336:	bf00      	nop
     338:	00000000 	.word	0x00000000
     33c:	2001abb4 	.word	0x2001abb4
     340:	600cc400 	.word	0x600cc400

00000344 <CVOutput::Kill()>:
  _set = true;
     344:	2301      	movs	r3, #1
     346:	f880 3020 	strb.w	r3, [r0, #32]
}
     34a:	4770      	bx	lr

0000034c <CVOutput::ReferenceTriggers(TriggerOutput**, int)>:
  _triggerOutputCount = count;
     34c:	e9c0 1231 	strd	r1, r2, [r0, #196]	; 0xc4
}
     350:	4770      	bx	lr
     352:	bf00      	nop

00000354 <CVOutput::SetSlew(int, short)>:
void CVOutput::SetSlew(int value, short format){
     354:	460b      	mov	r3, r1
  _slewTime = TxHelper::ConvertMs(value, format);
     356:	4611      	mov	r1, r2
void CVOutput::SetSlew(int value, short format){
     358:	b510      	push	{r4, lr}
     35a:	4604      	mov	r4, r0
  _slewTime = TxHelper::ConvertMs(value, format);
     35c:	4618      	mov	r0, r3
     35e:	f002 fc8b 	bl	2c78 <TxHelper::ConvertMs(unsigned long, short)>

/*
 * Calculate the Slew Value (for increments)
 */
void CVOutput::CalculateSlewValue(){
  _slew = CalculateRawSlew(_slewTime, _target, _current);
     362:	6963      	ldr	r3, [r4, #20]
     364:	6921      	ldr	r1, [r4, #16]
  _slewTime = TxHelper::ConvertMs(value, format);
     366:	6320      	str	r0, [r4, #48]	; 0x30
 */
SlewSteps CVOutput::CalculateRawSlew(long value, long target, long current){
  SlewSteps ret;
  ret.Duration = value;
  // split here so we don't divide by zero
  if (value == 0 || target == current){
     368:	b178      	cbz	r0, 38a <CVOutput::SetSlew(int, short)+0x36>
     36a:	428b      	cmp	r3, r1
     36c:	d00d      	beq.n	38a <CVOutput::SetSlew(int, short)+0x36>
    // if slew is zero - we just set the slew increment to the value we want to traverse
    ret.Steps = 1;
    ret.Delta = target - current;
  } else {
    // caculate the slew increment value
    ret.Steps = value * KRATE;
     36e:	2232      	movs	r2, #50	; 0x32
    ret.Delta = (target - current) / ret.Steps;
     370:	1a5b      	subs	r3, r3, r1
    ret.Steps = value * KRATE;
     372:	fb00 f202 	mul.w	r2, r0, r2
    ret.Delta = (target - current) / ret.Steps;
     376:	fb93 f3f2 	sdiv	r3, r3, r2
    // increment one to have the last step be the signalling step
    ret.Steps += 1;
     37a:	3201      	adds	r2, #1
  _set = false;
     37c:	2100      	movs	r1, #0
  _slew = CalculateRawSlew(_slewTime, _target, _current);
     37e:	62e3      	str	r3, [r4, #44]	; 0x2c
     380:	e9c4 0209 	strd	r0, r2, [r4, #36]	; 0x24
  _set = false;
     384:	f884 1020 	strb.w	r1, [r4, #32]
}
     388:	bd10      	pop	{r4, pc}
    ret.Delta = target - current;
     38a:	1a5b      	subs	r3, r3, r1
    ret.Steps = 1;
     38c:	2201      	movs	r2, #1
     38e:	e7f5      	b.n	37c <CVOutput::SetSlew(int, short)+0x28>

00000390 <CVOutput::Calibrate()>:
  _calibration = _offset + _calibration;
     390:	6b83      	ldr	r3, [r0, #56]	; 0x38
  _offset = 0;
     392:	2100      	movs	r1, #0
  _calibration = _offset + _calibration;
     394:	6c02      	ldr	r2, [r0, #64]	; 0x40
  _offset = 0;
     396:	6381      	str	r1, [r0, #56]	; 0x38
  _calibration = _offset + _calibration;
     398:	4413      	add	r3, r2
     39a:	6403      	str	r3, [r0, #64]	; 0x40
}
     39c:	4618      	mov	r0, r3
     39e:	4770      	bx	lr

000003a0 <CVOutput::SetLog(int)>:
  _doLog = value > 0;
     3a0:	2900      	cmp	r1, #0
  _logRange = value - 1;
     3a2:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
  _doLog = value > 0;
     3a6:	bfd4      	ite	le
     3a8:	2100      	movle	r1, #0
     3aa:	2101      	movgt	r1, #1
  _logRange = value - 1;
     3ac:	f880 30dd 	strb.w	r3, [r0, #221]	; 0xdd
  _doLog = value > 0;
     3b0:	f880 10dc 	strb.w	r1, [r0, #220]	; 0xdc
}
     3b4:	4770      	bx	lr
     3b6:	bf00      	nop

000003b8 <CVOutput::SetQuantizationScale(int)>:
    _quantizer->SetScale(scale);
     3b8:	6e00      	ldr	r0, [r0, #96]	; 0x60
     3ba:	f001 bc3b 	b.w	1c34 <Quantizer::SetScale(int)>
     3be:	bf00      	nop

000003c0 <CVOutput::SetCenter(int)>:
  if (_oscilMode)
     3c0:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
  _oscilCenter = value;
     3c4:	6741      	str	r1, [r0, #116]	; 0x74
  if (_oscilMode)
     3c6:	b11b      	cbz	r3, 3d0 <CVOutput::SetCenter(int)+0x10>
     _dacCenter = DACCENTER - _oscilCenter;
     3c8:	f647 73ff 	movw	r3, #32767	; 0x7fff
     3cc:	1a5b      	subs	r3, r3, r1
     3ce:	6703      	str	r3, [r0, #112]	; 0x70
}
     3d0:	4770      	bx	lr
     3d2:	bf00      	nop

000003d4 <CVOutput::SetFrequency(int)>:
void CVOutput::SetFrequency(int freq){
     3d4:	b538      	push	{r3, r4, r5, lr}
  if (!_oscilMode)
     3d6:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
void CVOutput::SetFrequency(int freq){
     3da:	4604      	mov	r4, r0
     3dc:	460d      	mov	r5, r1
  if (!_oscilMode)
     3de:	b1c3      	cbz	r3, 412 <CVOutput::SetFrequency(int)+0x3e>
  _oscilMode = value > 0;
     3e0:	2d00      	cmp	r5, #0
     3e2:	bfcc      	ite	gt
     3e4:	2301      	movgt	r3, #1
     3e6:	2300      	movle	r3, #0
     3e8:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
  if (_oscilMode) {
     3ec:	dd0a      	ble.n	404 <CVOutput::SetFrequency(int)+0x30>
     _dacCenter = DACCENTER - _oscilCenter;
     3ee:	6f62      	ldr	r2, [r4, #116]	; 0x74
     3f0:	f647 73ff 	movw	r3, #32767	; 0x7fff
    _oscillator->SetFrequency(freq);
     3f4:	4629      	mov	r1, r5
     3f6:	6ea0      	ldr	r0, [r4, #104]	; 0x68
     _dacCenter = DACCENTER - _oscilCenter;
     3f8:	1a9b      	subs	r3, r3, r2
     3fa:	6723      	str	r3, [r4, #112]	; 0x70
}
     3fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _oscillator->SetFrequency(freq);
     400:	f001 b802 	b.w	1408 <Oscillator::SetFrequency(int)>
    _set = true;
     404:	2201      	movs	r2, #1
    _dacCenter = DACCENTER;
     406:	f647 73ff 	movw	r3, #32767	; 0x7fff
    _set = true;
     40a:	f884 2020 	strb.w	r2, [r4, #32]
    _dacCenter = DACCENTER;
     40e:	6723      	str	r3, [r4, #112]	; 0x70
}
     410:	bd38      	pop	{r3, r4, r5, pc}
    _oscillator->ResetPhase(_target);
     412:	6941      	ldr	r1, [r0, #20]
     414:	6e80      	ldr	r0, [r0, #104]	; 0x68
     416:	f001 f9fd 	bl	1814 <Oscillator::ResetPhase(long)>
     41a:	e7e1      	b.n	3e0 <CVOutput::SetFrequency(int)+0xc>

0000041c <CVOutput::TargetFrequency(int)>:
void CVOutput::TargetFrequency(int freq){
     41c:	b538      	push	{r3, r4, r5, lr}
  if (!_oscilMode)
     41e:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
void CVOutput::TargetFrequency(int freq){
     422:	4604      	mov	r4, r0
     424:	460d      	mov	r5, r1
  if (!_oscilMode)
     426:	b1c3      	cbz	r3, 45a <CVOutput::TargetFrequency(int)+0x3e>
  _oscilMode = value > 0;
     428:	2d00      	cmp	r5, #0
     42a:	bfcc      	ite	gt
     42c:	2301      	movgt	r3, #1
     42e:	2300      	movle	r3, #0
     430:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
  if (_oscilMode) {
     434:	dd0a      	ble.n	44c <CVOutput::TargetFrequency(int)+0x30>
     _dacCenter = DACCENTER - _oscilCenter;
     436:	6f62      	ldr	r2, [r4, #116]	; 0x74
     438:	f647 73ff 	movw	r3, #32767	; 0x7fff
    _oscillator->TargetFrequency(freq);
     43c:	4629      	mov	r1, r5
     43e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
     _dacCenter = DACCENTER - _oscilCenter;
     440:	1a9b      	subs	r3, r3, r2
     442:	6723      	str	r3, [r4, #112]	; 0x70
}
     444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _oscillator->TargetFrequency(freq);
     448:	f001 b806 	b.w	1458 <Oscillator::TargetFrequency(int)>
    _set = true;
     44c:	2201      	movs	r2, #1
    _dacCenter = DACCENTER;
     44e:	f647 73ff 	movw	r3, #32767	; 0x7fff
    _set = true;
     452:	f884 2020 	strb.w	r2, [r4, #32]
    _dacCenter = DACCENTER;
     456:	6723      	str	r3, [r4, #112]	; 0x70
}
     458:	bd38      	pop	{r3, r4, r5, pc}
    _oscillator->ResetPhase(_target);
     45a:	6941      	ldr	r1, [r0, #20]
     45c:	6e80      	ldr	r0, [r0, #104]	; 0x68
     45e:	f001 f9d9 	bl	1814 <Oscillator::ResetPhase(long)>
     462:	e7e1      	b.n	428 <CVOutput::TargetFrequency(int)+0xc>

00000464 <CVOutput::SetQuantizedVOct(int)>:
  if (!_oscilMode)
     464:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
void CVOutput::SetQuantizedVOct(int value){
     468:	b570      	push	{r4, r5, r6, lr}
     46a:	4604      	mov	r4, r0
     46c:	b084      	sub	sp, #16
     46e:	460d      	mov	r5, r1
  if (!_oscilMode)
     470:	b30b      	cbz	r3, 4b6 <CVOutput::SetQuantizedVOct(int)+0x52>
  _oscilMode = value > 0;
     472:	2d00      	cmp	r5, #0
     474:	bfcc      	ite	gt
     476:	2301      	movgt	r3, #1
     478:	2300      	movle	r3, #0
     47a:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
  if (_oscilMode) {
     47e:	dd12      	ble.n	4a6 <CVOutput::SetQuantizedVOct(int)+0x42>
     _dacCenter = DACCENTER - _oscilCenter;
     480:	6f61      	ldr	r1, [r4, #116]	; 0x74
     482:	f647 73ff 	movw	r3, #32767	; 0x7fff
    _oscillator->SetFloatFrequency(_quantizer->Quantize(value).Frequency);
     486:	6ea6      	ldr	r6, [r4, #104]	; 0x68
     488:	a801      	add	r0, sp, #4
     _dacCenter = DACCENTER - _oscilCenter;
     48a:	1a5b      	subs	r3, r3, r1
    _oscillator->SetFloatFrequency(_quantizer->Quantize(value).Frequency);
     48c:	462a      	mov	r2, r5
     48e:	6e21      	ldr	r1, [r4, #96]	; 0x60
     _dacCenter = DACCENTER - _oscilCenter;
     490:	6723      	str	r3, [r4, #112]	; 0x70
    _oscillator->SetFloatFrequency(_quantizer->Quantize(value).Frequency);
     492:	f001 fbd5 	bl	1c40 <Quantizer::Quantize(int)>
     496:	ed9d 0a03 	vldr	s0, [sp, #12]
     49a:	4630      	mov	r0, r6
}
     49c:	b004      	add	sp, #16
     49e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _oscillator->SetFloatFrequency(_quantizer->Quantize(value).Frequency);
     4a2:	f001 b825 	b.w	14f0 <Oscillator::SetFloatFrequency(float)>
    _set = true;
     4a6:	2201      	movs	r2, #1
    _dacCenter = DACCENTER;
     4a8:	f647 73ff 	movw	r3, #32767	; 0x7fff
    _set = true;
     4ac:	f884 2020 	strb.w	r2, [r4, #32]
    _dacCenter = DACCENTER;
     4b0:	6723      	str	r3, [r4, #112]	; 0x70
}
     4b2:	b004      	add	sp, #16
     4b4:	bd70      	pop	{r4, r5, r6, pc}
    _oscillator->ResetPhase(_target);
     4b6:	6941      	ldr	r1, [r0, #20]
     4b8:	6e80      	ldr	r0, [r0, #104]	; 0x68
     4ba:	f001 f9ab 	bl	1814 <Oscillator::ResetPhase(long)>
     4be:	e7d8      	b.n	472 <CVOutput::SetQuantizedVOct(int)+0xe>

000004c0 <CVOutput::TargetQuantizedVOct(int)>:
  if (!_oscilMode)
     4c0:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
void CVOutput::TargetQuantizedVOct(int value){
     4c4:	b570      	push	{r4, r5, r6, lr}
     4c6:	4604      	mov	r4, r0
     4c8:	b084      	sub	sp, #16
     4ca:	460d      	mov	r5, r1
  if (!_oscilMode)
     4cc:	b30b      	cbz	r3, 512 <CVOutput::TargetQuantizedVOct(int)+0x52>
  _oscilMode = value > 0;
     4ce:	2d00      	cmp	r5, #0
     4d0:	bfcc      	ite	gt
     4d2:	2301      	movgt	r3, #1
     4d4:	2300      	movle	r3, #0
     4d6:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
  if (_oscilMode) {
     4da:	dd12      	ble.n	502 <CVOutput::TargetQuantizedVOct(int)+0x42>
     _dacCenter = DACCENTER - _oscilCenter;
     4dc:	6f61      	ldr	r1, [r4, #116]	; 0x74
     4de:	f647 73ff 	movw	r3, #32767	; 0x7fff
    _oscillator->TargetFloatFrequency(_quantizer->Quantize(value).Frequency);
     4e2:	6ea6      	ldr	r6, [r4, #104]	; 0x68
     4e4:	a801      	add	r0, sp, #4
     _dacCenter = DACCENTER - _oscilCenter;
     4e6:	1a5b      	subs	r3, r3, r1
    _oscillator->TargetFloatFrequency(_quantizer->Quantize(value).Frequency);
     4e8:	462a      	mov	r2, r5
     4ea:	6e21      	ldr	r1, [r4, #96]	; 0x60
     _dacCenter = DACCENTER - _oscilCenter;
     4ec:	6723      	str	r3, [r4, #112]	; 0x70
    _oscillator->TargetFloatFrequency(_quantizer->Quantize(value).Frequency);
     4ee:	f001 fba7 	bl	1c40 <Quantizer::Quantize(int)>
     4f2:	ed9d 0a03 	vldr	s0, [sp, #12]
     4f6:	4630      	mov	r0, r6
}
     4f8:	b004      	add	sp, #16
     4fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _oscillator->TargetFloatFrequency(_quantizer->Quantize(value).Frequency);
     4fe:	f001 b82f 	b.w	1560 <Oscillator::TargetFloatFrequency(float)>
    _set = true;
     502:	2201      	movs	r2, #1
    _dacCenter = DACCENTER;
     504:	f647 73ff 	movw	r3, #32767	; 0x7fff
    _set = true;
     508:	f884 2020 	strb.w	r2, [r4, #32]
    _dacCenter = DACCENTER;
     50c:	6723      	str	r3, [r4, #112]	; 0x70
}
     50e:	b004      	add	sp, #16
     510:	bd70      	pop	{r4, r5, r6, pc}
    _oscillator->ResetPhase(_target);
     512:	6941      	ldr	r1, [r0, #20]
     514:	6e80      	ldr	r0, [r0, #104]	; 0x68
     516:	f001 f97d 	bl	1814 <Oscillator::ResetPhase(long)>
     51a:	e7d8      	b.n	4ce <CVOutput::TargetQuantizedVOct(int)+0xe>

0000051c <CVOutput::SetFrequencySlew(int, short)>:
void CVOutput::SetFrequencySlew(int slew, short format){
     51c:	b510      	push	{r4, lr}
  _oscillator->SetPortamentoMs(TxHelper::ConvertMs(slew, format));
     51e:	6e84      	ldr	r4, [r0, #104]	; 0x68
     520:	4608      	mov	r0, r1
     522:	4611      	mov	r1, r2
     524:	f002 fba8 	bl	2c78 <TxHelper::ConvertMs(unsigned long, short)>
     528:	4601      	mov	r1, r0
     52a:	4620      	mov	r0, r4
}
     52c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  _oscillator->SetPortamentoMs(TxHelper::ConvertMs(slew, format));
     530:	f001 b98e 	b.w	1850 <Oscillator::SetPortamentoMs(unsigned long)>

00000534 <CVOutput::SetVOct(int)>:
  if (!_oscilMode)
     534:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
void CVOutput::SetVOct(int value){
     538:	b570      	push	{r4, r5, r6, lr}
     53a:	4604      	mov	r4, r0
     53c:	460d      	mov	r5, r1
  if (!_oscilMode)
     53e:	b1db      	cbz	r3, 578 <CVOutput::SetVOct(int)+0x44>
  _oscilMode = value > 0;
     540:	2d00      	cmp	r5, #0
     542:	bfcc      	ite	gt
     544:	2301      	movgt	r3, #1
     546:	2300      	movle	r3, #0
     548:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
  if (_oscilMode) {
     54c:	dd0d      	ble.n	56a <CVOutput::SetVOct(int)+0x36>
     _dacCenter = DACCENTER - _oscilCenter;
     54e:	6f62      	ldr	r2, [r4, #116]	; 0x74
     550:	f647 73ff 	movw	r3, #32767	; 0x7fff
    _oscillator->SetFloatFrequency(TxHelper::VOct2Frequency(value));
     554:	6ea6      	ldr	r6, [r4, #104]	; 0x68
     556:	4628      	mov	r0, r5
     _dacCenter = DACCENTER - _oscilCenter;
     558:	1a9b      	subs	r3, r3, r2
     55a:	6723      	str	r3, [r4, #112]	; 0x70
    _oscillator->SetFloatFrequency(TxHelper::VOct2Frequency(value));
     55c:	f002 fb24 	bl	2ba8 <TxHelper::VOct2Frequency(int)>
     560:	4630      	mov	r0, r6
}
     562:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _oscillator->SetFloatFrequency(TxHelper::VOct2Frequency(value));
     566:	f000 bfc3 	b.w	14f0 <Oscillator::SetFloatFrequency(float)>
    _set = true;
     56a:	2201      	movs	r2, #1
    _dacCenter = DACCENTER;
     56c:	f647 73ff 	movw	r3, #32767	; 0x7fff
    _set = true;
     570:	f884 2020 	strb.w	r2, [r4, #32]
    _dacCenter = DACCENTER;
     574:	6723      	str	r3, [r4, #112]	; 0x70
}
     576:	bd70      	pop	{r4, r5, r6, pc}
    _oscillator->ResetPhase(_target);
     578:	6941      	ldr	r1, [r0, #20]
     57a:	6e80      	ldr	r0, [r0, #104]	; 0x68
     57c:	f001 f94a 	bl	1814 <Oscillator::ResetPhase(long)>
     580:	e7de      	b.n	540 <CVOutput::SetVOct(int)+0xc>
     582:	bf00      	nop

00000584 <CVOutput::TargetVOct(int)>:
  if (!_oscilMode)
     584:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
void CVOutput::TargetVOct(int value){
     588:	b570      	push	{r4, r5, r6, lr}
     58a:	4604      	mov	r4, r0
     58c:	460d      	mov	r5, r1
  if (!_oscilMode)
     58e:	b1db      	cbz	r3, 5c8 <CVOutput::TargetVOct(int)+0x44>
  _oscilMode = value > 0;
     590:	2d00      	cmp	r5, #0
     592:	bfcc      	ite	gt
     594:	2301      	movgt	r3, #1
     596:	2300      	movle	r3, #0
     598:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
  if (_oscilMode) {
     59c:	dd0d      	ble.n	5ba <CVOutput::TargetVOct(int)+0x36>
     _dacCenter = DACCENTER - _oscilCenter;
     59e:	6f62      	ldr	r2, [r4, #116]	; 0x74
     5a0:	f647 73ff 	movw	r3, #32767	; 0x7fff
    _oscillator->TargetFloatFrequency(TxHelper::VOct2Frequency(value));
     5a4:	6ea6      	ldr	r6, [r4, #104]	; 0x68
     5a6:	4628      	mov	r0, r5
     _dacCenter = DACCENTER - _oscilCenter;
     5a8:	1a9b      	subs	r3, r3, r2
     5aa:	6723      	str	r3, [r4, #112]	; 0x70
    _oscillator->TargetFloatFrequency(TxHelper::VOct2Frequency(value));
     5ac:	f002 fafc 	bl	2ba8 <TxHelper::VOct2Frequency(int)>
     5b0:	4630      	mov	r0, r6
}
     5b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _oscillator->TargetFloatFrequency(TxHelper::VOct2Frequency(value));
     5b6:	f000 bfd3 	b.w	1560 <Oscillator::TargetFloatFrequency(float)>
    _set = true;
     5ba:	2201      	movs	r2, #1
    _dacCenter = DACCENTER;
     5bc:	f647 73ff 	movw	r3, #32767	; 0x7fff
    _set = true;
     5c0:	f884 2020 	strb.w	r2, [r4, #32]
    _dacCenter = DACCENTER;
     5c4:	6723      	str	r3, [r4, #112]	; 0x70
}
     5c6:	bd70      	pop	{r4, r5, r6, pc}
    _oscillator->ResetPhase(_target);
     5c8:	6941      	ldr	r1, [r0, #20]
     5ca:	6e80      	ldr	r0, [r0, #104]	; 0x68
     5cc:	f001 f922 	bl	1814 <Oscillator::ResetPhase(long)>
     5d0:	e7de      	b.n	590 <CVOutput::TargetVOct(int)+0xc>
     5d2:	bf00      	nop

000005d4 <CVOutput::SetOscNote(int)>:
void CVOutput::SetOscNote(int note){
     5d4:	b538      	push	{r3, r4, r5, lr}
  if (!_oscilMode)
     5d6:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
void CVOutput::SetOscNote(int note){
     5da:	4604      	mov	r4, r0
     5dc:	460d      	mov	r5, r1
  if (!_oscilMode)
     5de:	b18b      	cbz	r3, 604 <CVOutput::SetOscNote(int)+0x30>
     _dacCenter = DACCENTER - _oscilCenter;
     5e0:	6f60      	ldr	r0, [r4, #116]	; 0x74
     5e2:	f647 73ff 	movw	r3, #32767	; 0x7fff
  _oscilMode = value > 0;
     5e6:	2201      	movs	r2, #1
  _oscillator->SetFloatFrequency((_oscQuantizer->GetFrequencyForNote(note)));
     5e8:	4629      	mov	r1, r5
     _dacCenter = DACCENTER - _oscilCenter;
     5ea:	1a1b      	subs	r3, r3, r0
  _oscillator->SetFloatFrequency((_oscQuantizer->GetFrequencyForNote(note)));
     5ec:	6ea5      	ldr	r5, [r4, #104]	; 0x68
     5ee:	6e60      	ldr	r0, [r4, #100]	; 0x64
  _oscilMode = value > 0;
     5f0:	f884 206c 	strb.w	r2, [r4, #108]	; 0x6c
     _dacCenter = DACCENTER - _oscilCenter;
     5f4:	6723      	str	r3, [r4, #112]	; 0x70
  _oscillator->SetFloatFrequency((_oscQuantizer->GetFrequencyForNote(note)));
     5f6:	f001 fc11 	bl	1e1c <Quantizer::GetFrequencyForNote(int)>
     5fa:	4628      	mov	r0, r5
}
     5fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  _oscillator->SetFloatFrequency((_oscQuantizer->GetFrequencyForNote(note)));
     600:	f000 bf76 	b.w	14f0 <Oscillator::SetFloatFrequency(float)>
    _oscillator->ResetPhase(_target);
     604:	6941      	ldr	r1, [r0, #20]
     606:	6e80      	ldr	r0, [r0, #104]	; 0x68
     608:	f001 f904 	bl	1814 <Oscillator::ResetPhase(long)>
     60c:	e7e8      	b.n	5e0 <CVOutput::SetOscNote(int)+0xc>
     60e:	bf00      	nop

00000610 <CVOutput::TargetOscNote(int)>:
void CVOutput::TargetOscNote(int note){
     610:	b538      	push	{r3, r4, r5, lr}
  if (!_oscilMode)
     612:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
void CVOutput::TargetOscNote(int note){
     616:	4604      	mov	r4, r0
     618:	460d      	mov	r5, r1
  if (!_oscilMode)
     61a:	b18b      	cbz	r3, 640 <CVOutput::TargetOscNote(int)+0x30>
     _dacCenter = DACCENTER - _oscilCenter;
     61c:	6f60      	ldr	r0, [r4, #116]	; 0x74
     61e:	f647 73ff 	movw	r3, #32767	; 0x7fff
  _oscilMode = value > 0;
     622:	2201      	movs	r2, #1
  _oscillator->TargetFloatFrequency((_oscQuantizer->GetFrequencyForNote(note)));
     624:	4629      	mov	r1, r5
     _dacCenter = DACCENTER - _oscilCenter;
     626:	1a1b      	subs	r3, r3, r0
  _oscillator->TargetFloatFrequency((_oscQuantizer->GetFrequencyForNote(note)));
     628:	6ea5      	ldr	r5, [r4, #104]	; 0x68
     62a:	6e60      	ldr	r0, [r4, #100]	; 0x64
  _oscilMode = value > 0;
     62c:	f884 206c 	strb.w	r2, [r4, #108]	; 0x6c
     _dacCenter = DACCENTER - _oscilCenter;
     630:	6723      	str	r3, [r4, #112]	; 0x70
  _oscillator->TargetFloatFrequency((_oscQuantizer->GetFrequencyForNote(note)));
     632:	f001 fbf3 	bl	1e1c <Quantizer::GetFrequencyForNote(int)>
     636:	4628      	mov	r0, r5
}
     638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  _oscillator->TargetFloatFrequency((_oscQuantizer->GetFrequencyForNote(note)));
     63c:	f000 bf90 	b.w	1560 <Oscillator::TargetFloatFrequency(float)>
    _oscillator->ResetPhase(_target);
     640:	6941      	ldr	r1, [r0, #20]
     642:	6e80      	ldr	r0, [r0, #104]	; 0x68
     644:	f001 f8e6 	bl	1814 <Oscillator::ResetPhase(long)>
     648:	e7e8      	b.n	61c <CVOutput::TargetOscNote(int)+0xc>
     64a:	bf00      	nop
     64c:	0000      	movs	r0, r0
	...

00000650 <CVOutput::SetCycle(int, short)>:
void CVOutput::SetCycle(int value, short format){
     650:	b538      	push	{r3, r4, r5, lr}
     652:	4604      	mov	r4, r0
  value = TxHelper::ConvertMs(value, format);
     654:	4608      	mov	r0, r1
     656:	4611      	mov	r1, r2
     658:	f002 fb0e 	bl	2c78 <TxHelper::ConvertMs(unsigned long, short)>
  if (!_oscilMode)
     65c:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
  value = TxHelper::ConvertMs(value, format);
     660:	4605      	mov	r5, r0
  if (!_oscilMode)
     662:	b30b      	cbz	r3, 6a8 <CVOutput::SetCycle(int, short)+0x58>
  _oscilMode = value > 0;
     664:	2d00      	cmp	r5, #0
     666:	bfcc      	ite	gt
     668:	2301      	movgt	r3, #1
     66a:	2300      	movle	r3, #0
     66c:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
  if (_oscilMode) {
     670:	dd13      	ble.n	69a <CVOutput::SetCycle(int, short)+0x4a>
    _oscillator->SetFloatFrequency(1000. / value);
     672:	ee07 5a90 	vmov	s15, r5
     _dacCenter = DACCENTER - _oscilCenter;
     676:	6f62      	ldr	r2, [r4, #116]	; 0x74
     678:	f647 73ff 	movw	r3, #32767	; 0x7fff
    _oscillator->SetFloatFrequency(1000. / value);
     67c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
     67e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
     _dacCenter = DACCENTER - _oscilCenter;
     682:	1a9b      	subs	r3, r3, r2
    _oscillator->SetFloatFrequency(1000. / value);
     684:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 6b8 <CVOutput::SetCycle(int, short)+0x68>
     _dacCenter = DACCENTER - _oscilCenter;
     688:	6723      	str	r3, [r4, #112]	; 0x70
    _oscillator->SetFloatFrequency(1000. / value);
     68a:	ee86 0b07 	vdiv.f64	d0, d6, d7
}
     68e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _oscillator->SetFloatFrequency(1000. / value);
     692:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
     696:	f000 bf2b 	b.w	14f0 <Oscillator::SetFloatFrequency(float)>
    _set = true;
     69a:	2201      	movs	r2, #1
    _dacCenter = DACCENTER;
     69c:	f647 73ff 	movw	r3, #32767	; 0x7fff
    _set = true;
     6a0:	f884 2020 	strb.w	r2, [r4, #32]
    _dacCenter = DACCENTER;
     6a4:	6723      	str	r3, [r4, #112]	; 0x70
}
     6a6:	bd38      	pop	{r3, r4, r5, pc}
    _oscillator->ResetPhase(_target);
     6a8:	6961      	ldr	r1, [r4, #20]
     6aa:	6ea0      	ldr	r0, [r4, #104]	; 0x68
     6ac:	f001 f8b2 	bl	1814 <Oscillator::ResetPhase(long)>
     6b0:	e7d8      	b.n	664 <CVOutput::SetCycle(int, short)+0x14>
     6b2:	bf00      	nop
     6b4:	f3af 8000 	nop.w
     6b8:	00000000 	.word	0x00000000
     6bc:	408f4000 	.word	0x408f4000

000006c0 <CVOutput::TargetCycle(int, short)>:
void CVOutput::TargetCycle(int value, short format){
     6c0:	b538      	push	{r3, r4, r5, lr}
     6c2:	4604      	mov	r4, r0
   value = TxHelper::ConvertMs(value, format);
     6c4:	4608      	mov	r0, r1
     6c6:	4611      	mov	r1, r2
     6c8:	f002 fad6 	bl	2c78 <TxHelper::ConvertMs(unsigned long, short)>
  if (!_oscilMode)
     6cc:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
   value = TxHelper::ConvertMs(value, format);
     6d0:	4605      	mov	r5, r0
  if (!_oscilMode)
     6d2:	b30b      	cbz	r3, 718 <CVOutput::TargetCycle(int, short)+0x58>
  _oscilMode = value > 0;
     6d4:	2d00      	cmp	r5, #0
     6d6:	bfcc      	ite	gt
     6d8:	2301      	movgt	r3, #1
     6da:	2300      	movle	r3, #0
     6dc:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
  if (_oscilMode) {
     6e0:	dd13      	ble.n	70a <CVOutput::TargetCycle(int, short)+0x4a>
    _oscillator->TargetFloatFrequency(1000. / value);
     6e2:	ee07 5a90 	vmov	s15, r5
     _dacCenter = DACCENTER - _oscilCenter;
     6e6:	6f62      	ldr	r2, [r4, #116]	; 0x74
     6e8:	f647 73ff 	movw	r3, #32767	; 0x7fff
    _oscillator->TargetFloatFrequency(1000. / value);
     6ec:	6ea0      	ldr	r0, [r4, #104]	; 0x68
     6ee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
     _dacCenter = DACCENTER - _oscilCenter;
     6f2:	1a9b      	subs	r3, r3, r2
    _oscillator->TargetFloatFrequency(1000. / value);
     6f4:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 728 <CVOutput::TargetCycle(int, short)+0x68>
     _dacCenter = DACCENTER - _oscilCenter;
     6f8:	6723      	str	r3, [r4, #112]	; 0x70
    _oscillator->TargetFloatFrequency(1000. / value);
     6fa:	ee86 0b07 	vdiv.f64	d0, d6, d7
}
     6fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _oscillator->TargetFloatFrequency(1000. / value);
     702:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
     706:	f000 bf2b 	b.w	1560 <Oscillator::TargetFloatFrequency(float)>
    _set = true;
     70a:	2201      	movs	r2, #1
    _dacCenter = DACCENTER;
     70c:	f647 73ff 	movw	r3, #32767	; 0x7fff
    _set = true;
     710:	f884 2020 	strb.w	r2, [r4, #32]
    _dacCenter = DACCENTER;
     714:	6723      	str	r3, [r4, #112]	; 0x70
}
     716:	bd38      	pop	{r3, r4, r5, pc}
    _oscillator->ResetPhase(_target);
     718:	6961      	ldr	r1, [r4, #20]
     71a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
     71c:	f001 f87a 	bl	1814 <Oscillator::ResetPhase(long)>
     720:	e7d8      	b.n	6d4 <CVOutput::TargetCycle(int, short)+0x14>
     722:	bf00      	nop
     724:	f3af 8000 	nop.w
     728:	00000000 	.word	0x00000000
     72c:	408f4000 	.word	0x408f4000

00000730 <CVOutput::SetWidth(int)>:
  _oscillator->SetWidth(width);
     730:	6e80      	ldr	r0, [r0, #104]	; 0x68
     732:	f000 bfe5 	b.w	1700 <Oscillator::SetWidth(int)>
     736:	bf00      	nop

00000738 <CVOutput::SetRectify(int)>:
  _oscillator->SetRectify(mode);
     738:	6e80      	ldr	r0, [r0, #104]	; 0x68
     73a:	f001 b80d 	b.w	1758 <Oscillator::SetRectify(int)>
     73e:	bf00      	nop

00000740 <CVOutput::SetLFO(int)>:
void CVOutput::SetLFO(int millihertz){
     740:	b538      	push	{r3, r4, r5, lr}
  if (!_oscilMode)
     742:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
void CVOutput::SetLFO(int millihertz){
     746:	4604      	mov	r4, r0
     748:	460d      	mov	r5, r1
  if (!_oscilMode)
     74a:	b1c3      	cbz	r3, 77e <CVOutput::SetLFO(int)+0x3e>
  _oscilMode = value > 0;
     74c:	2d00      	cmp	r5, #0
     74e:	bfcc      	ite	gt
     750:	2301      	movgt	r3, #1
     752:	2300      	movle	r3, #0
     754:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
  if (_oscilMode) {
     758:	dd0a      	ble.n	770 <CVOutput::SetLFO(int)+0x30>
     _dacCenter = DACCENTER - _oscilCenter;
     75a:	6f62      	ldr	r2, [r4, #116]	; 0x74
     75c:	f647 73ff 	movw	r3, #32767	; 0x7fff
    _oscillator->SetLFO(millihertz);
     760:	4629      	mov	r1, r5
     762:	6ea0      	ldr	r0, [r4, #104]	; 0x68
     _dacCenter = DACCENTER - _oscilCenter;
     764:	1a9b      	subs	r3, r3, r2
     766:	6723      	str	r3, [r4, #112]	; 0x70
}
     768:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _oscillator->SetLFO(millihertz);
     76c:	f000 bf54 	b.w	1618 <Oscillator::SetLFO(int)>
    _set = true;
     770:	2201      	movs	r2, #1
    _dacCenter = DACCENTER;
     772:	f647 73ff 	movw	r3, #32767	; 0x7fff
    _set = true;
     776:	f884 2020 	strb.w	r2, [r4, #32]
    _dacCenter = DACCENTER;
     77a:	6723      	str	r3, [r4, #112]	; 0x70
}
     77c:	bd38      	pop	{r3, r4, r5, pc}
    _oscillator->ResetPhase(_target);
     77e:	6941      	ldr	r1, [r0, #20]
     780:	6e80      	ldr	r0, [r0, #104]	; 0x68
     782:	f001 f847 	bl	1814 <Oscillator::ResetPhase(long)>
     786:	e7e1      	b.n	74c <CVOutput::SetLFO(int)+0xc>

00000788 <CVOutput::TargetLFO(int)>:
void CVOutput::TargetLFO(int millihertz){
     788:	b538      	push	{r3, r4, r5, lr}
  if (!_oscilMode)
     78a:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
void CVOutput::TargetLFO(int millihertz){
     78e:	4604      	mov	r4, r0
     790:	460d      	mov	r5, r1
  if (!_oscilMode)
     792:	b1c3      	cbz	r3, 7c6 <CVOutput::TargetLFO(int)+0x3e>
  _oscilMode = value > 0;
     794:	2d00      	cmp	r5, #0
     796:	bfcc      	ite	gt
     798:	2301      	movgt	r3, #1
     79a:	2300      	movle	r3, #0
     79c:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
  if (_oscilMode) {
     7a0:	dd0a      	ble.n	7b8 <CVOutput::TargetLFO(int)+0x30>
     _dacCenter = DACCENTER - _oscilCenter;
     7a2:	6f62      	ldr	r2, [r4, #116]	; 0x74
     7a4:	f647 73ff 	movw	r3, #32767	; 0x7fff
    _oscillator->TargetLFO(millihertz);
     7a8:	4629      	mov	r1, r5
     7aa:	6ea0      	ldr	r0, [r4, #104]	; 0x68
     _dacCenter = DACCENTER - _oscilCenter;
     7ac:	1a9b      	subs	r3, r3, r2
     7ae:	6723      	str	r3, [r4, #112]	; 0x70
}
     7b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _oscillator->TargetLFO(millihertz);
     7b4:	f000 bf58 	b.w	1668 <Oscillator::TargetLFO(int)>
    _set = true;
     7b8:	2201      	movs	r2, #1
    _dacCenter = DACCENTER;
     7ba:	f647 73ff 	movw	r3, #32767	; 0x7fff
    _set = true;
     7be:	f884 2020 	strb.w	r2, [r4, #32]
    _dacCenter = DACCENTER;
     7c2:	6723      	str	r3, [r4, #112]	; 0x70
}
     7c4:	bd38      	pop	{r3, r4, r5, pc}
    _oscillator->ResetPhase(_target);
     7c6:	6941      	ldr	r1, [r0, #20]
     7c8:	6e80      	ldr	r0, [r0, #104]	; 0x68
     7ca:	f001 f823 	bl	1814 <Oscillator::ResetPhase(long)>
     7ce:	e7e1      	b.n	794 <CVOutput::TargetLFO(int)+0xc>

000007d0 <CVOutput::Sync()>:
  if (_oscilMode)
     7d0:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
     7d4:	b11b      	cbz	r3, 7de <CVOutput::Sync()+0xe>
    _oscillator->ResetPhase(0);
     7d6:	2100      	movs	r1, #0
     7d8:	6e80      	ldr	r0, [r0, #104]	; 0x68
     7da:	f001 b81b 	b.w	1814 <Oscillator::ResetPhase(long)>
    _oscillator->ResetPhase(_target);
     7de:	6941      	ldr	r1, [r0, #20]
     7e0:	6e80      	ldr	r0, [r0, #104]	; 0x68
     7e2:	f001 b817 	b.w	1814 <Oscillator::ResetPhase(long)>
     7e6:	bf00      	nop

000007e8 <CVOutput::SetPhaseOffset(int)>:
  _oscillator->SetPhaseOffset(phase);
     7e8:	6e80      	ldr	r0, [r0, #104]	; 0x68
     7ea:	f001 b821 	b.w	1830 <Oscillator::SetPhaseOffset(int)>
     7ee:	bf00      	nop

000007f0 <CVOutput::SetWaveform(int)>:
  _oscillator->SetWaveform(wave);
     7f0:	6e80      	ldr	r0, [r0, #104]	; 0x68
     7f2:	f000 bfc3 	b.w	177c <Oscillator::SetWaveform(int)>
     7f6:	bf00      	nop

000007f8 <CVOutput::SetOscQuantizationScale(int)>:
  _oscQuantizer->SetScale(scale);
     7f8:	6e40      	ldr	r0, [r0, #100]	; 0x64
     7fa:	f001 ba1b 	b.w	1c34 <Quantizer::SetScale(int)>
     7fe:	bf00      	nop

00000800 <CVOutput::SetAttack(int, short)>:
void CVOutput::SetAttack(int att, short format){
     800:	460b      	mov	r3, r1
  _attack = TxHelper::ConvertMs(max(att, 1), format);
     802:	4611      	mov	r1, r2
     804:	2b01      	cmp	r3, #1
     806:	bfb8      	it	lt
     808:	2301      	movlt	r3, #1
void CVOutput::SetAttack(int att, short format){
     80a:	b510      	push	{r4, lr}
     80c:	4604      	mov	r4, r0
  _attack = TxHelper::ConvertMs(max(att, 1), format);
     80e:	4618      	mov	r0, r3
     810:	f002 fa32 	bl	2c78 <TxHelper::ConvertMs(unsigned long, short)>
  _attackSlew = CalculateRawSlew(_attack, _envTarget, _lOffset);
     814:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
     818:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  _attack = TxHelper::ConvertMs(max(att, 1), format);
     81a:	67e0      	str	r0, [r4, #124]	; 0x7c
  if (value == 0 || target == current){
     81c:	b1d0      	cbz	r0, 854 <CVOutput::SetAttack(int, short)+0x54>
     81e:	4299      	cmp	r1, r3
     820:	d018      	beq.n	854 <CVOutput::SetAttack(int, short)+0x54>
    ret.Steps = value * KRATE;
     822:	2232      	movs	r2, #50	; 0x32
    ret.Delta = (target - current) / ret.Steps;
     824:	1acb      	subs	r3, r1, r3
    ret.Steps = value * KRATE;
     826:	fb00 f202 	mul.w	r2, r0, r2
    ret.Delta = (target - current) / ret.Steps;
     82a:	fb93 f3f2 	sdiv	r3, r3, r2
    ret.Steps += 1;
     82e:	3201      	adds	r2, #1
  _attackSlew = CalculateRawSlew(_attack, _envTarget, _lOffset);
     830:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
     834:	e9c4 0221 	strd	r0, r2, [r4, #132]	; 0x84
  if (_envelopeActive && !_decaying){
     838:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
     83c:	b14a      	cbz	r2, 852 <CVOutput::SetAttack(int, short)+0x52>
     83e:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
     842:	b932      	cbnz	r2, 852 <CVOutput::SetAttack(int, short)+0x52>
    tempSlew.Steps = (_envTarget - _current) / tempSlew.Delta;
     844:	6922      	ldr	r2, [r4, #16]
    _slew = tempSlew;
     846:	6260      	str	r0, [r4, #36]	; 0x24
    tempSlew.Steps = (_envTarget - _current) / tempSlew.Delta;
     848:	1a89      	subs	r1, r1, r2
    _slew = tempSlew;
     84a:	62e3      	str	r3, [r4, #44]	; 0x2c
    tempSlew.Steps = (_envTarget - _current) / tempSlew.Delta;
     84c:	fb91 f1f3 	sdiv	r1, r1, r3
    _slew = tempSlew;
     850:	62a1      	str	r1, [r4, #40]	; 0x28
}
     852:	bd10      	pop	{r4, pc}
    ret.Delta = target - current;
     854:	1acb      	subs	r3, r1, r3
    ret.Steps = 1;
     856:	2201      	movs	r2, #1
     858:	e7ea      	b.n	830 <CVOutput::SetAttack(int, short)+0x30>
     85a:	bf00      	nop

0000085c <CVOutput::SetDecay(int, short)>:
void CVOutput::SetDecay(int dec, short format){
     85c:	460b      	mov	r3, r1
  _decay = TxHelper::ConvertMs(max(dec, 1), format);
     85e:	4611      	mov	r1, r2
     860:	2b01      	cmp	r3, #1
     862:	bfb8      	it	lt
     864:	2301      	movlt	r3, #1
void CVOutput::SetDecay(int dec, short format){
     866:	b510      	push	{r4, lr}
     868:	4604      	mov	r4, r0
  _decay = TxHelper::ConvertMs(max(dec, 1), format);
     86a:	4618      	mov	r0, r3
     86c:	f002 fa04 	bl	2c78 <TxHelper::ConvertMs(unsigned long, short)>
  _decaySlew = CalculateRawSlew(_decay, _lOffset, _envTarget);
     870:	6be1      	ldr	r1, [r4, #60]	; 0x3c
     872:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
  _decay = TxHelper::ConvertMs(max(dec, 1), format);
     876:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if (value == 0 || target == current){
     87a:	b1d0      	cbz	r0, 8b2 <CVOutput::SetDecay(int, short)+0x56>
     87c:	4299      	cmp	r1, r3
     87e:	d018      	beq.n	8b2 <CVOutput::SetDecay(int, short)+0x56>
    ret.Steps = value * KRATE;
     880:	2232      	movs	r2, #50	; 0x32
    ret.Delta = (target - current) / ret.Steps;
     882:	1acb      	subs	r3, r1, r3
    ret.Steps = value * KRATE;
     884:	fb00 f202 	mul.w	r2, r0, r2
    ret.Delta = (target - current) / ret.Steps;
     888:	fb93 f3f2 	sdiv	r3, r3, r2
    ret.Steps += 1;
     88c:	3201      	adds	r2, #1
  _decaySlew = CalculateRawSlew(_decay, _lOffset, _envTarget);
     88e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
     892:	e9c4 0224 	strd	r0, r2, [r4, #144]	; 0x90
  if (!_envelopeActive && _decaying){
     896:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
     89a:	b94a      	cbnz	r2, 8b0 <CVOutput::SetDecay(int, short)+0x54>
     89c:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
     8a0:	b132      	cbz	r2, 8b0 <CVOutput::SetDecay(int, short)+0x54>
    tempSlew.Steps = (_lOffset - _current) / tempSlew.Delta;
     8a2:	6922      	ldr	r2, [r4, #16]
    _slew = tempSlew;
     8a4:	6260      	str	r0, [r4, #36]	; 0x24
    tempSlew.Steps = (_lOffset - _current) / tempSlew.Delta;
     8a6:	1a89      	subs	r1, r1, r2
    _slew = tempSlew;
     8a8:	62e3      	str	r3, [r4, #44]	; 0x2c
    tempSlew.Steps = (_lOffset - _current) / tempSlew.Delta;
     8aa:	fb91 f1f3 	sdiv	r1, r1, r3
    _slew = tempSlew;
     8ae:	62a1      	str	r1, [r4, #40]	; 0x28
}
     8b0:	bd10      	pop	{r4, pc}
    ret.Delta = target - current;
     8b2:	1acb      	subs	r3, r1, r3
    ret.Steps = 1;
     8b4:	2201      	movs	r2, #1
     8b6:	e7ea      	b.n	88e <CVOutput::SetDecay(int, short)+0x32>

000008b8 <CVOutput::RecomputeEnvelopes()>:
  if(_decaying){
     8b8:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
void CVOutput::RecomputeEnvelopes(){
     8bc:	b4f0      	push	{r4, r5, r6, r7}
  if(_decaying){
     8be:	2b00      	cmp	r3, #0
     8c0:	d04c      	beq.n	95c <CVOutput::RecomputeEnvelopes()+0xa4>
    unsigned long remaining = ((float)_slew.Steps / _decaySlew.Steps) * _decay;
     8c2:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
     8c6:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
     8ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
     8ce:	edd0 7a25 	vldr	s15, [r0, #148]	; 0x94
    SlewSteps tempSlew = CalculateRawSlew(remaining, _lOffset, _current);
     8d2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    unsigned long remaining = ((float)_slew.Steps / _decaySlew.Steps) * _decay;
     8d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
     8d8:	ee07 4a90 	vmov	s15, r4
    SlewSteps tempSlew = CalculateRawSlew(remaining, _lOffset, _current);
     8dc:	6901      	ldr	r1, [r0, #16]
    unsigned long remaining = ((float)_slew.Steps / _decaySlew.Steps) * _decay;
     8de:	eeb8 6a67 	vcvt.f32.u32	s12, s15
     8e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
     8e6:	ee67 7a86 	vmul.f32	s15, s15, s12
     8ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     8ee:	ee17 2a90 	vmov	r2, s15
  if (value == 0 || target == current){
     8f2:	2a00      	cmp	r2, #0
     8f4:	d07b      	beq.n	9ee <CVOutput::RecomputeEnvelopes()+0x136>
     8f6:	428b      	cmp	r3, r1
     8f8:	d079      	beq.n	9ee <CVOutput::RecomputeEnvelopes()+0x136>
    ret.Steps = value * KRATE;
     8fa:	2532      	movs	r5, #50	; 0x32
    ret.Delta = (target - current) / ret.Steps;
     8fc:	1a59      	subs	r1, r3, r1
    ret.Steps = value * KRATE;
     8fe:	fb02 f505 	mul.w	r5, r2, r5
    ret.Delta = (target - current) / ret.Steps;
     902:	fb91 f1f5 	sdiv	r1, r1, r5
    ret.Steps += 1;
     906:	3501      	adds	r5, #1
    _slew = tempSlew;     
     908:	62c1      	str	r1, [r0, #44]	; 0x2c
    SlewSteps tempSlew = CalculateRawSlew(remaining, _envTarget, _current);
     90a:	f8d0 10ac 	ldr.w	r1, [r0, #172]	; 0xac
    _slew = tempSlew;     
     90e:	e9c0 2509 	strd	r2, r5, [r0, #36]	; 0x24
    unsigned long remaining = ((float)_slew.Steps / _attackSlew.Steps) * _attack;
     912:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
  if (value == 0 || target == current){
     914:	1acf      	subs	r7, r1, r3
     916:	fab7 f787 	clz	r7, r7
     91a:	097f      	lsrs	r7, r7, #5
     91c:	2d00      	cmp	r5, #0
     91e:	d04f      	beq.n	9c0 <CVOutput::RecomputeEnvelopes()+0x108>
     920:	2f00      	cmp	r7, #0
     922:	d14d      	bne.n	9c0 <CVOutput::RecomputeEnvelopes()+0x108>
    ret.Steps = value * KRATE;
     924:	2232      	movs	r2, #50	; 0x32
    ret.Delta = (target - current) / ret.Steps;
     926:	1ace      	subs	r6, r1, r3
    ret.Steps = value * KRATE;
     928:	fb05 f202 	mul.w	r2, r5, r2
    ret.Delta = (target - current) / ret.Steps;
     92c:	fb96 f6f2 	sdiv	r6, r6, r2
    ret.Steps += 1;
     930:	3201      	adds	r2, #1
  _attackSlew = CalculateRawSlew(_attack, _envTarget, _lOffset);
     932:	f8c0 608c 	str.w	r6, [r0, #140]	; 0x8c
     936:	e9c0 5221 	strd	r5, r2, [r0, #132]	; 0x84
  if (value == 0 || target == current){
     93a:	2c00      	cmp	r4, #0
     93c:	d048      	beq.n	9d0 <CVOutput::RecomputeEnvelopes()+0x118>
     93e:	2f00      	cmp	r7, #0
     940:	d146      	bne.n	9d0 <CVOutput::RecomputeEnvelopes()+0x118>
    ret.Steps = value * KRATE;
     942:	2232      	movs	r2, #50	; 0x32
    ret.Delta = (target - current) / ret.Steps;
     944:	1a5b      	subs	r3, r3, r1
    ret.Steps = value * KRATE;
     946:	fb04 f202 	mul.w	r2, r4, r2
    ret.Delta = (target - current) / ret.Steps;
     94a:	fb93 f3f2 	sdiv	r3, r3, r2
    ret.Steps += 1;
     94e:	3201      	adds	r2, #1
  _decaySlew = CalculateRawSlew(_decay, _lOffset, _envTarget);
     950:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
     954:	e9c0 4224 	strd	r4, r2, [r0, #144]	; 0x90
}
     958:	bcf0      	pop	{r4, r5, r6, r7}
     95a:	4770      	bx	lr
  } else if (_envelopeActive) {
     95c:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
     960:	2b00      	cmp	r3, #0
     962:	d03d      	beq.n	9e0 <CVOutput::RecomputeEnvelopes()+0x128>
    unsigned long remaining = ((float)_slew.Steps / _attackSlew.Steps) * _attack;
     964:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
     968:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
     96a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
     96e:	edd0 7a22 	vldr	s15, [r0, #136]	; 0x88
    SlewSteps tempSlew = CalculateRawSlew(remaining, _envTarget, _current);
     972:	f8d0 10ac 	ldr.w	r1, [r0, #172]	; 0xac
    unsigned long remaining = ((float)_slew.Steps / _attackSlew.Steps) * _attack;
     976:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
     97a:	ee07 5a90 	vmov	s15, r5
    SlewSteps tempSlew = CalculateRawSlew(remaining, _envTarget, _current);
     97e:	6902      	ldr	r2, [r0, #16]
    unsigned long remaining = ((float)_slew.Steps / _attackSlew.Steps) * _attack;
     980:	eeb8 6a67 	vcvt.f32.u32	s12, s15
     984:	eec6 7a87 	vdiv.f32	s15, s13, s14
     988:	ee67 7a86 	vmul.f32	s15, s15, s12
     98c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     990:	ee17 3a90 	vmov	r3, s15
  if (value == 0 || target == current){
     994:	b373      	cbz	r3, 9f4 <CVOutput::RecomputeEnvelopes()+0x13c>
     996:	4291      	cmp	r1, r2
     998:	d02c      	beq.n	9f4 <CVOutput::RecomputeEnvelopes()+0x13c>
    ret.Steps = value * KRATE;
     99a:	2432      	movs	r4, #50	; 0x32
    ret.Delta = (target - current) / ret.Steps;
     99c:	1a8a      	subs	r2, r1, r2
    ret.Steps = value * KRATE;
     99e:	fb03 f404 	mul.w	r4, r3, r4
    ret.Delta = (target - current) / ret.Steps;
     9a2:	fb92 f2f4 	sdiv	r2, r2, r4
    ret.Steps += 1;
     9a6:	3401      	adds	r4, #1
    _slew = tempSlew;
     9a8:	62c2      	str	r2, [r0, #44]	; 0x2c
     9aa:	e9c0 3409 	strd	r3, r4, [r0, #36]	; 0x24
    SlewSteps tempSlew = CalculateRawSlew(remaining, _lOffset, _current);
     9ae:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    unsigned long remaining = ((float)_slew.Steps / _decaySlew.Steps) * _decay;
     9b0:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
  if (value == 0 || target == current){
     9b4:	1acf      	subs	r7, r1, r3
     9b6:	fab7 f787 	clz	r7, r7
     9ba:	097f      	lsrs	r7, r7, #5
     9bc:	2d00      	cmp	r5, #0
     9be:	d1af      	bne.n	920 <CVOutput::RecomputeEnvelopes()+0x68>
    ret.Delta = target - current;
     9c0:	1ace      	subs	r6, r1, r3
    ret.Steps = 1;
     9c2:	2201      	movs	r2, #1
  _attackSlew = CalculateRawSlew(_attack, _envTarget, _lOffset);
     9c4:	f8c0 608c 	str.w	r6, [r0, #140]	; 0x8c
     9c8:	e9c0 5221 	strd	r5, r2, [r0, #132]	; 0x84
  if (value == 0 || target == current){
     9cc:	2c00      	cmp	r4, #0
     9ce:	d1b6      	bne.n	93e <CVOutput::RecomputeEnvelopes()+0x86>
    ret.Delta = target - current;
     9d0:	1a5b      	subs	r3, r3, r1
    ret.Steps = 1;
     9d2:	2201      	movs	r2, #1
  _decaySlew = CalculateRawSlew(_decay, _lOffset, _envTarget);
     9d4:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
     9d8:	e9c0 4224 	strd	r4, r2, [r0, #144]	; 0x90
}
     9dc:	bcf0      	pop	{r4, r5, r6, r7}
     9de:	4770      	bx	lr
    unsigned long remaining = ((float)_slew.Steps / _decaySlew.Steps) * _decay;
     9e0:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
    SlewSteps tempSlew = CalculateRawSlew(remaining, _lOffset, _current);
     9e4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    unsigned long remaining = ((float)_slew.Steps / _attackSlew.Steps) * _attack;
     9e6:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
    SlewSteps tempSlew = CalculateRawSlew(remaining, _envTarget, _current);
     9e8:	f8d0 10ac 	ldr.w	r1, [r0, #172]	; 0xac
     9ec:	e792      	b.n	914 <CVOutput::RecomputeEnvelopes()+0x5c>
    ret.Delta = target - current;
     9ee:	1a59      	subs	r1, r3, r1
    ret.Steps = 1;
     9f0:	2501      	movs	r5, #1
     9f2:	e789      	b.n	908 <CVOutput::RecomputeEnvelopes()+0x50>
    ret.Delta = target - current;
     9f4:	1a8a      	subs	r2, r1, r2
    ret.Steps = 1;
     9f6:	2401      	movs	r4, #1
     9f8:	e7d6      	b.n	9a8 <CVOutput::RecomputeEnvelopes()+0xf0>
     9fa:	bf00      	nop

000009fc <CVOutput::SetEnvelopeMode(int)>:
  bool eMode = mode != 0;
     9fc:	1e0b      	subs	r3, r1, #0
  if (eMode != _envelopeMode){
     9fe:	f890 20a9 	ldrb.w	r2, [r0, #169]	; 0xa9
  bool eMode = mode != 0;
     a02:	bf18      	it	ne
     a04:	2301      	movne	r3, #1
  if (eMode != _envelopeMode){
     a06:	429a      	cmp	r2, r3
     a08:	d01a      	beq.n	a40 <CVOutput::SetEnvelopeMode(int)+0x44>
    _envelopeMode = eMode;
     a0a:	f880 30a9 	strb.w	r3, [r0, #169]	; 0xa9
void CVOutput::SetEnvelopeMode(int mode){
     a0e:	b510      	push	{r4, lr}
     a10:	4604      	mov	r4, r0
    if (_envelopeMode){
     a12:	b951      	cbnz	r1, a2a <CVOutput::SetEnvelopeMode(int)+0x2e>
      _target = _envTarget;
     a14:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
      _envLoop = false;
     a18:	f880 10b3 	strb.w	r1, [r0, #179]	; 0xb3
      _target = _envTarget;
     a1c:	6143      	str	r3, [r0, #20]
    _set = true;
     a1e:	2301      	movs	r3, #1
      _envelopeActive = false;
     a20:	f880 10b0 	strb.w	r1, [r0, #176]	; 0xb0
    _set = true;
     a24:	f884 3020 	strb.w	r3, [r4, #32]
}
     a28:	bd10      	pop	{r4, pc}
      _envTarget = _target;
     a2a:	6942      	ldr	r2, [r0, #20]
      _target = _lOffset;
     a2c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
      _envTarget = _target;
     a2e:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
      _target = _lOffset;
     a32:	6143      	str	r3, [r0, #20]
      RecomputeEnvelopes();
     a34:	f7ff ff40 	bl	8b8 <CVOutput::RecomputeEnvelopes()>
    _set = true;
     a38:	2301      	movs	r3, #1
     a3a:	f884 3020 	strb.w	r3, [r4, #32]
}
     a3e:	bd10      	pop	{r4, pc}
     a40:	4770      	bx	lr
     a42:	bf00      	nop

00000a44 <CVOutput::SetValue(int)>:
  _tempTarget = Constrain(value + (_offset + _calibration)) << 15;
     a44:	6b83      	ldr	r3, [r0, #56]	; 0x38
void CVOutput::SetValue(int value){
     a46:	b410      	push	{r4}
  _tempTarget = Constrain(value + (_offset + _calibration)) << 15;
     a48:	6c04      	ldr	r4, [r0, #64]	; 0x40
     a4a:	4423      	add	r3, r4
  if (_envelopeMode){
     a4c:	f890 40a9 	ldrb.w	r4, [r0, #169]	; 0xa9
  _tempTarget = Constrain(value + (_offset + _calibration)) << 15;
     a50:	4419      	add	r1, r3
     a52:	f301 010f 	ssat	r1, #16, r1
     a56:	03c9      	lsls	r1, r1, #15
     a58:	6181      	str	r1, [r0, #24]
  if (_envelopeMode){
     a5a:	b134      	cbz	r4, a6a <CVOutput::SetValue(int)+0x26>
    if (_envTarget != _tempTarget) {
     a5c:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
     a60:	4299      	cmp	r1, r3
     a62:	d109      	bne.n	a78 <CVOutput::SetValue(int)+0x34>
}
     a64:	f85d 4b04 	ldr.w	r4, [sp], #4
     a68:	4770      	bx	lr
    _set = true;
     a6a:	2301      	movs	r3, #1
}
     a6c:	f85d 4b04 	ldr.w	r4, [sp], #4
    _target = _tempTarget;
     a70:	6141      	str	r1, [r0, #20]
    _set = true;
     a72:	f880 3020 	strb.w	r3, [r0, #32]
}
     a76:	4770      	bx	lr
     a78:	f85d 4b04 	ldr.w	r4, [sp], #4
      _envTarget = _tempTarget;
     a7c:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
      RecomputeEnvelopes();
     a80:	f7ff bf1a 	b.w	8b8 <CVOutput::RecomputeEnvelopes()>

00000a84 <CVOutput::TargetValue(int)>:
void CVOutput::TargetValue(int value){
     a84:	b430      	push	{r4, r5}
  _tempTarget = Constrain(value + (_offset + _calibration)) << 15;
     a86:	6b83      	ldr	r3, [r0, #56]	; 0x38
void CVOutput::TargetValue(int value){
     a88:	4602      	mov	r2, r0
  _tempTarget = Constrain(value + (_offset + _calibration)) << 15;
     a8a:	6c04      	ldr	r4, [r0, #64]	; 0x40
     a8c:	4423      	add	r3, r4
  if (_envelopeMode){
     a8e:	f890 40a9 	ldrb.w	r4, [r0, #169]	; 0xa9
  _tempTarget = Constrain(value + (_offset + _calibration)) << 15;
     a92:	4419      	add	r1, r3
     a94:	f301 010f 	ssat	r1, #16, r1
     a98:	03c9      	lsls	r1, r1, #15
     a9a:	6181      	str	r1, [r0, #24]
  if (_envelopeMode){
     a9c:	b154      	cbz	r4, ab4 <CVOutput::TargetValue(int)+0x30>
    if (_envTarget != _tempTarget) {
     a9e:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
     aa2:	4299      	cmp	r1, r3
     aa4:	d101      	bne.n	aaa <CVOutput::TargetValue(int)+0x26>
}
     aa6:	bc30      	pop	{r4, r5}
     aa8:	4770      	bx	lr
     aaa:	bc30      	pop	{r4, r5}
      _envTarget = _tempTarget;
     aac:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
      RecomputeEnvelopes();
     ab0:	f7ff bf02 	b.w	8b8 <CVOutput::RecomputeEnvelopes()>
  _slew = CalculateRawSlew(_slewTime, _target, _current);
     ab4:	6b00      	ldr	r0, [r0, #48]	; 0x30
     ab6:	6915      	ldr	r5, [r2, #16]
    _target = _tempTarget;
     ab8:	6151      	str	r1, [r2, #20]
    _set = false;
     aba:	f882 4020 	strb.w	r4, [r2, #32]
  if (value == 0 || target == current){
     abe:	b168      	cbz	r0, adc <CVOutput::TargetValue(int)+0x58>
     ac0:	42a9      	cmp	r1, r5
     ac2:	d00b      	beq.n	adc <CVOutput::TargetValue(int)+0x58>
    ret.Steps = value * KRATE;
     ac4:	2332      	movs	r3, #50	; 0x32
    ret.Delta = (target - current) / ret.Steps;
     ac6:	1b49      	subs	r1, r1, r5
    ret.Steps = value * KRATE;
     ac8:	fb00 f303 	mul.w	r3, r0, r3
    ret.Delta = (target - current) / ret.Steps;
     acc:	fb91 f1f3 	sdiv	r1, r1, r3
    ret.Steps += 1;
     ad0:	3301      	adds	r3, #1
  _slew = CalculateRawSlew(_slewTime, _target, _current);
     ad2:	62d1      	str	r1, [r2, #44]	; 0x2c
}
     ad4:	bc30      	pop	{r4, r5}
  _slew = CalculateRawSlew(_slewTime, _target, _current);
     ad6:	e9c2 0309 	strd	r0, r3, [r2, #36]	; 0x24
}
     ada:	4770      	bx	lr
    ret.Delta = target - current;
     adc:	1b49      	subs	r1, r1, r5
    ret.Steps = 1;
     ade:	2301      	movs	r3, #1
     ae0:	e7f7      	b.n	ad2 <CVOutput::TargetValue(int)+0x4e>
     ae2:	bf00      	nop

00000ae4 <CVOutput::SetOffset(int)>:
void CVOutput::SetOffset(int value){
     ae4:	b538      	push	{r3, r4, r5, lr}
  _tempTarget = Constrain(((_envelopeMode ? _envTarget : _target) >> 15) + (value - _offset)) << 15;
     ae6:	f890 30a9 	ldrb.w	r3, [r0, #169]	; 0xa9
void CVOutput::SetOffset(int value){
     aea:	4604      	mov	r4, r0
  _tempTarget = Constrain(((_envelopeMode ? _envTarget : _target) >> 15) + (value - _offset)) << 15;
     aec:	b1e3      	cbz	r3, b28 <CVOutput::SetOffset(int)+0x44>
     aee:	6b83      	ldr	r3, [r0, #56]	; 0x38
     af0:	f8d0 20ac 	ldr.w	r2, [r0, #172]	; 0xac
     af4:	1acb      	subs	r3, r1, r3
  _lOffset = (_offset + _calibration) << 15;
     af6:	6c05      	ldr	r5, [r0, #64]	; 0x40
  _offset = value;
     af8:	6381      	str	r1, [r0, #56]	; 0x38
  _tempTarget = Constrain(((_envelopeMode ? _envTarget : _target) >> 15) + (value - _offset)) << 15;
     afa:	eb03 33e2 	add.w	r3, r3, r2, asr #15
  _lOffset = (_offset + _calibration) << 15;
     afe:	4429      	add	r1, r5
  _tempTarget = Constrain(((_envelopeMode ? _envTarget : _target) >> 15) + (value - _offset)) << 15;
     b00:	f303 030f 	ssat	r3, #16, r3
  _lOffset = (_offset + _calibration) << 15;
     b04:	03c9      	lsls	r1, r1, #15
  _tempTarget = Constrain(((_envelopeMode ? _envTarget : _target) >> 15) + (value - _offset)) << 15;
     b06:	03db      	lsls	r3, r3, #15
  _lOffset = (_offset + _calibration) << 15;
     b08:	63c1      	str	r1, [r0, #60]	; 0x3c
    if (_envTarget != _tempTarget) {
     b0a:	429a      	cmp	r2, r3
  _tempTarget = Constrain(((_envelopeMode ? _envTarget : _target) >> 15) + (value - _offset)) << 15;
     b0c:	6183      	str	r3, [r0, #24]
    if (_envTarget != _tempTarget) {
     b0e:	d11b      	bne.n	b48 <CVOutput::SetOffset(int)+0x64>
  if (!_envelopeActive && !_decaying){
     b10:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
     b14:	b93b      	cbnz	r3, b26 <CVOutput::SetOffset(int)+0x42>
     b16:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
     b1a:	b923      	cbnz	r3, b26 <CVOutput::SetOffset(int)+0x42>
    if (_slewTime != 0) 
     b1c:	6b22      	ldr	r2, [r4, #48]	; 0x30
     b1e:	b9ca      	cbnz	r2, b54 <CVOutput::SetOffset(int)+0x70>
      _set = true;
     b20:	2301      	movs	r3, #1
     b22:	f884 3020 	strb.w	r3, [r4, #32]
}
     b26:	bd38      	pop	{r3, r4, r5, pc}
  _tempTarget = Constrain(((_envelopeMode ? _envTarget : _target) >> 15) + (value - _offset)) << 15;
     b28:	6b83      	ldr	r3, [r0, #56]	; 0x38
     b2a:	6942      	ldr	r2, [r0, #20]
     b2c:	1acb      	subs	r3, r1, r3
  _lOffset = (_offset + _calibration) << 15;
     b2e:	6c00      	ldr	r0, [r0, #64]	; 0x40
  _offset = value;
     b30:	63a1      	str	r1, [r4, #56]	; 0x38
  _tempTarget = Constrain(((_envelopeMode ? _envTarget : _target) >> 15) + (value - _offset)) << 15;
     b32:	eb03 33e2 	add.w	r3, r3, r2, asr #15
  _lOffset = (_offset + _calibration) << 15;
     b36:	4401      	add	r1, r0
  _tempTarget = Constrain(((_envelopeMode ? _envTarget : _target) >> 15) + (value - _offset)) << 15;
     b38:	f303 030f 	ssat	r3, #16, r3
  _lOffset = (_offset + _calibration) << 15;
     b3c:	03c9      	lsls	r1, r1, #15
  _tempTarget = Constrain(((_envelopeMode ? _envTarget : _target) >> 15) + (value - _offset)) << 15;
     b3e:	03db      	lsls	r3, r3, #15
  _lOffset = (_offset + _calibration) << 15;
     b40:	63e1      	str	r1, [r4, #60]	; 0x3c
    _target = _tempTarget;
     b42:	e9c4 3305 	strd	r3, r3, [r4, #20]
     b46:	e7e3      	b.n	b10 <CVOutput::SetOffset(int)+0x2c>
      _envTarget = _tempTarget;
     b48:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
      _target = _lOffset;
     b4c:	6141      	str	r1, [r0, #20]
      RecomputeEnvelopes();
     b4e:	f7ff feb3 	bl	8b8 <CVOutput::RecomputeEnvelopes()>
     b52:	e7dd      	b.n	b10 <CVOutput::SetOffset(int)+0x2c>
  _slew = CalculateRawSlew(_slewTime, _target, _current);
     b54:	6925      	ldr	r5, [r4, #16]
     b56:	6960      	ldr	r0, [r4, #20]
  if (value == 0 || target == current){
     b58:	42a8      	cmp	r0, r5
     b5a:	d00a      	beq.n	b72 <CVOutput::SetOffset(int)+0x8e>
    ret.Steps = value * KRATE;
     b5c:	2132      	movs	r1, #50	; 0x32
    ret.Delta = (target - current) / ret.Steps;
     b5e:	1b40      	subs	r0, r0, r5
    ret.Steps = value * KRATE;
     b60:	fb02 f101 	mul.w	r1, r2, r1
    ret.Delta = (target - current) / ret.Steps;
     b64:	fb90 f3f1 	sdiv	r3, r0, r1
    ret.Steps += 1;
     b68:	3101      	adds	r1, #1
  _slew = CalculateRawSlew(_slewTime, _target, _current);
     b6a:	62e3      	str	r3, [r4, #44]	; 0x2c
     b6c:	e9c4 2109 	strd	r2, r1, [r4, #36]	; 0x24
}
     b70:	bd38      	pop	{r3, r4, r5, pc}
    ret.Steps = 1;
     b72:	2101      	movs	r1, #1
     b74:	e7f9      	b.n	b6a <CVOutput::SetOffset(int)+0x86>
     b76:	bf00      	nop

00000b78 <CVOutput::SetCalibrationValue(int)>:
void CVOutput::SetCalibrationValue(int value){
     b78:	b510      	push	{r4, lr}
     b7a:	4604      	mov	r4, r0
  SetOffset(value);
     b7c:	f7ff ffb2 	bl	ae4 <CVOutput::SetOffset(int)>
  _offset = 0;
     b80:	2100      	movs	r1, #0
  _calibration = _offset + _calibration;
     b82:	6c23      	ldr	r3, [r4, #64]	; 0x40
     b84:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  _offset = 0;
     b86:	63a1      	str	r1, [r4, #56]	; 0x38
  _calibration = _offset + _calibration;
     b88:	4413      	add	r3, r2
     b8a:	6423      	str	r3, [r4, #64]	; 0x40
}
     b8c:	bd10      	pop	{r4, pc}
     b8e:	bf00      	nop

00000b90 <CVOutput::ResetCalibration()>:
  _tempTarget = Constrain(((_envelopeActive ? _envTarget : _target) >> 15) - _calibration) << 15;
     b90:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
void CVOutput::ResetCalibration(){
     b94:	b410      	push	{r4}
  _tempTarget = Constrain(((_envelopeActive ? _envTarget : _target) >> 15) - _calibration) << 15;
     b96:	b303      	cbz	r3, bda <CVOutput::ResetCalibration()+0x4a>
     b98:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
     b9c:	13db      	asrs	r3, r3, #15
     b9e:	6c04      	ldr	r4, [r0, #64]	; 0x40
  _calibration = 0;
     ba0:	2100      	movs	r1, #0
  _lOffset = _offset << 15;
     ba2:	6b82      	ldr	r2, [r0, #56]	; 0x38
  _tempTarget = Constrain(((_envelopeActive ? _envTarget : _target) >> 15) - _calibration) << 15;
     ba4:	1b1b      	subs	r3, r3, r4
  _calibration = 0;
     ba6:	6401      	str	r1, [r0, #64]	; 0x40
  _lOffset = _offset << 15;
     ba8:	03d2      	lsls	r2, r2, #15
  if (_envelopeMode){
     baa:	f890 10a9 	ldrb.w	r1, [r0, #169]	; 0xa9
  _tempTarget = Constrain(((_envelopeActive ? _envTarget : _target) >> 15) - _calibration) << 15;
     bae:	f303 030f 	ssat	r3, #16, r3
  _lOffset = _offset << 15;
     bb2:	63c2      	str	r2, [r0, #60]	; 0x3c
  _tempTarget = Constrain(((_envelopeActive ? _envTarget : _target) >> 15) - _calibration) << 15;
     bb4:	03db      	lsls	r3, r3, #15
     bb6:	6183      	str	r3, [r0, #24]
  if (_envelopeMode){
     bb8:	b131      	cbz	r1, bc8 <CVOutput::ResetCalibration()+0x38>
    if (_envTarget != _tempTarget) {
     bba:	f8d0 20ac 	ldr.w	r2, [r0, #172]	; 0xac
     bbe:	4293      	cmp	r3, r2
     bc0:	d10e      	bne.n	be0 <CVOutput::ResetCalibration()+0x50>
}
     bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
     bc6:	4770      	bx	lr
    if (_slewTime != 0) 
     bc8:	6b02      	ldr	r2, [r0, #48]	; 0x30
    _target = _tempTarget;
     bca:	6143      	str	r3, [r0, #20]
    if (_slewTime != 0) 
     bcc:	b972      	cbnz	r2, bec <CVOutput::ResetCalibration()+0x5c>
      _set = true;
     bce:	2301      	movs	r3, #1
}
     bd0:	f85d 4b04 	ldr.w	r4, [sp], #4
      _set = true;
     bd4:	f880 3020 	strb.w	r3, [r0, #32]
}
     bd8:	4770      	bx	lr
  _tempTarget = Constrain(((_envelopeActive ? _envTarget : _target) >> 15) - _calibration) << 15;
     bda:	6943      	ldr	r3, [r0, #20]
     bdc:	13db      	asrs	r3, r3, #15
     bde:	e7de      	b.n	b9e <CVOutput::ResetCalibration()+0xe>
}
     be0:	f85d 4b04 	ldr.w	r4, [sp], #4
      _envTarget = _tempTarget;
     be4:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
      RecomputeEnvelopes();
     be8:	f7ff be66 	b.w	8b8 <CVOutput::RecomputeEnvelopes()>
  _slew = CalculateRawSlew(_slewTime, _target, _current);
     bec:	6904      	ldr	r4, [r0, #16]
  if (value == 0 || target == current){
     bee:	42a3      	cmp	r3, r4
     bf0:	d00e      	beq.n	c10 <CVOutput::ResetCalibration()+0x80>
    ret.Steps = value * KRATE;
     bf2:	f04f 0c32 	mov.w	ip, #50	; 0x32
    ret.Delta = (target - current) / ret.Steps;
     bf6:	1b1b      	subs	r3, r3, r4
    ret.Steps = value * KRATE;
     bf8:	fb0c fc02 	mul.w	ip, ip, r2
    ret.Delta = (target - current) / ret.Steps;
     bfc:	fb93 f1fc 	sdiv	r1, r3, ip
    ret.Steps += 1;
     c00:	f10c 0301 	add.w	r3, ip, #1
}
     c04:	f85d 4b04 	ldr.w	r4, [sp], #4
  _slew = CalculateRawSlew(_slewTime, _target, _current);
     c08:	62c1      	str	r1, [r0, #44]	; 0x2c
     c0a:	e9c0 2309 	strd	r2, r3, [r0, #36]	; 0x24
}
     c0e:	4770      	bx	lr
    ret.Steps = 1;
     c10:	2301      	movs	r3, #1
     c12:	e7f7      	b.n	c04 <CVOutput::ResetCalibration()+0x74>

00000c14 <CVOutput::TargetNote(int)>:
  int16_t neg = note < 0 ? -1 : 1;
     c14:	2900      	cmp	r1, #0
void CVOutput::TargetNote(int note){
     c16:	b538      	push	{r3, r4, r5, lr}
  int16_t neg = note < 0 ? -1 : 1;
     c18:	bfb4      	ite	lt
     c1a:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
     c1e:	2501      	movge	r5, #1
  TargetValue((neg * (int)_quantizer->GetValueForNote(abs(note))) <<  1);
     c20:	2900      	cmp	r1, #0
void CVOutput::TargetNote(int note){
     c22:	4604      	mov	r4, r0
  TargetValue((neg * (int)_quantizer->GetValueForNote(abs(note))) <<  1);
     c24:	6e00      	ldr	r0, [r0, #96]	; 0x60
     c26:	bfb8      	it	lt
     c28:	4249      	neglt	r1, r1
     c2a:	f001 f8df 	bl	1dec <Quantizer::GetValueForNote(int)>
     c2e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
  _tempTarget = Constrain(value + (_offset + _calibration)) << 15;
     c32:	6c21      	ldr	r1, [r4, #64]	; 0x40
     c34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  TargetValue((neg * (int)_quantizer->GetValueForNote(abs(note))) <<  1);
     c36:	ee17 2a90 	vmov	r2, s15
  _tempTarget = Constrain(value + (_offset + _calibration)) << 15;
     c3a:	440b      	add	r3, r1
  if (_envelopeMode){
     c3c:	f894 10a9 	ldrb.w	r1, [r4, #169]	; 0xa9
  TargetValue((neg * (int)_quantizer->GetValueForNote(abs(note))) <<  1);
     c40:	fb05 f202 	mul.w	r2, r5, r2
  _tempTarget = Constrain(value + (_offset + _calibration)) << 15;
     c44:	eb03 0342 	add.w	r3, r3, r2, lsl #1
     c48:	f303 030f 	ssat	r3, #16, r3
     c4c:	03db      	lsls	r3, r3, #15
     c4e:	61a3      	str	r3, [r4, #24]
  if (_envelopeMode){
     c50:	b159      	cbz	r1, c6a <CVOutput::TargetNote(int)+0x56>
    if (_envTarget != _tempTarget) {
     c52:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
     c56:	4293      	cmp	r3, r2
     c58:	d100      	bne.n	c5c <CVOutput::TargetNote(int)+0x48>
}
     c5a:	bd38      	pop	{r3, r4, r5, pc}
      RecomputeEnvelopes();
     c5c:	4620      	mov	r0, r4
      _envTarget = _tempTarget;
     c5e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
}
     c62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      RecomputeEnvelopes();
     c66:	f7ff be27 	b.w	8b8 <CVOutput::RecomputeEnvelopes()>
  _slew = CalculateRawSlew(_slewTime, _target, _current);
     c6a:	6b20      	ldr	r0, [r4, #48]	; 0x30
     c6c:	6925      	ldr	r5, [r4, #16]
    _target = _tempTarget;
     c6e:	6163      	str	r3, [r4, #20]
    _set = false;
     c70:	f884 1020 	strb.w	r1, [r4, #32]
  if (value == 0 || target == current){
     c74:	b160      	cbz	r0, c90 <CVOutput::TargetNote(int)+0x7c>
     c76:	42ab      	cmp	r3, r5
     c78:	d00a      	beq.n	c90 <CVOutput::TargetNote(int)+0x7c>
    ret.Steps = value * KRATE;
     c7a:	2232      	movs	r2, #50	; 0x32
    ret.Delta = (target - current) / ret.Steps;
     c7c:	1b5b      	subs	r3, r3, r5
    ret.Steps = value * KRATE;
     c7e:	fb00 f202 	mul.w	r2, r0, r2
    ret.Delta = (target - current) / ret.Steps;
     c82:	fb93 f3f2 	sdiv	r3, r3, r2
    ret.Steps += 1;
     c86:	3201      	adds	r2, #1
  _slew = CalculateRawSlew(_slewTime, _target, _current);
     c88:	62e3      	str	r3, [r4, #44]	; 0x2c
     c8a:	e9c4 0209 	strd	r0, r2, [r4, #36]	; 0x24
}
     c8e:	bd38      	pop	{r3, r4, r5, pc}
    ret.Delta = target - current;
     c90:	1b5b      	subs	r3, r3, r5
    ret.Steps = 1;
     c92:	2201      	movs	r2, #1
     c94:	e7f8      	b.n	c88 <CVOutput::TargetNote(int)+0x74>
     c96:	bf00      	nop

00000c98 <CVOutput::TargetQuantizedValue(int)>:
  int16_t neg = note < 0 ? -1 : 1;
     c98:	1e0a      	subs	r2, r1, #0
void CVOutput::TargetQuantizedValue(int note){
     c9a:	b530      	push	{r4, r5, lr}
     c9c:	4604      	mov	r4, r0
     c9e:	b085      	sub	sp, #20
  int16_t neg = note < 0 ? -1 : 1;
     ca0:	bfb4      	ite	lt
     ca2:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
     ca6:	2501      	movge	r5, #1
  TargetValue((neg * _quantizer->Quantize(abs(note)).Value) << 1);
     ca8:	2a00      	cmp	r2, #0
     caa:	6e21      	ldr	r1, [r4, #96]	; 0x60
     cac:	a801      	add	r0, sp, #4
     cae:	bfb8      	it	lt
     cb0:	4252      	neglt	r2, r2
     cb2:	f000 ffc5 	bl	1c40 <Quantizer::Quantize(int)>
  _tempTarget = Constrain(value + (_offset + _calibration)) << 15;
     cb6:	6c22      	ldr	r2, [r4, #64]	; 0x40
  TargetValue((neg * _quantizer->Quantize(abs(note)).Value) << 1);
     cb8:	9902      	ldr	r1, [sp, #8]
  _tempTarget = Constrain(value + (_offset + _calibration)) << 15;
     cba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  TargetValue((neg * _quantizer->Quantize(abs(note)).Value) << 1);
     cbc:	fb01 f505 	mul.w	r5, r1, r5
  _tempTarget = Constrain(value + (_offset + _calibration)) << 15;
     cc0:	4413      	add	r3, r2
  if (_envelopeMode){
     cc2:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
  _tempTarget = Constrain(value + (_offset + _calibration)) << 15;
     cc6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
     cca:	f303 030f 	ssat	r3, #16, r3
     cce:	03db      	lsls	r3, r3, #15
     cd0:	61a3      	str	r3, [r4, #24]
  if (_envelopeMode){
     cd2:	b16a      	cbz	r2, cf0 <CVOutput::TargetQuantizedValue(int)+0x58>
    if (_envTarget != _tempTarget) {
     cd4:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
     cd8:	4293      	cmp	r3, r2
     cda:	d101      	bne.n	ce0 <CVOutput::TargetQuantizedValue(int)+0x48>
}
     cdc:	b005      	add	sp, #20
     cde:	bd30      	pop	{r4, r5, pc}
      RecomputeEnvelopes();
     ce0:	4620      	mov	r0, r4
      _envTarget = _tempTarget;
     ce2:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
}
     ce6:	b005      	add	sp, #20
     ce8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      RecomputeEnvelopes();
     cec:	f7ff bde4 	b.w	8b8 <CVOutput::RecomputeEnvelopes()>
  _slew = CalculateRawSlew(_slewTime, _target, _current);
     cf0:	6b21      	ldr	r1, [r4, #48]	; 0x30
     cf2:	6920      	ldr	r0, [r4, #16]
    _target = _tempTarget;
     cf4:	6163      	str	r3, [r4, #20]
    _set = false;
     cf6:	f884 2020 	strb.w	r2, [r4, #32]
  if (value == 0 || target == current){
     cfa:	b169      	cbz	r1, d18 <CVOutput::TargetQuantizedValue(int)+0x80>
     cfc:	4283      	cmp	r3, r0
     cfe:	d00b      	beq.n	d18 <CVOutput::TargetQuantizedValue(int)+0x80>
    ret.Steps = value * KRATE;
     d00:	2232      	movs	r2, #50	; 0x32
    ret.Delta = (target - current) / ret.Steps;
     d02:	1a1b      	subs	r3, r3, r0
    ret.Steps = value * KRATE;
     d04:	fb01 f202 	mul.w	r2, r1, r2
    ret.Delta = (target - current) / ret.Steps;
     d08:	fb93 f3f2 	sdiv	r3, r3, r2
    ret.Steps += 1;
     d0c:	3201      	adds	r2, #1
  _slew = CalculateRawSlew(_slewTime, _target, _current);
     d0e:	62e3      	str	r3, [r4, #44]	; 0x2c
     d10:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
}
     d14:	b005      	add	sp, #20
     d16:	bd30      	pop	{r4, r5, pc}
    ret.Delta = target - current;
     d18:	1a1b      	subs	r3, r3, r0
    ret.Steps = 1;
     d1a:	2201      	movs	r2, #1
     d1c:	e7f7      	b.n	d0e <CVOutput::TargetQuantizedValue(int)+0x76>
     d1e:	bf00      	nop

00000d20 <CVOutput::SetNote(int)>:
  int16_t neg = note < 0 ? -1 : 1;
     d20:	2900      	cmp	r1, #0
void CVOutput::SetNote(int note){
     d22:	b538      	push	{r3, r4, r5, lr}
  int16_t neg = note < 0 ? -1 : 1;
     d24:	bfb4      	ite	lt
     d26:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
     d2a:	2501      	movge	r5, #1
    SetValue((neg * (int)_quantizer->GetValueForNote(abs(note))) << 1);
     d2c:	2900      	cmp	r1, #0
void CVOutput::SetNote(int note){
     d2e:	4604      	mov	r4, r0
    SetValue((neg * (int)_quantizer->GetValueForNote(abs(note))) << 1);
     d30:	6e00      	ldr	r0, [r0, #96]	; 0x60
     d32:	bfb8      	it	lt
     d34:	4249      	neglt	r1, r1
     d36:	f001 f859 	bl	1dec <Quantizer::GetValueForNote(int)>
     d3a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
  _tempTarget = Constrain(value + (_offset + _calibration)) << 15;
     d3e:	6c21      	ldr	r1, [r4, #64]	; 0x40
     d40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    SetValue((neg * (int)_quantizer->GetValueForNote(abs(note))) << 1);
     d42:	ee17 2a90 	vmov	r2, s15
  _tempTarget = Constrain(value + (_offset + _calibration)) << 15;
     d46:	440b      	add	r3, r1
  if (_envelopeMode){
     d48:	f894 10a9 	ldrb.w	r1, [r4, #169]	; 0xa9
    SetValue((neg * (int)_quantizer->GetValueForNote(abs(note))) << 1);
     d4c:	fb05 f202 	mul.w	r2, r5, r2
  _tempTarget = Constrain(value + (_offset + _calibration)) << 15;
     d50:	eb03 0342 	add.w	r3, r3, r2, lsl #1
     d54:	f303 030f 	ssat	r3, #16, r3
     d58:	03db      	lsls	r3, r3, #15
     d5a:	61a3      	str	r3, [r4, #24]
  if (_envelopeMode){
     d5c:	b121      	cbz	r1, d68 <CVOutput::SetNote(int)+0x48>
    if (_envTarget != _tempTarget) {
     d5e:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
     d62:	4293      	cmp	r3, r2
     d64:	d105      	bne.n	d72 <CVOutput::SetNote(int)+0x52>
}
     d66:	bd38      	pop	{r3, r4, r5, pc}
    _set = true;
     d68:	2201      	movs	r2, #1
    _target = _tempTarget;
     d6a:	6163      	str	r3, [r4, #20]
    _set = true;
     d6c:	f884 2020 	strb.w	r2, [r4, #32]
}
     d70:	bd38      	pop	{r3, r4, r5, pc}
      RecomputeEnvelopes();
     d72:	4620      	mov	r0, r4
      _envTarget = _tempTarget;
     d74:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
}
     d78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      RecomputeEnvelopes();
     d7c:	f7ff bd9c 	b.w	8b8 <CVOutput::RecomputeEnvelopes()>

00000d80 <CVOutput::SetQuantizedValue(int)>:
  int16_t neg = note < 0 ? -1 : 1;
     d80:	1e0a      	subs	r2, r1, #0
void CVOutput::SetQuantizedValue(int note){
     d82:	b530      	push	{r4, r5, lr}
     d84:	4604      	mov	r4, r0
     d86:	b085      	sub	sp, #20
  int16_t neg = note < 0 ? -1 : 1;
     d88:	bfb4      	ite	lt
     d8a:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
     d8e:	2501      	movge	r5, #1
  SetValue((neg * _quantizer->Quantize(abs(note)).Value) << 1);
     d90:	2a00      	cmp	r2, #0
     d92:	6e21      	ldr	r1, [r4, #96]	; 0x60
     d94:	a801      	add	r0, sp, #4
     d96:	bfb8      	it	lt
     d98:	4252      	neglt	r2, r2
     d9a:	f000 ff51 	bl	1c40 <Quantizer::Quantize(int)>
  _tempTarget = Constrain(value + (_offset + _calibration)) << 15;
     d9e:	6c22      	ldr	r2, [r4, #64]	; 0x40
  SetValue((neg * _quantizer->Quantize(abs(note)).Value) << 1);
     da0:	9902      	ldr	r1, [sp, #8]
  _tempTarget = Constrain(value + (_offset + _calibration)) << 15;
     da2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  SetValue((neg * _quantizer->Quantize(abs(note)).Value) << 1);
     da4:	fb01 f505 	mul.w	r5, r1, r5
  _tempTarget = Constrain(value + (_offset + _calibration)) << 15;
     da8:	4413      	add	r3, r2
  if (_envelopeMode){
     daa:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
  _tempTarget = Constrain(value + (_offset + _calibration)) << 15;
     dae:	eb03 0345 	add.w	r3, r3, r5, lsl #1
     db2:	f303 030f 	ssat	r3, #16, r3
     db6:	03db      	lsls	r3, r3, #15
     db8:	61a3      	str	r3, [r4, #24]
  if (_envelopeMode){
     dba:	b12a      	cbz	r2, dc8 <CVOutput::SetQuantizedValue(int)+0x48>
    if (_envTarget != _tempTarget) {
     dbc:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
     dc0:	4293      	cmp	r3, r2
     dc2:	d107      	bne.n	dd4 <CVOutput::SetQuantizedValue(int)+0x54>
}
     dc4:	b005      	add	sp, #20
     dc6:	bd30      	pop	{r4, r5, pc}
    _set = true;
     dc8:	2201      	movs	r2, #1
    _target = _tempTarget;
     dca:	6163      	str	r3, [r4, #20]
    _set = true;
     dcc:	f884 2020 	strb.w	r2, [r4, #32]
}
     dd0:	b005      	add	sp, #20
     dd2:	bd30      	pop	{r4, r5, pc}
      RecomputeEnvelopes();
     dd4:	4620      	mov	r0, r4
      _envTarget = _tempTarget;
     dd6:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
}
     dda:	b005      	add	sp, #20
     ddc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      RecomputeEnvelopes();
     de0:	f7ff bd6a 	b.w	8b8 <CVOutput::RecomputeEnvelopes()>

00000de4 <CVOutput::Reset()>:
void CVOutput::Reset(){
     de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     de6:	4604      	mov	r4, r0
  SetOffset(0);
     de8:	2100      	movs	r1, #0
     dea:	f7ff fe7b 	bl	ae4 <CVOutput::SetOffset(int)>
  _tempTarget = Constrain(value + (_offset + _calibration)) << 15;
     dee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     df0:	6c21      	ldr	r1, [r4, #64]	; 0x40
  if (_envelopeMode){
     df2:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
  _tempTarget = Constrain(value + (_offset + _calibration)) << 15;
     df6:	440b      	add	r3, r1
     df8:	f303 030f 	ssat	r3, #16, r3
     dfc:	03db      	lsls	r3, r3, #15
     dfe:	61a3      	str	r3, [r4, #24]
  if (_envelopeMode){
     e00:	2a00      	cmp	r2, #0
     e02:	d079      	beq.n	ef8 <CVOutput::Reset()+0x114>
    if (_envTarget != _tempTarget) {
     e04:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
     e08:	4293      	cmp	r3, r2
     e0a:	d17a      	bne.n	f02 <CVOutput::Reset()+0x11e>
  _slewTime = TxHelper::ConvertMs(value, format);
     e0c:	2100      	movs	r1, #0
     e0e:	2001      	movs	r0, #1
     e10:	f001 ff32 	bl	2c78 <TxHelper::ConvertMs(unsigned long, short)>
  _slew = CalculateRawSlew(_slewTime, _target, _current);
     e14:	6963      	ldr	r3, [r4, #20]
     e16:	6921      	ldr	r1, [r4, #16]
  _slewTime = TxHelper::ConvertMs(value, format);
     e18:	6320      	str	r0, [r4, #48]	; 0x30
  if (value == 0 || target == current){
     e1a:	2800      	cmp	r0, #0
     e1c:	d069      	beq.n	ef2 <CVOutput::Reset()+0x10e>
     e1e:	428b      	cmp	r3, r1
     e20:	d067      	beq.n	ef2 <CVOutput::Reset()+0x10e>
    ret.Steps = value * KRATE;
     e22:	2232      	movs	r2, #50	; 0x32
    ret.Delta = (target - current) / ret.Steps;
     e24:	1a5b      	subs	r3, r3, r1
    ret.Steps = value * KRATE;
     e26:	fb00 f202 	mul.w	r2, r0, r2
    ret.Delta = (target - current) / ret.Steps;
     e2a:	fb93 f3f2 	sdiv	r3, r3, r2
    ret.Steps += 1;
     e2e:	3201      	adds	r2, #1
  _set = false;
     e30:	2100      	movs	r1, #0
  _slew = CalculateRawSlew(_slewTime, _target, _current);
     e32:	62e3      	str	r3, [r4, #44]	; 0x2c
     e34:	e9c4 0209 	strd	r0, r2, [r4, #36]	; 0x24
  _set = false;
     e38:	f884 1020 	strb.w	r1, [r4, #32]
    _quantizer->SetScale(scale);
     e3c:	6e20      	ldr	r0, [r4, #96]	; 0x60
     e3e:	f000 fef9 	bl	1c34 <Quantizer::SetScale(int)>
  _doLog = value > 0;
     e42:	f44f 427f 	mov.w	r2, #65280	; 0xff00
  if (!_oscilMode)
     e46:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
  _doLog = value > 0;
     e4a:	f8a4 20dc 	strh.w	r2, [r4, #220]	; 0xdc
  if (!_oscilMode)
     e4e:	2b00      	cmp	r3, #0
     e50:	d05d      	beq.n	f0e <CVOutput::Reset()+0x12a>
    _set = true;
     e52:	2301      	movs	r3, #1
  _oscilMode = value > 0;
     e54:	2500      	movs	r5, #0
    _dacCenter = DACCENTER;
     e56:	f647 76ff 	movw	r6, #32767	; 0x7fff
  _oscQuantizer->SetScale(scale);
     e5a:	6e60      	ldr	r0, [r4, #100]	; 0x64
    _set = true;
     e5c:	f884 3020 	strb.w	r3, [r4, #32]
  _oscQuantizer->SetScale(scale);
     e60:	4629      	mov	r1, r5
  _oscilMode = value > 0;
     e62:	f884 506c 	strb.w	r5, [r4, #108]	; 0x6c
    _dacCenter = DACCENTER;
     e66:	6726      	str	r6, [r4, #112]	; 0x70
  _oscQuantizer->SetScale(scale);
     e68:	f000 fee4 	bl	1c34 <Quantizer::SetScale(int)>
  _oscillator->SetWaveform(wave);
     e6c:	4629      	mov	r1, r5
     e6e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
     e70:	f000 fc84 	bl	177c <Oscillator::SetWaveform(int)>
  _oscillator->SetPhaseOffset(phase);
     e74:	4629      	mov	r1, r5
     e76:	6ea0      	ldr	r0, [r4, #104]	; 0x68
     e78:	f000 fcda 	bl	1830 <Oscillator::SetPhaseOffset(int)>
  _oscillator->SetRectify(mode);
     e7c:	4629      	mov	r1, r5
     e7e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
     e80:	f000 fc6a 	bl	1758 <Oscillator::SetRectify(int)>
  _oscillator->SetWidth(width);
     e84:	2132      	movs	r1, #50	; 0x32
     e86:	6ea0      	ldr	r0, [r4, #104]	; 0x68
     e88:	f000 fc3a 	bl	1700 <Oscillator::SetWidth(int)>
  _oscillator->SetPortamentoMs(TxHelper::ConvertMs(slew, format));
     e8c:	6ea7      	ldr	r7, [r4, #104]	; 0x68
     e8e:	4629      	mov	r1, r5
     e90:	4628      	mov	r0, r5
     e92:	f001 fef1 	bl	2c78 <TxHelper::ConvertMs(unsigned long, short)>
     e96:	4601      	mov	r1, r0
     e98:	4638      	mov	r0, r7
     e9a:	f000 fcd9 	bl	1850 <Oscillator::SetPortamentoMs(unsigned long)>
  if (_oscilMode)
     e9e:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
  _oscilCenter = value;
     ea2:	6765      	str	r5, [r4, #116]	; 0x74
  if (_oscilMode)
     ea4:	b103      	cbz	r3, ea8 <CVOutput::Reset()+0xc4>
     _dacCenter = DACCENTER - _oscilCenter;
     ea6:	6726      	str	r6, [r4, #112]	; 0x70
  if (eMode != _envelopeMode){
     ea8:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
     eac:	b163      	cbz	r3, ec8 <CVOutput::Reset()+0xe4>
    _envelopeMode = eMode;
     eae:	2300      	movs	r3, #0
      _target = _envTarget;
     eb0:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
    _set = true;
     eb4:	2201      	movs	r2, #1
    _envelopeMode = eMode;
     eb6:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
      _target = _envTarget;
     eba:	6161      	str	r1, [r4, #20]
      _envLoop = false;
     ebc:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
      _envelopeActive = false;
     ec0:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
    _set = true;
     ec4:	f884 2020 	strb.w	r2, [r4, #32]
  SetAttack(12, 0);
     ec8:	2200      	movs	r2, #0
     eca:	210c      	movs	r1, #12
     ecc:	4620      	mov	r0, r4
     ece:	f7ff fc97 	bl	800 <CVOutput::SetAttack(int, short)>
  SetDecay(250, 0);
     ed2:	2200      	movs	r2, #0
     ed4:	21fa      	movs	r1, #250	; 0xfa
     ed6:	4620      	mov	r0, r4
     ed8:	f7ff fcc0 	bl	85c <CVOutput::SetDecay(int, short)>
    _triggerEOR = false;
     edc:	2300      	movs	r3, #0
  _loopTimes = max(loopEnv, 0);
     ede:	2201      	movs	r2, #1
    _triggerEOR = false;
     ee0:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
    _triggerEOC = false;
     ee4:	f884 30d4 	strb.w	r3, [r4, #212]	; 0xd4
  _loopTimes = max(loopEnv, 0);
     ee8:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
  _infLoop = _loopTimes == 0;
     eec:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
}
     ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret.Delta = target - current;
     ef2:	1a5b      	subs	r3, r3, r1
    ret.Steps = 1;
     ef4:	2201      	movs	r2, #1
     ef6:	e79b      	b.n	e30 <CVOutput::Reset()+0x4c>
    _set = true;
     ef8:	2201      	movs	r2, #1
    _target = _tempTarget;
     efa:	6163      	str	r3, [r4, #20]
    _set = true;
     efc:	f884 2020 	strb.w	r2, [r4, #32]
     f00:	e784      	b.n	e0c <CVOutput::Reset()+0x28>
      RecomputeEnvelopes();
     f02:	4620      	mov	r0, r4
      _envTarget = _tempTarget;
     f04:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
      RecomputeEnvelopes();
     f08:	f7ff fcd6 	bl	8b8 <CVOutput::RecomputeEnvelopes()>
     f0c:	e77e      	b.n	e0c <CVOutput::Reset()+0x28>
    _oscillator->ResetPhase(_target);
     f0e:	6961      	ldr	r1, [r4, #20]
     f10:	6ea0      	ldr	r0, [r4, #104]	; 0x68
     f12:	f000 fc7f 	bl	1814 <Oscillator::ResetPhase(long)>
     f16:	e79c      	b.n	e52 <CVOutput::Reset()+0x6e>

00000f18 <CVOutput::CVOutput(int, int, DAC&)>:
CVOutput::CVOutput(int output, int led, DAC& dac) : Output(output, led){
     f18:	b5f0      	push	{r4, r5, r6, r7, lr}
     f1a:	b083      	sub	sp, #12
     f1c:	4604      	mov	r4, r0
     f1e:	461e      	mov	r6, r3
     f20:	f000 fe6e 	bl	1c00 <Output::Output(int, int)>
     f24:	4a3b      	ldr	r2, [pc, #236]	; (1014 <CVOutput::CVOutput(int, int, DAC&)+0xfc>)
     f26:	2500      	movs	r5, #0
     f28:	23ff      	movs	r3, #255	; 0xff
     f2a:	f104 0758 	add.w	r7, r4, #88	; 0x58
     f2e:	6022      	str	r2, [r4, #0]
     f30:	2201      	movs	r2, #1
     f32:	6125      	str	r5, [r4, #16]
     f34:	4619      	mov	r1, r3
     f36:	61e5      	str	r5, [r4, #28]
     f38:	4638      	mov	r0, r7
     f3a:	f884 5020 	strb.w	r5, [r4, #32]
#define RETRIGGERMS 5
#define DACCENTER 32767

// 50 microseconds per millisecond - 1000 / 50

struct SlewSteps {
     f3e:	62e5      	str	r5, [r4, #44]	; 0x2c
     f40:	64a5      	str	r5, [r4, #72]	; 0x48
     f42:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
     f46:	e9c4 5505 	strd	r5, r5, [r4, #20]
     f4a:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
     f4e:	e9c4 550e 	strd	r5, r5, [r4, #56]	; 0x38
     f52:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
     f56:	e9cd 3300 	strd	r3, r3, [sp]
     f5a:	6322      	str	r2, [r4, #48]	; 0x30
     f5c:	2200      	movs	r2, #0
     f5e:	6362      	str	r2, [r4, #52]	; 0x34
     f60:	461a      	mov	r2, r3
     f62:	f000 f963 	bl	122c <DAC::DAC(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     f66:	f647 73ff 	movw	r3, #32767	; 0x7fff
  _dac = dac;
     f6a:	6830      	ldr	r0, [r6, #0]
CVOutput::CVOutput(int output, int led, DAC& dac) : Output(output, led){
     f6c:	67a3      	str	r3, [r4, #120]	; 0x78
  _dac = dac;
     f6e:	65a0      	str	r0, [r4, #88]	; 0x58
  _quantizer = new Quantizer(0);
     f70:	2030      	movs	r0, #48	; 0x30
CVOutput::CVOutput(int output, int led, DAC& dac) : Output(output, led){
     f72:	f884 506c 	strb.w	r5, [r4, #108]	; 0x6c
     f76:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
     f7a:	f8a4 50a8 	strh.w	r5, [r4, #168]	; 0xa8
     f7e:	f884 50b4 	strb.w	r5, [r4, #180]	; 0xb4
     f82:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
     f86:	f884 50c0 	strb.w	r5, [r4, #192]	; 0xc0
     f8a:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
     f8e:	f884 50cc 	strb.w	r5, [r4, #204]	; 0xcc
     f92:	f884 50d4 	strb.w	r5, [r4, #212]	; 0xd4
     f96:	f884 50de 	strb.w	r5, [r4, #222]	; 0xde
     f9a:	e9c4 351c 	strd	r3, r5, [r4, #112]	; 0x70
     f9e:	230c      	movs	r3, #12
     fa0:	67e3      	str	r3, [r4, #124]	; 0x7c
     fa2:	23fa      	movs	r3, #250	; 0xfa
     fa4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
     fa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     fac:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
     fb0:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
     fb4:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
     fb8:	f44f 7380 	mov.w	r3, #256	; 0x100
     fbc:	f8a4 30dc 	strh.w	r3, [r4, #220]	; 0xdc
  _dac = dac;
     fc0:	88b3      	ldrh	r3, [r6, #4]
     fc2:	e9c4 5521 	strd	r5, r5, [r4, #132]	; 0x84
     fc6:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
     fca:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
     fce:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
CVOutput::CVOutput(int output, int led, DAC& dac) : Output(output, led){
     fd2:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
  _dac = dac;
     fd6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
  _quantizer = new Quantizer(0);
     fda:	f003 feb3 	bl	4d44 <operator new(unsigned int)>
     fde:	4606      	mov	r6, r0
     fe0:	4629      	mov	r1, r5
     fe2:	f000 fe1b 	bl	1c1c <Quantizer::Quantizer(int)>
  _oscQuantizer = new Quantizer(0);
     fe6:	2030      	movs	r0, #48	; 0x30
  _quantizer = new Quantizer(0);
     fe8:	6626      	str	r6, [r4, #96]	; 0x60
  _oscQuantizer = new Quantizer(0);
     fea:	f003 feab 	bl	4d44 <operator new(unsigned int)>
     fee:	4629      	mov	r1, r5
     ff0:	4605      	mov	r5, r0
     ff2:	f000 fe13 	bl	1c1c <Quantizer::Quantizer(int)>
  _oscillator = new Oscillator();
     ff6:	2088      	movs	r0, #136	; 0x88
  _oscQuantizer = new Quantizer(0);
     ff8:	6665      	str	r5, [r4, #100]	; 0x64
  _oscillator = new Oscillator();
     ffa:	f003 fea3 	bl	4d44 <operator new(unsigned int)>
     ffe:	4605      	mov	r5, r0
    1000:	f000 f9ba 	bl	1378 <Oscillator::Oscillator()>
  Reset();
    1004:	4620      	mov	r0, r4
  _oscillator = new Oscillator();
    1006:	66a5      	str	r5, [r4, #104]	; 0x68
  Reset();
    1008:	f7ff feec 	bl	de4 <CVOutput::Reset()>
}
    100c:	4620      	mov	r0, r4
    100e:	b003      	add	sp, #12
    1010:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1012:	bf00      	nop
    1014:	200189c4 	.word	0x200189c4

00001018 <CVOutput::TriggerEnvelope()>:
  if (_envelopeMode) {
    1018:	f890 20a9 	ldrb.w	r2, [r0, #169]	; 0xa9
    101c:	2a00      	cmp	r2, #0
    101e:	d046      	beq.n	10ae <CVOutput::TriggerEnvelope()+0x96>
    if (_decaying) {
    1020:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
    1024:	4603      	mov	r3, r0
    1026:	b332      	cbz	r2, 1076 <CVOutput::TriggerEnvelope()+0x5e>
      _slew = CalculateRawSlew(RETRIGGERMS, _lOffset, _current);
    1028:	6902      	ldr	r2, [r0, #16]
    102a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  if (value == 0 || target == current){
    102c:	4291      	cmp	r1, r2
void CVOutput::TriggerEnvelope(){
    102e:	b410      	push	{r4}
  if (value == 0 || target == current){
    1030:	d03e      	beq.n	10b0 <CVOutput::TriggerEnvelope()+0x98>
    ret.Delta = (target - current) / ret.Steps;
    1032:	1a8a      	subs	r2, r1, r2
    1034:	4c20      	ldr	r4, [pc, #128]	; (10b8 <CVOutput::TriggerEnvelope()+0xa0>)
    1036:	17d0      	asrs	r0, r2, #31
    1038:	fb84 4202 	smull	r4, r2, r4, r2
    103c:	ebc0 1222 	rsb	r2, r0, r2, asr #4
    ret.Steps += 1;
    1040:	20fb      	movs	r0, #251	; 0xfb
      _slew = CalculateRawSlew(RETRIGGERMS, _lOffset, _current);
    1042:	2405      	movs	r4, #5
    1044:	6298      	str	r0, [r3, #40]	; 0x28
    1046:	62da      	str	r2, [r3, #44]	; 0x2c
      _retrigger = true;
    1048:	2001      	movs	r0, #1
    if (!_envLoop && _loopTimes != 1){
    104a:	f893 20b3 	ldrb.w	r2, [r3, #179]	; 0xb3
      _slew = CalculateRawSlew(RETRIGGERMS, _lOffset, _current);
    104e:	625c      	str	r4, [r3, #36]	; 0x24
      _target = _lOffset;
    1050:	6159      	str	r1, [r3, #20]
      _retrigger = true;
    1052:	f883 00b2 	strb.w	r0, [r3, #178]	; 0xb2
    if (!_envLoop && _loopTimes != 1){
    1056:	b942      	cbnz	r2, 106a <CVOutput::TriggerEnvelope()+0x52>
    1058:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
    105c:	2901      	cmp	r1, #1
    105e:	d004      	beq.n	106a <CVOutput::TriggerEnvelope()+0x52>
      _envLoop = true;
    1060:	2101      	movs	r1, #1
      _loopCount = 0;
    1062:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
      _envLoop = true;
    1066:	f883 10b3 	strb.w	r1, [r3, #179]	; 0xb3
    _envelopeActive = true;
    106a:	2201      	movs	r2, #1
}
    106c:	f85d 4b04 	ldr.w	r4, [sp], #4
    _envelopeActive = true;
    1070:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
}
    1074:	4770      	bx	lr
      _target = _envTarget;
    1076:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
      _slew = _attackSlew;
    107a:	f100 0284 	add.w	r2, r0, #132	; 0x84
      _current = _lOffset;
    107e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
      _slew = _attackSlew;
    1080:	f103 0c24 	add.w	ip, r3, #36	; 0x24
      _target = _envTarget;
    1084:	6159      	str	r1, [r3, #20]
      _current = _lOffset;
    1086:	6118      	str	r0, [r3, #16]
      _slew = _attackSlew;
    1088:	ca07      	ldmia	r2, {r0, r1, r2}
    108a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    if (!_envLoop && _loopTimes != 1){
    108e:	f893 20b3 	ldrb.w	r2, [r3, #179]	; 0xb3
    1092:	b942      	cbnz	r2, 10a6 <CVOutput::TriggerEnvelope()+0x8e>
    1094:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
    1098:	2901      	cmp	r1, #1
    109a:	d004      	beq.n	10a6 <CVOutput::TriggerEnvelope()+0x8e>
      _envLoop = true;
    109c:	2101      	movs	r1, #1
      _loopCount = 0;
    109e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
      _envLoop = true;
    10a2:	f883 10b3 	strb.w	r1, [r3, #179]	; 0xb3
    _envelopeActive = true;
    10a6:	2201      	movs	r2, #1
    10a8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    10ac:	4770      	bx	lr
    10ae:	4770      	bx	lr
    ret.Delta = target - current;
    10b0:	2200      	movs	r2, #0
    ret.Steps = 1;
    10b2:	2001      	movs	r0, #1
    10b4:	e7c5      	b.n	1042 <CVOutput::TriggerEnvelope()+0x2a>
    10b6:	bf00      	nop
    10b8:	10624dd3 	.word	0x10624dd3

000010bc <CVOutput::SetENV(int)>:
  bool newState = value > 0;
    10bc:	2900      	cmp	r1, #0
void CVOutput::SetENV(int value){
    10be:	4603      	mov	r3, r0
  bool newState = value > 0;
    10c0:	bfcc      	ite	gt
    10c2:	f04f 0c01 	movgt.w	ip, #1
    10c6:	f04f 0c00 	movle.w	ip, #0
  if (newState) TriggerEnvelope();
    10ca:	dd25      	ble.n	1118 <CVOutput::SetENV(int)+0x5c>
  if (_envelopeMode) {
    10cc:	f890 20a9 	ldrb.w	r2, [r0, #169]	; 0xa9
    10d0:	b312      	cbz	r2, 1118 <CVOutput::SetENV(int)+0x5c>
    if (_decaying) {
    10d2:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
void CVOutput::SetENV(int value){
    10d6:	b500      	push	{lr}
    if (_decaying) {
    10d8:	bb0a      	cbnz	r2, 111e <CVOutput::SetENV(int)+0x62>
      _target = _envTarget;
    10da:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
      _slew = _attackSlew;
    10de:	f100 0284 	add.w	r2, r0, #132	; 0x84
      _current = _lOffset;
    10e2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
      _slew = _attackSlew;
    10e4:	f103 0e24 	add.w	lr, r3, #36	; 0x24
      _target = _envTarget;
    10e8:	6159      	str	r1, [r3, #20]
      _current = _lOffset;
    10ea:	6118      	str	r0, [r3, #16]
      _slew = _attackSlew;
    10ec:	ca07      	ldmia	r2, {r0, r1, r2}
    10ee:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
    if (!_envLoop && _loopTimes != 1){
    10f2:	f893 20b3 	ldrb.w	r2, [r3, #179]	; 0xb3
    10f6:	b942      	cbnz	r2, 110a <CVOutput::SetENV(int)+0x4e>
    10f8:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
    10fc:	2901      	cmp	r1, #1
    10fe:	d004      	beq.n	110a <CVOutput::SetENV(int)+0x4e>
      _envLoop = true;
    1100:	2101      	movs	r1, #1
      _loopCount = 0;
    1102:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
      _envLoop = true;
    1106:	f883 10b3 	strb.w	r1, [r3, #179]	; 0xb3
    _envelopeActive = true;
    110a:	2201      	movs	r2, #1
  _envelopeState = newState;
    110c:	f883 c0a8 	strb.w	ip, [r3, #168]	; 0xa8
    _envelopeActive = true;
    1110:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
}
    1114:	f85d fb04 	ldr.w	pc, [sp], #4
  _envelopeState = newState;
    1118:	f883 c0a8 	strb.w	ip, [r3, #168]	; 0xa8
    111c:	4770      	bx	lr
      _slew = CalculateRawSlew(RETRIGGERMS, _lOffset, _current);
    111e:	6902      	ldr	r2, [r0, #16]
    1120:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  if (value == 0 || target == current){
    1122:	4291      	cmp	r1, r2
    1124:	d010      	beq.n	1148 <CVOutput::SetENV(int)+0x8c>
    ret.Delta = (target - current) / ret.Steps;
    1126:	1a8a      	subs	r2, r1, r2
    1128:	4809      	ldr	r0, [pc, #36]	; (1150 <CVOutput::SetENV(int)+0x94>)
    112a:	fb80 e002 	smull	lr, r0, r0, r2
    112e:	17d2      	asrs	r2, r2, #31
    1130:	ebc2 1220 	rsb	r2, r2, r0, asr #4
    ret.Steps += 1;
    1134:	20fb      	movs	r0, #251	; 0xfb
      _slew = CalculateRawSlew(RETRIGGERMS, _lOffset, _current);
    1136:	6298      	str	r0, [r3, #40]	; 0x28
      _retrigger = true;
    1138:	2001      	movs	r0, #1
      _slew = CalculateRawSlew(RETRIGGERMS, _lOffset, _current);
    113a:	62da      	str	r2, [r3, #44]	; 0x2c
    113c:	2205      	movs	r2, #5
      _target = _lOffset;
    113e:	6159      	str	r1, [r3, #20]
      _retrigger = true;
    1140:	f883 00b2 	strb.w	r0, [r3, #178]	; 0xb2
      _slew = CalculateRawSlew(RETRIGGERMS, _lOffset, _current);
    1144:	625a      	str	r2, [r3, #36]	; 0x24
    1146:	e7d4      	b.n	10f2 <CVOutput::SetENV(int)+0x36>
    ret.Delta = target - current;
    1148:	2200      	movs	r2, #0
    ret.Steps = 1;
    114a:	2001      	movs	r0, #1
    114c:	e7f3      	b.n	1136 <CVOutput::SetENV(int)+0x7a>
    114e:	bf00      	nop
    1150:	10624dd3 	.word	0x10624dd3

00001154 <CVOutput::SetLoop(int)>:
  _infLoop = _loopTimes == 0;
    1154:	2900      	cmp	r1, #0
  _loopTimes = max(loopEnv, 0);
    1156:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
  _infLoop = _loopTimes == 0;
    115a:	bfcc      	ite	gt
    115c:	2100      	movgt	r1, #0
    115e:	2101      	movle	r1, #1
  _loopTimes = max(loopEnv, 0);
    1160:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
  _infLoop = _loopTimes == 0;
    1164:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
}
    1168:	4770      	bx	lr
    116a:	bf00      	nop

0000116c <CVOutput::SetEOR(int)>:
  if (_triggerOutputCount > 0 && trNumber >= 0 && trNumber < _triggerOutputCount){
    116c:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
    1170:	ea21 72e1 	bic.w	r2, r1, r1, asr #31
    1174:	2900      	cmp	r1, #0
    1176:	bfa8      	it	ge
    1178:	4293      	cmpge	r3, r2
    117a:	bfca      	itet	gt
    117c:	2301      	movgt	r3, #1
    117e:	2300      	movle	r3, #0
    _triggerForEOR = trNumber;
    1180:	f8c0 10d0 	strgt.w	r1, [r0, #208]	; 0xd0
    _triggerEOR = true;
    1184:	f880 30cc 	strb.w	r3, [r0, #204]	; 0xcc
}
    1188:	4770      	bx	lr
    118a:	bf00      	nop

0000118c <CVOutput::SetEOC(int)>:
  if (_triggerOutputCount > 0 && trNumber >= 0 && trNumber < _triggerOutputCount){
    118c:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
    1190:	ea21 72e1 	bic.w	r2, r1, r1, asr #31
    1194:	2900      	cmp	r1, #0
    1196:	bfa8      	it	ge
    1198:	4293      	cmpge	r3, r2
    119a:	bfca      	itet	gt
    119c:	2301      	movgt	r3, #1
    119e:	2300      	movle	r3, #0
    _triggerForEOC = trNumber;
    11a0:	f8c0 10d8 	strgt.w	r1, [r0, #216]	; 0xd8
    _triggerEOC = true;
    11a4:	f880 30d4 	strb.w	r3, [r0, #212]	; 0xd4
}
    11a8:	4770      	bx	lr
    11aa:	bf00      	nop

000011ac <CVOutput::UpdateLED()>:
  if (_updateLED || (_oscilMode && _oscillator->GetFrequency() <= 1)){
    11ac:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
void CVOutput::UpdateLED() {
    11b0:	b510      	push	{r4, lr}
    11b2:	4604      	mov	r4, r0
  if (_updateLED || (_oscilMode && _oscillator->GetFrequency() <= 1)){
    11b4:	b96b      	cbnz	r3, 11d2 <CVOutput::UpdateLED()+0x26>
    11b6:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    11ba:	b903      	cbnz	r3, 11be <CVOutput::UpdateLED()+0x12>
}
    11bc:	bd10      	pop	{r4, pc}
  if (_updateLED || (_oscilMode && _oscillator->GetFrequency() <= 1)){
    11be:	6e80      	ldr	r0, [r0, #104]	; 0x68
    11c0:	f000 fb64 	bl	188c <Oscillator::GetFrequency()>
    11c4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    11c8:	eeb4 0ae7 	vcmpe.f32	s0, s15
    11cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    11d0:	d8f4      	bhi.n	11bc <CVOutput::UpdateLED()+0x10>
    _updateLED = false;
    11d2:	2200      	movs	r2, #0
    if (_peakLED) {
    11d4:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    _updateLED = false;
    11d8:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    if (_peakLED) {
    11dc:	b1ab      	cbz	r3, 120a <CVOutput::UpdateLED()+0x5e>

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
    11de:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
      _updateLED = true;
    11e2:	2101      	movs	r1, #1
      _peakLED = false;
    11e4:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
    11e8:	2b00      	cmp	r3, #0
      _updateLED = true;
    11ea:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
    11ee:	bfb8      	it	lt
    11f0:	425b      	neglt	r3, r3
      _ledHelper = abs(_envTarget) >> 22;
    11f2:	159b      	asrs	r3, r3, #22
    _ledHelper = constrain(_ledHelper, 0, 255);
    11f4:	2bff      	cmp	r3, #255	; 0xff
    analogWrite(_led, _ledMap[_ledHelper]);
    11f6:	4a0c      	ldr	r2, [pc, #48]	; (1228 <CVOutput::UpdateLED()+0x7c>)
    11f8:	7a20      	ldrb	r0, [r4, #8]
    11fa:	bfa8      	it	ge
    11fc:	23ff      	movge	r3, #255	; 0xff
    _ledHelper = constrain(_ledHelper, 0, 255);
    11fe:	64e3      	str	r3, [r4, #76]	; 0x4c
    analogWrite(_led, _ledMap[_ledHelper]);
    1200:	5cd1      	ldrb	r1, [r2, r3]
}
    1202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    analogWrite(_led, _ledMap[_ledHelper]);
    1206:	f003 be2d 	b.w	4e64 <analogWrite>
      _ledHelper = _oscilMode ? abs(_cvHelper) >> 7 : abs(_current) >> 22;
    120a:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
    120e:	b12b      	cbz	r3, 121c <CVOutput::UpdateLED()+0x70>
    1210:	6d63      	ldr	r3, [r4, #84]	; 0x54
    1212:	2b00      	cmp	r3, #0
    1214:	bfb8      	it	lt
    1216:	425b      	neglt	r3, r3
    1218:	11db      	asrs	r3, r3, #7
    121a:	e7eb      	b.n	11f4 <CVOutput::UpdateLED()+0x48>
    121c:	6923      	ldr	r3, [r4, #16]
    121e:	2b00      	cmp	r3, #0
    1220:	bfb8      	it	lt
    1222:	425b      	neglt	r3, r3
    1224:	159b      	asrs	r3, r3, #22
    1226:	e7e5      	b.n	11f4 <CVOutput::UpdateLED()+0x48>
    1228:	200103e4 	.word	0x200103e4

0000122c <DAC::DAC(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
  _enable_pin = enable_pin;
    122c:	7001      	strb	r1, [r0, #0]
  _hw_spi = true;
    122e:	2101      	movs	r1, #1
  _sync_pin   = sync_pin;
    1230:	7042      	strb	r2, [r0, #1]
  _ldac_pin   = ldac_pin;
    1232:	7083      	strb	r3, [r0, #2]
DAC::DAC(uint8_t enable_pin, uint8_t sync_pin, uint8_t ldac_pin, uint8_t data_pin, uint8_t clock_pin)
    1234:	f89d 2000 	ldrb.w	r2, [sp]
    1238:	f89d 3004 	ldrb.w	r3, [sp, #4]
  _hw_spi = true;
    123c:	7141      	strb	r1, [r0, #5]
  _data_pin   = data_pin;
    123e:	70c2      	strb	r2, [r0, #3]
  _clock_pin  = clock_pin;
    1240:	7103      	strb	r3, [r0, #4]
}
    1242:	4770      	bx	lr

00001244 <DAC::init()>:
{ 
    1244:	b510      	push	{r4, lr}
    1246:	4604      	mov	r4, r0
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1248:	2110      	movs	r1, #16
    124a:	481b      	ldr	r0, [pc, #108]	; (12b8 <DAC::init()+0x74>)
    124c:	f005 f832 	bl	62b4 <usb_serial_write>
    pinMode(_sync_pin, OUTPUT);
    1250:	2101      	movs	r1, #1
    1252:	7860      	ldrb	r0, [r4, #1]
    1254:	f003 f9f4 	bl	4640 <pinMode>
    digitalWrite(_sync_pin, HIGH);
    1258:	2101      	movs	r1, #1
    125a:	7860      	ldrb	r0, [r4, #1]
    125c:	f003 f9c6 	bl	45ec <digitalWrite>
    pinMode(_ldac_pin, OUTPUT);
    1260:	2101      	movs	r1, #1
    1262:	78a0      	ldrb	r0, [r4, #2]
    1264:	f003 f9ec 	bl	4640 <pinMode>
    digitalWrite(_ldac_pin, LOW);
    1268:	2100      	movs	r1, #0
    126a:	78a0      	ldrb	r0, [r4, #2]
    126c:	f003 f9be 	bl	45ec <digitalWrite>
  if (_hw_spi)
    1270:	7963      	ldrb	r3, [r4, #5]
    1272:	b1b3      	cbz	r3, 12a2 <DAC::init()+0x5e>
    1274:	210d      	movs	r1, #13
    1276:	4811      	ldr	r0, [pc, #68]	; (12bc <DAC::init()+0x78>)
    1278:	f005 f81c 	bl	62b4 <usb_serial_write>
    SPI.begin();
    127c:	4810      	ldr	r0, [pc, #64]	; (12c0 <DAC::init()+0x7c>)
    127e:	f002 fd73 	bl	3d68 <SPIClass::begin()>
    SPI.setBitOrder(MSBFIRST);
    1282:	2101      	movs	r1, #1
    1284:	480e      	ldr	r0, [pc, #56]	; (12c0 <DAC::init()+0x7c>)
    1286:	f002 fed3 	bl	4030 <SPIClass::setBitOrder(unsigned char)>

	// This function is deprecated.	 New applications should use
	// beginTransaction() to configure SPI settings.
	void setClockDivider(uint8_t clockDiv) {
		if (clockDiv == SPI_CLOCK_DIV2) {
			setClockDivider_noInline(12000000);
    128a:	490e      	ldr	r1, [pc, #56]	; (12c4 <DAC::init()+0x80>)
    128c:	480c      	ldr	r0, [pc, #48]	; (12c0 <DAC::init()+0x7c>)
    128e:	f002 fe85 	bl	3f9c <SPIClass::setClockDivider_noInline(unsigned long)>
    Serial.printf("Bitorder: %d; Clock Divider: %d\n", MSBFIRST, SPI_CLOCK_DIV2);
    1292:	2304      	movs	r3, #4
    1294:	2201      	movs	r2, #1
    1296:	490c      	ldr	r1, [pc, #48]	; (12c8 <DAC::init()+0x84>)
    1298:	480c      	ldr	r0, [pc, #48]	; (12cc <DAC::init()+0x88>)
}
    129a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.printf("Bitorder: %d; Clock Divider: %d\n", MSBFIRST, SPI_CLOCK_DIV2);
    129e:	f003 b88f 	b.w	43c0 <Print::printf(char const*, ...)>
    pinMode(_clock_pin, OUTPUT);
    12a2:	7920      	ldrb	r0, [r4, #4]
    12a4:	2101      	movs	r1, #1
    12a6:	f003 f9cb 	bl	4640 <pinMode>
    pinMode(_data_pin, OUTPUT);
    12aa:	78e0      	ldrb	r0, [r4, #3]
    12ac:	2101      	movs	r1, #1
}
    12ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    pinMode(_data_pin, OUTPUT);
    12b2:	f003 b9c5 	b.w	4640 <pinMode>
    12b6:	bf00      	nop
    12b8:	2001038c 	.word	0x2001038c
    12bc:	200103a0 	.word	0x200103a0
    12c0:	200191e8 	.word	0x200191e8
    12c4:	00b71b00 	.word	0x00b71b00
    12c8:	200103b0 	.word	0x200103b0
    12cc:	20019238 	.word	0x20019238

000012d0 <DAC::write(unsigned long)>:
{ 
    12d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    12d2:	4604      	mov	r4, r0
    12d4:	460d      	mov	r5, r1
    digitalWrite(_enable_pin, LOW);
    12d6:	7800      	ldrb	r0, [r0, #0]
    12d8:	2100      	movs	r1, #0
    12da:	f003 f987 	bl	45ec <digitalWrite>
    digitalWrite(_sync_pin, LOW);
    12de:	2100      	movs	r1, #0
    12e0:	7860      	ldrb	r0, [r4, #1]
  datahigh = (uint8_t) ((data >> 16) & 0xFF); 
    12e2:	0c2f      	lsrs	r7, r5, #16
    digitalWrite(_sync_pin, LOW);
    12e4:	f003 f982 	bl	45ec <digitalWrite>
  if (_hw_spi)
    12e8:	7963      	ldrb	r3, [r4, #5]
  datamid  = (uint8_t) ((data >>  8) & 0xFF);
    12ea:	0a2e      	lsrs	r6, r5, #8
  if (_hw_spi)
    12ec:	b303      	cbz	r3, 1330 <DAC::write(unsigned long)+0x60>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    12ee:	4b18      	ldr	r3, [pc, #96]	; (1350 <DAC::write(unsigned long)+0x80>)
    12f0:	b2ff      	uxtb	r7, r7
    12f2:	681b      	ldr	r3, [r3, #0]
		port().TDR = data;
    12f4:	665f      	str	r7, [r3, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    12f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    12f8:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    12fc:	d0fb      	beq.n	12f6 <DAC::write(unsigned long)+0x26>
    12fe:	b2f6      	uxtb	r6, r6
    1300:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		port().TDR = data;
    1302:	665e      	str	r6, [r3, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1304:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1306:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    130a:	d0fb      	beq.n	1304 <DAC::write(unsigned long)+0x34>
    130c:	b2ed      	uxtb	r5, r5
    130e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		port().TDR = data;
    1310:	665d      	str	r5, [r3, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    1312:	6dda      	ldr	r2, [r3, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    1314:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
    1318:	d0fb      	beq.n	1312 <DAC::write(unsigned long)+0x42>
    131a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    digitalWrite(_sync_pin, HIGH);
    131c:	7860      	ldrb	r0, [r4, #1]
    131e:	2101      	movs	r1, #1
    1320:	f003 f964 	bl	45ec <digitalWrite>
    digitalWrite(_enable_pin, HIGH);
    1324:	7820      	ldrb	r0, [r4, #0]
    1326:	2101      	movs	r1, #1
}
    1328:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(_enable_pin, HIGH);
    132c:	f003 b95e 	b.w	45ec <digitalWrite>
                        shiftOut_msbFirst(dataPin, clockPin, value);
    1330:	b2fa      	uxtb	r2, r7
    1332:	7921      	ldrb	r1, [r4, #4]
    1334:	78e0      	ldrb	r0, [r4, #3]
    1336:	f003 fa69 	bl	480c <shiftOut_msbFirst>
    133a:	7921      	ldrb	r1, [r4, #4]
    133c:	b2f2      	uxtb	r2, r6
    133e:	78e0      	ldrb	r0, [r4, #3]
    1340:	f003 fa64 	bl	480c <shiftOut_msbFirst>
    1344:	7921      	ldrb	r1, [r4, #4]
    1346:	b2ea      	uxtb	r2, r5
    1348:	78e0      	ldrb	r0, [r4, #3]
    134a:	f003 fa5f 	bl	480c <shiftOut_msbFirst>
}
    134e:	e7e5      	b.n	131c <DAC::write(unsigned long)+0x4c>
    1350:	200191e8 	.word	0x200191e8

00001354 <DAC::setReference(unsigned short)>:
  write(data);
    1354:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
    1358:	f7ff bfba 	b.w	12d0 <DAC::write(unsigned long)>

0000135c <DAC::writeChannel(unsigned char, unsigned short)>:
  if (channel == DAC_CHANNEL_A)
    135c:	1e4b      	subs	r3, r1, #1
    135e:	b2db      	uxtb	r3, r3
    1360:	2b04      	cmp	r3, #4
    1362:	d900      	bls.n	1366 <DAC::writeChannel(unsigned char, unsigned short)+0xa>
}
    1364:	4770      	bx	lr
  data |= value;
    1366:	4903      	ldr	r1, [pc, #12]	; (1374 <DAC::writeChannel(unsigned char, unsigned short)+0x18>)
    1368:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  write (data);
    136c:	4311      	orrs	r1, r2
    136e:	f7ff bfaf 	b.w	12d0 <DAC::write(unsigned long)>
    1372:	bf00      	nop
    1374:	20000378 	.word	0x20000378

00001378 <Oscillator::Oscillator()>:
Oscillator::Oscillator() {
    1378:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 13f0 <Oscillator::Oscillator()+0x78>
    137c:	b410      	push	{r4}
    137e:	4920      	ldr	r1, [pc, #128]	; (1400 <Oscillator::Oscillator()+0x88>)
    1380:	f04f 547c 	mov.w	r4, #1056964608	; 0x3f000000
    1384:	4603      	mov	r3, r0
    1386:	2200      	movs	r2, #0
    1388:	6444      	str	r4, [r0, #68]	; 0x44
    138a:	f04f 0c01 	mov.w	ip, #1
    138e:	f44f 7480 	mov.w	r4, #256	; 0x100
    1392:	ed80 7b14 	vstr	d7, [r0, #80]	; 0x50
    1396:	c903      	ldmia	r1, {r0, r1}
    1398:	ed9f 7b17 	vldr	d7, [pc, #92]	; 13f8 <Oscillator::Oscillator()+0x80>
    139c:	e883 0003 	stmia.w	r3, {r0, r1}
    13a0:	2100      	movs	r1, #0
    13a2:	2064      	movs	r0, #100	; 0x64
    13a4:	f883 c00a 	strb.w	ip, [r3, #10]
    13a8:	61d9      	str	r1, [r3, #28]
    13aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    13ae:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    13b2:	641c      	str	r4, [r3, #64]	; 0x40
    13b4:	f8a3 4068 	strh.w	r4, [r3, #104]	; 0x68
    13b8:	811a      	strh	r2, [r3, #8]
}
    13ba:	f85d 4b04 	ldr.w	r4, [sp], #4
Oscillator::Oscillator() {
    13be:	751a      	strb	r2, [r3, #20]
    13c0:	619a      	str	r2, [r3, #24]
    13c2:	631a      	str	r2, [r3, #48]	; 0x30
    13c4:	6499      	str	r1, [r3, #72]	; 0x48
    13c6:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
    13ca:	e9c3 2003 	strd	r2, r0, [r3, #12]
    13ce:	e9c3 2208 	strd	r2, r2, [r3, #32]
}
    13d2:	4618      	mov	r0, r3
Oscillator::Oscillator() {
    13d4:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    13d8:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    13dc:	e9c3 2218 	strd	r2, r2, [r3, #96]	; 0x60
    13e0:	e9c3 221f 	strd	r2, r2, [r3, #124]	; 0x7c
    13e4:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70
}
    13e8:	4770      	bx	lr
    13ea:	bf00      	nop
    13ec:	f3af 8000 	nop.w
    13f0:	00000000 	.word	0x00000000
    13f4:	3e800000 	.word	0x3e800000
	...
    1400:	20000370 	.word	0x20000370
    1404:	00000000 	.word	0x00000000

00001408 <Oscillator::SetFrequency(int)>:
/*
 * Sets the freqency via an integer
 */
void Oscillator::SetFrequency(int freq) {
  freq = constrain(freq, 0, SAMPLINGRATEDIV2);
  SetFreq(freq);
    1408:	f246 13a8 	movw	r3, #25000	; 0x61a8
  _ulstep = (int)((freq / SAMPLINGRATE) * FULLPHASE);
    140c:	eddf 5a10 	vldr	s11, [pc, #64]	; 1450 <Oscillator::SetFrequency(int)+0x48>
  SetFreq(freq);
    1410:	4299      	cmp	r1, r3
    1412:	bfa8      	it	ge
    1414:	4619      	movge	r1, r3
  _portamento = false;
    1416:	2300      	movs	r3, #0
  SetFreq(freq);
    1418:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
  _portamento = false;
    141c:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
  SetFreq(freq);
    1420:	ee07 1a90 	vmov	s15, r1
    1424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  _ulstep = (int)((freq / SAMPLINGRATE) * FULLPHASE);
    1428:	ed9f 6b07 	vldr	d6, [pc, #28]	; 1448 <Oscillator::SetFrequency(int)+0x40>
    142c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
  _frequency = freq;
    1430:	edc0 7a07 	vstr	s15, [r0, #28]
  _ulstep = (int)((freq / SAMPLINGRATE) * FULLPHASE);
    1434:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    1438:	ee27 7b06 	vmul.f64	d7, d7, d6
    143c:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    1440:	ed80 7a08 	vstr	s14, [r0, #32]
}
    1444:	4770      	bx	lr
    1446:	bf00      	nop
    1448:	00000000 	.word	0x00000000
    144c:	41f00000 	.word	0x41f00000
    1450:	47435000 	.word	0x47435000
    1454:	00000000 	.word	0x00000000

00001458 <Oscillator::TargetFrequency(int)>:
/*
 * Targets the freqency via an integer (when portamento is active)
 */
void Oscillator::TargetFrequency(int freq){
  freq = constrain(freq, 0, SAMPLINGRATEDIV2);
  TargetFreq(freq);
    1458:	f246 13a8 	movw	r3, #25000	; 0x61a8
  if (_stepsCalculated == 0){
    145c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  _ulstep = (int)((freq / SAMPLINGRATE) * FULLPHASE);
    145e:	eddf 5a22 	vldr	s11, [pc, #136]	; 14e8 <Oscillator::TargetFrequency(int)+0x90>
  TargetFreq(freq);
    1462:	4299      	cmp	r1, r3
    1464:	bfa8      	it	ge
    1466:	4619      	movge	r1, r3
    1468:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    146c:	ee07 1a90 	vmov	s15, r1
    1470:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  _ulstep = (int)((freq / SAMPLINGRATE) * FULLPHASE);
    1474:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 14e0 <Oscillator::TargetFrequency(int)+0x88>
  _frequency = freq;
    1478:	edc0 7a07 	vstr	s15, [r0, #28]
  if (_stepsCalculated == 0){
    147c:	b962      	cbnz	r2, 1498 <Oscillator::TargetFrequency(int)+0x40>
  _ulstep = (int)((freq / SAMPLINGRATE) * FULLPHASE);
    147e:	ee87 7aa5 	vdiv.f32	s14, s15, s11
  _portamento = false;
    1482:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
  _ulstep = (int)((freq / SAMPLINGRATE) * FULLPHASE);
    1486:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    148a:	ee27 7b06 	vmul.f64	d7, d7, d6
    148e:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    1492:	ed80 7a08 	vstr	s14, [r0, #32]
}
    1496:	4770      	bx	lr
    _targetUlstep = (int)((freq / SAMPLINGRATE) * FULLPHASE);
    1498:	ee87 7aa5 	vdiv.f32	s14, s15, s11
    if (_targetUlstep > _ulstep){
    149c:	6a01      	ldr	r1, [r0, #32]
    _targetUlstep = (int)((freq / SAMPLINGRATE) * FULLPHASE);
    149e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    14a2:	ee27 7b06 	vmul.f64	d7, d7, d6
    14a6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    14aa:	ee17 3a90 	vmov	r3, s15
    14ae:	edc0 7a16 	vstr	s15, [r0, #88]	; 0x58
    if (_targetUlstep > _ulstep){
    14b2:	428b      	cmp	r3, r1
    14b4:	d80c      	bhi.n	14d0 <Oscillator::TargetFrequency(int)+0x78>
      _delta = (_ulstep - _targetUlstep) / _stepsCalculated;
    14b6:	1ac9      	subs	r1, r1, r3
    14b8:	f04f 0c00 	mov.w	ip, #0
    14bc:	fbb1 f1f2 	udiv	r1, r1, r2
    _portamento = true;
    14c0:	2301      	movs	r3, #1
      _delta = (_targetUlstep - _ulstep) / _stepsCalculated;
    14c2:	6641      	str	r1, [r0, #100]	; 0x64
      _sign = true;
    14c4:	f880 c069 	strb.w	ip, [r0, #105]	; 0x69
    _steps = _stepsCalculated;
    14c8:	6602      	str	r2, [r0, #96]	; 0x60
    _portamento = true;
    14ca:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
}
    14ce:	4770      	bx	lr
      _delta = (_targetUlstep - _ulstep) / _stepsCalculated;
    14d0:	1a5b      	subs	r3, r3, r1
    14d2:	f04f 0c01 	mov.w	ip, #1
    14d6:	fbb3 f1f2 	udiv	r1, r3, r2
      _sign = true;
    14da:	e7f1      	b.n	14c0 <Oscillator::TargetFrequency(int)+0x68>
    14dc:	f3af 8000 	nop.w
    14e0:	00000000 	.word	0x00000000
    14e4:	41f00000 	.word	0x41f00000
    14e8:	47435000 	.word	0x47435000
    14ec:	00000000 	.word	0x00000000

000014f0 <Oscillator::SetFloatFrequency(float)>:

/*
 * Sets a floating point frequency
 */
void Oscillator::SetFloatFrequency(float freq) {
  freq = constrain(freq, 0, SAMPLINGRATEDIV2);
    14f0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    14f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    14f8:	d420      	bmi.n	153c <Oscillator::SetFloatFrequency(float)+0x4c>
    14fa:	eddf 7a15 	vldr	s15, [pc, #84]	; 1550 <Oscillator::SetFloatFrequency(float)+0x60>
    14fe:	eeb4 0ae7 	vcmpe.f32	s0, s15
    1502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1506:	dc14      	bgt.n	1532 <Oscillator::SetFloatFrequency(float)+0x42>
  _ulstep = (int)((freq / SAMPLINGRATE) * FULLPHASE);
    1508:	eddf 7a12 	vldr	s15, [pc, #72]	; 1554 <Oscillator::SetFloatFrequency(float)+0x64>
    150c:	ee80 7a27 	vdiv.f32	s14, s0, s15
    1510:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 1548 <Oscillator::SetFloatFrequency(float)+0x58>
    1514:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    1518:	ee27 7b06 	vmul.f64	d7, d7, d6
    151c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    1520:	ee17 3a90 	vmov	r3, s15
  _portamento = false;
    1524:	2200      	movs	r2, #0
  _frequency = freq;
    1526:	ed80 0a07 	vstr	s0, [r0, #28]
  _ulstep = (int)((freq / SAMPLINGRATE) * FULLPHASE);
    152a:	6203      	str	r3, [r0, #32]
  _portamento = false;
    152c:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
  SetFreq(freq);
}
    1530:	4770      	bx	lr
  freq = constrain(freq, 0, SAMPLINGRATEDIV2);
    1532:	eeb0 0a67 	vmov.f32	s0, s15
    1536:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    153a:	e7f3      	b.n	1524 <Oscillator::SetFloatFrequency(float)+0x34>
    153c:	2300      	movs	r3, #0
    153e:	ed9f 0a06 	vldr	s0, [pc, #24]	; 1558 <Oscillator::SetFloatFrequency(float)+0x68>
    1542:	e7ef      	b.n	1524 <Oscillator::SetFloatFrequency(float)+0x34>
    1544:	f3af 8000 	nop.w
    1548:	00000000 	.word	0x00000000
    154c:	41f00000 	.word	0x41f00000
    1550:	46c35000 	.word	0x46c35000
    1554:	47435000 	.word	0x47435000
	...

00001560 <Oscillator::TargetFloatFrequency(float)>:

/*
 * Tarets a floating point frequency (when portamento is active)
 */
void Oscillator::TargetFloatFrequency(float freq){
  freq = constrain(freq, 0, SAMPLINGRATEDIV2);
    1560:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
void Oscillator::TargetFloatFrequency(float freq){
    1564:	b410      	push	{r4}
  freq = constrain(freq, 0, SAMPLINGRATEDIV2);
    1566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    156a:	d43b      	bmi.n	15e4 <Oscillator::TargetFloatFrequency(float)+0x84>
    156c:	eddf 7a28 	vldr	s15, [pc, #160]	; 1610 <Oscillator::TargetFloatFrequency(float)+0xb0>
    1570:	eeb4 0ae7 	vcmpe.f32	s0, s15
    1574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1578:	dc24      	bgt.n	15c4 <Oscillator::TargetFloatFrequency(float)+0x64>
  _ulstep = (int)((freq / SAMPLINGRATE) * FULLPHASE);
    157a:	eddf 7a26 	vldr	s15, [pc, #152]	; 1614 <Oscillator::TargetFloatFrequency(float)+0xb4>
  if (_stepsCalculated == 0){
    157e:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
  _ulstep = (int)((freq / SAMPLINGRATE) * FULLPHASE);
    1580:	ee80 7a27 	vdiv.f32	s14, s0, s15
  _frequency = freq;
    1584:	ed80 0a07 	vstr	s0, [r0, #28]
  _ulstep = (int)((freq / SAMPLINGRATE) * FULLPHASE);
    1588:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 1608 <Oscillator::TargetFloatFrequency(float)+0xa8>
    158c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    1590:	ee27 7b06 	vmul.f64	d7, d7, d6
    1594:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    1598:	ee17 3a90 	vmov	r3, s15
  if (_stepsCalculated == 0){
    159c:	b1d9      	cbz	r1, 15d6 <Oscillator::TargetFloatFrequency(float)+0x76>
    if (_targetUlstep > _ulstep){
    159e:	6a02      	ldr	r2, [r0, #32]
    _targetUlstep = (int)((freq / SAMPLINGRATE) * FULLPHASE);
    15a0:	6583      	str	r3, [r0, #88]	; 0x58
    if (_targetUlstep > _ulstep){
    15a2:	429a      	cmp	r2, r3
    15a4:	d228      	bcs.n	15f8 <Oscillator::TargetFloatFrequency(float)+0x98>
      _delta = (_targetUlstep - _ulstep) / _stepsCalculated;
    15a6:	1a9b      	subs	r3, r3, r2
    15a8:	f04f 0c01 	mov.w	ip, #1
    15ac:	fbb3 f2f1 	udiv	r2, r3, r1
    _portamento = true;
    15b0:	2301      	movs	r3, #1
  TargetFreq(freq);
}
    15b2:	f85d 4b04 	ldr.w	r4, [sp], #4
      _delta = (_targetUlstep - _ulstep) / _stepsCalculated;
    15b6:	6642      	str	r2, [r0, #100]	; 0x64
      _sign = true;
    15b8:	f880 c069 	strb.w	ip, [r0, #105]	; 0x69
    _steps = _stepsCalculated;
    15bc:	6601      	str	r1, [r0, #96]	; 0x60
    _portamento = true;
    15be:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
}
    15c2:	4770      	bx	lr
  freq = constrain(freq, 0, SAMPLINGRATEDIV2);
    15c4:	eeb0 0a67 	vmov.f32	s0, s15
  if (_stepsCalculated == 0){
    15c8:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    15ca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  _frequency = freq;
    15ce:	ed80 0a07 	vstr	s0, [r0, #28]
  if (_stepsCalculated == 0){
    15d2:	2900      	cmp	r1, #0
    15d4:	d1e3      	bne.n	159e <Oscillator::TargetFloatFrequency(float)+0x3e>
  _portamento = false;
    15d6:	2200      	movs	r2, #0
}
    15d8:	f85d 4b04 	ldr.w	r4, [sp], #4
  _ulstep = (int)((freq / SAMPLINGRATE) * FULLPHASE);
    15dc:	6203      	str	r3, [r0, #32]
  _portamento = false;
    15de:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
}
    15e2:	4770      	bx	lr
  _frequency = freq;
    15e4:	2200      	movs	r2, #0
  if (_stepsCalculated == 0){
    15e6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  _frequency = freq;
    15e8:	61c2      	str	r2, [r0, #28]
  if (_stepsCalculated == 0){
    15ea:	2b00      	cmp	r3, #0
    15ec:	d0f3      	beq.n	15d6 <Oscillator::TargetFloatFrequency(float)+0x76>
    _targetUlstep = (int)((freq / SAMPLINGRATE) * FULLPHASE);
    15ee:	2400      	movs	r4, #0
    if (_targetUlstep > _ulstep){
    15f0:	4619      	mov	r1, r3
    15f2:	6a02      	ldr	r2, [r0, #32]
    15f4:	4623      	mov	r3, r4
    _targetUlstep = (int)((freq / SAMPLINGRATE) * FULLPHASE);
    15f6:	6584      	str	r4, [r0, #88]	; 0x58
      _delta = (_ulstep - _targetUlstep) / _stepsCalculated;
    15f8:	1ad2      	subs	r2, r2, r3
    15fa:	f04f 0c00 	mov.w	ip, #0
    15fe:	fbb2 f2f1 	udiv	r2, r2, r1
      _sign = false;
    1602:	e7d5      	b.n	15b0 <Oscillator::TargetFloatFrequency(float)+0x50>
    1604:	f3af 8000 	nop.w
    1608:	00000000 	.word	0x00000000
    160c:	41f00000 	.word	0x41f00000
    1610:	46c35000 	.word	0x46c35000
    1614:	47435000 	.word	0x47435000

00001618 <Oscillator::SetLFO(int)>:
/*
 * Sets the LFO in millihertz (10^3 Hz)
 */
void Oscillator::SetLFO(int millihertz) {
  millihertz = constrain(millihertz, 0, 32767);
  SetFreq((float)millihertz / 1000.);
    1618:	f381 010f 	usat	r1, #15, r1
    161c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 1660 <Oscillator::SetLFO(int)+0x48>
  _ulstep = (int)((freq / SAMPLINGRATE) * FULLPHASE);
    1620:	ed9f 6a10 	vldr	s12, [pc, #64]	; 1664 <Oscillator::SetLFO(int)+0x4c>
  _portamento = false;
    1624:	2300      	movs	r3, #0
  SetFreq((float)millihertz / 1000.);
    1626:	ee07 1a90 	vmov	s15, r1
  _portamento = false;
    162a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
  SetFreq((float)millihertz / 1000.);
    162e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  _ulstep = (int)((freq / SAMPLINGRATE) * FULLPHASE);
    1632:	ed9f 5b09 	vldr	d5, [pc, #36]	; 1658 <Oscillator::SetLFO(int)+0x40>
  SetFreq((float)millihertz / 1000.);
    1636:	eec7 6a87 	vdiv.f32	s13, s15, s14
  _ulstep = (int)((freq / SAMPLINGRATE) * FULLPHASE);
    163a:	ee86 7a86 	vdiv.f32	s14, s13, s12
  _frequency = freq;
    163e:	edc0 6a07 	vstr	s13, [r0, #28]
  _ulstep = (int)((freq / SAMPLINGRATE) * FULLPHASE);
    1642:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    1646:	ee27 7b05 	vmul.f64	d7, d7, d5
    164a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    164e:	ed80 7a08 	vstr	s14, [r0, #32]
}
    1652:	4770      	bx	lr
    1654:	f3af 8000 	nop.w
    1658:	00000000 	.word	0x00000000
    165c:	41f00000 	.word	0x41f00000
    1660:	447a0000 	.word	0x447a0000
    1664:	47435000 	.word	0x47435000

00001668 <Oscillator::TargetLFO(int)>:
/*
 * Tarets the LFO in millihertz (10^3 Hz)
 */
void Oscillator::TargetLFO(int millihertz) {
  millihertz = constrain(millihertz, 0, 32767);
  TargetFreq((float)millihertz / 1000.);
    1668:	f381 010f 	usat	r1, #15, r1
    166c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 16f8 <Oscillator::TargetLFO(int)+0x90>
  if (_stepsCalculated == 0){
    1670:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  TargetFreq((float)millihertz / 1000.);
    1672:	ee07 1a90 	vmov	s15, r1
    1676:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  _ulstep = (int)((freq / SAMPLINGRATE) * FULLPHASE);
    167a:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 16f0 <Oscillator::TargetLFO(int)+0x88>
  TargetFreq((float)millihertz / 1000.);
    167e:	eec7 6a87 	vdiv.f32	s13, s15, s14
  _ulstep = (int)((freq / SAMPLINGRATE) * FULLPHASE);
    1682:	eddf 7a1e 	vldr	s15, [pc, #120]	; 16fc <Oscillator::TargetLFO(int)+0x94>
  _frequency = freq;
    1686:	edc0 6a07 	vstr	s13, [r0, #28]
  if (_stepsCalculated == 0){
    168a:	b962      	cbnz	r2, 16a6 <Oscillator::TargetLFO(int)+0x3e>
  _ulstep = (int)((freq / SAMPLINGRATE) * FULLPHASE);
    168c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  _portamento = false;
    1690:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
  _ulstep = (int)((freq / SAMPLINGRATE) * FULLPHASE);
    1694:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    1698:	ee27 7b05 	vmul.f64	d7, d7, d5
    169c:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    16a0:	ed80 7a08 	vstr	s14, [r0, #32]
}
    16a4:	4770      	bx	lr
    _targetUlstep = (int)((freq / SAMPLINGRATE) * FULLPHASE);
    16a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    if (_targetUlstep > _ulstep){
    16aa:	6a01      	ldr	r1, [r0, #32]
    _targetUlstep = (int)((freq / SAMPLINGRATE) * FULLPHASE);
    16ac:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    16b0:	ee27 7b05 	vmul.f64	d7, d7, d5
    16b4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    16b8:	ee17 3a90 	vmov	r3, s15
    16bc:	edc0 7a16 	vstr	s15, [r0, #88]	; 0x58
    if (_targetUlstep > _ulstep){
    16c0:	428b      	cmp	r3, r1
    16c2:	d80c      	bhi.n	16de <Oscillator::TargetLFO(int)+0x76>
      _delta = (_ulstep - _targetUlstep) / _stepsCalculated;
    16c4:	1ac9      	subs	r1, r1, r3
    16c6:	f04f 0c00 	mov.w	ip, #0
    16ca:	fbb1 f1f2 	udiv	r1, r1, r2
    _portamento = true;
    16ce:	2301      	movs	r3, #1
      _delta = (_targetUlstep - _ulstep) / _stepsCalculated;
    16d0:	6641      	str	r1, [r0, #100]	; 0x64
      _sign = true;
    16d2:	f880 c069 	strb.w	ip, [r0, #105]	; 0x69
    _steps = _stepsCalculated;
    16d6:	6602      	str	r2, [r0, #96]	; 0x60
    _portamento = true;
    16d8:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
}
    16dc:	4770      	bx	lr
      _delta = (_targetUlstep - _ulstep) / _stepsCalculated;
    16de:	1a5b      	subs	r3, r3, r1
    16e0:	f04f 0c01 	mov.w	ip, #1
    16e4:	fbb3 f1f2 	udiv	r1, r3, r2
      _sign = true;
    16e8:	e7f1      	b.n	16ce <Oscillator::TargetLFO(int)+0x66>
    16ea:	bf00      	nop
    16ec:	f3af 8000 	nop.w
    16f0:	00000000 	.word	0x00000000
    16f4:	41f00000 	.word	0x41f00000
    16f8:	447a0000 	.word	0x447a0000
    16fc:	47435000 	.word	0x47435000

00001700 <Oscillator::SetWidth(int)>:
/*
 * Sets the width of the pulse wave (0-100)
 */
void Oscillator::SetWidth(int width) {
  width = constrain(width, 0, 100);
  _fWidth = (float)width / 100.;
    1700:	2964      	cmp	r1, #100	; 0x64
    1702:	ed9f 7a13 	vldr	s14, [pc, #76]	; 1750 <Oscillator::SetWidth(int)+0x50>
  _ulWidth = _fWidth * (FULLPHASE - 1);
  _width = _fWidth * (TABLERANGE - 1);
    1706:	eddf 6a13 	vldr	s13, [pc, #76]	; 1754 <Oscillator::SetWidth(int)+0x54>
  _fWidth = (float)width / 100.;
    170a:	bfa8      	it	ge
    170c:	2164      	movge	r1, #100	; 0x64
    170e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    1712:	ee07 1a90 	vmov	s15, r1
    1716:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  _ulWidth = _fWidth * (FULLPHASE - 1);
    171a:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 1748 <Oscillator::SetWidth(int)+0x48>
  _fWidth = (float)width / 100.;
    171e:	ee87 6a87 	vdiv.f32	s12, s15, s14
  _ulWidth = _fWidth * (FULLPHASE - 1);
    1722:	eeb7 7ac6 	vcvt.f64.f32	d7, s12
  _fWidth = (float)width / 100.;
    1726:	ed80 6a11 	vstr	s12, [r0, #68]	; 0x44
  _width = _fWidth * (TABLERANGE - 1);
    172a:	ee66 6a26 	vmul.f32	s13, s12, s13
  _ulWidth = _fWidth * (FULLPHASE - 1);
    172e:	ee27 7b05 	vmul.f64	d7, d7, d5
  _width = _fWidth * (TABLERANGE - 1);
    1732:	eefd 6ae6 	vcvt.s32.f32	s13, s13
  _ulWidth = _fWidth * (FULLPHASE - 1);
    1736:	eebc 7bc7 	vcvt.u32.f64	s14, d7
  _width = _fWidth * (TABLERANGE - 1);
    173a:	edc0 6a10 	vstr	s13, [r0, #64]	; 0x40
  _ulWidth = _fWidth * (FULLPHASE - 1);
    173e:	ed80 7a12 	vstr	s14, [r0, #72]	; 0x48

  #ifdef DEBUG
  Serial.printf("width: %d; _fWidth: %f; _ulWidth: %lu; _width: %d\n",width, _fWidth, _ulWidth, _width);
  #endif
  
}
    1742:	4770      	bx	lr
    1744:	f3af 8000 	nop.w
    1748:	ffe00000 	.word	0xffe00000
    174c:	41efffff 	.word	0x41efffff
    1750:	42c80000 	.word	0x42c80000
    1754:	43ff8000 	.word	0x43ff8000

00001758 <Oscillator::SetRectify(int)>:
 *  0 - no rectification
 * +1 - half positive rectification (ignores the negative values)
 * +2 - full positive rectification ((abs)value)
 */
void Oscillator::SetRectify(int mode) {
  _rectify = constrain(mode, -2, 2);
    1758:	2902      	cmp	r1, #2
    175a:	f06f 0301 	mvn.w	r3, #1
    175e:	bfa8      	it	ge
    1760:	2102      	movge	r1, #2
    1762:	4299      	cmp	r1, r3
    1764:	bfb8      	it	lt
    1766:	4619      	movlt	r1, r3
    1768:	b249      	sxtb	r1, r1
  _doRect = _rectify != 0;
    176a:	1e0b      	subs	r3, r1, #0
  _rectify = constrain(mode, -2, 2);
    176c:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
  _doRect = _rectify != 0;
    1770:	bf18      	it	ne
    1772:	2301      	movne	r3, #1
    1774:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
    1778:	4770      	bx	lr
    177a:	bf00      	nop

0000177c <Oscillator::SetWaveform(int)>:

/*
 * Sets the waveform for the oscillator
 */
void Oscillator::SetWaveform(int wave) {
  _wave = constrain((wave / MORPHRANGE) % (WAVETABLECOUNT + 1), 0, WAVETABLECOUNT);
    177c:	4a23      	ldr	r2, [pc, #140]	; (180c <Oscillator::SetWaveform(int)+0x90>)
    177e:	4b24      	ldr	r3, [pc, #144]	; (1810 <Oscillator::SetWaveform(int)+0x94>)
    1780:	fb82 2c01 	smull	r2, ip, r2, r1
    1784:	17ca      	asrs	r2, r1, #31
    1786:	ebc2 126c 	rsb	r2, r2, ip, asr #5
    178a:	fb83 c302 	smull	ip, r3, r3, r2
    178e:	ea4f 7ce2 	mov.w	ip, r2, asr #31
    1792:	4413      	add	r3, r2
    1794:	ebcc 2c23 	rsb	ip, ip, r3, asr #8
    1798:	f240 1347 	movw	r3, #327	; 0x147
void Oscillator::SetWaveform(int wave) {
    179c:	b500      	push	{lr}
  _wave = constrain((wave / MORPHRANGE) % (WAVETABLECOUNT + 1), 0, WAVETABLECOUNT);
    179e:	fb03 2c1c 	mls	ip, r3, ip, r2
  #ifdef DEBUG
  Serial.printf("Waveform: %d [%d]\n", _wave, wave);
  #endif
  _morphWave = _wave + 1;
  if (_morphWave > WAVETABLECOUNT) _morphWave = 0;
  _morph = wave % MORPHRANGE;
    17a2:	f04f 0e64 	mov.w	lr, #100	; 0x64
    17a6:	ea2c 73ec 	bic.w	r3, ip, ip, asr #31
    17aa:	fb0e 1112 	mls	r1, lr, r2, r1
  _wave = constrain((wave / MORPHRANGE) % (WAVETABLECOUNT + 1), 0, WAVETABLECOUNT);
    17ae:	8103      	strh	r3, [r0, #8]
  _invMorph = MORPHRANGE - _morph;
    17b0:	ebae 0201 	sub.w	r2, lr, r1
  _morphWave = _wave + 1;
    17b4:	3301      	adds	r3, #1
  _morph = wave % MORPHRANGE;
    17b6:	60c1      	str	r1, [r0, #12]
  _morphing = _morph != 0;
    17b8:	3900      	subs	r1, #0
  _invMorph = MORPHRANGE - _morph;
    17ba:	6102      	str	r2, [r0, #16]
  _morphWave = _wave + 1;
    17bc:	b2db      	uxtb	r3, r3
  _morphing = _morph != 0;
    17be:	bf18      	it	ne
    17c0:	2101      	movne	r1, #1

  if (_wave == SAW_WAVE || _morphWave == SAW_WAVE){
    17c2:	f1bc 0f02 	cmp.w	ip, #2
  _morphWave = _wave + 1;
    17c6:	7283      	strb	r3, [r0, #10]
  _morphing = _morph != 0;
    17c8:	7501      	strb	r1, [r0, #20]
  if (_wave == SAW_WAVE || _morphWave == SAW_WAVE){
    17ca:	d014      	beq.n	17f6 <Oscillator::SetWaveform(int)+0x7a>
    17cc:	2b02      	cmp	r3, #2
    17ce:	d007      	beq.n	17e0 <Oscillator::SetWaveform(int)+0x64>
      _blepItTwo = true;
    } else {
      _blepItTwo = false;
    }
  } else {
    _blepItOne = false;
    17d0:	2200      	movs	r2, #0
    17d2:	4613      	mov	r3, r2
    17d4:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
      _blepItTwo = false;
    17d8:	f880 3079 	strb.w	r3, [r0, #121]	; 0x79
    _blepItTwo = false;
  }
}
    17dc:	f85d fb04 	ldr.w	pc, [sp], #4
    _blepItOne = true;
    17e0:	2301      	movs	r3, #1
    if (_wave == SQUARE_WAVE || _morphWave == SQUARE_WAVE) {
    17e2:	f1bc 0f03 	cmp.w	ip, #3
    _blepItOne = true;
    17e6:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    if (_wave == SQUARE_WAVE || _morphWave == SQUARE_WAVE) {
    17ea:	d109      	bne.n	1800 <Oscillator::SetWaveform(int)+0x84>
      _blepItTwo = true;
    17ec:	2301      	movs	r3, #1
      _blepItTwo = false;
    17ee:	f880 3079 	strb.w	r3, [r0, #121]	; 0x79
}
    17f2:	f85d fb04 	ldr.w	pc, [sp], #4
    _blepItOne = true;
    17f6:	2201      	movs	r2, #1
    if (_wave == SQUARE_WAVE || _morphWave == SQUARE_WAVE) {
    17f8:	2b03      	cmp	r3, #3
    _blepItOne = true;
    17fa:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
    if (_wave == SQUARE_WAVE || _morphWave == SQUARE_WAVE) {
    17fe:	d0f5      	beq.n	17ec <Oscillator::SetWaveform(int)+0x70>
void Oscillator::SetWaveform(int wave) {
    1800:	2300      	movs	r3, #0
      _blepItTwo = false;
    1802:	f880 3079 	strb.w	r3, [r0, #121]	; 0x79
}
    1806:	f85d fb04 	ldr.w	pc, [sp], #4
    180a:	bf00      	nop
    180c:	51eb851f 	.word	0x51eb851f
    1810:	c86a7891 	.word	0xc86a7891

00001814 <Oscillator::ResetPhase(long)>:

/*
 * Resets the phase of the oscillator to its default
 */
void Oscillator::ResetPhase(long polarity) {
  if (polarity == 0)
    1814:	b919      	cbnz	r1, 181e <Oscillator::ResetPhase(long)+0xa>
    _actualPhase = _phaseOffset << PHASEBITS;
    1816:	6a83      	ldr	r3, [r0, #40]	; 0x28
    1818:	049b      	lsls	r3, r3, #18
    181a:	62c3      	str	r3, [r0, #44]	; 0x2c
  else
    _actualPhase = _wave < 2 ? (unsigned long)peaks[_wave] : 0 << REDUCEBITS;
}
    181c:	4770      	bx	lr
    _actualPhase = _wave < 2 ? (unsigned long)peaks[_wave] : 0 << REDUCEBITS;
    181e:	8903      	ldrh	r3, [r0, #8]
    1820:	2b01      	cmp	r3, #1
    1822:	bf94      	ite	ls
    1824:	f850 3023 	ldrls.w	r3, [r0, r3, lsl #2]
    1828:	2300      	movhi	r3, #0
    _actualPhase = _phaseOffset << PHASEBITS;
    182a:	62c3      	str	r3, [r0, #44]	; 0x2c
}
    182c:	4770      	bx	lr
    182e:	bf00      	nop

00001830 <Oscillator::SetPhaseOffset(int)>:

/*
 * Sets the oscillator's phase offset
 */
void Oscillator::SetPhaseOffset(int phase) {
  phase = constrain(phase, 0, 16384);
    1830:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  _phaseDelta = phase - _phaseOffset;
    1834:	6a83      	ldr	r3, [r0, #40]	; 0x28
  _phaseOffset = phase;
  _actualPhase += _phaseDelta << PHASEBITS;
    1836:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    1838:	bfa8      	it	ge
    183a:	f44f 4180 	movge.w	r1, #16384	; 0x4000
    183e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
  _phaseDelta = phase - _phaseOffset;
    1842:	1acb      	subs	r3, r1, r3
  _phaseOffset = phase;
    1844:	6281      	str	r1, [r0, #40]	; 0x28
  _actualPhase += _phaseDelta << PHASEBITS;
    1846:	eb02 4283 	add.w	r2, r2, r3, lsl #18
    184a:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
}
    184e:	4770      	bx	lr

00001850 <Oscillator::SetPortamentoMs(unsigned long)>:

/*
 * Sets the time for portamento in milliseconds
 */
void Oscillator::SetPortamentoMs(unsigned long milliseconds){
  _stepsCalculated = milliseconds * KRATE;
    1850:	2332      	movs	r3, #50	; 0x32
    1852:	fb03 f101 	mul.w	r1, r3, r1
  if (_portamento && _steps > 0){
    1856:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
  _stepsCalculated = milliseconds * KRATE;
    185a:	65c1      	str	r1, [r0, #92]	; 0x5c
  if (_portamento && _steps > 0){
    185c:	b18b      	cbz	r3, 1882 <Oscillator::SetPortamentoMs(unsigned long)+0x32>
    185e:	6e02      	ldr	r2, [r0, #96]	; 0x60
    1860:	b17a      	cbz	r2, 1882 <Oscillator::SetPortamentoMs(unsigned long)+0x32>
      if (_targetUlstep > _ulstep){
    1862:	6a02      	ldr	r2, [r0, #32]
void Oscillator::SetPortamentoMs(unsigned long milliseconds){
    1864:	b410      	push	{r4}
      if (_targetUlstep > _ulstep){
    1866:	6d84      	ldr	r4, [r0, #88]	; 0x58
    1868:	4294      	cmp	r4, r2
    186a:	d80b      	bhi.n	1884 <Oscillator::SetPortamentoMs(unsigned long)+0x34>
        _delta = (_targetUlstep - _ulstep) / _stepsCalculated;
        _sign = true;
      } else {
        _delta = (_ulstep - _targetUlstep) / _stepsCalculated;
    186c:	1b12      	subs	r2, r2, r4
    186e:	2300      	movs	r3, #0
    1870:	fbb2 f2f1 	udiv	r2, r2, r1
        _sign = false;
      }
    _steps = _stepsCalculated;
  }
}
    1874:	f85d 4b04 	ldr.w	r4, [sp], #4
        _delta = (_targetUlstep - _ulstep) / _stepsCalculated;
    1878:	6642      	str	r2, [r0, #100]	; 0x64
        _sign = true;
    187a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    _steps = _stepsCalculated;
    187e:	6601      	str	r1, [r0, #96]	; 0x60
}
    1880:	4770      	bx	lr
    1882:	4770      	bx	lr
        _delta = (_targetUlstep - _ulstep) / _stepsCalculated;
    1884:	1aa4      	subs	r4, r4, r2
    1886:	fbb4 f2f1 	udiv	r2, r4, r1
        _sign = true;
    188a:	e7f3      	b.n	1874 <Oscillator::SetPortamentoMs(unsigned long)+0x24>

0000188c <Oscillator::GetFrequency()>:
/*
 * Returns the floating point frequency of the oscillator
 */
float Oscillator::GetFrequency(){
  return _frequency;
}
    188c:	ed90 0a07 	vldr	s0, [r0, #28]
    1890:	4770      	bx	lr
    1892:	bf00      	nop
    1894:	0000      	movs	r0, r0
	...

00001898 <Oscillator::PolyBlepFixed(unsigned long)>:
 * http://www.martin-finke.de/blog/articles/audio-plugins-018-polyblep-oscillator/
 * http://research.spa.aalto.fi/publications/papers/smc2010-phaseshaping/phaseshapers.py
*/ 
double Oscillator::PolyBlepFixed(unsigned long ulT){
    // 0 <= t < 1
    if (ulT < _ulstep) {
    1898:	6a03      	ldr	r3, [r0, #32]
    189a:	428b      	cmp	r3, r1
    189c:	d828      	bhi.n	18f0 <Oscillator::PolyBlepFixed(unsigned long)+0x58>
        t = (double)ulT / _ulstep;
        return (t+t - t*t - 1.0) * 32767;
    }
    // -1 < t < 0
    else if (ulT > FULLPHASE - _ulstep) {
    189e:	ee07 3a90 	vmov	s15, r3
    18a2:	ed9f 5b21 	vldr	d5, [pc, #132]	; 1928 <Oscillator::PolyBlepFixed(unsigned long)+0x90>
    18a6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    18aa:	ee07 1a90 	vmov	s15, r1
    18ae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    18b2:	ee35 4b46 	vsub.f64	d4, d5, d6
    18b6:	eeb4 7bc4 	vcmpe.f64	d7, d4
    18ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    18be:	dd14      	ble.n	18ea <Oscillator::PolyBlepFixed(unsigned long)+0x52>
        t = ((double)ulT - FULLPHASE) / _ulstep;
    18c0:	ee37 7b45 	vsub.f64	d7, d7, d5
        return (t*t + t+t + 1.0) * 32767;
    18c4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
        t = ((double)ulT - FULLPHASE) / _ulstep;
    18c8:	ee87 0b06 	vdiv.f64	d0, d7, d6
        return (t*t + t+t + 1.0) * 32767;
    18cc:	ed9f 5b18 	vldr	d5, [pc, #96]	; 1930 <Oscillator::PolyBlepFixed(unsigned long)+0x98>
    18d0:	eeb0 7b40 	vmov.f64	d7, d0
        t = ((double)ulT - FULLPHASE) / _ulstep;
    18d4:	ed80 0b1c 	vstr	d0, [r0, #112]	; 0x70
        return (t*t + t+t + 1.0) * 32767;
    18d8:	eea0 7b00 	vfma.f64	d7, d0, d0
    18dc:	ee30 0b07 	vadd.f64	d0, d0, d7
    18e0:	ee30 0b04 	vadd.f64	d0, d0, d4
    18e4:	ee20 0b05 	vmul.f64	d0, d0, d5
    18e8:	4770      	bx	lr
    }
    // 0 otherwise
    else return 0.0;
    18ea:	ed9f 0b13 	vldr	d0, [pc, #76]	; 1938 <Oscillator::PolyBlepFixed(unsigned long)+0xa0>
}
    18ee:	4770      	bx	lr
        t = (double)ulT / _ulstep;
    18f0:	ee07 1a90 	vmov	s15, r1
    18f4:	ee06 3a90 	vmov	s13, r3
        return (t+t - t*t - 1.0) * 32767;
    18f8:	eeb0 2b00 	vmov.f64	d2, #0	; 0x40000000  2.0
        t = (double)ulT / _ulstep;
    18fc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    1900:	eeb8 6b66 	vcvt.f64.u32	d6, s13
        return (t+t - t*t - 1.0) * 32767;
    1904:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
        t = (double)ulT / _ulstep;
    1908:	ee87 5b06 	vdiv.f64	d5, d7, d6
        return (t+t - t*t - 1.0) * 32767;
    190c:	ed9f 4b08 	vldr	d4, [pc, #32]	; 1930 <Oscillator::PolyBlepFixed(unsigned long)+0x98>
    1910:	ee25 0b45 	vnmul.f64	d0, d5, d5
        t = (double)ulT / _ulstep;
    1914:	ed80 5b1c 	vstr	d5, [r0, #112]	; 0x70
        return (t+t - t*t - 1.0) * 32767;
    1918:	eea5 0b02 	vfma.f64	d0, d5, d2
    191c:	ee30 0b43 	vsub.f64	d0, d0, d3
    1920:	ee20 0b04 	vmul.f64	d0, d0, d4
    1924:	4770      	bx	lr
    1926:	bf00      	nop
    1928:	00000000 	.word	0x00000000
    192c:	41f00000 	.word	0x41f00000
    1930:	00000000 	.word	0x00000000
    1934:	40dfffc0 	.word	0x40dfffc0
	...

00001940 <Oscillator::Oscillate()>:
  if (_portamento) {
    1940:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
float Oscillator::Oscillate() {
    1944:	b570      	push	{r4, r5, r6, lr}
    1946:	4604      	mov	r4, r0
  if (_portamento) {
    1948:	2b00      	cmp	r3, #0
    194a:	f040 808e 	bne.w	1a6a <Oscillator::Oscillate()+0x12a>
      _ulstep = _sign ? _ulstep + _delta : _ulstep - _delta;
    194e:	6a06      	ldr	r6, [r0, #32]
  _actualPhase += _ulstep;
    1950:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (_blepItOne){
    1952:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
  _actualPhase += _ulstep;
    1956:	1875      	adds	r5, r6, r1
  _location = _actualPhase >> REDUCEBITS;
    1958:	0dea      	lsrs	r2, r5, #23
  _actualPhase += _ulstep;
    195a:	62e5      	str	r5, [r4, #44]	; 0x2c
  _location = _actualPhase >> REDUCEBITS;
    195c:	6362      	str	r2, [r4, #52]	; 0x34
  if (_blepItOne){
    195e:	2b00      	cmp	r3, #0
    1960:	f040 80b1 	bne.w	1ac6 <Oscillator::Oscillate()+0x186>
  if (_wave == SQUARE_WAVE) { 
    1964:	8923      	ldrh	r3, [r4, #8]
    1966:	2b03      	cmp	r3, #3
    1968:	f000 809c 	beq.w	1aa4 <Oscillator::Oscillate()+0x164>
  } else if (_wave == SAW_WAVE) {  
    196c:	2b02      	cmp	r3, #2
    196e:	f000 808e 	beq.w	1a8e <Oscillator::Oscillate()+0x14e>
  } else if (_wave == TRIANGLE_WAVE) { 
    1972:	2b01      	cmp	r3, #1
    1974:	f000 80ed 	beq.w	1b52 <Oscillator::Oscillate()+0x212>
  } else if (_wave < WAVETABLECOUNT) {
    1978:	f5b3 7fa3 	cmp.w	r3, #326	; 0x146
    197c:	f080 80b9 	bcs.w	1af2 <Oscillator::Oscillate()+0x1b2>
      _lastValue = wavetables[_wave][_location] + (_actualPhase & PHASEMASK) * _phasescale * (wavetables[_wave][_location + 1] - wavetables[_wave][_location]);
    1980:	499b      	ldr	r1, [pc, #620]	; (1bf0 <Oscillator::Oscillate()+0x2b0>)
    1982:	f3c5 0016 	ubfx	r0, r5, #0, #23
    1986:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    198a:	ee06 0a10 	vmov	s12, r0
    198e:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    1992:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    1996:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    199a:	684b      	ldr	r3, [r1, #4]
    199c:	ed94 7b14 	vldr	d7, [r4, #80]	; 0x50
    19a0:	1a9b      	subs	r3, r3, r2
    19a2:	ee26 6b07 	vmul.f64	d6, d6, d7
    19a6:	ee07 2a90 	vmov	s15, r2
    19aa:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    19ae:	ee07 3a90 	vmov	s15, r3
    19b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    19b6:	eea6 5b07 	vfma.f64	d5, d6, d7
    19ba:	eefd 7bc5 	vcvt.s32.f64	s15, d5
    19be:	ee17 3a90 	vmov	r3, s15
    19c2:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (_morphing){
    19c4:	7d22      	ldrb	r2, [r4, #20]
    19c6:	2a00      	cmp	r2, #0
    19c8:	d03b      	beq.n	1a42 <Oscillator::Oscillate()+0x102>
    if (_morphWave == 3) {
    19ca:	7aa2      	ldrb	r2, [r4, #10]
    19cc:	2a03      	cmp	r2, #3
    19ce:	f000 80ac 	beq.w	1b2a <Oscillator::Oscillate()+0x1ea>
    } else if (_wave == SAW_WAVE) {  
    19d2:	8921      	ldrh	r1, [r4, #8]
    19d4:	2902      	cmp	r1, #2
    19d6:	f000 80c2 	beq.w	1b5e <Oscillator::Oscillate()+0x21e>
    } else if (_morphWave == TRIANGLE_WAVE) { 
    19da:	2a01      	cmp	r2, #1
    19dc:	f000 8095 	beq.w	1b0a <Oscillator::Oscillate()+0x1ca>
      _morphValue =  wavetables[_morphWave][_location] + (_actualPhase & PHASEMASK) * _phasescale * (wavetables[_morphWave][_location + 1] - wavetables[_morphWave][_location]);
    19e0:	4983      	ldr	r1, [pc, #524]	; (1bf0 <Oscillator::Oscillate()+0x2b0>)
    19e2:	6b60      	ldr	r0, [r4, #52]	; 0x34
    19e4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    19e8:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    19ec:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    19f0:	6852      	ldr	r2, [r2, #4]
    19f2:	ee07 1a90 	vmov	s15, r1
    19f6:	1a52      	subs	r2, r2, r1
    19f8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    19fc:	ee06 2a90 	vmov	s13, r2
    1a00:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1a02:	f3c2 0216 	ubfx	r2, r2, #0, #23
    1a06:	eeb8 5be6 	vcvt.f64.s32	d5, s13
    1a0a:	ee06 2a10 	vmov	s12, r2
    1a0e:	ed94 4b14 	vldr	d4, [r4, #80]	; 0x50
    1a12:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    1a16:	ee26 6b04 	vmul.f64	d6, d6, d4
    1a1a:	eea6 7b05 	vfma.f64	d7, d6, d5
    1a1e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    1a22:	ee17 2a90 	vmov	r2, s15
    1a26:	61a2      	str	r2, [r4, #24]
    _lastValue = (_lastValue * _invMorph + _morphValue * _morph) / MORPHRANGE;
    1a28:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
    1a2c:	fb01 f202 	mul.w	r2, r1, r2
    1a30:	4970      	ldr	r1, [pc, #448]	; (1bf4 <Oscillator::Oscillate()+0x2b4>)
    1a32:	fb00 2203 	mla	r2, r0, r3, r2
    1a36:	fb81 1302 	smull	r1, r3, r1, r2
    1a3a:	17d2      	asrs	r2, r2, #31
    1a3c:	ebc2 1363 	rsb	r3, r2, r3, asr #5
    1a40:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (_doRect){
    1a42:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
    1a46:	b15a      	cbz	r2, 1a60 <Oscillator::Oscillate()+0x120>
    if(_rectify == -2){
    1a48:	f994 204c 	ldrsb.w	r2, [r4, #76]	; 0x4c
    1a4c:	1c90      	adds	r0, r2, #2
    1a4e:	d063      	beq.n	1b18 <Oscillator::Oscillate()+0x1d8>
    } else if (_rectify == -1) {
    1a50:	1c51      	adds	r1, r2, #1
    1a52:	f000 8091 	beq.w	1b78 <Oscillator::Oscillate()+0x238>
    } else if (_rectify == 1) {
    1a56:	2a01      	cmp	r2, #1
    1a58:	d053      	beq.n	1b02 <Oscillator::Oscillate()+0x1c2>
    } else if (_rectify == 2) {
    1a5a:	2a02      	cmp	r2, #2
    1a5c:	f000 809b 	beq.w	1b96 <Oscillator::Oscillate()+0x256>
}
    1a60:	ee07 3a90 	vmov	s15, r3
    1a64:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    1a68:	bd70      	pop	{r4, r5, r6, pc}
    if (_steps-- <= 0){
    1a6a:	6e03      	ldr	r3, [r0, #96]	; 0x60
    1a6c:	1e5a      	subs	r2, r3, #1
    1a6e:	6602      	str	r2, [r0, #96]	; 0x60
    1a70:	b923      	cbnz	r3, 1a7c <Oscillator::Oscillate()+0x13c>
      _ulstep = _targetUlstep;
    1a72:	6d86      	ldr	r6, [r0, #88]	; 0x58
      _portamento = false;
    1a74:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
      _ulstep = _targetUlstep;
    1a78:	6206      	str	r6, [r0, #32]
      _portamento = false;
    1a7a:	e769      	b.n	1950 <Oscillator::Oscillate()+0x10>
      _ulstep = _sign ? _ulstep + _delta : _ulstep - _delta;
    1a7c:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
    1a80:	6a06      	ldr	r6, [r0, #32]
    1a82:	2b00      	cmp	r3, #0
    1a84:	d13a      	bne.n	1afc <Oscillator::Oscillate()+0x1bc>
    1a86:	6e43      	ldr	r3, [r0, #100]	; 0x64
    1a88:	1af6      	subs	r6, r6, r3
    1a8a:	6226      	str	r6, [r4, #32]
    1a8c:	e760      	b.n	1950 <Oscillator::Oscillate()+0x10>
    _lastValue = (int)(_actualPhase >> 16) - 32767;
    1a8e:	4b5a      	ldr	r3, [pc, #360]	; (1bf8 <Oscillator::Oscillate()+0x2b8>)
    if (_ulstep >= FQ20K)
    1a90:	4a5a      	ldr	r2, [pc, #360]	; (1bfc <Oscillator::Oscillate()+0x2bc>)
    _lastValue = (int)(_actualPhase >> 16) - 32767;
    1a92:	eb03 4315 	add.w	r3, r3, r5, lsr #16
    if (_ulstep >= FQ20K)
    1a96:	4296      	cmp	r6, r2
    _lastValue = (int)(_actualPhase >> 16) - 32767;
    1a98:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (_ulstep >= FQ20K)
    1a9a:	d993      	bls.n	19c4 <Oscillator::Oscillate()+0x84>
      _lastValue -= _blepOne;      
    1a9c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    1a9e:	1a9b      	subs	r3, r3, r2
    1aa0:	63e3      	str	r3, [r4, #60]	; 0x3c
    1aa2:	e78f      	b.n	19c4 <Oscillator::Oscillate()+0x84>
    _lastValue =  _actualPhase & 0x80000000 ? 32767 : -32767;    
    1aa4:	4a54      	ldr	r2, [pc, #336]	; (1bf8 <Oscillator::Oscillate()+0x2b8>)
    1aa6:	f647 73ff 	movw	r3, #32767	; 0x7fff
    1aaa:	ea13 0325 	ands.w	r3, r3, r5, asr #32
    1aae:	bf38      	it	cc
    1ab0:	4613      	movcc	r3, r2
    if (_ulstep >= FQ20K){
    1ab2:	4a52      	ldr	r2, [pc, #328]	; (1bfc <Oscillator::Oscillate()+0x2bc>)
    1ab4:	4296      	cmp	r6, r2
    _lastValue =  _actualPhase & 0x80000000 ? 32767 : -32767;    
    1ab6:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (_ulstep >= FQ20K){
    1ab8:	d984      	bls.n	19c4 <Oscillator::Oscillate()+0x84>
      _lastValue += _blepTwo;     
    1aba:	e9d4 211f 	ldrd	r2, r1, [r4, #124]	; 0x7c
      _lastValue -= _blepOne;
    1abe:	1a9a      	subs	r2, r3, r2
      _lastValue += _blepTwo;     
    1ac0:	1853      	adds	r3, r2, r1
    1ac2:	63e3      	str	r3, [r4, #60]	; 0x3c
    1ac4:	e77e      	b.n	19c4 <Oscillator::Oscillate()+0x84>
    _blepOne = PolyBlepFixed(_actualPhase);
    1ac6:	4629      	mov	r1, r5
    1ac8:	4620      	mov	r0, r4
    1aca:	f7ff fee5 	bl	1898 <Oscillator::PolyBlepFixed(unsigned long)>
    1ace:	eebd 0bc0 	vcvt.s32.f64	s0, d0
    if (_blepItTwo){
    1ad2:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
    _blepOne = PolyBlepFixed(_actualPhase);
    1ad6:	ed84 0a1f 	vstr	s0, [r4, #124]	; 0x7c
    if (_blepItTwo){
    1ada:	2b00      	cmp	r3, #0
    1adc:	f43f af42 	beq.w	1964 <Oscillator::Oscillate()+0x24>
      _blepTwo = PolyBlepFixed((FULLPHASEL - _ulWidth + 1) + _actualPhase);
    1ae0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    1ae2:	1a69      	subs	r1, r5, r1
    1ae4:	f7ff fed8 	bl	1898 <Oscillator::PolyBlepFixed(unsigned long)>
    1ae8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
    1aec:	ed84 0a20 	vstr	s0, [r4, #128]	; 0x80
    1af0:	e738      	b.n	1964 <Oscillator::Oscillate()+0x24>
  } else if (_wave == WAVETABLECOUNT) {
    1af2:	d05c      	beq.n	1bae <Oscillator::Oscillate()+0x26e>
    _lastValue =  0;
    1af4:	2200      	movs	r2, #0
    1af6:	4613      	mov	r3, r2
    1af8:	63e2      	str	r2, [r4, #60]	; 0x3c
    1afa:	e763      	b.n	19c4 <Oscillator::Oscillate()+0x84>
      _ulstep = _sign ? _ulstep + _delta : _ulstep - _delta;
    1afc:	6e43      	ldr	r3, [r0, #100]	; 0x64
    1afe:	441e      	add	r6, r3
    1b00:	e7c3      	b.n	1a8a <Oscillator::Oscillate()+0x14a>
      _lastValue = _lastValue >= 0 ? _lastValue : 0;
    1b02:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    1b06:	63e3      	str	r3, [r4, #60]	; 0x3c
    1b08:	e7aa      	b.n	1a60 <Oscillator::Oscillate()+0x120>
      _morphValue =  _actualPhase & 0x80000000 ? (int)((FULLPHASEL - _actualPhase) >> 15) - 32767 : (int)(_actualPhase >> 15) - 32767 ;  
    1b0a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    1b0c:	2900      	cmp	r1, #0
    1b0e:	db47      	blt.n	1ba0 <Oscillator::Oscillate()+0x260>
    1b10:	4a39      	ldr	r2, [pc, #228]	; (1bf8 <Oscillator::Oscillate()+0x2b8>)
    1b12:	eb02 32d1 	add.w	r2, r2, r1, lsr #15
    1b16:	e786      	b.n	1a26 <Oscillator::Oscillate()+0xe6>
      _lastValue = -abs(_lastValue);
    1b18:	2b00      	cmp	r3, #0
    1b1a:	bfc8      	it	gt
    1b1c:	425b      	neggt	r3, r3
}
    1b1e:	ee07 3a90 	vmov	s15, r3
      _lastValue = -abs(_lastValue);
    1b22:	63e3      	str	r3, [r4, #60]	; 0x3c
}
    1b24:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    1b28:	bd70      	pop	{r4, r5, r6, pc}
      _morphValue =  _actualPhase & 0x80000000 ? 32767 : -32767;   
    1b2a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    1b2c:	f647 72ff 	movw	r2, #32767	; 0x7fff
    1b30:	4931      	ldr	r1, [pc, #196]	; (1bf8 <Oscillator::Oscillate()+0x2b8>)
    1b32:	ea12 0220 	ands.w	r2, r2, r0, asr #32
    1b36:	bf38      	it	cc
    1b38:	460a      	movcc	r2, r1
      if (_ulstep >= FQ20K){
    1b3a:	4930      	ldr	r1, [pc, #192]	; (1bfc <Oscillator::Oscillate()+0x2bc>)
    1b3c:	6a20      	ldr	r0, [r4, #32]
      _morphValue =  _actualPhase & 0x80000000 ? 32767 : -32767;   
    1b3e:	61a2      	str	r2, [r4, #24]
      if (_ulstep >= FQ20K){
    1b40:	4288      	cmp	r0, r1
    1b42:	f67f af71 	bls.w	1a28 <Oscillator::Oscillate()+0xe8>
        _morphValue += _blepTwo;     
    1b46:	e9d4 011f 	ldrd	r0, r1, [r4, #124]	; 0x7c
        _morphValue -= _blepOne;
    1b4a:	1a12      	subs	r2, r2, r0
        _morphValue += _blepTwo;     
    1b4c:	440a      	add	r2, r1
    1b4e:	61a2      	str	r2, [r4, #24]
    1b50:	e76a      	b.n	1a28 <Oscillator::Oscillate()+0xe8>
    _lastValue = _actualPhase & 0x80000000 ? (int)((FULLPHASEL - _actualPhase) >> 15) - 32767 : (int)(_actualPhase >> 15) - 32767;
    1b52:	2d00      	cmp	r5, #0
    1b54:	db18      	blt.n	1b88 <Oscillator::Oscillate()+0x248>
    1b56:	4b28      	ldr	r3, [pc, #160]	; (1bf8 <Oscillator::Oscillate()+0x2b8>)
    1b58:	eb03 33d5 	add.w	r3, r3, r5, lsr #15
    1b5c:	e731      	b.n	19c2 <Oscillator::Oscillate()+0x82>
      _morphValue = (int)(_actualPhase >> 16) - 32767;
    1b5e:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
    1b60:	4a25      	ldr	r2, [pc, #148]	; (1bf8 <Oscillator::Oscillate()+0x2b8>)
      if (_ulstep >= FQ20K)
    1b62:	4926      	ldr	r1, [pc, #152]	; (1bfc <Oscillator::Oscillate()+0x2bc>)
      _morphValue = (int)(_actualPhase >> 16) - 32767;
    1b64:	4402      	add	r2, r0
      if (_ulstep >= FQ20K)
    1b66:	6a20      	ldr	r0, [r4, #32]
    1b68:	4288      	cmp	r0, r1
      _morphValue = (int)(_actualPhase >> 16) - 32767;
    1b6a:	61a2      	str	r2, [r4, #24]
      if (_ulstep >= FQ20K)
    1b6c:	f67f af5c 	bls.w	1a28 <Oscillator::Oscillate()+0xe8>
        _morphValue -= _blepOne;      
    1b70:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
    1b72:	1a52      	subs	r2, r2, r1
    1b74:	61a2      	str	r2, [r4, #24]
    1b76:	e757      	b.n	1a28 <Oscillator::Oscillate()+0xe8>
      _lastValue = _lastValue <= 0 ? _lastValue : 0;
    1b78:	ea03 73e3 	and.w	r3, r3, r3, asr #31
}
    1b7c:	ee07 3a90 	vmov	s15, r3
      _lastValue = _lastValue <= 0 ? _lastValue : 0;
    1b80:	63e3      	str	r3, [r4, #60]	; 0x3c
}
    1b82:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    1b86:	bd70      	pop	{r4, r5, r6, pc}
    _lastValue = _actualPhase & 0x80000000 ? (int)((FULLPHASEL - _actualPhase) >> 15) - 32767 : (int)(_actualPhase >> 15) - 32767;
    1b88:	f1d5 31ff 	rsbs	r1, r5, #4294967295	; 0xffffffff
    1b8c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    1b90:	eb03 33d1 	add.w	r3, r3, r1, lsr #15
    1b94:	e715      	b.n	19c2 <Oscillator::Oscillate()+0x82>
      _lastValue = abs(_lastValue);
    1b96:	2b00      	cmp	r3, #0
    1b98:	bfb8      	it	lt
    1b9a:	425b      	neglt	r3, r3
    1b9c:	63e3      	str	r3, [r4, #60]	; 0x3c
    1b9e:	e75f      	b.n	1a60 <Oscillator::Oscillate()+0x120>
      _morphValue =  _actualPhase & 0x80000000 ? (int)((FULLPHASEL - _actualPhase) >> 15) - 32767 : (int)(_actualPhase >> 15) - 32767 ;  
    1ba0:	f1d1 31ff 	rsbs	r1, r1, #4294967295	; 0xffffffff
    1ba4:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    1ba8:	eb02 32d1 	add.w	r2, r2, r1, lsr #15
    1bac:	e73b      	b.n	1a26 <Oscillator::Oscillate()+0xe6>
    if (_actualPhase < _oldPhase)
    1bae:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1bb0:	429d      	cmp	r5, r3
    1bb2:	d302      	bcc.n	1bba <Oscillator::Oscillate()+0x27a>
    _lastValue = (_lastValue * _invMorph + _morphValue * _morph) / MORPHRANGE;
    1bb4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    _oldPhase = _actualPhase;
    1bb6:	6265      	str	r5, [r4, #36]	; 0x24
    1bb8:	e704      	b.n	19c4 <Oscillator::Oscillate()+0x84>
      _lastValue = random(0, 65536) - 32878.;
    1bba:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    1bbe:	2000      	movs	r0, #0
    1bc0:	f002 fc0c 	bl	43dc <random(long, long)>
    1bc4:	ee07 0a90 	vmov	s15, r0
    _oldPhase = _actualPhase;
    1bc8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      _lastValue = random(0, 65536) - 32878.;
    1bca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    1bce:	ed9f 6b06 	vldr	d6, [pc, #24]	; 1be8 <Oscillator::Oscillate()+0x2a8>
    1bd2:	ee37 7b46 	vsub.f64	d7, d7, d6
    1bd6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    1bda:	ee17 3a90 	vmov	r3, s15
    1bde:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
    1be2:	e7e8      	b.n	1bb6 <Oscillator::Oscillate()+0x276>
    1be4:	f3af 8000 	nop.w
    1be8:	00000000 	.word	0x00000000
    1bec:	40e00dc0 	.word	0x40e00dc0
    1bf0:	20019a58 	.word	0x20019a58
    1bf4:	51eb851f 	.word	0x51eb851f
    1bf8:	ffff8001 	.word	0xffff8001
    1bfc:	00346dc4 	.word	0x00346dc4

00001c00 <Output::Output(int, int)>:
#include "Output.h"

/*
 * Initialize and Output and its LED 
 */
Output::Output(int output, int led){
    1c00:	b410      	push	{r4}
    1c02:	4c05      	ldr	r4, [pc, #20]	; (1c18 <Output::Output(int, int)+0x18>)
    1c04:	f04f 0c00 	mov.w	ip, #0
    1c08:	6004      	str	r4, [r0, #0]
    1c0a:	f880 c00c 	strb.w	ip, [r0, #12]
  
  // store the variables
  _output = output; 
  _led = led;

}
    1c0e:	f85d 4b04 	ldr.w	r4, [sp], #4
  _led = led;
    1c12:	e9c0 1201 	strd	r1, r2, [r0, #4]
}
    1c16:	4770      	bx	lr
    1c18:	200189b8 	.word	0x200189b8

00001c1c <Quantizer::Quantizer(int)>:
 * initializes the quantizer and sets the initial scale
 */
Quantizer::Quantizer(int scale) {
  SetScale(scale);
  
  _last.Note = 0;
    1c1c:	2300      	movs	r3, #0

/*
 * change the scale of the quantizer
 */
void Quantizer::SetScale(int scale) {
  if (scale < scaleCount)
    1c1e:	2910      	cmp	r1, #16
  _last.Value = 0;
    1c20:	e9c0 3307 	strd	r3, r3, [r0, #28]
    _scale = scale;
    1c24:	bfd8      	it	le
    1c26:	6001      	strle	r1, [r0, #0]
  _noteMode = false;
    1c28:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  _above = 0;
    1c2c:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
    1c30:	4770      	bx	lr
    1c32:	bf00      	nop

00001c34 <Quantizer::SetScale(int)>:
  if (scale < scaleCount)
    1c34:	2910      	cmp	r1, #16
    _scale = scale;
    1c36:	bfd8      	it	le
    1c38:	6001      	strle	r1, [r0, #0]
}
    1c3a:	4770      	bx	lr
    1c3c:	0000      	movs	r0, r0
	...

00001c40 <Quantizer::Quantize(int)>:
QuantizeResponse Quantizer::Quantize(int in) {

  QuantizeResponse response;

  // deal with negative values
  in = in < 0 ? abs(in) : in;
    1c40:	2a00      	cmp	r2, #0

  // short circuit if we are within our current bounary
  if (in >= _below && in < _above){
    1c42:	694b      	ldr	r3, [r1, #20]
    1c44:	bfb8      	it	lt
    1c46:	4252      	neglt	r2, r2
    1c48:	4293      	cmp	r3, r2
QuantizeResponse Quantizer::Quantize(int in) {
    1c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1c4e:	4606      	mov	r6, r0
  if (in >= _below && in < _above){
    1c50:	dc03      	bgt.n	1c5a <Quantizer::Quantize(int)+0x1a>
    1c52:	690b      	ldr	r3, [r1, #16]
    1c54:	4293      	cmp	r3, r2
    1c56:	f300 8089 	bgt.w	1d6c <Quantizer::Quantize(int)+0x12c>
    return _last;
  }
  
  // if not - we need to find where we are in the list
  // hints are a type of skip-list that jumps us to the proper octave
  _octave = (int)(in / 1638.3) - 1;
    1c5a:	ee07 2a90 	vmov	s15, r2
  _octave = _octave > 0 ? _octave : 0;
  
  _index = hints[_scale][_octave];
    1c5e:	680f      	ldr	r7, [r1, #0]
    1c60:	4b5d      	ldr	r3, [pc, #372]	; (1dd8 <Quantizer::Quantize(int)+0x198>)
  _octave = (int)(in / 1638.3) - 1;
    1c62:	eeb8 5be7 	vcvt.f64.s32	d5, s15
  _index = hints[_scale][_octave];
    1c66:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]

  int distance = 32768;
  int distanceTemp = 0;

  // find where we can't get any closer then back out
  while (_index < notecount[_scale]) {
    1c6a:	4b5c      	ldr	r3, [pc, #368]	; (1ddc <Quantizer::Quantize(int)+0x19c>)
  _octave = (int)(in / 1638.3) - 1;
    1c6c:	ed9f 6b58 	vldr	d6, [pc, #352]	; 1dd0 <Quantizer::Quantize(int)+0x190>
  while (_index < notecount[_scale]) {
    1c70:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
  _octave = (int)(in / 1638.3) - 1;
    1c74:	ee85 7b06 	vdiv.f64	d7, d5, d6
    1c78:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    1c7c:	ee17 3a90 	vmov	r3, s15
    1c80:	3b01      	subs	r3, #1
  _octave = _octave > 0 ? _octave : 0;
    1c82:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    1c86:	604b      	str	r3, [r1, #4]
  _index = hints[_scale][_octave];
    1c88:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
  while (_index < notecount[_scale]) {
    1c8c:	4284      	cmp	r4, r0
  _index = hints[_scale][_octave];
    1c8e:	608c      	str	r4, [r1, #8]
  while (_index < notecount[_scale]) {
    1c90:	f280 8095 	bge.w	1dbe <Quantizer::Quantize(int)+0x17e>

    _temp = in - scales[_scale][_index];
    1c94:	4b52      	ldr	r3, [pc, #328]	; (1de0 <Quantizer::Quantize(int)+0x1a0>)
    1c96:	ee07 2a90 	vmov	s15, r2
  int distance = 32768;
    1c9a:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    _temp = in - scales[_scale][_index];
    1c9e:	f853 8027 	ldr.w	r8, [r3, r7, lsl #2]
    1ca2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    1ca6:	eb08 0284 	add.w	r2, r8, r4, lsl #2
    1caa:	e003      	b.n	1cb4 <Quantizer::Quantize(int)+0x74>
      _index--;
      break;
    } else {
      // else increment
      distance = distanceTemp;
      _index++;
    1cac:	3401      	adds	r4, #1
  while (_index < notecount[_scale]) {
    1cae:	4284      	cmp	r4, r0
      _index++;
    1cb0:	608c      	str	r4, [r1, #8]
  while (_index < notecount[_scale]) {
    1cb2:	d062      	beq.n	1d7a <Quantizer::Quantize(int)+0x13a>
    _temp = in - scales[_scale][_index];
    1cb4:	4696      	mov	lr, r2
    1cb6:	4665      	mov	r5, ip
    1cb8:	3204      	adds	r2, #4
    1cba:	edde 7a00 	vldr	s15, [lr]
    1cbe:	ee77 7a67 	vsub.f32	s15, s14, s15
    1cc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1cc6:	ee17 3a90 	vmov	r3, s15
    distanceTemp = abs(_temp);
    1cca:	ea83 7ce3 	eor.w	ip, r3, r3, asr #31
    1cce:	ebac 7ce3 	sub.w	ip, ip, r3, asr #31
    if (distanceTemp > distance){
    1cd2:	45ac      	cmp	ip, r5
    1cd4:	ddea      	ble.n	1cac <Quantizer::Quantize(int)+0x6c>
      _index--;
    1cd6:	1e65      	subs	r5, r4, #1
    1cd8:	edc1 7a0b 	vstr	s15, [r1, #44]	; 0x2c
    }
    
  }

  // move it down to the next to last if we made it to the end
  if (_index >= notecount[_scale]) 
    1cdc:	4285      	cmp	r5, r0
      _index--;
    1cde:	608d      	str	r5, [r1, #8]
  if (_index >= notecount[_scale]) 
    1ce0:	da4d      	bge.n	1d7e <Quantizer::Quantize(int)+0x13e>
  _current = scales[_scale][_index];

  // set the response
  response.Note = _index;
  response.Value = _current;
  response.Frequency = freqs[_scale][_index];
    1ce2:	4b40      	ldr	r3, [pc, #256]	; (1de4 <Quantizer::Quantize(int)+0x1a4>)
  
  _last = response;
  
  // now set the helper boundries
  _above = _index < notecount[_scale] - 1 ? scales[_scale][_index + 1] : 32767;
    1ce4:	4284      	cmp	r4, r0
  response.Frequency = freqs[_scale][_index];
    1ce6:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
    1cea:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    1cee:	681f      	ldr	r7, [r3, #0]
  _current = scales[_scale][_index];
    1cf0:	eb08 0385 	add.w	r3, r8, r5, lsl #2
    1cf4:	edd3 7a00 	vldr	s15, [r3]
  _last = response;
    1cf8:	61cd      	str	r5, [r1, #28]
  _current = scales[_scale][_index];
    1cfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  _last = response;
    1cfe:	624f      	str	r7, [r1, #36]	; 0x24
  _current = scales[_scale][_index];
    1d00:	ee17 2a90 	vmov	r2, s15
    1d04:	edc1 7a06 	vstr	s15, [r1, #24]
  _last = response;
    1d08:	edc1 7a08 	vstr	s15, [r1, #32]
  _above = _index < notecount[_scale] - 1 ? scales[_scale][_index + 1] : 32767;
    1d0c:	da5b      	bge.n	1dc6 <Quantizer::Quantize(int)+0x186>
    1d0e:	edde 7a00 	vldr	s15, [lr]
    1d12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1d16:	ee17 0a90 	vmov	r0, s15
  _below = _index > 0 ? scales[_scale][_index-1] : scales[_scale][_index];

  // similar to a mutable quantize trick to expand the region slightly
  // had been doing this using floats - thx for the fixed math tip oliver
  _above = ((13 * _current) + (19 * _above)) >> 5;
    1d1a:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
    1d1e:	eb00 0044 	add.w	r0, r0, r4, lsl #1
  _below = _index > 0 ? scales[_scale][_index-1] : scales[_scale][_index];
    1d22:	2d00      	cmp	r5, #0
    1d24:	dd44      	ble.n	1db0 <Quantizer::Quantize(int)+0x170>
    1d26:	eb08 0885 	add.w	r8, r8, r5, lsl #2
    1d2a:	ed58 7a01 	vldr	s15, [r8, #-4]
    1d2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1d32:	ee17 3a90 	vmov	r3, s15
  _above = ((13 * _current) + (19 * _above)) >> 5;
    1d36:	eb02 0442 	add.w	r4, r2, r2, lsl #1

  // constrain the above and below values
  _above = _above > 32767 ? 32767 : _above;
  _below = _below < 0 ? 0 : _below;

  return response;
    1d3a:	6072      	str	r2, [r6, #4]
    1d3c:	6035      	str	r5, [r6, #0]
  _above = ((13 * _current) + (19 * _above)) >> 5;
    1d3e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
  return response;
    1d42:	60b7      	str	r7, [r6, #8]
  _below = ((13 * _current) + (19 * _below)) >> 5;
    1d44:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  _above = ((13 * _current) + (19 * _above)) >> 5;
    1d48:	4410      	add	r0, r2
  _below = ((13 * _current) + (19 * _below)) >> 5;
    1d4a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
  _above = ((13 * _current) + (19 * _above)) >> 5;
    1d4e:	1140      	asrs	r0, r0, #5
  _below = ((13 * _current) + (19 * _below)) >> 5;
    1d50:	4413      	add	r3, r2
    1d52:	115b      	asrs	r3, r3, #5
  _below = _below < 0 ? 0 : _below;
    1d54:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    1d58:	614b      	str	r3, [r1, #20]
  _above = _above > 32767 ? 32767 : _above;
    1d5a:	f647 73ff 	movw	r3, #32767	; 0x7fff
    1d5e:	4283      	cmp	r3, r0
    1d60:	bfa8      	it	ge
    1d62:	4603      	movge	r3, r0
  
}
    1d64:	4630      	mov	r0, r6
  _above = _above > 32767 ? 32767 : _above;
    1d66:	610b      	str	r3, [r1, #16]
}
    1d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return _last;
    1d6c:	311c      	adds	r1, #28
    1d6e:	c907      	ldmia	r1, {r0, r1, r2}
    1d70:	e886 0007 	stmia.w	r6, {r0, r1, r2}
}
    1d74:	4630      	mov	r0, r6
    1d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1d7a:	edc1 7a0b 	vstr	s15, [r1, #44]	; 0x2c
  response.Frequency = freqs[_scale][_index];
    1d7e:	4b19      	ldr	r3, [pc, #100]	; (1de4 <Quantizer::Quantize(int)+0x1a4>)
    _index = notecount[_scale] - 1;
    1d80:	1e45      	subs	r5, r0, #1
  _last = response;
    1d82:	4819      	ldr	r0, [pc, #100]	; (1de8 <Quantizer::Quantize(int)+0x1a8>)
  response.Frequency = freqs[_scale][_index];
    1d84:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
  _below = _index > 0 ? scales[_scale][_index-1] : scales[_scale][_index];
    1d88:	2d00      	cmp	r5, #0
    _index = notecount[_scale] - 1;
    1d8a:	608d      	str	r5, [r1, #8]
  response.Frequency = freqs[_scale][_index];
    1d8c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    1d90:	681f      	ldr	r7, [r3, #0]
  _current = scales[_scale][_index];
    1d92:	eb08 0385 	add.w	r3, r8, r5, lsl #2
    1d96:	edd3 7a00 	vldr	s15, [r3]
  _last = response;
    1d9a:	61cd      	str	r5, [r1, #28]
  _current = scales[_scale][_index];
    1d9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  _last = response;
    1da0:	624f      	str	r7, [r1, #36]	; 0x24
  _current = scales[_scale][_index];
    1da2:	ee17 2a90 	vmov	r2, s15
    1da6:	edc1 7a06 	vstr	s15, [r1, #24]
  _last = response;
    1daa:	edc1 7a08 	vstr	s15, [r1, #32]
  _below = _index > 0 ? scales[_scale][_index-1] : scales[_scale][_index];
    1dae:	dcba      	bgt.n	1d26 <Quantizer::Quantize(int)+0xe6>
    1db0:	edd3 7a00 	vldr	s15, [r3]
    1db4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1db8:	ee17 3a90 	vmov	r3, s15
    1dbc:	e7bb      	b.n	1d36 <Quantizer::Quantize(int)+0xf6>
  _current = scales[_scale][_index];
    1dbe:	4b08      	ldr	r3, [pc, #32]	; (1de0 <Quantizer::Quantize(int)+0x1a0>)
    1dc0:	f853 8027 	ldr.w	r8, [r3, r7, lsl #2]
    1dc4:	e7db      	b.n	1d7e <Quantizer::Quantize(int)+0x13e>
    1dc6:	4808      	ldr	r0, [pc, #32]	; (1de8 <Quantizer::Quantize(int)+0x1a8>)
    1dc8:	e7ab      	b.n	1d22 <Quantizer::Quantize(int)+0xe2>
    1dca:	bf00      	nop
    1dcc:	f3af 8000 	nop.w
    1dd0:	33333333 	.word	0x33333333
    1dd4:	40999933 	.word	0x40999933
    1dd8:	20019290 	.word	0x20019290
    1ddc:	200188c8 	.word	0x200188c8
    1de0:	200192d4 	.word	0x200192d4
    1de4:	2001924c 	.word	0x2001924c
    1de8:	00097fed 	.word	0x00097fed

00001dec <Quantizer::GetValueForNote(int)>:

/*
 * returns the values (0-16383) for a note number; 0 if out of range
 */
float Quantizer::GetValueForNote(int note){
  if (note < notecount[_scale])
    1dec:	4a08      	ldr	r2, [pc, #32]	; (1e10 <Quantizer::GetValueForNote(int)+0x24>)
    1dee:	6803      	ldr	r3, [r0, #0]
    1df0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1df4:	428a      	cmp	r2, r1
    1df6:	dd07      	ble.n	1e08 <Quantizer::GetValueForNote(int)+0x1c>
    return scales[_scale][note];
    1df8:	4a06      	ldr	r2, [pc, #24]	; (1e14 <Quantizer::GetValueForNote(int)+0x28>)
    1dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1dfe:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1e02:	ed93 0a00 	vldr	s0, [r3]
    1e06:	4770      	bx	lr
  else
    return 0;
    1e08:	ed9f 0a03 	vldr	s0, [pc, #12]	; 1e18 <Quantizer::GetValueForNote(int)+0x2c>
}
    1e0c:	4770      	bx	lr
    1e0e:	bf00      	nop
    1e10:	200188c8 	.word	0x200188c8
    1e14:	200192d4 	.word	0x200192d4
    1e18:	00000000 	.word	0x00000000

00001e1c <Quantizer::GetFrequencyForNote(int)>:

float Quantizer::GetFrequencyForNote(int note){
  if (note < notecount[_scale])
    1e1c:	4a08      	ldr	r2, [pc, #32]	; (1e40 <Quantizer::GetFrequencyForNote(int)+0x24>)
    1e1e:	6803      	ldr	r3, [r0, #0]
    1e20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1e24:	428a      	cmp	r2, r1
    1e26:	dd07      	ble.n	1e38 <Quantizer::GetFrequencyForNote(int)+0x1c>
    return freqs[_scale][note];
    1e28:	4a06      	ldr	r2, [pc, #24]	; (1e44 <Quantizer::GetFrequencyForNote(int)+0x28>)
    1e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1e2e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1e32:	ed93 0a00 	vldr	s0, [r3]
    1e36:	4770      	bx	lr
  else
    return 0;
    1e38:	ed9f 0a03 	vldr	s0, [pc, #12]	; 1e48 <Quantizer::GetFrequencyForNote(int)+0x2c>
}
    1e3c:	4770      	bx	lr
    1e3e:	bf00      	nop
    1e40:	200188c8 	.word	0x200188c8
    1e44:	2001924c 	.word	0x2001924c
    1e48:	00000000 	.word	0x00000000

00001e4c <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*)#1}::_FUN(void*)>:
        destructor_ptr{ [](storage_ptr_t) -> void {} }
    {}

    template<class C> explicit constexpr vtable(wrapper<C>) noexcept :
        invoke_ptr{ [](storage_ptr_t storage_ptr, Args&&... args) -> R
            { return (*static_cast<C*>(storage_ptr))(
    1e4c:	6803      	ldr	r3, [r0, #0]
    1e4e:	4718      	bx	r3

00001e50 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#2}::_FUN(void*, void*)>:
                static_cast<Args&&>(args)...
            ); }
        },
        copy_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
            { ::new (dst_ptr) C{ (*static_cast<C*>(src_ptr)) }; }
    1e50:	680b      	ldr	r3, [r1, #0]
    1e52:	6003      	str	r3, [r0, #0]
        copy_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
    1e54:	4770      	bx	lr
    1e56:	bf00      	nop

00001e58 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#3}::_FUN(void*, void*)>:
        },
        relocate_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
            {
                ::new (dst_ptr) C{ std::move(*static_cast<C*>(src_ptr)) };
    1e58:	680b      	ldr	r3, [r1, #0]
    1e5a:	6003      	str	r3, [r0, #0]
        relocate_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
    1e5c:	4770      	bx	lr
    1e5e:	bf00      	nop

00001e60 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*)#4}::_FUN(void*)>:
                static_cast<C*>(src_ptr)->~C();
            }
        },
        destructor_ptr{ [](storage_ptr_t src_ptr) -> void
    1e60:	4770      	bx	lr
    1e62:	bf00      	nop

00001e64 <writeOutputs()>:
  // counts the ops/sec
  n++;
#endif
  
  // iterate through the values  
  for (p=0; p< 4; p++){
    1e64:	2200      	movs	r2, #0
void writeOutputs() {
    1e66:	b538      	push	{r3, r4, r5, lr}
  for (p=0; p< 4; p++){
    1e68:	4c06      	ldr	r4, [pc, #24]	; (1e84 <writeOutputs()+0x20>)
    1e6a:	4613      	mov	r3, r2
    1e6c:	4d06      	ldr	r5, [pc, #24]	; (1e88 <writeOutputs()+0x24>)
    1e6e:	6022      	str	r2, [r4, #0]
  
    // update the cv
    cvOutputs[p]->Update();
    1e70:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    1e74:	f7fe f92a 	bl	cc <CVOutput::Update()>
  for (p=0; p< 4; p++){
    1e78:	6823      	ldr	r3, [r4, #0]
    1e7a:	3301      	adds	r3, #1
    1e7c:	2b03      	cmp	r3, #3
    1e7e:	6023      	str	r3, [r4, #0]
    1e80:	ddf6      	ble.n	1e70 <writeOutputs()+0xc>

  } 
}
    1e82:	bd38      	pop	{r3, r4, r5, pc}
    1e84:	2001abcc 	.word	0x2001abcc
    1e88:	2001ab80 	.word	0x2001ab80

00001e8c <IntervalTimer::~IntervalTimer()>:
private:
	static const int32_t MAX_PERIOD = UINT32_MAX / (24000000 / 1000000); // need to change to int32_t to avoid warnings
public:
	constexpr IntervalTimer() {
	}
	~IntervalTimer() {
    1e8c:	b510      	push	{r4, lr}
    1e8e:	4604      	mov	r4, r0
		end();
    1e90:	f002 fa36 	bl	4300 <IntervalTimer::end()>
	}
    1e94:	4620      	mov	r0, r4
    1e96:	bd10      	pop	{r4, pc}

00001e98 <loop>:
void loop() {
    1e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return systick_millis_count;
    1e9a:	4b15      	ldr	r3, [pc, #84]	; (1ef0 <loop+0x58>)
  for (i=0; i< 4; i++){
    1e9c:	2200      	movs	r2, #0
  currentTime = millis();
    1e9e:	4d15      	ldr	r5, [pc, #84]	; (1ef4 <loop+0x5c>)
    1ea0:	6819      	ldr	r1, [r3, #0]
  for (i=0; i< 4; i++){
    1ea2:	4613      	mov	r3, r2
    1ea4:	4c14      	ldr	r4, [pc, #80]	; (1ef8 <loop+0x60>)
    1ea6:	4e15      	ldr	r6, [pc, #84]	; (1efc <loop+0x64>)
    1ea8:	6022      	str	r2, [r4, #0]
  currentTime = millis();
    1eaa:	6029      	str	r1, [r5, #0]
  for (i=0; i< 4; i++){
    1eac:	e000      	b.n	1eb0 <loop+0x18>
  if (currentTime >= kTime){
    1eae:	6829      	ldr	r1, [r5, #0]
    triggerOutputs[i]->Update(currentTime);
    1eb0:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
    1eb4:	f7fe f9bc 	bl	230 <TriggerOutput::Update(unsigned long)>
  for (i=0; i< 4; i++){
    1eb8:	6823      	ldr	r3, [r4, #0]
    1eba:	3301      	adds	r3, #1
    1ebc:	2b03      	cmp	r3, #3
    1ebe:	6023      	str	r3, [r4, #0]
    1ec0:	ddf5      	ble.n	1eae <loop+0x16>
  if (currentTime >= kTime){
    1ec2:	4f0f      	ldr	r7, [pc, #60]	; (1f00 <loop+0x68>)
    1ec4:	682a      	ldr	r2, [r5, #0]
    1ec6:	683b      	ldr	r3, [r7, #0]
    1ec8:	429a      	cmp	r2, r3
    1eca:	d30f      	bcc.n	1eec <loop+0x54>
    for (i = 0; i < 4; i++)
    1ecc:	2200      	movs	r2, #0
    1ece:	4e0d      	ldr	r6, [pc, #52]	; (1f04 <loop+0x6c>)
    1ed0:	4613      	mov	r3, r2
    1ed2:	6022      	str	r2, [r4, #0]
      cvOutputs[i]->UpdateLED();
    1ed4:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
    1ed8:	f7ff f968 	bl	11ac <CVOutput::UpdateLED()>
    for (i = 0; i < 4; i++)
    1edc:	6823      	ldr	r3, [r4, #0]
    1ede:	3301      	adds	r3, #1
    1ee0:	2b03      	cmp	r3, #3
    1ee2:	6023      	str	r3, [r4, #0]
    1ee4:	ddf6      	ble.n	1ed4 <loop+0x3c>
    kTime = currentTime + LEDRATE;
    1ee6:	682b      	ldr	r3, [r5, #0]
    1ee8:	3332      	adds	r3, #50	; 0x32
    1eea:	603b      	str	r3, [r7, #0]
}
    1eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1eee:	bf00      	nop
    1ef0:	2001ac40 	.word	0x2001ac40
    1ef4:	2001ab7c 	.word	0x2001ab7c
    1ef8:	2001abac 	.word	0x2001abac
    1efc:	2001ac4c 	.word	0x2001ac4c
    1f00:	2001abb0 	.word	0x2001abb0
    1f04:	2001ab80 	.word	0x2001ab80

00001f08 <writeCalibrationValue(int, int)>:
 */
void writeCalibrationValue(int index, int value){
  #ifdef DEBUG
  Serial.printf("writing calibration for CV[%d] = %d\n", index, value);
  #endif  
  int address = 4 + (2 * index);
    1f08:	3002      	adds	r0, #2
void writeCalibrationValue(int index, int value){
    1f0a:	b570      	push	{r4, r5, r6, lr}
  int address = 4 + (2 * index);
    1f0c:	0044      	lsls	r4, r0, #1
  uint16_t uInt16t = (uint16_t)value;
  byte one = uInt16t & 255;
  byte two = uInt16t >> 8;
    1f0e:	f3c1 2507 	ubfx	r5, r1, #8, #8
  byte one = uInt16t & 255;
    1f12:	b2ce      	uxtb	r6, r1

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    1f14:	4620      	mov	r0, r4
    1f16:	f002 fcd1 	bl	48bc <eeprom_read_byte>
  if (EEPROM.read(address) != one) EEPROM.write(address, one);
    1f1a:	4286      	cmp	r6, r0
    1f1c:	d003      	beq.n	1f26 <writeCalibrationValue(int, int)+0x1e>
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    1f1e:	4631      	mov	r1, r6
    1f20:	4620      	mov	r0, r4
    1f22:	f002 fdd7 	bl	4ad4 <eeprom_write_byte>
  if (EEPROM.read(++address) != two) EEPROM.write(address, two);  
    1f26:	3401      	adds	r4, #1
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    1f28:	4620      	mov	r0, r4
    1f2a:	f002 fcc7 	bl	48bc <eeprom_read_byte>
    1f2e:	4285      	cmp	r5, r0
    1f30:	d100      	bne.n	1f34 <writeCalibrationValue(int, int)+0x2c>
}
    1f32:	bd70      	pop	{r4, r5, r6, pc}
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    1f34:	4629      	mov	r1, r5
    1f36:	4620      	mov	r0, r4
    1f38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1f3c:	f002 bdca 	b.w	4ad4 <eeprom_write_byte>

00001f40 <actOnCommand(unsigned char, unsigned char, int)>:
void actOnCommand(byte cmd, byte out, int value){
    1f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  targetOutput = out;
    1f42:	4dac      	ldr	r5, [pc, #688]	; (21f4 <actOnCommand(unsigned char, unsigned char, int)+0x2b4>)
void actOnCommand(byte cmd, byte out, int value){
    1f44:	460c      	mov	r4, r1
    1f46:	4bac      	ldr	r3, [pc, #688]	; (21f8 <actOnCommand(unsigned char, unsigned char, int)+0x2b8>)
    1f48:	4616      	mov	r6, r2
  targetOutput = out;
    1f4a:	6029      	str	r1, [r5, #0]
    1f4c:	681f      	ldr	r7, [r3, #0]
  switch(cmd) {
    1f4e:	286f      	cmp	r0, #111	; 0x6f
    1f50:	f200 8082 	bhi.w	2058 <actOnCommand(unsigned char, unsigned char, int)+0x118>
    1f54:	e8df f010 	tbh	[pc, r0, lsl #1]
    1f58:	034b0081 	.word	0x034b0081
    1f5c:	03390342 	.word	0x03390342
    1f60:	03290330 	.word	0x03290330
    1f64:	0317031f 	.word	0x0317031f
    1f68:	0300030e 	.word	0x0300030e
    1f6c:	02ee02f7 	.word	0x02ee02f7
    1f70:	02de02e5 	.word	0x02de02e5
    1f74:	02ce02d6 	.word	0x02ce02d6
    1f78:	02be02c6 	.word	0x02be02c6
    1f7c:	02ac02b5 	.word	0x02ac02b5
    1f80:	029b02a3 	.word	0x029b02a3
    1f84:	0287028f 	.word	0x0287028f
    1f88:	026f027b 	.word	0x026f027b
    1f8c:	02570263 	.word	0x02570263
    1f90:	0240024b 	.word	0x0240024b
    1f94:	00800235 	.word	0x00800235
    1f98:	00800070 	.word	0x00800070
    1f9c:	0227022e 	.word	0x0227022e
    1fa0:	00800218 	.word	0x00800218
    1fa4:	00800080 	.word	0x00800080
    1fa8:	00800080 	.word	0x00800080
    1fac:	00800080 	.word	0x00800080
    1fb0:	00800080 	.word	0x00800080
    1fb4:	00800080 	.word	0x00800080
    1fb8:	02080210 	.word	0x02080210
    1fbc:	01f80200 	.word	0x01f80200
    1fc0:	01e801f0 	.word	0x01e801f0
    1fc4:	00800080 	.word	0x00800080
    1fc8:	00800080 	.word	0x00800080
    1fcc:	00800080 	.word	0x00800080
    1fd0:	00800080 	.word	0x00800080
    1fd4:	00800080 	.word	0x00800080
    1fd8:	01d801e0 	.word	0x01d801e0
    1fdc:	01c801d0 	.word	0x01c801d0
    1fe0:	01b801c0 	.word	0x01b801c0
    1fe4:	01a801b0 	.word	0x01a801b0
    1fe8:	019801a0 	.word	0x019801a0
    1fec:	01890190 	.word	0x01890190
    1ff0:	01790181 	.word	0x01790181
    1ff4:	01680171 	.word	0x01680171
    1ff8:	0156015f 	.word	0x0156015f
    1ffc:	01450080 	.word	0x01450080
    2000:	0133013c 	.word	0x0133013c
    2004:	0121012a 	.word	0x0121012a
    2008:	010f0118 	.word	0x010f0118
    200c:	00800107 	.word	0x00800107
    2010:	00800080 	.word	0x00800080
    2014:	00800080 	.word	0x00800080
    2018:	00f600ff 	.word	0x00f600ff
    201c:	00e400ed 	.word	0x00e400ed
    2020:	00d200db 	.word	0x00d200db
    2024:	00c200c9 	.word	0x00c200c9
    2028:	00800080 	.word	0x00800080
    202c:	00b200ba 	.word	0x00b200ba
    2030:	00a200aa 	.word	0x00a200aa
    2034:	008c0097 	.word	0x008c0097
    2038:	4c70      	ldr	r4, [pc, #448]	; (21fc <actOnCommand(unsigned char, unsigned char, int)+0x2bc>)
    203a:	4d71      	ldr	r5, [pc, #452]	; (2200 <actOnCommand(unsigned char, unsigned char, int)+0x2c0>)
    203c:	f104 0610 	add.w	r6, r4, #16
        triggerOutputs[w]->Kill();
    2040:	f854 0b04 	ldr.w	r0, [r4], #4
    2044:	6803      	ldr	r3, [r0, #0]
    2046:	681b      	ldr	r3, [r3, #0]
    2048:	4798      	blx	r3
        cvOutputs[w]->Kill();
    204a:	f855 0b04 	ldr.w	r0, [r5], #4
    204e:	6803      	ldr	r3, [r0, #0]
    2050:	681b      	ldr	r3, [r3, #0]
    2052:	4798      	blx	r3
      for(int w=0; w<4; w++){
    2054:	42b4      	cmp	r4, r6
    2056:	d1f3      	bne.n	2040 <actOnCommand(unsigned char, unsigned char, int)+0x100>
}
    2058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      triggerOutputs[targetOutput]->SetState(value > 0);    
    205a:	4b68      	ldr	r3, [pc, #416]	; (21fc <actOnCommand(unsigned char, unsigned char, int)+0x2bc>)
    205c:	2a00      	cmp	r2, #0
    205e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    2062:	bfd4      	ite	le
    2064:	2100      	movle	r1, #0
    2066:	2101      	movgt	r1, #1
}
    2068:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      triggerOutputs[targetOutput]->SetState(value > 0);    
    206c:	f000 bc50 	b.w	2910 <TriggerOutput::SetState(bool)>
      cvOutputs[targetOutput]->ResetCalibration();
    2070:	4b63      	ldr	r3, [pc, #396]	; (2200 <actOnCommand(unsigned char, unsigned char, int)+0x2c0>)
    2072:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
    2076:	f7fe fd8b 	bl	b90 <CVOutput::ResetCalibration()>
      writeCalibrationValue(targetOutput, 0);
    207a:	6828      	ldr	r0, [r5, #0]
    207c:	2100      	movs	r1, #0
}
    207e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      writeCalibrationValue(targetOutput, 0);
    2082:	f7ff bf41 	b.w	1f08 <writeCalibrationValue(int, int)>
      writeCalibrationValue(targetOutput, cvOutputs[targetOutput]->Calibrate());
    2086:	4b5e      	ldr	r3, [pc, #376]	; (2200 <actOnCommand(unsigned char, unsigned char, int)+0x2c0>)
    2088:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
    208c:	f7fe f980 	bl	390 <CVOutput::Calibrate()>
    2090:	4601      	mov	r1, r0
    2092:	4620      	mov	r0, r4
}
    2094:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      writeCalibrationValue(targetOutput, cvOutputs[targetOutput]->Calibrate());
    2098:	f7ff bf36 	b.w	1f08 <writeCalibrationValue(int, int)>
      cvOutputs[targetOutput]->SetENV(value);
    209c:	4b58      	ldr	r3, [pc, #352]	; (2200 <actOnCommand(unsigned char, unsigned char, int)+0x2c0>)
    209e:	4611      	mov	r1, r2
    20a0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    20a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetENV(value);
    20a8:	f7ff b808 	b.w	10bc <CVOutput::SetENV(int)>
      cvOutputs[targetOutput]->SetLoop(value);
    20ac:	4b54      	ldr	r3, [pc, #336]	; (2200 <actOnCommand(unsigned char, unsigned char, int)+0x2c0>)
    20ae:	4611      	mov	r1, r2
    20b0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    20b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetLoop(value);
    20b8:	f7ff b84c 	b.w	1154 <CVOutput::SetLoop(int)>
      cvOutputs[targetOutput]->SetEOC(value - 1);
    20bc:	4b50      	ldr	r3, [pc, #320]	; (2200 <actOnCommand(unsigned char, unsigned char, int)+0x2c0>)
    20be:	1e51      	subs	r1, r2, #1
    20c0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    20c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetEOC(value - 1);
    20c8:	f7ff b860 	b.w	118c <CVOutput::SetEOC(int)>
      cvOutputs[targetOutput]->SetEOR(value - 1);
    20cc:	4b4c      	ldr	r3, [pc, #304]	; (2200 <actOnCommand(unsigned char, unsigned char, int)+0x2c0>)
    20ce:	1e51      	subs	r1, r2, #1
    20d0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    20d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetEOR(value - 1);
    20d8:	f7ff b848 	b.w	116c <CVOutput::SetEOR(int)>
      cvOutputs[targetOutput]->TriggerEnvelope();
    20dc:	4b48      	ldr	r3, [pc, #288]	; (2200 <actOnCommand(unsigned char, unsigned char, int)+0x2c0>)
    20de:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
    20e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->TriggerEnvelope();
    20e6:	f7fe bf97 	b.w	1018 <CVOutput::TriggerEnvelope()>
      cvOutputs[targetOutput]->SetDecay(value, 2);
    20ea:	4b45      	ldr	r3, [pc, #276]	; (2200 <actOnCommand(unsigned char, unsigned char, int)+0x2c0>)
    20ec:	4631      	mov	r1, r6
    20ee:	2202      	movs	r2, #2
    20f0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    20f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetDecay(value, 2);
    20f8:	f7fe bbb0 	b.w	85c <CVOutput::SetDecay(int, short)>
      cvOutputs[targetOutput]->SetDecay(value, 1);
    20fc:	4b40      	ldr	r3, [pc, #256]	; (2200 <actOnCommand(unsigned char, unsigned char, int)+0x2c0>)
    20fe:	4631      	mov	r1, r6
    2100:	2201      	movs	r2, #1
    2102:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    2106:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetDecay(value, 1);
    210a:	f7fe bba7 	b.w	85c <CVOutput::SetDecay(int, short)>
      cvOutputs[targetOutput]->SetDecay(value, 0);
    210e:	4b3c      	ldr	r3, [pc, #240]	; (2200 <actOnCommand(unsigned char, unsigned char, int)+0x2c0>)
    2110:	4631      	mov	r1, r6
    2112:	2200      	movs	r2, #0
    2114:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    2118:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetDecay(value, 0);
    211c:	f7fe bb9e 	b.w	85c <CVOutput::SetDecay(int, short)>
      cvOutputs[targetOutput]->SetAttack(value, 2);
    2120:	4b37      	ldr	r3, [pc, #220]	; (2200 <actOnCommand(unsigned char, unsigned char, int)+0x2c0>)
    2122:	4631      	mov	r1, r6
    2124:	2202      	movs	r2, #2
    2126:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    212a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetAttack(value, 2);
    212e:	f7fe bb67 	b.w	800 <CVOutput::SetAttack(int, short)>
      cvOutputs[targetOutput]->SetAttack(value, 1);
    2132:	4b33      	ldr	r3, [pc, #204]	; (2200 <actOnCommand(unsigned char, unsigned char, int)+0x2c0>)
    2134:	4631      	mov	r1, r6
    2136:	2201      	movs	r2, #1
    2138:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    213c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetAttack(value, 1);
    2140:	f7fe bb5e 	b.w	800 <CVOutput::SetAttack(int, short)>
      cvOutputs[targetOutput]->SetAttack(value, 0);
    2144:	4b2e      	ldr	r3, [pc, #184]	; (2200 <actOnCommand(unsigned char, unsigned char, int)+0x2c0>)
    2146:	4631      	mov	r1, r6
    2148:	2200      	movs	r2, #0
    214a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    214e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetAttack(value, 0);
    2152:	f7fe bb55 	b.w	800 <CVOutput::SetAttack(int, short)>
      cvOutputs[targetOutput]->SetEnvelopeMode(value);
    2156:	4b2a      	ldr	r3, [pc, #168]	; (2200 <actOnCommand(unsigned char, unsigned char, int)+0x2c0>)
    2158:	4611      	mov	r1, r2
    215a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    215e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetEnvelopeMode(value);
    2162:	f7fe bc4b 	b.w	9fc <CVOutput::SetEnvelopeMode(int)>
      cvOutputs[targetOutput]->SetCenter(value << 1);
    2166:	4b26      	ldr	r3, [pc, #152]	; (2200 <actOnCommand(unsigned char, unsigned char, int)+0x2c0>)
    2168:	0051      	lsls	r1, r2, #1
    216a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    216e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetCenter(value << 1);
    2172:	f7fe b925 	b.w	3c0 <CVOutput::SetCenter(int)>
      cvOutputs[targetOutput]->SetCycle(value, 2);
    2176:	4b22      	ldr	r3, [pc, #136]	; (2200 <actOnCommand(unsigned char, unsigned char, int)+0x2c0>)
    2178:	4631      	mov	r1, r6
    217a:	2202      	movs	r2, #2
    217c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    2180:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetCycle(value, 2);
    2184:	f7fe ba64 	b.w	650 <CVOutput::SetCycle(int, short)>
      cvOutputs[targetOutput]->SetCycle(value, 1);
    2188:	4b1d      	ldr	r3, [pc, #116]	; (2200 <actOnCommand(unsigned char, unsigned char, int)+0x2c0>)
    218a:	4631      	mov	r1, r6
    218c:	2201      	movs	r2, #1
    218e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    2192:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetCycle(value, 1);
    2196:	f7fe ba5b 	b.w	650 <CVOutput::SetCycle(int, short)>
      cvOutputs[targetOutput]->SetCycle(value, 0);
    219a:	4b19      	ldr	r3, [pc, #100]	; (2200 <actOnCommand(unsigned char, unsigned char, int)+0x2c0>)
    219c:	4631      	mov	r1, r6
    219e:	2200      	movs	r2, #0
    21a0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    21a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetCycle(value, 0);
    21a8:	f7fe ba52 	b.w	650 <CVOutput::SetCycle(int, short)>
      cvOutputs[targetOutput]->TargetCycle(value, 2);
    21ac:	4b14      	ldr	r3, [pc, #80]	; (2200 <actOnCommand(unsigned char, unsigned char, int)+0x2c0>)
    21ae:	4631      	mov	r1, r6
    21b0:	2202      	movs	r2, #2
    21b2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    21b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->TargetCycle(value, 2);
    21ba:	f7fe ba81 	b.w	6c0 <CVOutput::TargetCycle(int, short)>
      cvOutputs[targetOutput]->TargetCycle(value, 1);
    21be:	4b10      	ldr	r3, [pc, #64]	; (2200 <actOnCommand(unsigned char, unsigned char, int)+0x2c0>)
    21c0:	4631      	mov	r1, r6
    21c2:	2201      	movs	r2, #1
    21c4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    21c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->TargetCycle(value, 1);
    21cc:	f7fe ba78 	b.w	6c0 <CVOutput::TargetCycle(int, short)>
      cvOutputs[targetOutput]->TargetCycle(value, 0);
    21d0:	4b0b      	ldr	r3, [pc, #44]	; (2200 <actOnCommand(unsigned char, unsigned char, int)+0x2c0>)
    21d2:	4631      	mov	r1, r6
    21d4:	2200      	movs	r2, #0
    21d6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    21da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->TargetCycle(value, 0);
    21de:	f7fe ba6f 	b.w	6c0 <CVOutput::TargetCycle(int, short)>
      cvOutputs[targetOutput]->SetPhaseOffset(value);
    21e2:	4b07      	ldr	r3, [pc, #28]	; (2200 <actOnCommand(unsigned char, unsigned char, int)+0x2c0>)
    21e4:	4611      	mov	r1, r2
    21e6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    21ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetPhaseOffset(value);
    21ee:	f7fe bafb 	b.w	7e8 <CVOutput::SetPhaseOffset(int)>
    21f2:	bf00      	nop
    21f4:	2001ac48 	.word	0x2001ac48
    21f8:	2001ac40 	.word	0x2001ac40
    21fc:	2001ac4c 	.word	0x2001ac4c
    2200:	2001ab80 	.word	0x2001ab80
      cvOutputs[targetOutput]->SetFrequencySlew(value, 2);
    2204:	4bd9      	ldr	r3, [pc, #868]	; (256c <actOnCommand(unsigned char, unsigned char, int)+0x62c>)
    2206:	4631      	mov	r1, r6
    2208:	2202      	movs	r2, #2
    220a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    220e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetFrequencySlew(value, 2);
    2212:	f7fe b983 	b.w	51c <CVOutput::SetFrequencySlew(int, short)>
      cvOutputs[targetOutput]->SetFrequencySlew(value, 1);
    2216:	4bd5      	ldr	r3, [pc, #852]	; (256c <actOnCommand(unsigned char, unsigned char, int)+0x62c>)
    2218:	4631      	mov	r1, r6
    221a:	2201      	movs	r2, #1
    221c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    2220:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetFrequencySlew(value, 1);
    2224:	f7fe b97a 	b.w	51c <CVOutput::SetFrequencySlew(int, short)>
      cvOutputs[targetOutput]->SetFrequencySlew(value, 0);
    2228:	4bd0      	ldr	r3, [pc, #832]	; (256c <actOnCommand(unsigned char, unsigned char, int)+0x62c>)
    222a:	4631      	mov	r1, r6
    222c:	2200      	movs	r2, #0
    222e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    2232:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetFrequencySlew(value, 0);
    2236:	f7fe b971 	b.w	51c <CVOutput::SetFrequencySlew(int, short)>
      cvOutputs[targetOutput]->SetOscQuantizationScale(value);
    223a:	4bcc      	ldr	r3, [pc, #816]	; (256c <actOnCommand(unsigned char, unsigned char, int)+0x62c>)
    223c:	4611      	mov	r1, r2
    223e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    2242:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetOscQuantizationScale(value);
    2246:	f7fe bad7 	b.w	7f8 <CVOutput::SetOscQuantizationScale(int)>
      cvOutputs[targetOutput]->SetRectify(value);
    224a:	4bc8      	ldr	r3, [pc, #800]	; (256c <actOnCommand(unsigned char, unsigned char, int)+0x62c>)
    224c:	4611      	mov	r1, r2
    224e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    2252:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetRectify(value);
    2256:	f7fe ba6f 	b.w	738 <CVOutput::SetRectify(int)>
      cvOutputs[targetOutput]->SetWidth(value);
    225a:	4bc4      	ldr	r3, [pc, #784]	; (256c <actOnCommand(unsigned char, unsigned char, int)+0x62c>)
    225c:	4611      	mov	r1, r2
    225e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    2262:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetWidth(value);
    2266:	f7fe ba63 	b.w	730 <CVOutput::SetWidth(int)>
      cvOutputs[targetOutput]->Sync();
    226a:	4bc0      	ldr	r3, [pc, #768]	; (256c <actOnCommand(unsigned char, unsigned char, int)+0x62c>)
    226c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
    2270:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->Sync();
    2274:	f7fe baac 	b.w	7d0 <CVOutput::Sync()>
      cvOutputs[targetOutput]->SetWaveform(value);
    2278:	4bbc      	ldr	r3, [pc, #752]	; (256c <actOnCommand(unsigned char, unsigned char, int)+0x62c>)
    227a:	4611      	mov	r1, r2
    227c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    2280:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetWaveform(value);
    2284:	f7fe bab4 	b.w	7f0 <CVOutput::SetWaveform(int)>
      cvOutputs[targetOutput]->SetLFO(value);
    2288:	4bb8      	ldr	r3, [pc, #736]	; (256c <actOnCommand(unsigned char, unsigned char, int)+0x62c>)
    228a:	4611      	mov	r1, r2
    228c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    2290:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetLFO(value);
    2294:	f7fe ba54 	b.w	740 <CVOutput::SetLFO(int)>
      cvOutputs[targetOutput]->TargetLFO(value);
    2298:	4bb4      	ldr	r3, [pc, #720]	; (256c <actOnCommand(unsigned char, unsigned char, int)+0x62c>)
    229a:	4611      	mov	r1, r2
    229c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    22a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->TargetLFO(value);
    22a4:	f7fe ba70 	b.w	788 <CVOutput::TargetLFO(int)>
      cvOutputs[targetOutput]->SetOscNote(value);
    22a8:	4bb0      	ldr	r3, [pc, #704]	; (256c <actOnCommand(unsigned char, unsigned char, int)+0x62c>)
    22aa:	4611      	mov	r1, r2
    22ac:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    22b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetOscNote(value);
    22b4:	f7fe b98e 	b.w	5d4 <CVOutput::SetOscNote(int)>
      cvOutputs[targetOutput]->TargetOscNote(value);
    22b8:	4bac      	ldr	r3, [pc, #688]	; (256c <actOnCommand(unsigned char, unsigned char, int)+0x62c>)
    22ba:	4611      	mov	r1, r2
    22bc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    22c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->TargetOscNote(value);
    22c4:	f7fe b9a4 	b.w	610 <CVOutput::TargetOscNote(int)>
      cvOutputs[targetOutput]->SetFrequency(value);
    22c8:	4ba8      	ldr	r3, [pc, #672]	; (256c <actOnCommand(unsigned char, unsigned char, int)+0x62c>)
    22ca:	4611      	mov	r1, r2
    22cc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    22d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetFrequency(value);
    22d4:	f7fe b87e 	b.w	3d4 <CVOutput::SetFrequency(int)>
      cvOutputs[targetOutput]->TargetFrequency(value);
    22d8:	4ba4      	ldr	r3, [pc, #656]	; (256c <actOnCommand(unsigned char, unsigned char, int)+0x62c>)
    22da:	4611      	mov	r1, r2
    22dc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    22e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->TargetFrequency(value);
    22e4:	f7fe b89a 	b.w	41c <CVOutput::TargetFrequency(int)>
      cvOutputs[targetOutput]->SetQuantizedVOct(value);
    22e8:	4ba0      	ldr	r3, [pc, #640]	; (256c <actOnCommand(unsigned char, unsigned char, int)+0x62c>)
    22ea:	4611      	mov	r1, r2
    22ec:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    22f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetQuantizedVOct(value);
    22f4:	f7fe b8b6 	b.w	464 <CVOutput::SetQuantizedVOct(int)>
      cvOutputs[targetOutput]->TargetQuantizedVOct(value);
    22f8:	4b9c      	ldr	r3, [pc, #624]	; (256c <actOnCommand(unsigned char, unsigned char, int)+0x62c>)
    22fa:	4611      	mov	r1, r2
    22fc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    2300:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->TargetQuantizedVOct(value);
    2304:	f7fe b8dc 	b.w	4c0 <CVOutput::TargetQuantizedVOct(int)>
      cvOutputs[targetOutput]->SetVOct(value);
    2308:	4b98      	ldr	r3, [pc, #608]	; (256c <actOnCommand(unsigned char, unsigned char, int)+0x62c>)
    230a:	4611      	mov	r1, r2
    230c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    2310:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetVOct(value);
    2314:	f7fe b90e 	b.w	534 <CVOutput::SetVOct(int)>
      cvOutputs[targetOutput]->TargetVOct(value);
    2318:	4b94      	ldr	r3, [pc, #592]	; (256c <actOnCommand(unsigned char, unsigned char, int)+0x62c>)
    231a:	4611      	mov	r1, r2
    231c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    2320:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->TargetVOct(value);
    2324:	f7fe b92e 	b.w	584 <CVOutput::TargetVOct(int)>
      cvOutputs[targetOutput]->SetLog(value);
    2328:	4b90      	ldr	r3, [pc, #576]	; (256c <actOnCommand(unsigned char, unsigned char, int)+0x62c>)
    232a:	4611      	mov	r1, r2
    232c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    2330:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetLog(value);
    2334:	f7fe b834 	b.w	3a0 <CVOutput::SetLog(int)>
      cvOutputs[targetOutput]->SetQuantizationScale(value);
    2338:	4b8c      	ldr	r3, [pc, #560]	; (256c <actOnCommand(unsigned char, unsigned char, int)+0x62c>)
    233a:	4611      	mov	r1, r2
    233c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    2340:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetQuantizationScale(value);
    2344:	f7fe b838 	b.w	3b8 <CVOutput::SetQuantizationScale(int)>
      cvOutputs[targetOutput]->SetNote(value);
    2348:	4b88      	ldr	r3, [pc, #544]	; (256c <actOnCommand(unsigned char, unsigned char, int)+0x62c>)
    234a:	4611      	mov	r1, r2
    234c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    2350:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetNote(value);
    2354:	f7fe bce4 	b.w	d20 <CVOutput::SetNote(int)>
      cvOutputs[targetOutput]->TargetNote(value);
    2358:	4b84      	ldr	r3, [pc, #528]	; (256c <actOnCommand(unsigned char, unsigned char, int)+0x62c>)
    235a:	4611      	mov	r1, r2
    235c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    2360:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->TargetNote(value);
    2364:	f7fe bc56 	b.w	c14 <CVOutput::TargetNote(int)>
      cvOutputs[targetOutput]->SetQuantizedValue(value);
    2368:	4b80      	ldr	r3, [pc, #512]	; (256c <actOnCommand(unsigned char, unsigned char, int)+0x62c>)
    236a:	4611      	mov	r1, r2
    236c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    2370:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetQuantizedValue(value);
    2374:	f7fe bd04 	b.w	d80 <CVOutput::SetQuantizedValue(int)>
      cvOutputs[targetOutput]->TargetQuantizedValue(value);
    2378:	4b7c      	ldr	r3, [pc, #496]	; (256c <actOnCommand(unsigned char, unsigned char, int)+0x62c>)
    237a:	4611      	mov	r1, r2
    237c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    2380:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->TargetQuantizedValue(value);
    2384:	f7fe bc88 	b.w	c98 <CVOutput::TargetQuantizedValue(int)>
    2388:	4c79      	ldr	r4, [pc, #484]	; (2570 <actOnCommand(unsigned char, unsigned char, int)+0x630>)
    238a:	4d78      	ldr	r5, [pc, #480]	; (256c <actOnCommand(unsigned char, unsigned char, int)+0x62c>)
    238c:	f104 0610 	add.w	r6, r4, #16
          triggerOutputs[w]->Reset();
    2390:	f854 0b04 	ldr.w	r0, [r4], #4
    2394:	f000 fbb0 	bl	2af8 <TriggerOutput::Reset()>
          cvOutputs[w]->Reset();
    2398:	f855 0b04 	ldr.w	r0, [r5], #4
    239c:	f7fe fd22 	bl	de4 <CVOutput::Reset()>
       for(int w=0; w<4; w++){
    23a0:	42b4      	cmp	r4, r6
    23a2:	d1f5      	bne.n	2390 <actOnCommand(unsigned char, unsigned char, int)+0x450>
}
    23a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       cvOutputs[targetOutput]->Reset();
    23a6:	4b71      	ldr	r3, [pc, #452]	; (256c <actOnCommand(unsigned char, unsigned char, int)+0x62c>)
    23a8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
    23ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
       cvOutputs[targetOutput]->Reset();
    23b0:	f7fe bd18 	b.w	de4 <CVOutput::Reset()>
       triggerOutputs[targetOutput]->Reset();
    23b4:	4b6e      	ldr	r3, [pc, #440]	; (2570 <actOnCommand(unsigned char, unsigned char, int)+0x630>)
    23b6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
    23ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
       triggerOutputs[targetOutput]->Reset();
    23be:	f000 bb9b 	b.w	2af8 <TriggerOutput::Reset()>
    23c2:	4c6b      	ldr	r4, [pc, #428]	; (2570 <actOnCommand(unsigned char, unsigned char, int)+0x630>)
    23c4:	f104 0510 	add.w	r5, r4, #16
        triggerOutputs[w]->SetMetroCount(value); 
    23c8:	f854 0b04 	ldr.w	r0, [r4], #4
    23cc:	4631      	mov	r1, r6
    23ce:	f000 fb7b 	bl	2ac8 <TriggerOutput::SetMetroCount(int)>
      for (int w = 0; w < 4; w++)
    23d2:	42ac      	cmp	r4, r5
    23d4:	d1f8      	bne.n	23c8 <actOnCommand(unsigned char, unsigned char, int)+0x488>
}
    23d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    23d8:	4c65      	ldr	r4, [pc, #404]	; (2570 <actOnCommand(unsigned char, unsigned char, int)+0x630>)
    23da:	f104 0510 	add.w	r5, r4, #16
        triggerOutputs[w]->Sync(ms);
    23de:	f854 0b04 	ldr.w	r0, [r4], #4
    23e2:	4639      	mov	r1, r7
    23e4:	f000 fb82 	bl	2aec <TriggerOutput::Sync(unsigned long)>
      for (int w = 0; w < 4; w++)
    23e8:	42ac      	cmp	r4, r5
    23ea:	d1f8      	bne.n	23de <actOnCommand(unsigned char, unsigned char, int)+0x49e>
}
    23ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    23ee:	4c60      	ldr	r4, [pc, #384]	; (2570 <actOnCommand(unsigned char, unsigned char, int)+0x630>)
    23f0:	f104 0510 	add.w	r5, r4, #16
        triggerOutputs[w]->SetMetro(value, ms);
    23f4:	f854 0b04 	ldr.w	r0, [r4], #4
    23f8:	463a      	mov	r2, r7
    23fa:	4631      	mov	r1, r6
    23fc:	f000 fb1a 	bl	2a34 <TriggerOutput::SetMetro(int, unsigned long)>
      for (int w = 0; w < 4; w++)
    2400:	42ac      	cmp	r4, r5
    2402:	d1f7      	bne.n	23f4 <actOnCommand(unsigned char, unsigned char, int)+0x4b4>
}
    2404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2406:	4c5a      	ldr	r4, [pc, #360]	; (2570 <actOnCommand(unsigned char, unsigned char, int)+0x630>)
    2408:	f104 0510 	add.w	r5, r4, #16
        triggerOutputs[w]->SetMetroTime(value, 3);    
    240c:	f854 0b04 	ldr.w	r0, [r4], #4
    2410:	2203      	movs	r2, #3
    2412:	4631      	mov	r1, r6
    2414:	f000 fb2c 	bl	2a70 <TriggerOutput::SetMetroTime(int, short)>
      for (int w = 0; w < 4; w++)
    2418:	42ac      	cmp	r4, r5
    241a:	d1f7      	bne.n	240c <actOnCommand(unsigned char, unsigned char, int)+0x4cc>
}
    241c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    241e:	4c54      	ldr	r4, [pc, #336]	; (2570 <actOnCommand(unsigned char, unsigned char, int)+0x630>)
    2420:	f104 0510 	add.w	r5, r4, #16
        triggerOutputs[w]->SetMetroTime(value, 2);    
    2424:	f854 0b04 	ldr.w	r0, [r4], #4
    2428:	2202      	movs	r2, #2
    242a:	4631      	mov	r1, r6
    242c:	f000 fb20 	bl	2a70 <TriggerOutput::SetMetroTime(int, short)>
      for (int w = 0; w < 4; w++)
    2430:	42ac      	cmp	r4, r5
    2432:	d1f7      	bne.n	2424 <actOnCommand(unsigned char, unsigned char, int)+0x4e4>
}
    2434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2436:	4c4e      	ldr	r4, [pc, #312]	; (2570 <actOnCommand(unsigned char, unsigned char, int)+0x630>)
    2438:	f104 0510 	add.w	r5, r4, #16
        triggerOutputs[w]->SetMetroTime(value, 1);    
    243c:	f854 0b04 	ldr.w	r0, [r4], #4
    2440:	2201      	movs	r2, #1
    2442:	4631      	mov	r1, r6
    2444:	f000 fb14 	bl	2a70 <TriggerOutput::SetMetroTime(int, short)>
      for (int w = 0; w < 4; w++)
    2448:	42ac      	cmp	r4, r5
    244a:	d1f7      	bne.n	243c <actOnCommand(unsigned char, unsigned char, int)+0x4fc>
}
    244c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    244e:	4c48      	ldr	r4, [pc, #288]	; (2570 <actOnCommand(unsigned char, unsigned char, int)+0x630>)
    2450:	f104 0510 	add.w	r5, r4, #16
        triggerOutputs[w]->SetMetroTime(value, 0);    
    2454:	f854 0b04 	ldr.w	r0, [r4], #4
    2458:	2200      	movs	r2, #0
    245a:	4631      	mov	r1, r6
    245c:	f000 fb08 	bl	2a70 <TriggerOutput::SetMetroTime(int, short)>
      for (int w = 0; w < 4; w++)
    2460:	42a5      	cmp	r5, r4
    2462:	d1f7      	bne.n	2454 <actOnCommand(unsigned char, unsigned char, int)+0x514>
}
    2464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      triggerOutputs[targetOutput]->SetMultiplier(value);
    2466:	4b42      	ldr	r3, [pc, #264]	; (2570 <actOnCommand(unsigned char, unsigned char, int)+0x630>)
    2468:	4611      	mov	r1, r2
    246a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    246e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      triggerOutputs[targetOutput]->SetMultiplier(value);
    2472:	f000 bac9 	b.w	2a08 <TriggerOutput::SetMultiplier(int)>
      triggerOutputs[targetOutput]->SetMute(value == 1);  
    2476:	f1a2 0101 	sub.w	r1, r2, #1
    247a:	4b3d      	ldr	r3, [pc, #244]	; (2570 <actOnCommand(unsigned char, unsigned char, int)+0x630>)
    247c:	fab1 f181 	clz	r1, r1
    2480:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    2484:	0949      	lsrs	r1, r1, #5
}
    2486:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      triggerOutputs[targetOutput]->SetMute(value == 1);  
    248a:	f000 bb21 	b.w	2ad0 <TriggerOutput::SetMute(bool)>
      cvOutputs[targetOutput]->SetOffset(value << 1);
    248e:	4b37      	ldr	r3, [pc, #220]	; (256c <actOnCommand(unsigned char, unsigned char, int)+0x62c>)
    2490:	0051      	lsls	r1, r2, #1
    2492:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    2496:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetOffset(value << 1);
    249a:	f7fe bb23 	b.w	ae4 <CVOutput::SetOffset(int)>
      cvOutputs[targetOutput]->SetSlew(value, 2);
    249e:	4b33      	ldr	r3, [pc, #204]	; (256c <actOnCommand(unsigned char, unsigned char, int)+0x62c>)
    24a0:	4631      	mov	r1, r6
    24a2:	2202      	movs	r2, #2
    24a4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    24a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetSlew(value, 2);
    24ac:	f7fd bf52 	b.w	354 <CVOutput::SetSlew(int, short)>
      cvOutputs[targetOutput]->SetSlew(value, 1);
    24b0:	4b2e      	ldr	r3, [pc, #184]	; (256c <actOnCommand(unsigned char, unsigned char, int)+0x62c>)
    24b2:	4631      	mov	r1, r6
    24b4:	2201      	movs	r2, #1
    24b6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    24ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetSlew(value, 1);
    24be:	f7fd bf49 	b.w	354 <CVOutput::SetSlew(int, short)>
      cvOutputs[targetOutput]->SetSlew(value, 0);
    24c2:	4b2a      	ldr	r3, [pc, #168]	; (256c <actOnCommand(unsigned char, unsigned char, int)+0x62c>)
    24c4:	4631      	mov	r1, r6
    24c6:	2200      	movs	r2, #0
    24c8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    24cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetSlew(value, 0);
    24d0:	f7fd bf40 	b.w	354 <CVOutput::SetSlew(int, short)>
      cvOutputs[targetOutput]->SetValue(value << 1);
    24d4:	4b25      	ldr	r3, [pc, #148]	; (256c <actOnCommand(unsigned char, unsigned char, int)+0x62c>)
    24d6:	0051      	lsls	r1, r2, #1
    24d8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    24dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->SetValue(value << 1);
    24e0:	f7fe bab0 	b.w	a44 <CVOutput::SetValue(int)>
      cvOutputs[targetOutput]->TargetValue(value << 1); 
    24e4:	4b21      	ldr	r3, [pc, #132]	; (256c <actOnCommand(unsigned char, unsigned char, int)+0x62c>)
    24e6:	0051      	lsls	r1, r2, #1
    24e8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    24ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      cvOutputs[targetOutput]->TargetValue(value << 1); 
    24f0:	f7fe bac8 	b.w	a84 <CVOutput::TargetValue(int)>
      triggerOutputs[targetOutput]->SetMetroCount(value);    
    24f4:	4b1e      	ldr	r3, [pc, #120]	; (2570 <actOnCommand(unsigned char, unsigned char, int)+0x630>)
    24f6:	4611      	mov	r1, r2
    24f8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    24fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      triggerOutputs[targetOutput]->SetMetroCount(value);    
    2500:	f000 bae2 	b.w	2ac8 <TriggerOutput::SetMetroCount(int)>
      triggerOutputs[targetOutput]->SetWidth(value);    
    2504:	4b1a      	ldr	r3, [pc, #104]	; (2570 <actOnCommand(unsigned char, unsigned char, int)+0x630>)
    2506:	4611      	mov	r1, r2
    2508:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    250c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      triggerOutputs[targetOutput]->SetWidth(value);    
    2510:	f000 ba16 	b.w	2940 <TriggerOutput::SetWidth(int)>
      triggerOutputs[targetOutput]->Sync();    
    2514:	4b16      	ldr	r3, [pc, #88]	; (2570 <actOnCommand(unsigned char, unsigned char, int)+0x630>)
    2516:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
    251a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      triggerOutputs[targetOutput]->Sync();    
    251e:	f000 badb 	b.w	2ad8 <TriggerOutput::Sync()>
      triggerOutputs[targetOutput]->SetMetro(value, ms);
    2522:	4b13      	ldr	r3, [pc, #76]	; (2570 <actOnCommand(unsigned char, unsigned char, int)+0x630>)
    2524:	463a      	mov	r2, r7
    2526:	4631      	mov	r1, r6
    2528:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    252c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      triggerOutputs[targetOutput]->SetMetro(value, ms);
    2530:	f000 ba80 	b.w	2a34 <TriggerOutput::SetMetro(int, unsigned long)>
      triggerOutputs[targetOutput]->SetMetroTime(value, 3);    
    2534:	4b0e      	ldr	r3, [pc, #56]	; (2570 <actOnCommand(unsigned char, unsigned char, int)+0x630>)
    2536:	4631      	mov	r1, r6
    2538:	2203      	movs	r2, #3
    253a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    253e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      triggerOutputs[targetOutput]->SetMetroTime(value, 3);    
    2542:	f000 ba95 	b.w	2a70 <TriggerOutput::SetMetroTime(int, short)>
      triggerOutputs[targetOutput]->SetMetroTime(value, 2);    
    2546:	4b0a      	ldr	r3, [pc, #40]	; (2570 <actOnCommand(unsigned char, unsigned char, int)+0x630>)
    2548:	4631      	mov	r1, r6
    254a:	2202      	movs	r2, #2
    254c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    2550:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      triggerOutputs[targetOutput]->SetMetroTime(value, 2);    
    2554:	f000 ba8c 	b.w	2a70 <TriggerOutput::SetMetroTime(int, short)>
      triggerOutputs[targetOutput]->SetMetroTime(value, 1);    
    2558:	4b05      	ldr	r3, [pc, #20]	; (2570 <actOnCommand(unsigned char, unsigned char, int)+0x630>)
    255a:	4631      	mov	r1, r6
    255c:	2201      	movs	r2, #1
    255e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    2562:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      triggerOutputs[targetOutput]->SetMetroTime(value, 1);    
    2566:	f000 ba83 	b.w	2a70 <TriggerOutput::SetMetroTime(int, short)>
    256a:	bf00      	nop
    256c:	2001ab80 	.word	0x2001ab80
    2570:	2001ac4c 	.word	0x2001ac4c
      triggerOutputs[targetOutput]->SetMetroTime(value, 0);    
    2574:	4b21      	ldr	r3, [pc, #132]	; (25fc <actOnCommand(unsigned char, unsigned char, int)+0x6bc>)
    2576:	4631      	mov	r1, r6
    2578:	2200      	movs	r2, #0
    257a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    257e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      triggerOutputs[targetOutput]->SetMetroTime(value, 0);    
    2582:	f000 ba75 	b.w	2a70 <TriggerOutput::SetMetroTime(int, short)>
      triggerOutputs[targetOutput]->SetDivision(value);
    2586:	4b1d      	ldr	r3, [pc, #116]	; (25fc <actOnCommand(unsigned char, unsigned char, int)+0x6bc>)
    2588:	4611      	mov	r1, r2
    258a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    258e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      triggerOutputs[targetOutput]->SetDivision(value);
    2592:	f000 ba2f 	b.w	29f4 <TriggerOutput::SetDivision(int)>
      triggerOutputs[targetOutput]->SetPolarity(value != 0); 
    2596:	4b19      	ldr	r3, [pc, #100]	; (25fc <actOnCommand(unsigned char, unsigned char, int)+0x6bc>)
    2598:	1e11      	subs	r1, r2, #0
    259a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    259e:	bf18      	it	ne
    25a0:	2101      	movne	r1, #1
}
    25a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      triggerOutputs[targetOutput]->SetPolarity(value != 0); 
    25a6:	f000 ba23 	b.w	29f0 <TriggerOutput::SetPolarity(bool)>
      triggerOutputs[targetOutput]->Pulse();
    25aa:	4b14      	ldr	r3, [pc, #80]	; (25fc <actOnCommand(unsigned char, unsigned char, int)+0x6bc>)
    25ac:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
    25b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      triggerOutputs[targetOutput]->Pulse();
    25b4:	f000 b9f6 	b.w	29a4 <TriggerOutput::Pulse()>
      triggerOutputs[targetOutput]->SetTime(value, 2);    
    25b8:	4b10      	ldr	r3, [pc, #64]	; (25fc <actOnCommand(unsigned char, unsigned char, int)+0x6bc>)
    25ba:	4631      	mov	r1, r6
    25bc:	2202      	movs	r2, #2
    25be:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    25c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      triggerOutputs[targetOutput]->SetTime(value, 2);    
    25c6:	f000 b9af 	b.w	2928 <TriggerOutput::SetTime(int, short)>
      triggerOutputs[targetOutput]->SetTime(value, 1);    
    25ca:	4b0c      	ldr	r3, [pc, #48]	; (25fc <actOnCommand(unsigned char, unsigned char, int)+0x6bc>)
    25cc:	4631      	mov	r1, r6
    25ce:	2201      	movs	r2, #1
    25d0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    25d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      triggerOutputs[targetOutput]->SetTime(value, 1);    
    25d8:	f000 b9a6 	b.w	2928 <TriggerOutput::SetTime(int, short)>
      triggerOutputs[targetOutput]->SetTime(value, 0);    
    25dc:	4b07      	ldr	r3, [pc, #28]	; (25fc <actOnCommand(unsigned char, unsigned char, int)+0x6bc>)
    25de:	4631      	mov	r1, r6
    25e0:	2200      	movs	r2, #0
    25e2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
    25e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      triggerOutputs[targetOutput]->SetTime(value, 0);    
    25ea:	f000 b99d 	b.w	2928 <TriggerOutput::SetTime(int, short)>
      triggerOutputs[targetOutput]->ToggleState();    
    25ee:	4b03      	ldr	r3, [pc, #12]	; (25fc <actOnCommand(unsigned char, unsigned char, int)+0x6bc>)
    25f0:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
    25f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      triggerOutputs[targetOutput]->ToggleState();    
    25f8:	f000 b9c2 	b.w	2980 <TriggerOutput::ToggleState()>
    25fc:	2001ac4c 	.word	0x2001ac4c

00002600 <receiveEvent(unsigned int)>:
void receiveEvent(size_t len) {
    2600:	b500      	push	{lr}
    2602:	b083      	sub	sp, #12
    2604:	4601      	mov	r1, r0
  TxResponse response = TxHelper::Parse(len);
    2606:	4668      	mov	r0, sp
    2608:	f000 fb4c 	bl	2ca4 <TxHelper::Parse(unsigned int)>
  actOnCommand(response.Command, response.Output, response.Value);
    260c:	9a01      	ldr	r2, [sp, #4]
    260e:	f89d 1001 	ldrb.w	r1, [sp, #1]
    2612:	f89d 0000 	ldrb.w	r0, [sp]
}
    2616:	b003      	add	sp, #12
    2618:	f85d eb04 	ldr.w	lr, [sp], #4
  actOnCommand(response.Command, response.Output, response.Value);
    261c:	f7ff bc90 	b.w	1f40 <actOnCommand(unsigned char, unsigned char, int)>

00002620 <readCalibrationData()>:
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    2620:	2000      	movs	r0, #0

/*
 * reads the calibration data from the Teensy's EEPROM
 */
void readCalibrationData(){
    2622:	b570      	push	{r4, r5, r6, lr}
    2624:	f002 f94a 	bl	48bc <eeprom_read_byte>

  uint16_t uInt16t = 0;
  
  // Look for the TXo Tag
  // "TXo "
  if (EEPROM.read(rPos++) == 84 && EEPROM.read(rPos++) == 88 && EEPROM.read(rPos++) == 111 && EEPROM.read(rPos++) == 32) {
    2628:	2854      	cmp	r0, #84	; 0x54
    262a:	d104      	bne.n	2636 <readCalibrationData()+0x16>
    262c:	2001      	movs	r0, #1
    262e:	f002 f945 	bl	48bc <eeprom_read_byte>
    2632:	2858      	cmp	r0, #88	; 0x58
    2634:	d018      	beq.n	2668 <readCalibrationData()+0x48>
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    2636:	2154      	movs	r1, #84	; 0x54
    2638:	2000      	movs	r0, #0
    263a:	f002 fa4b 	bl	4ad4 <eeprom_write_byte>
    263e:	2158      	movs	r1, #88	; 0x58
    2640:	2001      	movs	r0, #1
    2642:	2404      	movs	r4, #4
    2644:	f002 fa46 	bl	4ad4 <eeprom_write_byte>
    2648:	216f      	movs	r1, #111	; 0x6f
    264a:	2002      	movs	r0, #2
    264c:	f002 fa42 	bl	4ad4 <eeprom_write_byte>
    2650:	2120      	movs	r1, #32
    2652:	2003      	movs	r0, #3
    2654:	f002 fa3e 	bl	4ad4 <eeprom_write_byte>
    2658:	4620      	mov	r0, r4
    EEPROM.write(rPos++, 88);
    EEPROM.write(rPos++, 111);
    EEPROM.write(rPos++, 32);
    
    // initialize zeros for the four values we store
    for (int i=0; i<8; i++){
    265a:	3401      	adds	r4, #1
    265c:	2100      	movs	r1, #0
    265e:	f002 fa39 	bl	4ad4 <eeprom_write_byte>
    2662:	2c0c      	cmp	r4, #12
    2664:	d1f8      	bne.n	2658 <readCalibrationData()+0x38>
      EEPROM.write(rPos++, 0);
    }
  }
  
}
    2666:	bd70      	pop	{r4, r5, r6, pc}
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    2668:	2002      	movs	r0, #2
    266a:	f002 f927 	bl	48bc <eeprom_read_byte>
  if (EEPROM.read(rPos++) == 84 && EEPROM.read(rPos++) == 88 && EEPROM.read(rPos++) == 111 && EEPROM.read(rPos++) == 32) {
    266e:	286f      	cmp	r0, #111	; 0x6f
    2670:	d1e1      	bne.n	2636 <readCalibrationData()+0x16>
    2672:	2003      	movs	r0, #3
    2674:	f002 f922 	bl	48bc <eeprom_read_byte>
    2678:	2820      	cmp	r0, #32
    267a:	d1dc      	bne.n	2636 <readCalibrationData()+0x16>
    267c:	4e0a      	ldr	r6, [pc, #40]	; (26a8 <readCalibrationData()+0x88>)
    267e:	2504      	movs	r5, #4
    2680:	4628      	mov	r0, r5
    2682:	f002 f91b 	bl	48bc <eeprom_read_byte>
    2686:	4604      	mov	r4, r0
    2688:	1c68      	adds	r0, r5, #1
      rPos += 2;
    268a:	3502      	adds	r5, #2
    268c:	f002 f916 	bl	48bc <eeprom_read_byte>
    2690:	4601      	mov	r1, r0
      cvOutputs[i]->SetCalibrationValue((int16_t)uInt16t);
    2692:	f856 0b04 	ldr.w	r0, [r6], #4
      uInt16t = EEPROM.read(rPos) + (EEPROM.read(rPos + 1) << 8);
    2696:	eb04 2101 	add.w	r1, r4, r1, lsl #8
      cvOutputs[i]->SetCalibrationValue((int16_t)uInt16t);
    269a:	b209      	sxth	r1, r1
    269c:	f7fe fa6c 	bl	b78 <CVOutput::SetCalibrationValue(int)>
    for (int i=0; i < 4; i++) {
    26a0:	2d0c      	cmp	r5, #12
    26a2:	d1ed      	bne.n	2680 <readCalibrationData()+0x60>
}
    26a4:	bd70      	pop	{r4, r5, r6, pc}
    26a6:	bf00      	nop
    26a8:	2001ab80 	.word	0x2001ab80

000026ac <setup>:
  for (i=0; i < 3; i++){
    26ac:	2300      	movs	r3, #0
void setup() {
    26ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for (i=0; i < 3; i++){
    26b2:	4c55      	ldr	r4, [pc, #340]	; (2808 <setup+0x15c>)
void setup() {
    26b4:	b08d      	sub	sp, #52	; 0x34
    26b6:	4e55      	ldr	r6, [pc, #340]	; (280c <setup+0x160>)
  int cfg = 0;
    26b8:	461d      	mov	r5, r3
  for (i=0; i < 3; i++){
    26ba:	6023      	str	r3, [r4, #0]
    pinMode(configPins[i], INPUT);
    26bc:	f816 0023 	ldrb.w	r0, [r6, r3, lsl #2]
    26c0:	2100      	movs	r1, #0
    26c2:	f001 ffbd 	bl	4640 <pinMode>
    int cRead = analogRead(configPins[i]) > 1000 ? 1 : 0;
    26c6:	6823      	ldr	r3, [r4, #0]
    26c8:	f816 0023 	ldrb.w	r0, [r6, r3, lsl #2]
    26cc:	f001 feba 	bl	4444 <analogRead>
    cfg += cRead << i;
    26d0:	6822      	ldr	r2, [r4, #0]
    int cRead = analogRead(configPins[i]) > 1000 ? 1 : 0;
    26d2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
  for (i=0; i < 3; i++){
    26d6:	f102 0301 	add.w	r3, r2, #1
    int cRead = analogRead(configPins[i]) > 1000 ? 1 : 0;
    26da:	bfd4      	ite	le
    26dc:	2000      	movle	r0, #0
    26de:	2001      	movgt	r0, #1
  for (i=0; i < 3; i++){
    26e0:	2b02      	cmp	r3, #2
    26e2:	6023      	str	r3, [r4, #0]
    cfg += cRead << i;
    26e4:	fa00 f002 	lsl.w	r0, r0, r2
    26e8:	4405      	add	r5, r0
  for (i=0; i < 3; i++){
    26ea:	dde7      	ble.n	26bc <setup+0x10>
  configID += cfg;  
    26ec:	4948      	ldr	r1, [pc, #288]	; (2810 <setup+0x164>)
  if (dacOn) {
    26ee:	4a49      	ldr	r2, [pc, #292]	; (2814 <setup+0x168>)
  configID += cfg;  
    26f0:	680b      	ldr	r3, [r1, #0]
  if (dacOn) {
    26f2:	7812      	ldrb	r2, [r2, #0]
  configID += cfg;  
    26f4:	442b      	add	r3, r5
    26f6:	600b      	str	r3, [r1, #0]
  writeRate = 1000000 / SAMPLINGRATE;
    26f8:	2314      	movs	r3, #20
    26fa:	4947      	ldr	r1, [pc, #284]	; (2818 <setup+0x16c>)
    26fc:	600b      	str	r3, [r1, #0]
  if (dacOn) {
    26fe:	2a00      	cmp	r2, #0
    2700:	d172      	bne.n	27e8 <setup+0x13c>
  for (i=0; i < 4; i++) {
    2702:	2300      	movs	r3, #0
    2704:	f8df b144 	ldr.w	fp, [pc, #324]	; 284c <setup+0x1a0>
    2708:	f8df a144 	ldr.w	sl, [pc, #324]	; 2850 <setup+0x1a4>
    270c:	4e43      	ldr	r6, [pc, #268]	; (281c <setup+0x170>)
    270e:	f8df 9144 	ldr.w	r9, [pc, #324]	; 2854 <setup+0x1a8>
    2712:	f8df 8144 	ldr.w	r8, [pc, #324]	; 2858 <setup+0x1ac>
    cvOutputs[i] = new CVOutput(dacOutputs[i], pwmLedPins[i], dac);
    2716:	4f42      	ldr	r7, [pc, #264]	; (2820 <setup+0x174>)
  for (i=0; i < 4; i++) {
    2718:	6023      	str	r3, [r4, #0]
    triggerOutputs[i] = new TriggerOutput(trPins[i], trLedPins[i]);
    271a:	2054      	movs	r0, #84	; 0x54
    271c:	f002 fb12 	bl	4d44 <operator new(unsigned int)>
    2720:	6823      	ldr	r3, [r4, #0]
    2722:	4605      	mov	r5, r0
    2724:	f85b 2023 	ldr.w	r2, [fp, r3, lsl #2]
    2728:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
    272c:	f000 f8bc 	bl	28a8 <TriggerOutput::TriggerOutput(int, int)>
    2730:	6823      	ldr	r3, [r4, #0]
    cvOutputs[i] = new CVOutput(dacOutputs[i], pwmLedPins[i], dac);
    2732:	20e0      	movs	r0, #224	; 0xe0
    triggerOutputs[i] = new TriggerOutput(trPins[i], trLedPins[i]);
    2734:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
    cvOutputs[i] = new CVOutput(dacOutputs[i], pwmLedPins[i], dac);
    2738:	f002 fb04 	bl	4d44 <operator new(unsigned int)>
    273c:	6821      	ldr	r1, [r4, #0]
    273e:	463b      	mov	r3, r7
    2740:	4605      	mov	r5, r0
    2742:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    2746:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
    274a:	f7fe fbe5 	bl	f18 <CVOutput::CVOutput(int, int, DAC&)>
    274e:	6823      	ldr	r3, [r4, #0]
    2750:	4934      	ldr	r1, [pc, #208]	; (2824 <setup+0x178>)
    cvOutputs[i]->ReferenceTriggers(triggerOutputs, sizeof(triggerOutputs));
    2752:	2210      	movs	r2, #16
    2754:	4628      	mov	r0, r5
    cvOutputs[i] = new CVOutput(dacOutputs[i], pwmLedPins[i], dac);
    2756:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
    cvOutputs[i]->ReferenceTriggers(triggerOutputs, sizeof(triggerOutputs));
    275a:	4631      	mov	r1, r6
    275c:	f7fd fdf6 	bl	34c <CVOutput::ReferenceTriggers(TriggerOutput**, int)>
  for (i=0; i < 4; i++) {
    2760:	6823      	ldr	r3, [r4, #0]
    2762:	3301      	adds	r3, #1
    2764:	2b03      	cmp	r3, #3
    2766:	6023      	str	r3, [r4, #0]
    2768:	ddd7      	ble.n	271a <setup+0x6e>
  readCalibrationData();
    276a:	f7ff ff59 	bl	2620 <readCalibrationData()>
  writeTimer.begin(writeOutputs, writeRate);
    276e:	4b2a      	ldr	r3, [pc, #168]	; (2818 <setup+0x16c>)

	template <typename period_t>
	uint32_t cyclesFromPeriod(period_t period) {
		static_assert(std::is_arithmetic_v<period_t>, "Period must be arithmetic");

		if (period < 0 || period > MAX_PERIOD)
    2770:	492d      	ldr	r1, [pc, #180]	; (2828 <setup+0x17c>)
    2772:	681b      	ldr	r3, [r3, #0]
        static_assert(Alignment % alignof(C) == 0,
            "inplace_function cannot be constructed from object with this (large) alignment"
        );

        static const vtable_t vt{inplace_function_detail::wrapper<C>{}};
        vtable_ptr_ = std::addressof(vt);
    2774:	4a2d      	ldr	r2, [pc, #180]	; (282c <setup+0x180>)

        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
    2776:	482e      	ldr	r0, [pc, #184]	; (2830 <setup+0x184>)
    2778:	428b      	cmp	r3, r1
        vtable_ptr_ = std::addressof(vt);
    277a:	9200      	str	r2, [sp, #0]
        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
    277c:	9002      	str	r0, [sp, #8]
    277e:	d805      	bhi.n	278c <setup+0xe0>
			return 0;
		if constexpr (std::is_integral_v<period_t>)       // handles all integral types
			return (24000000 / 1000000) * period - 1;
    2780:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2784:	00dc      	lsls	r4, r3, #3
    2786:	3c01      	subs	r4, #1
		return cycles >= 17 ? beginCycles(funct, cycles) : false;
    2788:	2c10      	cmp	r4, #16
    278a:	d81b      	bhi.n	27c4 <setup+0x118>
    278c:	4b29      	ldr	r3, [pc, #164]	; (2834 <setup+0x188>)
    278e:	ad02      	add	r5, sp, #8
        return *this;
    }

    ~inplace_function()
    {
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    2790:	4628      	mov	r0, r5
    inline int getLastAddress() {
        return last_address_called;
    }

    // Override various functions to avoid ambiguous calls
    inline void begin(int address) { begin((uint8_t)address); }
    2792:	4c29      	ldr	r4, [pc, #164]	; (2838 <setup+0x18c>)
    2794:	4798      	blx	r3
    2796:	4b29      	ldr	r3, [pc, #164]	; (283c <setup+0x190>)
  kTime = millis() + LEDRATE;
    2798:	4a29      	ldr	r2, [pc, #164]	; (2840 <setup+0x194>)
  pinMode(18, INPUT_PULLUP);
    279a:	2102      	movs	r1, #2
    279c:	681b      	ldr	r3, [r3, #0]
    279e:	2012      	movs	r0, #18
  kTime = millis() + LEDRATE;
    27a0:	3332      	adds	r3, #50	; 0x32
    27a2:	6013      	str	r3, [r2, #0]
  pinMode(18, INPUT_PULLUP);
    27a4:	f001 ff4c 	bl	4640 <pinMode>
  pinMode(19, INPUT_PULLUP);
    27a8:	2102      	movs	r1, #2
    27aa:	2013      	movs	r0, #19
    27ac:	f001 ff48 	bl	4640 <pinMode>
    27b0:	4b17      	ldr	r3, [pc, #92]	; (2810 <setup+0x164>)
    27b2:	4620      	mov	r0, r4
    27b4:	7819      	ldrb	r1, [r3, #0]
    27b6:	f000 fc2f 	bl	3018 <I2CDriverWire::begin(unsigned char)>
        on_receive = function;
    27ba:	4b22      	ldr	r3, [pc, #136]	; (2844 <setup+0x198>)
    27bc:	61e3      	str	r3, [r4, #28]
}
    27be:	b00d      	add	sp, #52	; 0x34
    27c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        vtable_ptr_->copy_ptr(
    27c4:	ad02      	add	r5, sp, #8
    27c6:	a808      	add	r0, sp, #32
        vtable_ptr_{other.vtable_ptr_}
    27c8:	9206      	str	r2, [sp, #24]
        vtable_ptr_->copy_ptr(
    27ca:	4629      	mov	r1, r5
    27cc:	f7ff fb40 	bl	1e50 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#2}::_FUN(void*, void*)>
    27d0:	4622      	mov	r2, r4
    27d2:	a906      	add	r1, sp, #24
    27d4:	481c      	ldr	r0, [pc, #112]	; (2848 <setup+0x19c>)
    27d6:	f001 fd11 	bl	41fc <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)>
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    27da:	9b06      	ldr	r3, [sp, #24]
    27dc:	a808      	add	r0, sp, #32
    27de:	68db      	ldr	r3, [r3, #12]
    27e0:	4798      	blx	r3
    27e2:	9b00      	ldr	r3, [sp, #0]
    27e4:	68db      	ldr	r3, [r3, #12]
    }
    27e6:	e7d3      	b.n	2790 <setup+0xe4>
    dac.init();
    27e8:	480d      	ldr	r0, [pc, #52]	; (2820 <setup+0x174>)
    27ea:	f7fe fd2b 	bl	1244 <DAC::init()>
    dac.setReference(DAC_REFERENCE_ALWAYS_POWERED_UP);
    27ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    27f2:	480b      	ldr	r0, [pc, #44]	; (2820 <setup+0x174>)
    27f4:	f7fe fdae 	bl	1354 <DAC::setReference(unsigned short)>
    dac.writeChannel(DAC_CHANNEL_ALL, DAC_MAX_SCALE / 2);  
    27f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    27fc:	2105      	movs	r1, #5
    27fe:	4808      	ldr	r0, [pc, #32]	; (2820 <setup+0x174>)
    2800:	f7fe fdac 	bl	135c <DAC::writeChannel(unsigned char, unsigned short)>
    2804:	e77d      	b.n	2702 <setup+0x56>
    2806:	bf00      	nop
    2808:	2001abac 	.word	0x2001abac
    280c:	200198b4 	.word	0x200198b4
    2810:	200198b0 	.word	0x200198b0
    2814:	20019f7d 	.word	0x20019f7d
    2818:	20019f70 	.word	0x20019f70
    281c:	2001ac4c 	.word	0x2001ac4c
    2820:	2001ab90 	.word	0x2001ab90
    2824:	2001ab80 	.word	0x2001ab80
    2828:	0aaaaaaa 	.word	0x0aaaaaaa
    282c:	200189c8 	.word	0x200189c8
    2830:	00001e65 	.word	0x00001e65
    2834:	00001e61 	.word	0x00001e61
    2838:	2001a6d4 	.word	0x2001a6d4
    283c:	2001ac40 	.word	0x2001ac40
    2840:	2001abb0 	.word	0x2001abb0
    2844:	00002601 	.word	0x00002601
    2848:	20019f74 	.word	0x20019f74
    284c:	20019a20 	.word	0x20019a20
    2850:	20019a30 	.word	0x20019a30
    2854:	20019a10 	.word	0x20019a10
    2858:	200198c0 	.word	0x200198c0

0000285c <_GLOBAL__sub_I_enablePullups>:
}
    285c:	b510      	push	{r4, lr}
    285e:	b082      	sub	sp, #8
DAC dac(-1, 10, -1, 11, 13);
    2860:	240b      	movs	r4, #11
***/

struct EEPROMClass{

#if defined(__arm__) && defined(TEENSYDUINO)
    EEPROMClass()                        { eeprom_initialize(); }
    2862:	f002 f807 	bl	4874 <eeprom_initialize>
IntervalTimer writeTimer;
    2866:	4a08      	ldr	r2, [pc, #32]	; (2888 <_GLOBAL__sub_I_enablePullups+0x2c>)
    2868:	4908      	ldr	r1, [pc, #32]	; (288c <_GLOBAL__sub_I_enablePullups+0x30>)
    286a:	4809      	ldr	r0, [pc, #36]	; (2890 <_GLOBAL__sub_I_enablePullups+0x34>)
    286c:	f003 ff96 	bl	679c <__aeabi_atexit>
DAC dac(-1, 10, -1, 11, 13);
    2870:	23ff      	movs	r3, #255	; 0xff
    2872:	210d      	movs	r1, #13
    2874:	220a      	movs	r2, #10
    2876:	9400      	str	r4, [sp, #0]
    2878:	9101      	str	r1, [sp, #4]
    287a:	4619      	mov	r1, r3
    287c:	4805      	ldr	r0, [pc, #20]	; (2894 <_GLOBAL__sub_I_enablePullups+0x38>)
    287e:	f7fe fcd5 	bl	122c <DAC::DAC(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
}
    2882:	b002      	add	sp, #8
    2884:	bd10      	pop	{r4, pc}
    2886:	bf00      	nop
    2888:	20019320 	.word	0x20019320
    288c:	00001e8d 	.word	0x00001e8d
    2890:	20019f74 	.word	0x20019f74
    2894:	2001ab90 	.word	0x2001ab90

00002898 <TriggerOutput::Kill()>:
  _toggle = MAXTIME;
    2898:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  _metro = false;
    289c:	2300      	movs	r3, #0
  _toggle = MAXTIME;
    289e:	6102      	str	r2, [r0, #16]
  _metro = false;
    28a0:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
}
    28a4:	4770      	bx	lr
    28a6:	bf00      	nop

000028a8 <TriggerOutput::TriggerOutput(int, int)>:
TriggerOutput::TriggerOutput(int output, int led) : Output(output, led) {
    28a8:	b538      	push	{r3, r4, r5, lr}
    28aa:	4604      	mov	r4, r0
    28ac:	f7ff f9a8 	bl	1c00 <Output::Output(int, int)>
    28b0:	4a16      	ldr	r2, [pc, #88]	; (290c <TriggerOutput::TriggerOutput(int, int)+0x64>)
    28b2:	2300      	movs	r3, #0
    28b4:	2501      	movs	r5, #1
    28b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    28ba:	6022      	str	r2, [r4, #0]
    28bc:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  pinMode(_output, OUTPUT);
    28c0:	7920      	ldrb	r0, [r4, #4]
TriggerOutput::TriggerOutput(int output, int led) : Output(output, led) {
    28c2:	61e2      	str	r2, [r4, #28]
    28c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    28c8:	7363      	strb	r3, [r4, #13]
    28ca:	6362      	str	r2, [r4, #52]	; 0x34
    28cc:	6121      	str	r1, [r4, #16]
    28ce:	7523      	strb	r3, [r4, #20]
    28d0:	82e3      	strh	r3, [r4, #22]
    28d2:	8323      	strh	r3, [r4, #24]
    28d4:	76a3      	strb	r3, [r4, #26]
    28d6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    28da:	6421      	str	r1, [r4, #64]	; 0x40
  pinMode(_output, OUTPUT);
    28dc:	4629      	mov	r1, r5
TriggerOutput::TriggerOutput(int output, int led) : Output(output, led) {
    28de:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    28e2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    28e6:	73a5      	strb	r5, [r4, #14]
    28e8:	e9c4 2208 	strd	r2, r2, [r4, #32]
    28ec:	2264      	movs	r2, #100	; 0x64
    28ee:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
    28f2:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
    28f6:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
  pinMode(_output, OUTPUT);
    28fa:	f001 fea1 	bl	4640 <pinMode>
  pinMode(_led, OUTPUT);
    28fe:	7a20      	ldrb	r0, [r4, #8]
    2900:	4629      	mov	r1, r5
    2902:	f001 fe9d 	bl	4640 <pinMode>
}
    2906:	4620      	mov	r0, r4
    2908:	bd38      	pop	{r3, r4, r5, pc}
    290a:	bf00      	nop
    290c:	20018938 	.word	0x20018938

00002910 <TriggerOutput::SetState(bool)>:
void TriggerOutput::SetState(bool state){
    2910:	b510      	push	{r4, lr}
    2912:	4604      	mov	r4, r0
  digitalWrite(_output, _state ? HIGH : LOW);
    2914:	7900      	ldrb	r0, [r0, #4]
  _state = state;
    2916:	7361      	strb	r1, [r4, #13]
  digitalWrite(_output, _state ? HIGH : LOW);
    2918:	f001 fe68 	bl	45ec <digitalWrite>
  digitalWrite(_led, _state ? HIGH : LOW);
    291c:	7b61      	ldrb	r1, [r4, #13]
    291e:	7a20      	ldrb	r0, [r4, #8]
}
    2920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(_led, _state ? HIGH : LOW);
    2924:	f001 be62 	b.w	45ec <digitalWrite>

00002928 <TriggerOutput::SetTime(int, short)>:
void TriggerOutput::SetTime(int value, short format){
    2928:	b510      	push	{r4, lr}
  _widthMode = false;
    292a:	2300      	movs	r3, #0
void TriggerOutput::SetTime(int value, short format){
    292c:	4604      	mov	r4, r0
  _pulseTime = TxHelper::ConvertMs(value, format);
    292e:	4608      	mov	r0, r1
    2930:	4611      	mov	r1, r2
  _widthMode = false;
    2932:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  _pulseTime = TxHelper::ConvertMs(value, format);
    2936:	f000 f99f 	bl	2c78 <TxHelper::ConvertMs(unsigned long, short)>
    293a:	64e0      	str	r0, [r4, #76]	; 0x4c
}
    293c:	bd10      	pop	{r4, pc}
    293e:	bf00      	nop

00002940 <TriggerOutput::SetWidth(int)>:
  _widthMode = true;
    2940:	2964      	cmp	r1, #100	; 0x64
  _pulseTime = _metroInterval * _width / 100.;
    2942:	6b43      	ldr	r3, [r0, #52]	; 0x34
  _widthMode = true;
    2944:	f04f 0201 	mov.w	r2, #1
    2948:	bfa8      	it	ge
    294a:	2164      	movge	r1, #100	; 0x64
    294c:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  _width = constrain(value, 0, 100);
    2950:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
  _pulseTime = _metroInterval * _width / 100.;
    2954:	fb01 f303 	mul.w	r3, r1, r3
  _width = constrain(value, 0, 100);
    2958:	6481      	str	r1, [r0, #72]	; 0x48
  _pulseTime = _metroInterval * _width / 100.;
    295a:	ee07 3a90 	vmov	s15, r3
    295e:	ed9f 5b06 	vldr	d5, [pc, #24]	; 2978 <TriggerOutput::SetWidth(int)+0x38>
    2962:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    2966:	ee87 6b05 	vdiv.f64	d6, d7, d5
    296a:	eebc 6bc6 	vcvt.u32.f64	s12, d6
    296e:	ed80 6a13 	vstr	s12, [r0, #76]	; 0x4c
}
    2972:	4770      	bx	lr
    2974:	f3af 8000 	nop.w
    2978:	00000000 	.word	0x00000000
    297c:	40590000 	.word	0x40590000

00002980 <TriggerOutput::ToggleState()>:
  SetState(!_state);
    2980:	7b41      	ldrb	r1, [r0, #13]
  _toggle = MAXTIME;
    2982:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
void TriggerOutput::ToggleState(){
    2986:	b510      	push	{r4, lr}
  SetState(!_state);
    2988:	f081 0101 	eor.w	r1, r1, #1
void TriggerOutput::ToggleState(){
    298c:	4604      	mov	r4, r0
  digitalWrite(_output, _state ? HIGH : LOW);
    298e:	7900      	ldrb	r0, [r0, #4]
  _state = state;
    2990:	7361      	strb	r1, [r4, #13]
  _toggle = MAXTIME;
    2992:	6123      	str	r3, [r4, #16]
  digitalWrite(_output, _state ? HIGH : LOW);
    2994:	f001 fe2a 	bl	45ec <digitalWrite>
  digitalWrite(_led, _state ? HIGH : LOW);
    2998:	7b61      	ldrb	r1, [r4, #13]
    299a:	7a20      	ldrb	r0, [r4, #8]
}
    299c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(_led, _state ? HIGH : LOW);
    29a0:	f001 be24 	b.w	45ec <digitalWrite>

000029a4 <TriggerOutput::Pulse()>:
  if (_mutePulse) return;
    29a4:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    29a8:	b9f2      	cbnz	r2, 29e8 <TriggerOutput::Pulse()+0x44>
  if (_divide) {
    29aa:	7d03      	ldrb	r3, [r0, #20]
void TriggerOutput::Pulse() {
    29ac:	b510      	push	{r4, lr}
    29ae:	4604      	mov	r4, r0
  if (_divide) {
    29b0:	b13b      	cbz	r3, 29c2 <TriggerOutput::Pulse()+0x1e>
    if (++_counter >= _division)
    29b2:	8b03      	ldrh	r3, [r0, #24]
    29b4:	8ac1      	ldrh	r1, [r0, #22]
    29b6:	3301      	adds	r3, #1
    29b8:	b29b      	uxth	r3, r3
    29ba:	4299      	cmp	r1, r3
    29bc:	8303      	strh	r3, [r0, #24]
    29be:	d809      	bhi.n	29d4 <TriggerOutput::Pulse()+0x30>
      _counter = 0;
    29c0:	8302      	strh	r2, [r0, #24]
  if (_state != _polarity)
    29c2:	7ba1      	ldrb	r1, [r4, #14]
    29c4:	7b63      	ldrb	r3, [r4, #13]
    29c6:	428b      	cmp	r3, r1
    29c8:	d105      	bne.n	29d6 <TriggerOutput::Pulse()+0x32>
    29ca:	4a08      	ldr	r2, [pc, #32]	; (29ec <TriggerOutput::Pulse()+0x48>)
  _toggle = millis() + _pulseTime;
    29cc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    29ce:	6812      	ldr	r2, [r2, #0]
    29d0:	4413      	add	r3, r2
    29d2:	6123      	str	r3, [r4, #16]
}
    29d4:	bd10      	pop	{r4, pc}
  digitalWrite(_output, _state ? HIGH : LOW);
    29d6:	7920      	ldrb	r0, [r4, #4]
  _state = state;
    29d8:	7361      	strb	r1, [r4, #13]
  digitalWrite(_output, _state ? HIGH : LOW);
    29da:	f001 fe07 	bl	45ec <digitalWrite>
  digitalWrite(_led, _state ? HIGH : LOW);
    29de:	7b61      	ldrb	r1, [r4, #13]
    29e0:	7a20      	ldrb	r0, [r4, #8]
    29e2:	f001 fe03 	bl	45ec <digitalWrite>
}
    29e6:	e7f0      	b.n	29ca <TriggerOutput::Pulse()+0x26>
    29e8:	4770      	bx	lr
    29ea:	bf00      	nop
    29ec:	2001ac40 	.word	0x2001ac40

000029f0 <TriggerOutput::SetPolarity(bool)>:
  _polarity = polarity;
    29f0:	7381      	strb	r1, [r0, #14]
}
    29f2:	4770      	bx	lr

000029f4 <TriggerOutput::SetDivision(int)>:
  _divide = division > 1 ? true : false;
    29f4:	2901      	cmp	r1, #1
  _division = division;
    29f6:	b28b      	uxth	r3, r1
  _divide = division > 1 ? true : false;
    29f8:	bfd4      	ite	le
    29fa:	2100      	movle	r1, #0
    29fc:	2101      	movgt	r1, #1
  _division = division;
    29fe:	82c3      	strh	r3, [r0, #22]
  _counter = _division;
    2a00:	8303      	strh	r3, [r0, #24]
  _divide = division > 1 ? true : false;
    2a02:	7501      	strb	r1, [r0, #20]
}
    2a04:	4770      	bx	lr
    2a06:	bf00      	nop

00002a08 <TriggerOutput::SetMultiplier(int)>:
   _tempMultiplication = max(multiplier, 1);
    2a08:	2901      	cmp	r1, #1
   _tempMultiplyInterval = _metroInterval / _tempMultiplication;
    2a0a:	6b43      	ldr	r3, [r0, #52]	; 0x34
    2a0c:	bfb8      	it	lt
    2a0e:	2101      	movlt	r1, #1
   _tempMultiplication = max(multiplier, 1);
    2a10:	b28a      	uxth	r2, r1
   _tempMultiplyInterval = _metroInterval / _tempMultiplication;
    2a12:	fbb3 f3f2 	udiv	r3, r3, r2
   _multiply = _tempMultiplication > 1;
    2a16:	2a01      	cmp	r2, #1
   _tempMultiplication = max(multiplier, 1);
    2a18:	83c2      	strh	r2, [r0, #30]
   _tempMultiplyInterval = _metroInterval / _tempMultiplication;
    2a1a:	6243      	str	r3, [r0, #36]	; 0x24
   _multiply = _tempMultiplication > 1;
    2a1c:	bf8c      	ite	hi
    2a1e:	2201      	movhi	r2, #1
    2a20:	2200      	movls	r2, #0
    2a22:	7682      	strb	r2, [r0, #26]
   if (!_multiply && _metro) _nextEvent = _nextNormal;
    2a24:	d804      	bhi.n	2a30 <TriggerOutput::SetMultiplier(int)+0x28>
    2a26:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    2a2a:	b10b      	cbz	r3, 2a30 <TriggerOutput::SetMultiplier(int)+0x28>
    2a2c:	6a83      	ldr	r3, [r0, #40]	; 0x28
    2a2e:	6383      	str	r3, [r0, #56]	; 0x38
}
    2a30:	4770      	bx	lr
    2a32:	bf00      	nop

00002a34 <TriggerOutput::SetMetro(int, unsigned long)>:
  bool m = state != 0;
    2a34:	2900      	cmp	r1, #0
    2a36:	bf14      	ite	ne
    2a38:	2301      	movne	r3, #1
    2a3a:	2300      	moveq	r3, #0
  if (m){  
    2a3c:	d012      	beq.n	2a64 <TriggerOutput::SetMetro(int, unsigned long)+0x30>
    if (!_metro) {
    2a3e:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
void TriggerOutput::SetMetro(int state, unsigned long ms){
    2a42:	b410      	push	{r4}
    _actualCount = _metroCount;
    2a44:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    2a46:	6404      	str	r4, [r0, #64]	; 0x40
    if (!_metro) {
    2a48:	b939      	cbnz	r1, 2a5a <TriggerOutput::SetMetro(int, unsigned long)+0x26>
  _nextEvent = syncTime;
    2a4a:	6382      	str	r2, [r0, #56]	; 0x38
  _nextNormal = syncTime;
    2a4c:	6282      	str	r2, [r0, #40]	; 0x28
      _multiplyInterval = _tempMultiplyInterval;
    2a4e:	6a42      	ldr	r2, [r0, #36]	; 0x24
  _counter = 0;
    2a50:	8301      	strh	r1, [r0, #24]
      _multiplyInterval = _tempMultiplyInterval;
    2a52:	6202      	str	r2, [r0, #32]
      _multiplication = _tempMultiplication;
    2a54:	8bc2      	ldrh	r2, [r0, #30]
      _multiplyCount = 0;
    2a56:	62c1      	str	r1, [r0, #44]	; 0x2c
      _multiplication = _tempMultiplication;
    2a58:	8382      	strh	r2, [r0, #28]
}
    2a5a:	f85d 4b04 	ldr.w	r4, [sp], #4
  _metro = m;
    2a5e:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
}
    2a62:	4770      	bx	lr
  _metro = m;
    2a64:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    2a68:	4770      	bx	lr
    2a6a:	bf00      	nop
    2a6c:	0000      	movs	r0, r0
	...

00002a70 <TriggerOutput::SetMetroTime(int, short)>:
void TriggerOutput::SetMetroTime(int value, short format){
    2a70:	460b      	mov	r3, r1
  _metroInterval = TxHelper::ConvertMs(value, format);
    2a72:	4611      	mov	r1, r2
void TriggerOutput::SetMetroTime(int value, short format){
    2a74:	b510      	push	{r4, lr}
    2a76:	4604      	mov	r4, r0
  _metroInterval = TxHelper::ConvertMs(value, format);
    2a78:	4618      	mov	r0, r3
    2a7a:	f000 f8fd 	bl	2c78 <TxHelper::ConvertMs(unsigned long, short)>
  _tempMultiplyInterval = _metroInterval / _multiplication;
    2a7e:	8ba3      	ldrh	r3, [r4, #28]
  if (_widthMode) SetWidth(_width);
    2a80:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
  _metroInterval = TxHelper::ConvertMs(value, format);
    2a84:	6360      	str	r0, [r4, #52]	; 0x34
  _tempMultiplyInterval = _metroInterval / _multiplication;
    2a86:	fbb0 f3f3 	udiv	r3, r0, r3
    2a8a:	6263      	str	r3, [r4, #36]	; 0x24
  if (_widthMode) SetWidth(_width);
    2a8c:	b1a2      	cbz	r2, 2ab8 <TriggerOutput::SetMetroTime(int, short)+0x48>
  _width = constrain(value, 0, 100);
    2a8e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2a90:	2b64      	cmp	r3, #100	; 0x64
    2a92:	bfa8      	it	ge
    2a94:	2364      	movge	r3, #100	; 0x64
    2a96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  _pulseTime = _metroInterval * _width / 100.;
    2a9a:	fb03 f000 	mul.w	r0, r3, r0
  _width = constrain(value, 0, 100);
    2a9e:	64a3      	str	r3, [r4, #72]	; 0x48
  _pulseTime = _metroInterval * _width / 100.;
    2aa0:	ee07 0a90 	vmov	s15, r0
    2aa4:	ed9f 5b06 	vldr	d5, [pc, #24]	; 2ac0 <TriggerOutput::SetMetroTime(int, short)+0x50>
    2aa8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    2aac:	ee87 6b05 	vdiv.f64	d6, d7, d5
    2ab0:	eebc 6bc6 	vcvt.u32.f64	s12, d6
    2ab4:	ed84 6a13 	vstr	s12, [r4, #76]	; 0x4c
}
    2ab8:	bd10      	pop	{r4, pc}
    2aba:	bf00      	nop
    2abc:	f3af 8000 	nop.w
    2ac0:	00000000 	.word	0x00000000
    2ac4:	40590000 	.word	0x40590000

00002ac8 <TriggerOutput::SetMetroCount(int)>:
  _actualCount = value;
    2ac8:	e9c0 110f 	strd	r1, r1, [r0, #60]	; 0x3c
}
    2acc:	4770      	bx	lr
    2ace:	bf00      	nop

00002ad0 <TriggerOutput::SetMute(bool)>:
  _mutePulse = state;
    2ad0:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
}
    2ad4:	4770      	bx	lr
    2ad6:	bf00      	nop

00002ad8 <TriggerOutput::Sync()>:
    2ad8:	4b03      	ldr	r3, [pc, #12]	; (2ae8 <TriggerOutput::Sync()+0x10>)
  _counter = 0;
    2ada:	2200      	movs	r2, #0
    2adc:	681b      	ldr	r3, [r3, #0]
    2ade:	8302      	strh	r2, [r0, #24]
  _nextEvent = syncTime;
    2ae0:	6383      	str	r3, [r0, #56]	; 0x38
  _nextNormal = syncTime;
    2ae2:	6283      	str	r3, [r0, #40]	; 0x28
}
    2ae4:	4770      	bx	lr
    2ae6:	bf00      	nop
    2ae8:	2001ac40 	.word	0x2001ac40

00002aec <TriggerOutput::Sync(unsigned long)>:
  _counter = 0;
    2aec:	2300      	movs	r3, #0
  _nextEvent = syncTime;
    2aee:	6381      	str	r1, [r0, #56]	; 0x38
  _nextNormal = syncTime;
    2af0:	6281      	str	r1, [r0, #40]	; 0x28
  _counter = 0;
    2af2:	8303      	strh	r3, [r0, #24]
}
    2af4:	4770      	bx	lr
    2af6:	bf00      	nop

00002af8 <TriggerOutput::Reset()>:
void TriggerOutput::Reset(){
    2af8:	b570      	push	{r4, r5, r6, lr}
    2afa:	4604      	mov	r4, r0
  _state = state;
    2afc:	2500      	movs	r5, #0
  _polarity = polarity;
    2afe:	2601      	movs	r6, #1
  digitalWrite(_output, _state ? HIGH : LOW);
    2b00:	7900      	ldrb	r0, [r0, #4]
    2b02:	4629      	mov	r1, r5
  _state = state;
    2b04:	7365      	strb	r5, [r4, #13]
  _polarity = polarity;
    2b06:	73a6      	strb	r6, [r4, #14]
  digitalWrite(_output, _state ? HIGH : LOW);
    2b08:	f001 fd70 	bl	45ec <digitalWrite>
  digitalWrite(_led, _state ? HIGH : LOW);
    2b0c:	7b61      	ldrb	r1, [r4, #13]
    2b0e:	7a20      	ldrb	r0, [r4, #8]
    2b10:	f001 fd6c 	bl	45ec <digitalWrite>
  _pulseTime = TxHelper::ConvertMs(value, format);
    2b14:	4629      	mov	r1, r5
    2b16:	2064      	movs	r0, #100	; 0x64
  _widthMode = false;
    2b18:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
  _pulseTime = TxHelper::ConvertMs(value, format);
    2b1c:	f000 f8ac 	bl	2c78 <TxHelper::ConvertMs(unsigned long, short)>
   _tempMultiplyInterval = _metroInterval / _tempMultiplication;
    2b20:	6b62      	ldr	r2, [r4, #52]	; 0x34
   if (!_multiply && _metro) _nextEvent = _nextNormal;
    2b22:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
  _division = division;
    2b26:	82e6      	strh	r6, [r4, #22]
  _pulseTime = TxHelper::ConvertMs(value, format);
    2b28:	64e0      	str	r0, [r4, #76]	; 0x4c
  _counter = _division;
    2b2a:	8326      	strh	r6, [r4, #24]
  _divide = division > 1 ? true : false;
    2b2c:	7525      	strb	r5, [r4, #20]
   _tempMultiplication = max(multiplier, 1);
    2b2e:	83e6      	strh	r6, [r4, #30]
   _tempMultiplyInterval = _metroInterval / _tempMultiplication;
    2b30:	6262      	str	r2, [r4, #36]	; 0x24
   _multiply = _tempMultiplication > 1;
    2b32:	76a5      	strb	r5, [r4, #26]
   if (!_multiply && _metro) _nextEvent = _nextNormal;
    2b34:	b10b      	cbz	r3, 2b3a <TriggerOutput::Reset()+0x42>
    2b36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2b38:	63a3      	str	r3, [r4, #56]	; 0x38
  _metro = m;
    2b3a:	2100      	movs	r1, #0
    2b3c:	4b18      	ldr	r3, [pc, #96]	; (2ba0 <TriggerOutput::Reset()+0xa8>)
  _metroInterval = TxHelper::ConvertMs(value, format);
    2b3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  _metro = m;
    2b42:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    2b46:	681b      	ldr	r3, [r3, #0]
  _metroInterval = TxHelper::ConvertMs(value, format);
    2b48:	f000 f896 	bl	2c78 <TxHelper::ConvertMs(unsigned long, short)>
  _tempMultiplyInterval = _metroInterval / _multiplication;
    2b4c:	8ba3      	ldrh	r3, [r4, #28]
  if (_widthMode) SetWidth(_width);
    2b4e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
  _metroInterval = TxHelper::ConvertMs(value, format);
    2b52:	6360      	str	r0, [r4, #52]	; 0x34
  _tempMultiplyInterval = _metroInterval / _multiplication;
    2b54:	fbb0 f3f3 	udiv	r3, r0, r3
    2b58:	6263      	str	r3, [r4, #36]	; 0x24
  if (_widthMode) SetWidth(_width);
    2b5a:	b1a2      	cbz	r2, 2b86 <TriggerOutput::Reset()+0x8e>
  _width = constrain(value, 0, 100);
    2b5c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2b5e:	2b64      	cmp	r3, #100	; 0x64
    2b60:	bfa8      	it	ge
    2b62:	2364      	movge	r3, #100	; 0x64
    2b64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  _pulseTime = _metroInterval * _width / 100.;
    2b68:	fb03 f000 	mul.w	r0, r3, r0
  _width = constrain(value, 0, 100);
    2b6c:	64a3      	str	r3, [r4, #72]	; 0x48
  _pulseTime = _metroInterval * _width / 100.;
    2b6e:	ee07 0a90 	vmov	s15, r0
    2b72:	ed9f 5b09 	vldr	d5, [pc, #36]	; 2b98 <TriggerOutput::Reset()+0xa0>
    2b76:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    2b7a:	ee87 6b05 	vdiv.f64	d6, d7, d5
    2b7e:	eebc 6bc6 	vcvt.u32.f64	s12, d6
    2b82:	ed84 6a13 	vstr	s12, [r4, #76]	; 0x4c
  _metroCount = value;
    2b86:	2300      	movs	r3, #0
  _actualCount = value;
    2b88:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  _mutePulse = state;
    2b8c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
    2b90:	bd70      	pop	{r4, r5, r6, pc}
    2b92:	bf00      	nop
    2b94:	f3af 8000 	nop.w
    2b98:	00000000 	.word	0x00000000
    2b9c:	40590000 	.word	0x40590000
    2ba0:	2001ac40 	.word	0x2001ac40
    2ba4:	00000000 	.word	0x00000000

00002ba8 <TxHelper::VOct2Frequency(int)>:

/*
 * Takes vOct between 0 and 16383 and convert them to frequencies
 */
float TxHelper::VOct2Frequency(int value){
   return 16.351597831287414 * fastpow2((value / 1638.3) - 1.);
    2ba8:	ee07 0a90 	vmov	s15, r0
    2bac:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
// so handle it here.

static inline float
fastpow2 (float p)
{
  float offset = (p < 0) ? 1.0f : 0.0f;
    2bb0:	ed9f 6a29 	vldr	s12, [pc, #164]	; 2c58 <TxHelper::VOct2Frequency(int)+0xb0>
    2bb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    2bb8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
  float clipp = (p < -126) ? -126.0f : p;
    2bbc:	eddf 4a27 	vldr	s9, [pc, #156]	; 2c5c <TxHelper::VOct2Frequency(int)+0xb4>
    2bc0:	ed9f 2b21 	vldr	d2, [pc, #132]	; 2c48 <TxHelper::VOct2Frequency(int)+0xa0>
    2bc4:	ee85 7b02 	vdiv.f64	d7, d5, d2
    2bc8:	ee37 7b43 	vsub.f64	d7, d7, d3
    2bcc:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  float offset = (p < 0) ? 1.0f : 0.0f;
    2bd0:	eeb4 7ac6 	vcmpe.f32	s14, s12
    2bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  float clipp = (p < -126) ? -126.0f : p;
    2bd8:	eeb4 7ae4 	vcmpe.f32	s14, s9
  float offset = (p < 0) ? 1.0f : 0.0f;
    2bdc:	bf54      	ite	pl
    2bde:	eef0 7a46 	vmovpl.f32	s15, s12
    2be2:	eef0 7a66 	vmovmi.f32	s15, s13
  float clipp = (p < -126) ? -126.0f : p;
    2be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2bea:	d428      	bmi.n	2c3e <TxHelper::VOct2Frequency(int)+0x96>
  int w = clipp;
    2bec:	eebd 6ac7 	vcvt.s32.f32	s12, s14
  float z = clipp - w + offset;
  union { uint32_t i; float f; } v = { cast_uint32_t ( (1 << 23) * (clipp + 121.2740575f + 27.7280233f / (4.84252568f - z) - 1.49012907f * z) ) };
    2bf0:	eddf 6a1b 	vldr	s13, [pc, #108]	; 2c60 <TxHelper::VOct2Frequency(int)+0xb8>
    2bf4:	ee77 6a26 	vadd.f32	s13, s14, s13
  float z = clipp - w + offset;
    2bf8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    2bfc:	ee37 6a46 	vsub.f32	s12, s14, s12
    2c00:	ee77 7a86 	vadd.f32	s15, s15, s12
  union { uint32_t i; float f; } v = { cast_uint32_t ( (1 << 23) * (clipp + 121.2740575f + 27.7280233f / (4.84252568f - z) - 1.49012907f * z) ) };
    2c04:	ed9f 7a17 	vldr	s14, [pc, #92]	; 2c64 <TxHelper::VOct2Frequency(int)+0xbc>
    2c08:	ed9f 4a17 	vldr	s8, [pc, #92]	; 2c68 <TxHelper::VOct2Frequency(int)+0xc0>
    2c0c:	eddf 4a17 	vldr	s9, [pc, #92]	; 2c6c <TxHelper::VOct2Frequency(int)+0xc4>
    2c10:	ee37 7a67 	vsub.f32	s14, s14, s15
    2c14:	ed9f 6a16 	vldr	s12, [pc, #88]	; 2c70 <TxHelper::VOct2Frequency(int)+0xc8>
    2c18:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 2c50 <TxHelper::VOct2Frequency(int)+0xa8>
    2c1c:	ee84 0a07 	vdiv.f32	s0, s8, s14
    2c20:	ee30 0a26 	vadd.f32	s0, s0, s13
    2c24:	eea7 0ae4 	vfms.f32	s0, s15, s9
    2c28:	ee20 0a06 	vmul.f32	s0, s0, s12
    2c2c:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    2c30:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    2c34:	ee20 0b05 	vmul.f64	d0, d0, d5
}
    2c38:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    2c3c:	4770      	bx	lr
    2c3e:	eddf 6a0d 	vldr	s13, [pc, #52]	; 2c74 <TxHelper::VOct2Frequency(int)+0xcc>
    2c42:	e7dd      	b.n	2c00 <TxHelper::VOct2Frequency(int)+0x58>
    2c44:	f3af 8000 	nop.w
    2c48:	33333333 	.word	0x33333333
    2c4c:	40999933 	.word	0x40999933
    2c50:	50c2b956 	.word	0x50c2b956
    2c54:	40305a02 	.word	0x40305a02
    2c58:	00000000 	.word	0x00000000
    2c5c:	c2fc0000 	.word	0xc2fc0000
    2c60:	42f28c51 	.word	0x42f28c51
    2c64:	409af5f8 	.word	0x409af5f8
    2c68:	41ddd2fe 	.word	0x41ddd2fe
    2c6c:	3fbebc8d 	.word	0x3fbebc8d
    2c70:	4b000000 	.word	0x4b000000
    2c74:	c0973af0 	.word	0xc0973af0

00002c78 <TxHelper::ConvertMs(unsigned long, short)>:

unsigned long TxHelper::ConvertMs(unsigned long ms, short format){
  
  switch(format){
    2c78:	2902      	cmp	r1, #2
    2c7a:	d004      	beq.n	2c86 <TxHelper::ConvertMs(unsigned long, short)+0xe>
    2c7c:	2903      	cmp	r1, #3
    2c7e:	d00c      	beq.n	2c9a <TxHelper::ConvertMs(unsigned long, short)+0x22>
    2c80:	2901      	cmp	r1, #1
    2c82:	d005      	beq.n	2c90 <TxHelper::ConvertMs(unsigned long, short)+0x18>
      
  }

  return ms;
  
}
    2c84:	4770      	bx	lr
      ms *= 60000;
    2c86:	f64e 2360 	movw	r3, #60000	; 0xea60
    2c8a:	fb03 f000 	mul.w	r0, r3, r0
      break;
    2c8e:	4770      	bx	lr
      ms *= 1000;
    2c90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    2c94:	fb03 f000 	mul.w	r0, r3, r0
      break;
    2c98:	4770      	bx	lr
      ms = 60000 / ms;
    2c9a:	f64e 2360 	movw	r3, #60000	; 0xea60
    2c9e:	fbb3 f0f0 	udiv	r0, r3, r0
}
    2ca2:	4770      	bx	lr

00002ca4 <TxHelper::Parse(unsigned int)>:
TxResponse TxHelper::Parse(size_t len){
    2ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
  memset(buffer, 0, sizeof(buffer));
    2ca6:	2300      	movs	r3, #0
TxResponse TxHelper::Parse(size_t len){
    2ca8:	b085      	sub	sp, #20
    2caa:	4605      	mov	r5, r0
    2cac:	4e15      	ldr	r6, [pc, #84]	; (2d04 <TxHelper::Parse(unsigned int)+0x60>)
    2cae:	466f      	mov	r7, sp
  int counterPal = 0;
    2cb0:	461c      	mov	r4, r3
  memset(buffer, 0, sizeof(buffer));
    2cb2:	e9cd 3300 	strd	r3, r3, [sp]
    2cb6:	e9cd 3302 	strd	r3, r3, [sp, #8]
        return (int)(rx_bytes_available - rx_next_byte_to_read);
    2cba:	e9d6 321b 	ldrd	r3, r2, [r6, #108]	; 0x6c
    2cbe:	1a9b      	subs	r3, r3, r2
    2cc0:	e001      	b.n	2cc6 <TxHelper::Parse(unsigned int)+0x22>
    if (counterPal < 4) {
    2cc2:	2c04      	cmp	r4, #4
    2cc4:	d117      	bne.n	2cf6 <TxHelper::Parse(unsigned int)+0x52>
  while (1 < Wire.available()) {
    2cc6:	2b01      	cmp	r3, #1
    2cc8:	dcfb      	bgt.n	2cc2 <TxHelper::Parse(unsigned int)+0x1e>
  buffer[counterPal] = Wire.read();
    2cca:	480e      	ldr	r0, [pc, #56]	; (2d04 <TxHelper::Parse(unsigned int)+0x60>)
    2ccc:	f000 f834 	bl	2d38 <I2CDriverWire::read()>
    2cd0:	aa04      	add	r2, sp, #16
    2cd2:	4603      	mov	r3, r0
}
    2cd4:	4628      	mov	r0, r5
  buffer[counterPal] = Wire.read();
    2cd6:	eb02 0484 	add.w	r4, r2, r4, lsl #2
    2cda:	f844 3c10 	str.w	r3, [r4, #-16]
  response.Command = buffer[0];
    2cde:	9a00      	ldr	r2, [sp, #0]
  uint16_t temp = (uint16_t)((buffer[2] << 8) + (buffer[3]));
    2ce0:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
  response.Command = buffer[0];
    2ce4:	702a      	strb	r2, [r5, #0]
  uint16_t temp = (uint16_t)((buffer[2] << 8) + (buffer[3]));
    2ce6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
  response.Output = buffer[1];
    2cea:	9a01      	ldr	r2, [sp, #4]
  int16_t temp2 = (int16_t)temp;
    2cec:	b21b      	sxth	r3, r3
  response.Output = buffer[1];
    2cee:	706a      	strb	r2, [r5, #1]
  response.Value = (int)temp2;
    2cf0:	606b      	str	r3, [r5, #4]
}
    2cf2:	b005      	add	sp, #20
    2cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      buffer[counterPal++] = Wire.read();
    2cf6:	4630      	mov	r0, r6
    2cf8:	3401      	adds	r4, #1
    2cfa:	f000 f81d 	bl	2d38 <I2CDriverWire::read()>
    2cfe:	f847 0b04 	str.w	r0, [r7], #4
    2d02:	e7da      	b.n	2cba <TxHelper::Parse(unsigned int)+0x16>
    2d04:	2001a6d4 	.word	0x2001a6d4

00002d08 <Print::availableForWrite()>:
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
    2d08:	2000      	movs	r0, #0
    2d0a:	4770      	bx	lr

00002d0c <Print::flush()>:
	virtual void flush()				{ }
    2d0c:	4770      	bx	lr
    2d0e:	bf00      	nop

00002d10 <I2CDriverWire::available()>:
    2d10:	e9d0 201b 	ldrd	r2, r0, [r0, #108]	; 0x6c
    }
    2d14:	1a10      	subs	r0, r2, r0
    2d16:	4770      	bx	lr

00002d18 <I2CDriverWire::write(unsigned char)>:

size_t I2CDriverWire::write(uint8_t data) {
    if (tx_next_byte_to_write < tx_buffer_length) {
    2d18:	6c82      	ldr	r2, [r0, #72]	; 0x48
    2d1a:	2a1f      	cmp	r2, #31
    2d1c:	d901      	bls.n	2d22 <I2CDriverWire::write(unsigned char)+0xa>
        tx_buffer[tx_next_byte_to_write++] = data;
        return 1;
    }
    return 0;
    2d1e:	2000      	movs	r0, #0
}
    2d20:	4770      	bx	lr
size_t I2CDriverWire::write(uint8_t data) {
    2d22:	b410      	push	{r4}
    2d24:	4603      	mov	r3, r0
        tx_buffer[tx_next_byte_to_write++] = data;
    2d26:	1c54      	adds	r4, r2, #1
    2d28:	4402      	add	r2, r0
        return 1;
    2d2a:	2001      	movs	r0, #1
        tx_buffer[tx_next_byte_to_write++] = data;
    2d2c:	649c      	str	r4, [r3, #72]	; 0x48
    2d2e:	f882 1025 	strb.w	r1, [r2, #37]	; 0x25
}
    2d32:	f85d 4b04 	ldr.w	r4, [sp], #4
    2d36:	4770      	bx	lr

00002d38 <I2CDriverWire::read()>:
    rx_bytes_available = master.get_bytes_transferred();
    return rx_bytes_available;
}

int I2CDriverWire::read() {
    if (rx_next_byte_to_read < rx_bytes_available) {
    2d38:	e9d0 231b 	ldrd	r2, r3, [r0, #108]	; 0x6c
    2d3c:	4293      	cmp	r3, r2
    2d3e:	d205      	bcs.n	2d4c <I2CDriverWire::read()+0x14>
        return rxBuffer[rx_next_byte_to_read++];
    2d40:	1c5a      	adds	r2, r3, #1
    2d42:	4403      	add	r3, r0
    2d44:	6702      	str	r2, [r0, #112]	; 0x70
    2d46:	f893 004c 	ldrb.w	r0, [r3, #76]	; 0x4c
    2d4a:	4770      	bx	lr
    }
    return no_more_bytes;
    2d4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    2d50:	4770      	bx	lr
    2d52:	bf00      	nop

00002d54 <I2CDriverWire::peek()>:

int I2CDriverWire::peek() {
    if (rx_next_byte_to_read < rx_bytes_available) {
    2d54:	e9d0 231b 	ldrd	r2, r3, [r0, #108]	; 0x6c
    2d58:	4293      	cmp	r3, r2
    2d5a:	d203      	bcs.n	2d64 <I2CDriverWire::peek()+0x10>
        return rxBuffer[rx_next_byte_to_read];
    2d5c:	4418      	add	r0, r3
    2d5e:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
    2d62:	4770      	bx	lr
    }
    return no_more_bytes;
    2d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    2d68:	4770      	bx	lr
    2d6a:	bf00      	nop

00002d6c <I2CDriverWire::before_transmit(unsigned short)>:

// Gives the application a chance to set up the transmit buffer
// during the ISR.
void I2CDriverWire::before_transmit(uint16_t address) {
    last_address_called = address;
    tx_next_byte_to_write = 0;
    2d6c:	2300      	movs	r3, #0
    if (on_request) {
    2d6e:	6a02      	ldr	r2, [r0, #32]
void I2CDriverWire::before_transmit(uint16_t address) {
    2d70:	b510      	push	{r4, lr}
    2d72:	4604      	mov	r4, r0
    last_address_called = address;
    2d74:	f8a0 1074 	strh.w	r1, [r0, #116]	; 0x74
    tx_next_byte_to_write = 0;
    2d78:	6483      	str	r3, [r0, #72]	; 0x48
    if (on_request) {
    2d7a:	b10a      	cbz	r2, 2d80 <I2CDriverWire::before_transmit(unsigned short)+0x14>
        on_request();
    2d7c:	4790      	blx	r2
    }
    slave.set_transmit_buffer(tx_buffer, tx_next_byte_to_write);
    2d7e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    2d80:	6960      	ldr	r0, [r4, #20]
    2d82:	f104 0125 	add.w	r1, r4, #37	; 0x25
    2d86:	6803      	ldr	r3, [r0, #0]
}
    2d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    slave.set_transmit_buffer(tx_buffer, tx_next_byte_to_write);
    2d8c:	69db      	ldr	r3, [r3, #28]
    2d8e:	4718      	bx	r3

00002d90 <I2CDriverWire::on_receive_wrapper(unsigned int, unsigned short)>:
        }
    }
    Serial.println("Timed out waiting for transfer to finish.");
}

void I2CDriverWire::on_receive_wrapper(size_t num_bytes, uint16_t address) {
    2d90:	b430      	push	{r4, r5}
    last_address_called = address;
    rx_bytes_available = num_bytes;
    rx_next_byte_to_read = 0;
    2d92:	2500      	movs	r5, #0
    if (on_receive) {
    2d94:	69c4      	ldr	r4, [r0, #28]
    last_address_called = address;
    2d96:	f8a0 2074 	strh.w	r2, [r0, #116]	; 0x74
    rx_next_byte_to_read = 0;
    2d9a:	e9c0 151b 	strd	r1, r5, [r0, #108]	; 0x6c
    if (on_receive) {
    2d9e:	b11c      	cbz	r4, 2da8 <I2CDriverWire::on_receive_wrapper(unsigned int, unsigned short)+0x18>
        on_receive(num_bytes);
    2da0:	4623      	mov	r3, r4
    2da2:	4608      	mov	r0, r1
    }
}
    2da4:	bc30      	pop	{r4, r5}
        on_receive(num_bytes);
    2da6:	4718      	bx	r3
}
    2da8:	bc30      	pop	{r4, r5}
    2daa:	4770      	bx	lr

00002dac <I2CDriverWire::write(unsigned char const*, unsigned int)>:
size_t I2CDriverWire::write(const uint8_t* data, size_t length) {
    2dac:	b538      	push	{r3, r4, r5, lr}
    size_t avail = tx_buffer_length - tx_next_byte_to_write;
    2dae:	6c83      	ldr	r3, [r0, #72]	; 0x48
size_t I2CDriverWire::write(const uint8_t* data, size_t length) {
    2db0:	4604      	mov	r4, r0
    size_t avail = tx_buffer_length - tx_next_byte_to_write;
    2db2:	f1c3 0020 	rsb	r0, r3, #32
    if (avail >= length) {
    2db6:	4290      	cmp	r0, r2
    2db8:	d201      	bcs.n	2dbe <I2CDriverWire::write(unsigned char const*, unsigned int)+0x12>
    return 0;
    2dba:	2000      	movs	r0, #0
}
    2dbc:	bd38      	pop	{r3, r4, r5, pc}
        uint8_t* dest = tx_buffer + tx_next_byte_to_write;
    2dbe:	f104 0025 	add.w	r0, r4, #37	; 0x25
    2dc2:	4615      	mov	r5, r2
        memcpy(dest, data, length);
    2dc4:	4418      	add	r0, r3
    2dc6:	f001 ff23 	bl	4c10 <memcpy>
        tx_next_byte_to_write += length;
    2dca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        return length;
    2dcc:	4628      	mov	r0, r5
        tx_next_byte_to_write += length;
    2dce:	442b      	add	r3, r5
    2dd0:	64a3      	str	r3, [r4, #72]	; 0x48
}
    2dd2:	bd38      	pop	{r3, r4, r5, pc}

00002dd4 <std::_Function_handler<void (unsigned short), std::_Bind<void (I2CDriverWire::*(I2CDriverWire*, std::_Placeholder<1>))(unsigned short)> >::_M_invoke(std::_Any_data const&, unsigned short&&)>:
	    {
	      const _Functor& __f = __source._M_access<_Functor>();
	      return const_cast<_Functor*>(std::__addressof(__f));
	    }
	  else // have stored a pointer
	    return __source._M_access<_Functor*>();
    2dd4:	6803      	ldr	r3, [r0, #0]
    { return (*std::forward<_Tp>(__t)).*__f; }

  /// Invoke a callable object.
  template<typename _Callable, typename... _Args>
    constexpr typename __invoke_result<_Callable, _Args...>::type
    __invoke(_Callable&& __fn, _Args&&... __args)
    2dd6:	8809      	ldrh	r1, [r1, #0]
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
    2dd8:	e9d3 2000 	ldrd	r2, r0, [r3]
    2ddc:	689b      	ldr	r3, [r3, #8]
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
    2dde:	f010 0f01 	tst.w	r0, #1
    2de2:	d102      	bne.n	2dea <std::_Function_handler<void (unsigned short), std::_Bind<void (I2CDriverWire::*(I2CDriverWire*, std::_Placeholder<1>))(unsigned short)> >::_M_invoke(std::_Any_data const&, unsigned short&&)+0x16>
    2de4:	eb03 0060 	add.w	r0, r3, r0, asr #1
    2de8:	4710      	bx	r2
    2dea:	ea4f 0c60 	mov.w	ip, r0, asr #1
    2dee:	eb03 0060 	add.w	r0, r3, r0, asr #1
    2df2:	f853 300c 	ldr.w	r3, [r3, ip]
    2df6:	589a      	ldr	r2, [r3, r2]
    2df8:	4710      	bx	r2
    2dfa:	bf00      	nop

00002dfc <std::_Function_handler<void (unsigned int, unsigned short), std::_Bind<void (I2CDriverWire::*(I2CDriverWire*, std::_Placeholder<1>, std::_Placeholder<2>))(unsigned int, unsigned short)> >::_M_invoke(std::_Any_data const&, unsigned int&&, unsigned short&&)>:
    2dfc:	6803      	ldr	r3, [r0, #0]
    __invoke(_Callable&& __fn, _Args&&... __args)
    2dfe:	6809      	ldr	r1, [r1, #0]
    2e00:	8812      	ldrh	r2, [r2, #0]
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
    2e02:	b410      	push	{r4}
    2e04:	e9d3 4000 	ldrd	r4, r0, [r3]
    2e08:	689b      	ldr	r3, [r3, #8]
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
    2e0a:	f010 0f01 	tst.w	r0, #1
    2e0e:	d105      	bne.n	2e1c <std::_Function_handler<void (unsigned int, unsigned short), std::_Bind<void (I2CDriverWire::*(I2CDriverWire*, std::_Placeholder<1>, std::_Placeholder<2>))(unsigned int, unsigned short)> >::_M_invoke(std::_Any_data const&, unsigned int&&, unsigned short&&)+0x20>
    2e10:	eb03 0060 	add.w	r0, r3, r0, asr #1
    2e14:	4623      	mov	r3, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
    2e16:	f85d 4b04 	ldr.w	r4, [sp], #4
    2e1a:	4718      	bx	r3
    2e1c:	ea4f 0c60 	mov.w	ip, r0, asr #1
    2e20:	eb03 0060 	add.w	r0, r3, r0, asr #1
    2e24:	f853 300c 	ldr.w	r3, [r3, ip]
    2e28:	591c      	ldr	r4, [r3, r4]
    2e2a:	4623      	mov	r3, r4
    2e2c:	f85d 4b04 	ldr.w	r4, [sp], #4
    2e30:	4718      	bx	r3
    2e32:	bf00      	nop

00002e34 <std::_Function_handler<void (unsigned short), std::_Bind<void (I2CDriverWire::*(I2CDriverWire*, std::_Placeholder<1>))(unsigned short)> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
	switch (__op)
    2e34:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
    2e36:	b538      	push	{r3, r4, r5, lr}
    2e38:	4604      	mov	r4, r0
	switch (__op)
    2e3a:	d103      	bne.n	2e44 <std::_Function_handler<void (unsigned short), std::_Bind<void (I2CDriverWire::*(I2CDriverWire*, std::_Placeholder<1>))(unsigned short)> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x10>
	    return __source._M_access<_Functor*>();
    2e3c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
    2e3e:	6003      	str	r3, [r0, #0]
      }
    2e40:	2000      	movs	r0, #0
    2e42:	bd38      	pop	{r3, r4, r5, pc}
	  switch (__op)
    2e44:	2a02      	cmp	r2, #2
    2e46:	d00c      	beq.n	2e62 <std::_Function_handler<void (unsigned short), std::_Bind<void (I2CDriverWire::*(I2CDriverWire*, std::_Placeholder<1>))(unsigned short)> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x2e>
    2e48:	2a03      	cmp	r2, #3
    2e4a:	d003      	beq.n	2e54 <std::_Function_handler<void (unsigned short), std::_Bind<void (I2CDriverWire::*(I2CDriverWire*, std::_Placeholder<1>))(unsigned short)> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x20>
    2e4c:	2a00      	cmp	r2, #0
    2e4e:	d1f7      	bne.n	2e40 <std::_Function_handler<void (unsigned short), std::_Bind<void (I2CDriverWire::*(I2CDriverWire*, std::_Placeholder<1>))(unsigned short)> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0xc>
	      __dest._M_access<const type_info*>() = nullptr;
    2e50:	6002      	str	r2, [r0, #0]
	      break;
    2e52:	e7f5      	b.n	2e40 <std::_Function_handler<void (unsigned short), std::_Bind<void (I2CDriverWire::*(I2CDriverWire*, std::_Placeholder<1>))(unsigned short)> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0xc>
	  delete __victim._M_access<_Functor*>();
    2e54:	6800      	ldr	r0, [r0, #0]
    2e56:	2800      	cmp	r0, #0
    2e58:	d0f2      	beq.n	2e40 <std::_Function_handler<void (unsigned short), std::_Bind<void (I2CDriverWire::*(I2CDriverWire*, std::_Placeholder<1>))(unsigned short)> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0xc>
    2e5a:	210c      	movs	r1, #12
    2e5c:	f001 ff74 	bl	4d48 <operator delete(void*, unsigned int)>
    2e60:	e7ee      	b.n	2e40 <std::_Function_handler<void (unsigned short), std::_Bind<void (I2CDriverWire::*(I2CDriverWire*, std::_Placeholder<1>))(unsigned short)> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0xc>
	    return __source._M_access<_Functor*>();
    2e62:	680d      	ldr	r5, [r1, #0]
	      = new _Functor(std::forward<_Fn>(__f));
    2e64:	200c      	movs	r0, #12
    2e66:	f001 ff6d 	bl	4d44 <operator new(unsigned int)>
    2e6a:	4603      	mov	r3, r0
    2e6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    2e70:	6023      	str	r3, [r4, #0]
    2e72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  }
    2e76:	e7e3      	b.n	2e40 <std::_Function_handler<void (unsigned short), std::_Bind<void (I2CDriverWire::*(I2CDriverWire*, std::_Placeholder<1>))(unsigned short)> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0xc>

00002e78 <std::_Function_handler<void (unsigned int, unsigned short), std::_Bind<void (I2CDriverWire::*(I2CDriverWire*, std::_Placeholder<1>, std::_Placeholder<2>))(unsigned int, unsigned short)> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
	switch (__op)
    2e78:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
    2e7a:	b538      	push	{r3, r4, r5, lr}
    2e7c:	4604      	mov	r4, r0
	switch (__op)
    2e7e:	d103      	bne.n	2e88 <std::_Function_handler<void (unsigned int, unsigned short), std::_Bind<void (I2CDriverWire::*(I2CDriverWire*, std::_Placeholder<1>, std::_Placeholder<2>))(unsigned int, unsigned short)> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x10>
	    return __source._M_access<_Functor*>();
    2e80:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
    2e82:	6003      	str	r3, [r0, #0]
      }
    2e84:	2000      	movs	r0, #0
    2e86:	bd38      	pop	{r3, r4, r5, pc}
	  switch (__op)
    2e88:	2a02      	cmp	r2, #2
    2e8a:	d00c      	beq.n	2ea6 <std::_Function_handler<void (unsigned int, unsigned short), std::_Bind<void (I2CDriverWire::*(I2CDriverWire*, std::_Placeholder<1>, std::_Placeholder<2>))(unsigned int, unsigned short)> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x2e>
    2e8c:	2a03      	cmp	r2, #3
    2e8e:	d003      	beq.n	2e98 <std::_Function_handler<void (unsigned int, unsigned short), std::_Bind<void (I2CDriverWire::*(I2CDriverWire*, std::_Placeholder<1>, std::_Placeholder<2>))(unsigned int, unsigned short)> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x20>
    2e90:	2a00      	cmp	r2, #0
    2e92:	d1f7      	bne.n	2e84 <std::_Function_handler<void (unsigned int, unsigned short), std::_Bind<void (I2CDriverWire::*(I2CDriverWire*, std::_Placeholder<1>, std::_Placeholder<2>))(unsigned int, unsigned short)> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0xc>
	      __dest._M_access<const type_info*>() = nullptr;
    2e94:	6002      	str	r2, [r0, #0]
	      break;
    2e96:	e7f5      	b.n	2e84 <std::_Function_handler<void (unsigned int, unsigned short), std::_Bind<void (I2CDriverWire::*(I2CDriverWire*, std::_Placeholder<1>, std::_Placeholder<2>))(unsigned int, unsigned short)> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0xc>
	  delete __victim._M_access<_Functor*>();
    2e98:	6800      	ldr	r0, [r0, #0]
    2e9a:	2800      	cmp	r0, #0
    2e9c:	d0f2      	beq.n	2e84 <std::_Function_handler<void (unsigned int, unsigned short), std::_Bind<void (I2CDriverWire::*(I2CDriverWire*, std::_Placeholder<1>, std::_Placeholder<2>))(unsigned int, unsigned short)> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0xc>
    2e9e:	210c      	movs	r1, #12
    2ea0:	f001 ff52 	bl	4d48 <operator delete(void*, unsigned int)>
    2ea4:	e7ee      	b.n	2e84 <std::_Function_handler<void (unsigned int, unsigned short), std::_Bind<void (I2CDriverWire::*(I2CDriverWire*, std::_Placeholder<1>, std::_Placeholder<2>))(unsigned int, unsigned short)> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0xc>
	    return __source._M_access<_Functor*>();
    2ea6:	680d      	ldr	r5, [r1, #0]
	      = new _Functor(std::forward<_Fn>(__f));
    2ea8:	200c      	movs	r0, #12
    2eaa:	f001 ff4b 	bl	4d44 <operator new(unsigned int)>
    2eae:	4603      	mov	r3, r0
    2eb0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    2eb4:	6023      	str	r3, [r4, #0]
    2eb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  }
    2eba:	e7e3      	b.n	2e84 <std::_Function_handler<void (unsigned int, unsigned short), std::_Bind<void (I2CDriverWire::*(I2CDriverWire*, std::_Placeholder<1>, std::_Placeholder<2>))(unsigned int, unsigned short)> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0xc>

00002ebc <I2CDriverWire::I2CDriverWire(I2CMaster&, I2CSlave&)>:
I2CDriverWire::I2CDriverWire(I2CMaster& master, I2CSlave& slave)
    2ebc:	b570      	push	{r4, r5, r6, lr}
enum LookaheadMode {SKIP_ALL, SKIP_NONE, SKIP_WHITESPACE};

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    2ebe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	constexpr Print() : write_error(0) {}
    2ec2:	2500      	movs	r5, #0
        : Stream(), master(master), slave(slave) {
    2ec4:	2620      	movs	r6, #32
    2ec6:	6101      	str	r1, [r0, #16]
    2ec8:	490f      	ldr	r1, [pc, #60]	; (2f08 <I2CDriverWire::I2CDriverWire(I2CMaster&, I2CSlave&)+0x4c>)
I2CDriverWire::I2CDriverWire(I2CMaster& master, I2CSlave& slave)
    2eca:	4604      	mov	r4, r0
    2ecc:	7305      	strb	r5, [r0, #12]
        : Stream(), master(master), slave(slave) {
    2ece:	6181      	str	r1, [r0, #24]
    2ed0:	4629      	mov	r1, r5
    2ed2:	6142      	str	r2, [r0, #20]
    2ed4:	4632      	mov	r2, r6
    2ed6:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
    2eda:	e9c0 5301 	strd	r5, r3, [r0, #4]
    2ede:	4b0b      	ldr	r3, [pc, #44]	; (2f0c <I2CDriverWire::I2CDriverWire(I2CMaster&, I2CSlave&)+0x50>)
    2ee0:	e9c0 5507 	strd	r5, r5, [r0, #28]
    2ee4:	6003      	str	r3, [r0, #0]
    2ee6:	3025      	adds	r0, #37	; 0x25
    2ee8:	f004 faaa 	bl	7440 <memset>
    2eec:	4632      	mov	r2, r6
    2eee:	4629      	mov	r1, r5
    2ef0:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    2ef4:	64a5      	str	r5, [r4, #72]	; 0x48
    2ef6:	f004 faa3 	bl	7440 <memset>
    2efa:	23ff      	movs	r3, #255	; 0xff
}
    2efc:	4620      	mov	r0, r4
        : Stream(), master(master), slave(slave) {
    2efe:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
    2f02:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
}
    2f06:	bd70      	pop	{r4, r5, r6, pc}
    2f08:	000186a0 	.word	0x000186a0
    2f0c:	20018914 	.word	0x20018914

00002f10 <I2CDriverWire::end()>:
void I2CDriverWire::end() {
    2f10:	b510      	push	{r4, lr}
    2f12:	4604      	mov	r4, r0
    master.end();
    2f14:	6900      	ldr	r0, [r0, #16]
void I2CDriverWire::end() {
    2f16:	b084      	sub	sp, #16
    master.end();
    2f18:	6803      	ldr	r3, [r0, #0]
    2f1a:	685b      	ldr	r3, [r3, #4]
    2f1c:	4798      	blx	r3
    slave.stop_listening();
    2f1e:	6960      	ldr	r0, [r4, #20]
    2f20:	6803      	ldr	r3, [r0, #0]
    2f22:	68db      	ldr	r3, [r3, #12]
    2f24:	4798      	blx	r3
    slave.after_receive(nullptr);
    2f26:	6960      	ldr	r0, [r4, #20]
      /**
       *  @brief Creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function(nullptr_t) noexcept
      : _Function_base() { }
    2f28:	2300      	movs	r3, #0
    2f2a:	4669      	mov	r1, sp
    2f2c:	6802      	ldr	r2, [r0, #0]
    2f2e:	6912      	ldr	r2, [r2, #16]
    2f30:	e9cd 3300 	strd	r3, r3, [sp]
    2f34:	e9cd 3302 	strd	r3, r3, [sp, #8]
    2f38:	4790      	blx	r2
      if (_M_manager)
    2f3a:	9b02      	ldr	r3, [sp, #8]
    2f3c:	b11b      	cbz	r3, 2f46 <I2CDriverWire::end()+0x36>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    2f3e:	2203      	movs	r2, #3
    2f40:	4669      	mov	r1, sp
    2f42:	4668      	mov	r0, sp
    2f44:	4798      	blx	r3
    slave.before_transmit(nullptr);
    2f46:	6960      	ldr	r0, [r4, #20]
      : _Function_base() { }
    2f48:	2300      	movs	r3, #0
    2f4a:	4669      	mov	r1, sp
    2f4c:	6802      	ldr	r2, [r0, #0]
    2f4e:	6952      	ldr	r2, [r2, #20]
    2f50:	e9cd 3300 	strd	r3, r3, [sp]
    2f54:	e9cd 3302 	strd	r3, r3, [sp, #8]
    2f58:	4790      	blx	r2
      if (_M_manager)
    2f5a:	9b02      	ldr	r3, [sp, #8]
    2f5c:	b11b      	cbz	r3, 2f66 <I2CDriverWire::end()+0x56>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    2f5e:	4669      	mov	r1, sp
    2f60:	2203      	movs	r2, #3
    2f62:	4608      	mov	r0, r1
    2f64:	4798      	blx	r3
}
    2f66:	b004      	add	sp, #16
    2f68:	bd10      	pop	{r4, pc}
    2f6a:	bf00      	nop

00002f6c <I2CDriverWire::prepare_slave()>:
void I2CDriverWire::prepare_slave() {
    2f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f6e:	4604      	mov	r4, r0
    2f70:	b085      	sub	sp, #20
    end();
    2f72:	f7ff ffcd 	bl	2f10 <I2CDriverWire::end()>
    slave.set_receive_buffer(rxBuffer, rx_buffer_length);
    2f76:	2220      	movs	r2, #32
    2f78:	6960      	ldr	r0, [r4, #20]
    2f7a:	f104 014c 	add.w	r1, r4, #76	; 0x4c
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
    2f7e:	2500      	movs	r5, #0
    2f80:	6803      	ldr	r3, [r0, #0]
    2f82:	6a1b      	ldr	r3, [r3, #32]
    2f84:	4798      	blx	r3
    slave.after_receive(std::bind(&I2CDriverWire::on_receive_wrapper, this, std::placeholders::_1, std::placeholders::_2));
    2f86:	6966      	ldr	r6, [r4, #20]
	      = new _Functor(std::forward<_Fn>(__f));
    2f88:	200c      	movs	r0, #12
    2f8a:	6833      	ldr	r3, [r6, #0]
    2f8c:	691f      	ldr	r7, [r3, #16]
	: _Function_base()
    2f8e:	e9cd 5500 	strd	r5, r5, [sp]
    2f92:	e9cd 5502 	strd	r5, r5, [sp, #8]
	      = new _Functor(std::forward<_Fn>(__f));
    2f96:	f001 fed5 	bl	4d44 <operator new(unsigned int)>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
    2f9a:	4a19      	ldr	r2, [pc, #100]	; (3000 <I2CDriverWire::prepare_slave()+0x94>)
    2f9c:	4603      	mov	r3, r0
    2f9e:	4669      	mov	r1, sp
    2fa0:	4630      	mov	r0, r6
    2fa2:	9300      	str	r3, [sp, #0]
    2fa4:	601a      	str	r2, [r3, #0]

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2729. Missing SFINAE on std::pair::operator=
      _Tuple_impl& operator=(const _Tuple_impl&) = delete;

      _Tuple_impl(_Tuple_impl&&) = default;
    2fa6:	e9c3 5401 	strd	r5, r4, [r3, #4]

	  if (_My_handler::_M_not_empty_function(__f))
	    {
	      _My_handler::_M_init_functor(_M_functor,
					   std::forward<_Functor>(__f));
	      _M_invoker = &_My_handler::_M_invoke;
    2faa:	4b16      	ldr	r3, [pc, #88]	; (3004 <I2CDriverWire::prepare_slave()+0x98>)
    2fac:	9303      	str	r3, [sp, #12]
	      _M_manager = &_My_handler::_M_manager;
    2fae:	4b16      	ldr	r3, [pc, #88]	; (3008 <I2CDriverWire::prepare_slave()+0x9c>)
    2fb0:	9302      	str	r3, [sp, #8]
    2fb2:	47b8      	blx	r7
      if (_M_manager)
    2fb4:	9b02      	ldr	r3, [sp, #8]
    2fb6:	b11b      	cbz	r3, 2fc0 <I2CDriverWire::prepare_slave()+0x54>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    2fb8:	2203      	movs	r2, #3
    2fba:	4669      	mov	r1, sp
    2fbc:	4668      	mov	r0, sp
    2fbe:	4798      	blx	r3
    slave.before_transmit(std::bind(&I2CDriverWire::before_transmit, this, std::placeholders::_1));
    2fc0:	6966      	ldr	r6, [r4, #20]
	: _Function_base()
    2fc2:	2500      	movs	r5, #0
	      = new _Functor(std::forward<_Fn>(__f));
    2fc4:	200c      	movs	r0, #12
    2fc6:	6833      	ldr	r3, [r6, #0]
    2fc8:	695f      	ldr	r7, [r3, #20]
	: _Function_base()
    2fca:	e9cd 5500 	strd	r5, r5, [sp]
    2fce:	e9cd 5502 	strd	r5, r5, [sp, #8]
	      = new _Functor(std::forward<_Fn>(__f));
    2fd2:	f001 feb7 	bl	4d44 <operator new(unsigned int)>
	      _M_invoker = &_My_handler::_M_invoke;
    2fd6:	4a0d      	ldr	r2, [pc, #52]	; (300c <I2CDriverWire::prepare_slave()+0xa0>)
	      = new _Functor(std::forward<_Fn>(__f));
    2fd8:	4603      	mov	r3, r0
    2fda:	4669      	mov	r1, sp
	      _M_invoker = &_My_handler::_M_invoke;
    2fdc:	9203      	str	r2, [sp, #12]
    2fde:	4630      	mov	r0, r6
	      _M_manager = &_My_handler::_M_manager;
    2fe0:	4a0b      	ldr	r2, [pc, #44]	; (3010 <I2CDriverWire::prepare_slave()+0xa4>)
	      = new _Functor(std::forward<_Fn>(__f));
    2fe2:	9300      	str	r3, [sp, #0]
	      _M_manager = &_My_handler::_M_manager;
    2fe4:	9202      	str	r2, [sp, #8]
    2fe6:	4a0b      	ldr	r2, [pc, #44]	; (3014 <I2CDriverWire::prepare_slave()+0xa8>)
    2fe8:	e9c3 5401 	strd	r5, r4, [r3, #4]
    2fec:	601a      	str	r2, [r3, #0]
    2fee:	47b8      	blx	r7
      if (_M_manager)
    2ff0:	9b02      	ldr	r3, [sp, #8]
    2ff2:	b11b      	cbz	r3, 2ffc <I2CDriverWire::prepare_slave()+0x90>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    2ff4:	4669      	mov	r1, sp
    2ff6:	2203      	movs	r2, #3
    2ff8:	4608      	mov	r0, r1
    2ffa:	4798      	blx	r3
}
    2ffc:	b005      	add	sp, #20
    2ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3000:	00002d91 	.word	0x00002d91
    3004:	00002dfd 	.word	0x00002dfd
    3008:	00002e79 	.word	0x00002e79
    300c:	00002dd5 	.word	0x00002dd5
    3010:	00002e35 	.word	0x00002e35
    3014:	00002d6d 	.word	0x00002d6d

00003018 <I2CDriverWire::begin(unsigned char)>:
void I2CDriverWire::begin(uint8_t address) {
    3018:	b510      	push	{r4, lr}
    301a:	4604      	mov	r4, r0
    301c:	b082      	sub	sp, #8
    301e:	9101      	str	r1, [sp, #4]
    prepare_slave();
    3020:	f7ff ffa4 	bl	2f6c <I2CDriverWire::prepare_slave()>
    slave.listen(address);
    3024:	6960      	ldr	r0, [r4, #20]
    3026:	9901      	ldr	r1, [sp, #4]
    3028:	6803      	ldr	r3, [r0, #0]
    302a:	681b      	ldr	r3, [r3, #0]
}
    302c:	b002      	add	sp, #8
    302e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    slave.listen(address);
    3032:	4718      	bx	r3

00003034 <_GLOBAL__sub_I__ZN13I2CDriverWireC2ER9I2CMasterR8I2CSlave>:

I2CDriverWire Wire(Master, Slave);
I2CDriverWire Wire1(Master1, Slave1);
I2CDriverWire Wire2(Master2, Slave2);
    3034:	b508      	push	{r3, lr}
I2CDriverWire Wire(Master, Slave);
    3036:	4a08      	ldr	r2, [pc, #32]	; (3058 <_GLOBAL__sub_I__ZN13I2CDriverWireC2ER9I2CMasterR8I2CSlave+0x24>)
    3038:	4908      	ldr	r1, [pc, #32]	; (305c <_GLOBAL__sub_I__ZN13I2CDriverWireC2ER9I2CMasterR8I2CSlave+0x28>)
    303a:	4809      	ldr	r0, [pc, #36]	; (3060 <_GLOBAL__sub_I__ZN13I2CDriverWireC2ER9I2CMasterR8I2CSlave+0x2c>)
    303c:	f7ff ff3e 	bl	2ebc <I2CDriverWire::I2CDriverWire(I2CMaster&, I2CSlave&)>
I2CDriverWire Wire1(Master1, Slave1);
    3040:	4a08      	ldr	r2, [pc, #32]	; (3064 <_GLOBAL__sub_I__ZN13I2CDriverWireC2ER9I2CMasterR8I2CSlave+0x30>)
    3042:	4909      	ldr	r1, [pc, #36]	; (3068 <_GLOBAL__sub_I__ZN13I2CDriverWireC2ER9I2CMasterR8I2CSlave+0x34>)
    3044:	4809      	ldr	r0, [pc, #36]	; (306c <_GLOBAL__sub_I__ZN13I2CDriverWireC2ER9I2CMasterR8I2CSlave+0x38>)
    3046:	f7ff ff39 	bl	2ebc <I2CDriverWire::I2CDriverWire(I2CMaster&, I2CSlave&)>
I2CDriverWire Wire2(Master2, Slave2);
    304a:	4a09      	ldr	r2, [pc, #36]	; (3070 <_GLOBAL__sub_I__ZN13I2CDriverWireC2ER9I2CMasterR8I2CSlave+0x3c>)
    304c:	4909      	ldr	r1, [pc, #36]	; (3074 <_GLOBAL__sub_I__ZN13I2CDriverWireC2ER9I2CMasterR8I2CSlave+0x40>)
    304e:	480a      	ldr	r0, [pc, #40]	; (3078 <_GLOBAL__sub_I__ZN13I2CDriverWireC2ER9I2CMasterR8I2CSlave+0x44>)
    3050:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    3054:	f7ff bf32 	b.w	2ebc <I2CDriverWire::I2CDriverWire(I2CMaster&, I2CSlave&)>
    3058:	2001a584 	.word	0x2001a584
    305c:	2001a4e8 	.word	0x2001a4e8
    3060:	2001a6d4 	.word	0x2001a6d4
    3064:	2001a5f4 	.word	0x2001a5f4
    3068:	2001a51c 	.word	0x2001a51c
    306c:	2001a74c 	.word	0x2001a74c
    3070:	2001a664 	.word	0x2001a664
    3074:	2001a550 	.word	0x2001a550
    3078:	2001a7c4 	.word	0x2001a7c4

0000307c <IMX_RT1060_I2CMaster::get_bytes_transferred()>:
            return true;
        }
    }

    inline size_t get_bytes_transferred() {
        return next_index;
    307c:	6a00      	ldr	r0, [r0, #32]
        (state >= State::idle && !(port->MSR & LPI2C_MSR_MBF));
}

size_t IMX_RT1060_I2CMaster::get_bytes_transferred() {
    return buff.get_bytes_transferred();
}
    307e:	4770      	bx	lr

00003080 <IMX_RT1060_I2CSlave::set_transmit_buffer(unsigned char const*, unsigned int)>:
        next_index = 0;
    3080:	2300      	movs	r3, #0
        buffer = new_buffer;
    3082:	62c1      	str	r1, [r0, #44]	; 0x2c
        next_index = 0;
    3084:	6343      	str	r3, [r0, #52]	; 0x34
        size = new_size;
    3086:	6302      	str	r2, [r0, #48]	; 0x30
    after_transmit_callback = callback;
}

inline void IMX_RT1060_I2CSlave::set_transmit_buffer(const uint8_t* buffer, size_t size) {
    tx_buffer.initialise(const_cast<uint8_t*>(buffer), size);
}
    3088:	4770      	bx	lr
    308a:	bf00      	nop

0000308c <IMX_RT1060_I2CSlave::set_receive_buffer(unsigned char*, unsigned int)>:
        next_index = 0;
    308c:	2300      	movs	r3, #0
        buffer = new_buffer;
    308e:	6201      	str	r1, [r0, #32]
        next_index = 0;
    3090:	6283      	str	r3, [r0, #40]	; 0x28
        size = new_size;
    3092:	6242      	str	r2, [r0, #36]	; 0x24

inline void IMX_RT1060_I2CSlave::set_receive_buffer(uint8_t* buffer, size_t size) {
    rx_buffer.initialise(buffer, size);
}
    3094:	4770      	bx	lr
    3096:	bf00      	nop

00003098 <IMX_RT1060_I2CMaster::finished()>:
    return state == State::transfer_complete ||
    3098:	6a43      	ldr	r3, [r0, #36]	; 0x24
    309a:	2b65      	cmp	r3, #101	; 0x65
    309c:	d00b      	beq.n	30b6 <IMX_RT1060_I2CMaster::finished()+0x1e>
        (state >= State::idle && !(port->MSR & LPI2C_MSR_MBF));
    309e:	6a43      	ldr	r3, [r0, #36]	; 0x24
    return state == State::transfer_complete ||
    30a0:	2b63      	cmp	r3, #99	; 0x63
    30a2:	dd06      	ble.n	30b2 <IMX_RT1060_I2CMaster::finished()+0x1a>
        (state >= State::idle && !(port->MSR & LPI2C_MSR_MBF));
    30a4:	6903      	ldr	r3, [r0, #16]
    30a6:	6958      	ldr	r0, [r3, #20]
    30a8:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
    30ac:	f3c0 6000 	ubfx	r0, r0, #24, #1
    30b0:	4770      	bx	lr
    return state == State::transfer_complete ||
    30b2:	2000      	movs	r0, #0
}
    30b4:	4770      	bx	lr
    return state == State::transfer_complete ||
    30b6:	2001      	movs	r0, #1
    30b8:	4770      	bx	lr
    30ba:	bf00      	nop

000030bc <IMX_RT1060_I2CSlave::after_transmit(std::function<void (unsigned short)>)>:
inline void IMX_RT1060_I2CSlave::after_transmit(std::function<void(uint16_t address)> callback) {
    30bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    30be:	b087      	sub	sp, #28
      : _Function_base()
    30c0:	2300      	movs	r3, #0
    bool _M_empty() const { return !_M_manager; }
    30c2:	688f      	ldr	r7, [r1, #8]
    30c4:	4605      	mov	r5, r0
      : _Function_base()
    30c6:	ac02      	add	r4, sp, #8
    30c8:	9302      	str	r3, [sp, #8]
    30ca:	9305      	str	r3, [sp, #20]
    30cc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	if (static_cast<bool>(__x))
    30d0:	b317      	cbz	r7, 3118 <IMX_RT1060_I2CSlave::after_transmit(std::function<void (unsigned short)>)+0x5c>
    30d2:	460e      	mov	r6, r1
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    30d4:	2202      	movs	r2, #2
    30d6:	4620      	mov	r0, r4
    30d8:	47b8      	blx	r7
	    _M_manager = __x._M_manager;
    30da:	e9d6 7c02 	ldrd	r7, ip, [r6, #8]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
    30de:	e894 0003 	ldmia.w	r4, {r0, r1}
    30e2:	466a      	mov	r2, sp
      __a = _GLIBCXX_MOVE(__b);
    30e4:	f105 0360 	add.w	r3, r5, #96	; 0x60
      _Tp __tmp = _GLIBCXX_MOVE(__a);
    30e8:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    30ec:	e893 0003 	ldmia.w	r3, {r0, r1}
    30f0:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
    30f4:	e892 0003 	ldmia.w	r2, {r0, r1}
    30f8:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    30fc:	6eab      	ldr	r3, [r5, #104]	; 0x68
    30fe:	6eea      	ldr	r2, [r5, #108]	; 0x6c
      __b = _GLIBCXX_MOVE(__tmp);
    3100:	66af      	str	r7, [r5, #104]	; 0x68
      __a = _GLIBCXX_MOVE(__b);
    3102:	9304      	str	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
    3104:	f8c5 c06c 	str.w	ip, [r5, #108]	; 0x6c
      __a = _GLIBCXX_MOVE(__b);
    3108:	9205      	str	r2, [sp, #20]
      if (_M_manager)
    310a:	b11b      	cbz	r3, 3114 <IMX_RT1060_I2CSlave::after_transmit(std::function<void (unsigned short)>)+0x58>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    310c:	2203      	movs	r2, #3
    310e:	4621      	mov	r1, r4
    3110:	4620      	mov	r0, r4
    3112:	4798      	blx	r3
}
    3114:	b007      	add	sp, #28
    3116:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3118:	46bc      	mov	ip, r7
    311a:	e7e0      	b.n	30de <IMX_RT1060_I2CSlave::after_transmit(std::function<void (unsigned short)>)+0x22>

0000311c <IMX_RT1060_I2CSlave::stop_listening()>:
    stop(port, config.irq);
    311c:	e9d0 1304 	ldrd	r1, r3, [r0, #16]
inline void IMX_RT1060_I2CSlave::stop_listening() {
    3120:	b430      	push	{r4, r5}
    stop(port, config.irq);
    3122:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    port->MCR = 0;
    3126:	2400      	movs	r4, #0
    port->MCR = (LPI2C_MCR_RST | LPI2C_MCR_RRF | LPI2C_MCR_RTF);
    3128:	f240 3502 	movw	r5, #770	; 0x302
    NVIC_DISABLE_IRQ(irq);
    312c:	4a0b      	ldr	r2, [pc, #44]	; (315c <IMX_RT1060_I2CSlave::stop_listening()+0x40>)
    312e:	f04f 0c01 	mov.w	ip, #1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    3132:	480b      	ldr	r0, [pc, #44]	; (3160 <IMX_RT1060_I2CSlave::stop_listening()+0x44>)
    port->MCR = (LPI2C_MCR_RST | LPI2C_MCR_RRF | LPI2C_MCR_RTF);
    3134:	610d      	str	r5, [r1, #16]
    NVIC_DISABLE_IRQ(irq);
    3136:	eb02 1253 	add.w	r2, r2, r3, lsr #5
    port->MCR = 0;
    313a:	610c      	str	r4, [r1, #16]
    port->SCR = (LPI2C_SCR_RST | LPI2C_SCR_RRF | LPI2C_SCR_RTF);
    313c:	f8c1 5110 	str.w	r5, [r1, #272]	; 0x110
    NVIC_DISABLE_IRQ(irq);
    3140:	0092      	lsls	r2, r2, #2
    port->SCR = 0;
    3142:	f8c1 4110 	str.w	r4, [r1, #272]	; 0x110
    NVIC_DISABLE_IRQ(irq);
    3146:	f003 011f 	and.w	r1, r3, #31
    314a:	3310      	adds	r3, #16
    314c:	fa0c f101 	lsl.w	r1, ip, r1
    3150:	6011      	str	r1, [r2, #0]
    3152:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
}
    3156:	bc30      	pop	{r4, r5}
    3158:	4770      	bx	lr
    315a:	bf00      	nop
    315c:	38003860 	.word	0x38003860
    3160:	2001a000 	.word	0x2001a000

00003164 <IMX_RT1060_I2CMaster::end()>:
    stop(port, config.irq);
    3164:	e9d0 1304 	ldrd	r1, r3, [r0, #16]
void IMX_RT1060_I2CMaster::end() {
    3168:	b430      	push	{r4, r5}
    stop(port, config.irq);
    316a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    port->MCR = 0;
    316e:	2400      	movs	r4, #0
    port->MCR = (LPI2C_MCR_RST | LPI2C_MCR_RRF | LPI2C_MCR_RTF);
    3170:	f240 3502 	movw	r5, #770	; 0x302
    NVIC_DISABLE_IRQ(irq);
    3174:	4a0b      	ldr	r2, [pc, #44]	; (31a4 <IMX_RT1060_I2CMaster::end()+0x40>)
    3176:	f04f 0c01 	mov.w	ip, #1
    317a:	480b      	ldr	r0, [pc, #44]	; (31a8 <IMX_RT1060_I2CMaster::end()+0x44>)
    port->MCR = (LPI2C_MCR_RST | LPI2C_MCR_RRF | LPI2C_MCR_RTF);
    317c:	610d      	str	r5, [r1, #16]
    NVIC_DISABLE_IRQ(irq);
    317e:	eb02 1253 	add.w	r2, r2, r3, lsr #5
    port->MCR = 0;
    3182:	610c      	str	r4, [r1, #16]
    port->SCR = (LPI2C_SCR_RST | LPI2C_SCR_RRF | LPI2C_SCR_RTF);
    3184:	f8c1 5110 	str.w	r5, [r1, #272]	; 0x110
    NVIC_DISABLE_IRQ(irq);
    3188:	0092      	lsls	r2, r2, #2
    port->SCR = 0;
    318a:	f8c1 4110 	str.w	r4, [r1, #272]	; 0x110
    NVIC_DISABLE_IRQ(irq);
    318e:	f003 011f 	and.w	r1, r3, #31
    3192:	3310      	adds	r3, #16
    3194:	fa0c f101 	lsl.w	r1, ip, r1
    3198:	6011      	str	r1, [r2, #0]
    319a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
}
    319e:	bc30      	pop	{r4, r5}
    31a0:	4770      	bx	lr
    31a2:	bf00      	nop
    31a4:	38003860 	.word	0x38003860
    31a8:	2001a000 	.word	0x2001a000

000031ac <IMX_RT1060_I2CSlave::~IMX_RT1060_I2CSlave()>:

extern IMX_RT1060_I2CMaster Master;     // Pins 19 and 18; SCL0 and SDA0
extern IMX_RT1060_I2CMaster Master1;    // Pins 16 and 17; SCL1 and SDA1
extern IMX_RT1060_I2CMaster Master2;    // Pins 24 and 25; SCL2 and SDA2

class IMX_RT1060_I2CSlave : public I2CSlave {
    31ac:	4a0d      	ldr	r2, [pc, #52]	; (31e4 <IMX_RT1060_I2CSlave::~IMX_RT1060_I2CSlave()+0x38>)
      if (_M_manager)
    31ae:	6e83      	ldr	r3, [r0, #104]	; 0x68
    31b0:	b510      	push	{r4, lr}
    31b2:	4604      	mov	r4, r0
    31b4:	6002      	str	r2, [r0, #0]
    31b6:	b123      	cbz	r3, 31c2 <IMX_RT1060_I2CSlave::~IMX_RT1060_I2CSlave()+0x16>
    class function<_Res(_ArgTypes...)>
    31b8:	f100 0160 	add.w	r1, r0, #96	; 0x60
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    31bc:	2203      	movs	r2, #3
    31be:	4608      	mov	r0, r1
    31c0:	4798      	blx	r3
      if (_M_manager)
    31c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
    31c4:	b123      	cbz	r3, 31d0 <IMX_RT1060_I2CSlave::~IMX_RT1060_I2CSlave()+0x24>
    class function<_Res(_ArgTypes...)>
    31c6:	f104 0150 	add.w	r1, r4, #80	; 0x50
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    31ca:	2203      	movs	r2, #3
    31cc:	4608      	mov	r0, r1
    31ce:	4798      	blx	r3
      if (_M_manager)
    31d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    31d2:	b123      	cbz	r3, 31de <IMX_RT1060_I2CSlave::~IMX_RT1060_I2CSlave()+0x32>
    class function<_Res(_ArgTypes...)>
    31d4:	f104 0140 	add.w	r1, r4, #64	; 0x40
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    31d8:	2203      	movs	r2, #3
    31da:	4608      	mov	r0, r1
    31dc:	4798      	blx	r3
    31de:	4620      	mov	r0, r4
    31e0:	bd10      	pop	{r4, pc}
    31e2:	bf00      	nop
    31e4:	2001896c 	.word	0x2001896c

000031e8 <IMX_RT1060_I2CSlave::before_transmit(std::function<void (unsigned short)>)>:
inline void IMX_RT1060_I2CSlave::before_transmit(std::function<void(uint16_t address)> callback) {
    31e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    31ea:	b087      	sub	sp, #28
      : _Function_base()
    31ec:	2300      	movs	r3, #0
    bool _M_empty() const { return !_M_manager; }
    31ee:	688f      	ldr	r7, [r1, #8]
    31f0:	4605      	mov	r5, r0
      : _Function_base()
    31f2:	ac02      	add	r4, sp, #8
    31f4:	9302      	str	r3, [sp, #8]
    31f6:	9305      	str	r3, [sp, #20]
    31f8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	if (static_cast<bool>(__x))
    31fc:	b317      	cbz	r7, 3244 <IMX_RT1060_I2CSlave::before_transmit(std::function<void (unsigned short)>)+0x5c>
    31fe:	460e      	mov	r6, r1
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    3200:	2202      	movs	r2, #2
    3202:	4620      	mov	r0, r4
    3204:	47b8      	blx	r7
	    _M_manager = __x._M_manager;
    3206:	e9d6 7c02 	ldrd	r7, ip, [r6, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
    320a:	e894 0003 	ldmia.w	r4, {r0, r1}
    320e:	466a      	mov	r2, sp
      __a = _GLIBCXX_MOVE(__b);
    3210:	f105 0350 	add.w	r3, r5, #80	; 0x50
      _Tp __tmp = _GLIBCXX_MOVE(__a);
    3214:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    3218:	e893 0003 	ldmia.w	r3, {r0, r1}
    321c:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
    3220:	e892 0003 	ldmia.w	r2, {r0, r1}
    3224:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    3228:	6dab      	ldr	r3, [r5, #88]	; 0x58
    322a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
      __b = _GLIBCXX_MOVE(__tmp);
    322c:	65af      	str	r7, [r5, #88]	; 0x58
      __a = _GLIBCXX_MOVE(__b);
    322e:	9304      	str	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
    3230:	f8c5 c05c 	str.w	ip, [r5, #92]	; 0x5c
      __a = _GLIBCXX_MOVE(__b);
    3234:	9205      	str	r2, [sp, #20]
      if (_M_manager)
    3236:	b11b      	cbz	r3, 3240 <IMX_RT1060_I2CSlave::before_transmit(std::function<void (unsigned short)>)+0x58>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    3238:	2203      	movs	r2, #3
    323a:	4621      	mov	r1, r4
    323c:	4620      	mov	r0, r4
    323e:	4798      	blx	r3
}
    3240:	b007      	add	sp, #28
    3242:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3244:	46bc      	mov	ip, r7
    3246:	e7e0      	b.n	320a <IMX_RT1060_I2CSlave::before_transmit(std::function<void (unsigned short)>)+0x22>

00003248 <IMX_RT1060_I2CSlave::after_receive(std::function<void (unsigned int, unsigned short)>)>:
inline void IMX_RT1060_I2CSlave::after_receive(std::function<void(size_t len, uint16_t address)> callback) {
    3248:	b5f0      	push	{r4, r5, r6, r7, lr}
    324a:	b087      	sub	sp, #28
      : _Function_base()
    324c:	2300      	movs	r3, #0
    bool _M_empty() const { return !_M_manager; }
    324e:	688f      	ldr	r7, [r1, #8]
    3250:	4605      	mov	r5, r0
      : _Function_base()
    3252:	ac02      	add	r4, sp, #8
    3254:	9302      	str	r3, [sp, #8]
    3256:	9305      	str	r3, [sp, #20]
    3258:	e9c4 3301 	strd	r3, r3, [r4, #4]
	if (static_cast<bool>(__x))
    325c:	b317      	cbz	r7, 32a4 <IMX_RT1060_I2CSlave::after_receive(std::function<void (unsigned int, unsigned short)>)+0x5c>
    325e:	460e      	mov	r6, r1
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    3260:	2202      	movs	r2, #2
    3262:	4620      	mov	r0, r4
    3264:	47b8      	blx	r7
	    _M_manager = __x._M_manager;
    3266:	e9d6 7c02 	ldrd	r7, ip, [r6, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
    326a:	e894 0003 	ldmia.w	r4, {r0, r1}
    326e:	466a      	mov	r2, sp
      __a = _GLIBCXX_MOVE(__b);
    3270:	f105 0340 	add.w	r3, r5, #64	; 0x40
      _Tp __tmp = _GLIBCXX_MOVE(__a);
    3274:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    3278:	e893 0003 	ldmia.w	r3, {r0, r1}
    327c:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
    3280:	e892 0003 	ldmia.w	r2, {r0, r1}
    3284:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    3288:	6cab      	ldr	r3, [r5, #72]	; 0x48
    328a:	6cea      	ldr	r2, [r5, #76]	; 0x4c
      __b = _GLIBCXX_MOVE(__tmp);
    328c:	64af      	str	r7, [r5, #72]	; 0x48
      __a = _GLIBCXX_MOVE(__b);
    328e:	9304      	str	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
    3290:	f8c5 c04c 	str.w	ip, [r5, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
    3294:	9205      	str	r2, [sp, #20]
      if (_M_manager)
    3296:	b11b      	cbz	r3, 32a0 <IMX_RT1060_I2CSlave::after_receive(std::function<void (unsigned int, unsigned short)>)+0x58>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    3298:	2203      	movs	r2, #3
    329a:	4621      	mov	r1, r4
    329c:	4620      	mov	r0, r4
    329e:	4798      	blx	r3
}
    32a0:	b007      	add	sp, #28
    32a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32a4:	46bc      	mov	ip, r7
    32a6:	e7e0      	b.n	326a <IMX_RT1060_I2CSlave::after_receive(std::function<void (unsigned int, unsigned short)>)+0x22>

000032a8 <IMX_RT1060_I2CSlave::IMX_RT1060_I2CSlave(IMXRT_LPI2C_Registers*, IMX_RT1060_I2CBase::Config&, void (*)())>:
public:
    IMX_RT1060_I2CSlave(IMXRT_LPI2C_Registers* port, IMX_RT1060_I2CBase::Config& config, void (* isr)())
    32a8:	b510      	push	{r4, lr}
        : port(port), config(config), isr(isr) {
    32aa:	63c3      	str	r3, [r0, #60]	; 0x3c
    32ac:	2464      	movs	r4, #100	; 0x64
    : pad_control_config(PAD_CONTROL_CONFIG), pullup_config(InternalPullup::enabled_22k_ohm) {
    32ae:	2300      	movs	r3, #0
    32b0:	6142      	str	r2, [r0, #20]
    32b2:	4a11      	ldr	r2, [pc, #68]	; (32f8 <IMX_RT1060_I2CSlave::IMX_RT1060_I2CSlave(IMXRT_LPI2C_Registers*, IMX_RT1060_I2CBase::Config&, void (*)())+0x50>)
      : _Function_base() { }
    32b4:	f100 0e40 	add.w	lr, r0, #64	; 0x40
    32b8:	6043      	str	r3, [r0, #4]
    32ba:	6184      	str	r4, [r0, #24]
    32bc:	2403      	movs	r4, #3
    32be:	6101      	str	r1, [r0, #16]
I2CBuffer::I2CBuffer() : buffer(empty_buffer) {
    32c0:	490e      	ldr	r1, [pc, #56]	; (32fc <IMX_RT1060_I2CSlave::IMX_RT1060_I2CSlave(IMXRT_LPI2C_Registers*, IMX_RT1060_I2CBase::Config&, void (*)())+0x54>)
    32c2:	8383      	strh	r3, [r0, #28]
    32c4:	6201      	str	r1, [r0, #32]
    32c6:	6243      	str	r3, [r0, #36]	; 0x24
    32c8:	62c1      	str	r1, [r0, #44]	; 0x2c
    32ca:	6283      	str	r3, [r0, #40]	; 0x28
    32cc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    32d0:	6303      	str	r3, [r0, #48]	; 0x30
    32d2:	6403      	str	r3, [r0, #64]	; 0x40
    32d4:	6343      	str	r3, [r0, #52]	; 0x34
    32d6:	66c3      	str	r3, [r0, #108]	; 0x6c
    : pad_control_config(PAD_CONTROL_CONFIG), pullup_config(InternalPullup::enabled_22k_ohm) {
    32d8:	e9c0 2402 	strd	r2, r4, [r0, #8]
    32dc:	4c08      	ldr	r4, [pc, #32]	; (3300 <IMX_RT1060_I2CSlave::IMX_RT1060_I2CSlave(IMXRT_LPI2C_Registers*, IMX_RT1060_I2CBase::Config&, void (*)())+0x58>)
    32de:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
    32e2:	6004      	str	r4, [r0, #0]
    32e4:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
    32e8:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    32ec:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
    32f0:	e9c0 3319 	strd	r3, r3, [r0, #100]	; 0x64
    }
    32f4:	bd10      	pop	{r4, pc}
    32f6:	bf00      	nop
    32f8:	00010810 	.word	0x00010810
    32fc:	2001a83c 	.word	0x2001a83c
    3300:	2001896c 	.word	0x2001896c

00003304 <initialise_common(IMX_RT1060_I2CBase::Config, unsigned long, InternalPullup)>:
void initialise_common(IMX_RT1060_I2CBase::Config hardware, uint32_t pad_control_config, InternalPullup pullup) {
    3304:	b084      	sub	sp, #16
    3306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    330a:	ac06      	add	r4, sp, #24
    330c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63));
    3310:	491e      	ldr	r1, [pc, #120]	; (338c <initialise_common(IMX_RT1060_I2CBase::Config, unsigned long, InternalPullup)+0x88>)
void initialise_common(IMX_RT1060_I2CBase::Config hardware, uint32_t pad_control_config, InternalPullup pullup) {
    3312:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63));
    3314:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    3316:	f89d c030 	ldrb.w	ip, [sp, #48]	; 0x30
    331a:	f422 0278 	bic.w	r2, r2, #16252928	; 0xf80000
    331e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    3320:	e9dd 470e 	ldrd	r4, r7, [sp, #56]	; 0x38
    3324:	638a      	str	r2, [r1, #56]	; 0x38
    hardware.clock_gate_register |= hardware.clock_gate_mask;
    3326:	9907      	ldr	r1, [sp, #28]
    3328:	6802      	ldr	r2, [r0, #0]
    332a:	f89d e020 	ldrb.w	lr, [sp, #32]
    332e:	430a      	orrs	r2, r1
    3330:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
    3334:	6002      	str	r2, [r0, #0]
static void initialise_pin(IMX_RT1060_I2CBase::PinInfo pin, uint32_t pad_control_config, InternalPullup pullup) {
    3336:	e9dd 0109 	ldrd	r0, r1, [sp, #36]	; 0x24
    if(pullup != InternalPullup::disabled) {
    333a:	b303      	cbz	r3, 337e <initialise_common(IMX_RT1060_I2CBase::Config, unsigned long, InternalPullup)+0x7a>
        pullup_config = IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(static_cast<uint32_t>(pullup));
    333c:	039b      	lsls	r3, r3, #14
    *(portControlRegister(pin.pin)) = (pad_control_config & pullup_mask) | pullup_config;
    333e:	4a14      	ldr	r2, [pc, #80]	; (3390 <initialise_common(IMX_RT1060_I2CBase::Config, unsigned long, InternalPullup)+0x8c>)
    3340:	9e1a      	ldr	r6, [sp, #104]	; 0x68
        pullup_config = IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(static_cast<uint32_t>(pullup));
    3342:	b29b      	uxth	r3, r3
    *(portControlRegister(pin.pin)) = (pad_control_config & pullup_mask) | pullup_config;
    3344:	4032      	ands	r2, r6
    3346:	4313      	orrs	r3, r2
    3348:	4a12      	ldr	r2, [pc, #72]	; (3394 <initialise_common(IMX_RT1060_I2CBase::Config, unsigned long, InternalPullup)+0x90>)
    334a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    334e:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
    3352:	f8de 6008 	ldr.w	r6, [lr, #8]
    *(portConfigRegister(pin.pin)) = pin.mux_val;
    3356:	f8de e004 	ldr.w	lr, [lr, #4]
    *(portControlRegister(pin.pin)) = (pad_control_config & pullup_mask) | pullup_config;
    335a:	6033      	str	r3, [r6, #0]
    *(portConfigRegister(pin.pin)) = pin.mux_val;
    335c:	f8ce 0000 	str.w	r0, [lr]
    if (pin.select_input_register) {
    3360:	b109      	cbz	r1, 3366 <initialise_common(IMX_RT1060_I2CBase::Config, unsigned long, InternalPullup)+0x62>
        *(pin.select_input_register) = pin.select_val;
    3362:	f8c1 8000 	str.w	r8, [r1]
    *(portControlRegister(pin.pin)) = (pad_control_config & pullup_mask) | pullup_config;
    3366:	eb02 120c 	add.w	r2, r2, ip, lsl #4
    336a:	6891      	ldr	r1, [r2, #8]
    336c:	600b      	str	r3, [r1, #0]
    *(portConfigRegister(pin.pin)) = pin.mux_val;
    336e:	6853      	ldr	r3, [r2, #4]
    3370:	601d      	str	r5, [r3, #0]
    if (pin.select_input_register) {
    3372:	b104      	cbz	r4, 3376 <initialise_common(IMX_RT1060_I2CBase::Config, unsigned long, InternalPullup)+0x72>
        *(pin.select_input_register) = pin.select_val;
    3374:	6027      	str	r7, [r4, #0]
}
    3376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    337a:	b004      	add	sp, #16
    337c:	4770      	bx	lr
    *(portControlRegister(pin.pin)) = (pad_control_config & pullup_mask) | pullup_config;
    337e:	4a05      	ldr	r2, [pc, #20]	; (3394 <initialise_common(IMX_RT1060_I2CBase::Config, unsigned long, InternalPullup)+0x90>)
    3380:	4b03      	ldr	r3, [pc, #12]	; (3390 <initialise_common(IMX_RT1060_I2CBase::Config, unsigned long, InternalPullup)+0x8c>)
    3382:	9e1a      	ldr	r6, [sp, #104]	; 0x68
    3384:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
    3388:	4033      	ands	r3, r6
    338a:	e7e2      	b.n	3352 <initialise_common(IMX_RT1060_I2CBase::Config, unsigned long, InternalPullup)+0x4e>
    338c:	400fc000 	.word	0x400fc000
    3390:	000108f9 	.word	0x000108f9
    3394:	20018c8c 	.word	0x20018c8c

00003398 <IMX_RT1060_I2CMaster::_interrupt_service_routine()>:
    uint32_t msr = port->MSR;
    3398:	6903      	ldr	r3, [r0, #16]
    339a:	695a      	ldr	r2, [r3, #20]
    if (msr & (LPI2C_MSR_NDF | LPI2C_MSR_ALF | LPI2C_MSR_FEF | LPI2C_MSR_PLTF)) {
    339c:	f412 5f70 	tst.w	r2, #15360	; 0x3c00
void IMX_RT1060_I2CMaster::_interrupt_service_routine() {
    33a0:	b430      	push	{r4, r5}
    if (msr & (LPI2C_MSR_NDF | LPI2C_MSR_ALF | LPI2C_MSR_FEF | LPI2C_MSR_PLTF)) {
    33a2:	d02f      	beq.n	3404 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x6c>
        if (msr & LPI2C_MSR_NDF) {
    33a4:	0555      	lsls	r5, r2, #21
    33a6:	d458      	bmi.n	345a <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0xc2>
        if (msr & LPI2C_MSR_ALF) {
    33a8:	0514      	lsls	r4, r2, #20
    33aa:	d504      	bpl.n	33b6 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x1e>
            port->MSR = LPI2C_MSR_ALF;
    33ac:	f44f 6400 	mov.w	r4, #2048	; 0x800
            _error = I2CError::arbitration_lost;
    33b0:	2101      	movs	r1, #1
            port->MSR = LPI2C_MSR_ALF;
    33b2:	615c      	str	r4, [r3, #20]
            _error = I2CError::arbitration_lost;
    33b4:	6041      	str	r1, [r0, #4]
        if (msr & LPI2C_MSR_FEF) {
    33b6:	04d1      	lsls	r1, r2, #19
    33b8:	d505      	bpl.n	33c6 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x2e>
            port->MSR = LPI2C_MSR_FEF;
    33ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    33be:	6159      	str	r1, [r3, #20]
        return _error;
    }

    // True if the last operation failed. i.e. if last_error returns anything other than ok.
    inline bool has_error() {
        return _error > I2CError::ok;
    33c0:	6841      	ldr	r1, [r0, #4]
            if (!has_error()) {
    33c2:	2900      	cmp	r1, #0
    33c4:	dd7e      	ble.n	34c4 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x12c>
        if (msr & LPI2C_MSR_PLTF) {
    33c6:	0495      	lsls	r5, r2, #18
    33c8:	d504      	bpl.n	33d4 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x3c>
            port->MSR = LPI2C_MSR_PLTF;
    33ca:	f44f 5400 	mov.w	r4, #8192	; 0x2000
            _error = I2CError::master_pin_low_timeout;
    33ce:	2105      	movs	r1, #5
            port->MSR = LPI2C_MSR_PLTF;
    33d0:	615c      	str	r4, [r3, #20]
            _error = I2CError::master_pin_low_timeout;
    33d2:	6041      	str	r1, [r0, #4]
        if (state != State::stopping) {
    33d4:	6a41      	ldr	r1, [r0, #36]	; 0x24
    33d6:	2902      	cmp	r1, #2
    33d8:	d014      	beq.n	3404 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x6c>
            state = State::stopping;
    33da:	2402      	movs	r4, #2
    if ((msr & LPI2C_MSR_MBF) && !(msr & LPI2C_MSR_SDF)) {
    33dc:	495e      	ldr	r1, [pc, #376]	; (3558 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x1c0>)
            state = State::stopping;
    33de:	6244      	str	r4, [r0, #36]	; 0x24
    port->MIER &= ~LPI2C_MIER_TDIE;
    33e0:	699c      	ldr	r4, [r3, #24]
    33e2:	f024 0401 	bic.w	r4, r4, #1
    33e6:	619c      	str	r4, [r3, #24]
    port->MCR |= LPI2C_MCR_RTF;
    33e8:	691c      	ldr	r4, [r3, #16]
    33ea:	f444 7480 	orr.w	r4, r4, #256	; 0x100
    33ee:	611c      	str	r4, [r3, #16]
    port->MCR |= LPI2C_MCR_RRF;
    33f0:	691c      	ldr	r4, [r3, #16]
    33f2:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    33f6:	611c      	str	r4, [r3, #16]
    uint32_t msr = port->MSR;
    33f8:	695c      	ldr	r4, [r3, #20]
    if ((msr & LPI2C_MSR_MBF) && !(msr & LPI2C_MSR_SDF)) {
    33fa:	4021      	ands	r1, r4
    33fc:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
    3400:	f000 8095 	beq.w	352e <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x196>
    if (msr & LPI2C_MSR_SDF) {
    3404:	0594      	lsls	r4, r2, #22
    3406:	d508      	bpl.n	341a <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x82>
        port->MIER &= ~LPI2C_MIER_TDIE; // We don't want to handle TDF if we can avoid it.
    3408:	6999      	ldr	r1, [r3, #24]
        state = State::stopped;
    340a:	2466      	movs	r4, #102	; 0x66
        port->MIER &= ~LPI2C_MIER_TDIE; // We don't want to handle TDF if we can avoid it.
    340c:	f021 0101 	bic.w	r1, r1, #1
    3410:	6199      	str	r1, [r3, #24]
        port->MSR = LPI2C_MSR_SDF;
    3412:	f44f 7100 	mov.w	r1, #512	; 0x200
        state = State::stopped;
    3416:	6244      	str	r4, [r0, #36]	; 0x24
        port->MSR = LPI2C_MSR_SDF;
    3418:	6159      	str	r1, [r3, #20]
    if (msr & LPI2C_MSR_RDF) {
    341a:	0791      	lsls	r1, r2, #30
    341c:	d50f      	bpl.n	343e <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0xa6>
        if (ignore_tdf) {
    341e:	6a81      	ldr	r1, [r0, #40]	; 0x28
    3420:	b339      	cbz	r1, 3472 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0xda>
        return next_index == 0;
    3422:	6a01      	ldr	r1, [r0, #32]
            if (buff.not_started_reading()) {
    3424:	b309      	cbz	r1, 346a <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0xd2>
            if (state == State::transferring) {
    3426:	6a41      	ldr	r1, [r0, #36]	; 0x24
    3428:	2901      	cmp	r1, #1
    342a:	f000 8084 	beq.w	3536 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x19e>
                port->MCR |= LPI2C_MCR_RRF;
    342e:	6919      	ldr	r1, [r3, #16]
    3430:	f441 7100 	orr.w	r1, r1, #512	; 0x200
    3434:	6119      	str	r1, [r3, #16]
        return next_index == size;
    3436:	6a01      	ldr	r1, [r0, #32]
    3438:	69c3      	ldr	r3, [r0, #28]
            if (buff.finished_reading()) {
    343a:	4299      	cmp	r1, r3
    343c:	d034      	beq.n	34a8 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x110>
    if (!ignore_tdf && (msr & LPI2C_MSR_TDF)) {
    343e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    3440:	b94b      	cbnz	r3, 3456 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0xbe>
    3442:	07d2      	lsls	r2, r2, #31
    3444:	d507      	bpl.n	3456 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0xbe>
        return next_index == 0;
    3446:	6a03      	ldr	r3, [r0, #32]
        if (buff.not_started_writing()) {
    3448:	b913      	cbnz	r3, 3450 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0xb8>
            state = State::transferring;
    344a:	2201      	movs	r2, #1
            _error = I2CError::ok;
    344c:	6043      	str	r3, [r0, #4]
            state = State::transferring;
    344e:	6242      	str	r2, [r0, #36]	; 0x24
        if (state == State::transferring) {
    3450:	6a43      	ldr	r3, [r0, #36]	; 0x24
    3452:	2b01      	cmp	r3, #1
    3454:	d039      	beq.n	34ca <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x132>
}
    3456:	bc30      	pop	{r4, r5}
    3458:	4770      	bx	lr
            port->MSR = LPI2C_MSR_NDF;
    345a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    345e:	6159      	str	r1, [r3, #20]
            if (state == State::starting) {
    3460:	6a41      	ldr	r1, [r0, #36]	; 0x24
    3462:	b9f1      	cbnz	r1, 34a2 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x10a>
                _error = I2CError::address_nak;
    3464:	2109      	movs	r1, #9
    3466:	6041      	str	r1, [r0, #4]
    3468:	e79e      	b.n	33a8 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x10>
                state = State::transferring;
    346a:	2401      	movs	r4, #1
                _error = I2CError::ok;
    346c:	6041      	str	r1, [r0, #4]
                state = State::transferring;
    346e:	6244      	str	r4, [r0, #36]	; 0x24
    3470:	e7d9      	b.n	3426 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x8e>
            state = State::stopping;
    3472:	2402      	movs	r4, #2
    if ((msr & LPI2C_MSR_MBF) && !(msr & LPI2C_MSR_SDF)) {
    3474:	4938      	ldr	r1, [pc, #224]	; (3558 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x1c0>)
            state = State::stopping;
    3476:	6244      	str	r4, [r0, #36]	; 0x24
    port->MIER &= ~LPI2C_MIER_TDIE;
    3478:	699c      	ldr	r4, [r3, #24]
    347a:	f024 0401 	bic.w	r4, r4, #1
    347e:	619c      	str	r4, [r3, #24]
    port->MCR |= LPI2C_MCR_RTF;
    3480:	691c      	ldr	r4, [r3, #16]
    3482:	f444 7480 	orr.w	r4, r4, #256	; 0x100
    3486:	611c      	str	r4, [r3, #16]
    port->MCR |= LPI2C_MCR_RRF;
    3488:	691c      	ldr	r4, [r3, #16]
    348a:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    348e:	611c      	str	r4, [r3, #16]
    uint32_t msr = port->MSR;
    3490:	695c      	ldr	r4, [r3, #20]
    if ((msr & LPI2C_MSR_MBF) && !(msr & LPI2C_MSR_SDF)) {
    3492:	4021      	ands	r1, r4
    3494:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
    3498:	d1d1      	bne.n	343e <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0xa6>
        port->MTDR = LPI2C_MTDR_CMD_STOP;
    349a:	f44f 7100 	mov.w	r1, #512	; 0x200
    349e:	6619      	str	r1, [r3, #96]	; 0x60
    34a0:	e7cd      	b.n	343e <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0xa6>
                _error = I2CError::data_nak;
    34a2:	210a      	movs	r1, #10
    34a4:	6041      	str	r1, [r0, #4]
    34a6:	e77f      	b.n	33a8 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x10>
    return port->MFSR & 0x7;
    34a8:	6903      	ldr	r3, [r0, #16]
    34aa:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
                if (tx_fifo_count() == 1) {
    34ac:	f001 0107 	and.w	r1, r1, #7
    34b0:	2901      	cmp	r1, #1
                    state = State::stopping;
    34b2:	bf0c      	ite	eq
    34b4:	2102      	moveq	r1, #2
                    state = State::transfer_complete;
    34b6:	2165      	movne	r1, #101	; 0x65
    34b8:	6241      	str	r1, [r0, #36]	; 0x24
                port->MCR &= ~LPI2C_MCR_MEN;    // Avoids triggering PLTF if we didn't send a STOP
    34ba:	6919      	ldr	r1, [r3, #16]
    34bc:	f021 0101 	bic.w	r1, r1, #1
    34c0:	6119      	str	r1, [r3, #16]
    34c2:	e7bc      	b.n	343e <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0xa6>
                _error = I2CError::master_fifo_error;
    34c4:	2107      	movs	r1, #7
    34c6:	6041      	str	r1, [r0, #4]
    34c8:	e77d      	b.n	33c6 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x2e>
    return port->MFSR & 0x7;
    34ca:	6904      	ldr	r4, [r0, #16]
    34cc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        return next_index < size;
    34ce:	6a03      	ldr	r3, [r0, #32]
    34d0:	69c1      	ldr	r1, [r0, #28]
            uint32_t fifo_space = NUM_FIFOS - tx_fifo_count();
    34d2:	f002 0207 	and.w	r2, r2, #7
            while (buff.has_data_available() && fifo_space > 0) {
    34d6:	4299      	cmp	r1, r3
            uint32_t fifo_space = NUM_FIFOS - tx_fifo_count();
    34d8:	f1c2 0204 	rsb	r2, r2, #4
            while (buff.has_data_available() && fifo_space > 0) {
    34dc:	d90f      	bls.n	34fe <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x166>
    34de:	b172      	cbz	r2, 34fe <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x166>
        return buffer[next_index++];
    34e0:	6985      	ldr	r5, [r0, #24]
    34e2:	e001      	b.n	34e8 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x150>
    34e4:	4299      	cmp	r1, r3
    34e6:	d20a      	bcs.n	34fe <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x166>
    34e8:	6a03      	ldr	r3, [r0, #32]
    34ea:	3a01      	subs	r2, #1
    34ec:	f103 0101 	add.w	r1, r3, #1
    34f0:	6201      	str	r1, [r0, #32]
    34f2:	5ceb      	ldrb	r3, [r5, r3]
    34f4:	b2db      	uxtb	r3, r3
                port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | buff.read();
    34f6:	6623      	str	r3, [r4, #96]	; 0x60
        return next_index < size;
    34f8:	6a01      	ldr	r1, [r0, #32]
    34fa:	69c3      	ldr	r3, [r0, #28]
            while (buff.has_data_available() && fifo_space > 0) {
    34fc:	d1f2      	bne.n	34e4 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x14c>
        return next_index == size;
    34fe:	6a02      	ldr	r2, [r0, #32]
    3500:	69c3      	ldr	r3, [r0, #28]
            if (buff.finished_writing() && tx_fifo_count() == 0) {
    3502:	429a      	cmp	r2, r3
    3504:	d1a7      	bne.n	3456 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0xbe>
    return port->MFSR & 0x7;
    3506:	6de3      	ldr	r3, [r4, #92]	; 0x5c
            if (buff.finished_writing() && tx_fifo_count() == 0) {
    3508:	075b      	lsls	r3, r3, #29
    350a:	d1a4      	bne.n	3456 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0xbe>
                port->MIER &= ~LPI2C_MIER_TDIE;
    350c:	69a3      	ldr	r3, [r4, #24]
    350e:	f023 0301 	bic.w	r3, r3, #1
    3512:	61a3      	str	r3, [r4, #24]
                if (stop_on_completion) {
    3514:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    3518:	b1d3      	cbz	r3, 3550 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x1b8>
                    state = State::stopping;
    351a:	2202      	movs	r2, #2
                    port->MTDR = LPI2C_MTDR_CMD_STOP;
    351c:	f44f 7300 	mov.w	r3, #512	; 0x200
                    state = State::stopping;
    3520:	6242      	str	r2, [r0, #36]	; 0x24
                    port->MTDR = LPI2C_MTDR_CMD_STOP;
    3522:	6623      	str	r3, [r4, #96]	; 0x60
                port->MCR &= ~LPI2C_MCR_MEN;    // Avoids triggering PLTF if we didn't send a STOP
    3524:	6923      	ldr	r3, [r4, #16]
    3526:	f023 0301 	bic.w	r3, r3, #1
    352a:	6123      	str	r3, [r4, #16]
}
    352c:	e793      	b.n	3456 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0xbe>
        port->MTDR = LPI2C_MTDR_CMD_STOP;
    352e:	f44f 7100 	mov.w	r1, #512	; 0x200
    3532:	6619      	str	r1, [r3, #96]	; 0x60
    3534:	e766      	b.n	3404 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x6c>
                buff.write(port->MRDR);
    3536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        if (next_index == size) {
    3538:	6a04      	ldr	r4, [r0, #32]
    353a:	69c1      	ldr	r1, [r0, #28]
    353c:	428c      	cmp	r4, r1
    353e:	f43f af7a 	beq.w	3436 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x9e>
            buffer[next_index++] = data;
    3542:	6a01      	ldr	r1, [r0, #32]
    3544:	b2db      	uxtb	r3, r3
    3546:	6984      	ldr	r4, [r0, #24]
    3548:	1c4d      	adds	r5, r1, #1
    354a:	6205      	str	r5, [r0, #32]
    354c:	5463      	strb	r3, [r4, r1]
            return true;
    354e:	e772      	b.n	3436 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x9e>
                    state = State::transfer_complete;
    3550:	2365      	movs	r3, #101	; 0x65
    3552:	6243      	str	r3, [r0, #36]	; 0x24
    3554:	e7e6      	b.n	3524 <IMX_RT1060_I2CMaster::_interrupt_service_routine()+0x18c>
    3556:	bf00      	nop
    3558:	01000200 	.word	0x01000200

0000355c <master2_isr()>:
static void master2_isr();

IMX_RT1060_I2CMaster Master2(&LPI2C4, i2c4_config, master2_isr);

static void master2_isr() {
    Master2._interrupt_service_routine();
    355c:	4801      	ldr	r0, [pc, #4]	; (3564 <master2_isr()+0x8>)
    355e:	f7ff bf1b 	b.w	3398 <IMX_RT1060_I2CMaster::_interrupt_service_routine()>
    3562:	bf00      	nop
    3564:	2001a550 	.word	0x2001a550

00003568 <master1_isr()>:
    Master1._interrupt_service_routine();
    3568:	4801      	ldr	r0, [pc, #4]	; (3570 <master1_isr()+0x8>)
    356a:	f7ff bf15 	b.w	3398 <IMX_RT1060_I2CMaster::_interrupt_service_routine()>
    356e:	bf00      	nop
    3570:	2001a51c 	.word	0x2001a51c

00003574 <master_isr()>:
    Master._interrupt_service_routine();
    3574:	4801      	ldr	r0, [pc, #4]	; (357c <master_isr()+0x8>)
    3576:	f7ff bf0f 	b.w	3398 <IMX_RT1060_I2CMaster::_interrupt_service_routine()>
    357a:	bf00      	nop
    357c:	2001a4e8 	.word	0x2001a4e8

00003580 <IMX_RT1060_I2CMaster::start(unsigned char, unsigned long)>:
bool IMX_RT1060_I2CMaster::start(uint8_t address, uint32_t direction) {
    3580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!finished()) {
    3582:	6803      	ldr	r3, [r0, #0]
bool IMX_RT1060_I2CMaster::start(uint8_t address, uint32_t direction) {
    3584:	4604      	mov	r4, r0
    3586:	4d34      	ldr	r5, [pc, #208]	; (3658 <IMX_RT1060_I2CMaster::start(unsigned char, unsigned long)+0xd8>)
    3588:	460e      	mov	r6, r1
    if (!finished()) {
    358a:	689b      	ldr	r3, [r3, #8]
bool IMX_RT1060_I2CMaster::start(uint8_t address, uint32_t direction) {
    358c:	4617      	mov	r7, r2
    358e:	42ab      	cmp	r3, r5
    3590:	d125      	bne.n	35de <IMX_RT1060_I2CMaster::start(unsigned char, unsigned long)+0x5e>
    return state == State::transfer_complete ||
    3592:	6a43      	ldr	r3, [r0, #36]	; 0x24
    3594:	2b65      	cmp	r3, #101	; 0x65
    3596:	d054      	beq.n	3642 <IMX_RT1060_I2CMaster::start(unsigned char, unsigned long)+0xc2>
        (state >= State::idle && !(port->MSR & LPI2C_MSR_MBF));
    3598:	6a43      	ldr	r3, [r0, #36]	; 0x24
    return state == State::transfer_complete ||
    359a:	2b63      	cmp	r3, #99	; 0x63
        (state >= State::idle && !(port->MSR & LPI2C_MSR_MBF));
    359c:	6903      	ldr	r3, [r0, #16]
    return state == State::transfer_complete ||
    359e:	dd22      	ble.n	35e6 <IMX_RT1060_I2CMaster::start(unsigned char, unsigned long)+0x66>
        (state >= State::idle && !(port->MSR & LPI2C_MSR_MBF));
    35a0:	695a      	ldr	r2, [r3, #20]
    35a2:	01d1      	lsls	r1, r2, #7
    35a4:	d41f      	bmi.n	35e6 <IMX_RT1060_I2CMaster::start(unsigned char, unsigned long)+0x66>
    _error = I2CError::ok;
    35a6:	2000      	movs	r0, #0
    ignore_tdf = direction;
    35a8:	62a7      	str	r7, [r4, #40]	; 0x28
    _error = I2CError::ok;
    35aa:	6060      	str	r0, [r4, #4]
    state = State::starting;
    35ac:	6260      	str	r0, [r4, #36]	; 0x24
    return port->MFSR & 0x7;
    35ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    if (tx_fifo_count() > 0 || rx_fifo_count() > 0) {
    35b0:	0752      	lsls	r2, r2, #29
    35b2:	d130      	bne.n	3616 <IMX_RT1060_I2CMaster::start(unsigned char, unsigned long)+0x96>
    return (port->MFSR >> 16) & 0x07;
    35b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    if (tx_fifo_count() > 0 || rx_fifo_count() > 0) {
    35b6:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
    35ba:	d12c      	bne.n	3616 <IMX_RT1060_I2CMaster::start(unsigned char, unsigned long)+0x96>
    port->MSR &= (LPI2C_MSR_DMF | LPI2C_MSR_PLTF | LPI2C_MSR_FEF |
    35bc:	695a      	ldr	r2, [r3, #20]
    35be:	f647 7003 	movw	r0, #32515	; 0x7f03
    uint8_t i2c_address = (address & 0x7F) << 1;
    35c2:	0071      	lsls	r1, r6, #1
    port->MSR &= (LPI2C_MSR_DMF | LPI2C_MSR_PLTF | LPI2C_MSR_FEF |
    35c4:	4002      	ands	r2, r0
    return true;
    35c6:	2001      	movs	r0, #1
    port->MTDR = LPI2C_MTDR_CMD_START | i2c_address | direction;
    35c8:	b2c9      	uxtb	r1, r1
    port->MSR &= (LPI2C_MSR_DMF | LPI2C_MSR_PLTF | LPI2C_MSR_FEF |
    35ca:	615a      	str	r2, [r3, #20]
    port->MTDR = LPI2C_MTDR_CMD_START | i2c_address | direction;
    35cc:	ea41 0207 	orr.w	r2, r1, r7
    port->MCR |= LPI2C_MCR_MEN;
    35d0:	691c      	ldr	r4, [r3, #16]
    port->MTDR = LPI2C_MTDR_CMD_START | i2c_address | direction;
    35d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    port->MCR |= LPI2C_MCR_MEN;
    35d6:	4304      	orrs	r4, r0
    35d8:	611c      	str	r4, [r3, #16]
    port->MTDR = LPI2C_MTDR_CMD_START | i2c_address | direction;
    35da:	661a      	str	r2, [r3, #96]	; 0x60
}
    35dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!finished()) {
    35de:	4798      	blx	r3
    return port->MFSR & 0x7;
    35e0:	6923      	ldr	r3, [r4, #16]
    if (!finished()) {
    35e2:	2800      	cmp	r0, #0
    35e4:	d1df      	bne.n	35a6 <IMX_RT1060_I2CMaster::start(unsigned char, unsigned long)+0x26>
    port->MIER &= ~LPI2C_MIER_TDIE;
    35e6:	6999      	ldr	r1, [r3, #24]
    if ((msr & LPI2C_MSR_MBF) && !(msr & LPI2C_MSR_SDF)) {
    35e8:	4a1c      	ldr	r2, [pc, #112]	; (365c <IMX_RT1060_I2CMaster::start(unsigned char, unsigned long)+0xdc>)
    port->MIER &= ~LPI2C_MIER_TDIE;
    35ea:	f021 0101 	bic.w	r1, r1, #1
    35ee:	6199      	str	r1, [r3, #24]
    port->MCR |= LPI2C_MCR_RTF;
    35f0:	6919      	ldr	r1, [r3, #16]
    35f2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
    35f6:	6119      	str	r1, [r3, #16]
    port->MCR |= LPI2C_MCR_RRF;
    35f8:	6919      	ldr	r1, [r3, #16]
    35fa:	f441 7100 	orr.w	r1, r1, #512	; 0x200
    35fe:	6119      	str	r1, [r3, #16]
    uint32_t msr = port->MSR;
    3600:	6959      	ldr	r1, [r3, #20]
    if ((msr & LPI2C_MSR_MBF) && !(msr & LPI2C_MSR_SDF)) {
    3602:	400a      	ands	r2, r1
    3604:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
    3608:	d01d      	beq.n	3646 <IMX_RT1060_I2CMaster::start(unsigned char, unsigned long)+0xc6>
        _error = I2CError::master_not_ready;
    360a:	2206      	movs	r2, #6
        state = State::idle;
    360c:	2364      	movs	r3, #100	; 0x64
        return false;
    360e:	2000      	movs	r0, #0
        _error = I2CError::master_not_ready;
    3610:	6062      	str	r2, [r4, #4]
        state = State::idle;
    3612:	6263      	str	r3, [r4, #36]	; 0x24
}
    3614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _error = I2CError::master_fifos_not_empty;
    3616:	2108      	movs	r1, #8
    if ((msr & LPI2C_MSR_MBF) && !(msr & LPI2C_MSR_SDF)) {
    3618:	4a10      	ldr	r2, [pc, #64]	; (365c <IMX_RT1060_I2CMaster::start(unsigned char, unsigned long)+0xdc>)
        _error = I2CError::master_fifos_not_empty;
    361a:	6061      	str	r1, [r4, #4]
    port->MIER &= ~LPI2C_MIER_TDIE;
    361c:	6999      	ldr	r1, [r3, #24]
    361e:	f021 0101 	bic.w	r1, r1, #1
    3622:	6199      	str	r1, [r3, #24]
    port->MCR |= LPI2C_MCR_RTF;
    3624:	6919      	ldr	r1, [r3, #16]
    3626:	f441 7180 	orr.w	r1, r1, #256	; 0x100
    362a:	6119      	str	r1, [r3, #16]
    port->MCR |= LPI2C_MCR_RRF;
    362c:	6919      	ldr	r1, [r3, #16]
    362e:	f441 7100 	orr.w	r1, r1, #512	; 0x200
    3632:	6119      	str	r1, [r3, #16]
    uint32_t msr = port->MSR;
    3634:	6959      	ldr	r1, [r3, #20]
    if ((msr & LPI2C_MSR_MBF) && !(msr & LPI2C_MSR_SDF)) {
    3636:	400a      	ands	r2, r1
    3638:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
    363c:	d007      	beq.n	364e <IMX_RT1060_I2CMaster::start(unsigned char, unsigned long)+0xce>
        return false;
    363e:	2000      	movs	r0, #0
}
    3640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        (state >= State::idle && !(port->MSR & LPI2C_MSR_MBF));
    3642:	6903      	ldr	r3, [r0, #16]
    3644:	e7af      	b.n	35a6 <IMX_RT1060_I2CMaster::start(unsigned char, unsigned long)+0x26>
        port->MTDR = LPI2C_MTDR_CMD_STOP;
    3646:	f44f 7200 	mov.w	r2, #512	; 0x200
    364a:	661a      	str	r2, [r3, #96]	; 0x60
    364c:	e7dd      	b.n	360a <IMX_RT1060_I2CMaster::start(unsigned char, unsigned long)+0x8a>
    364e:	f44f 7200 	mov.w	r2, #512	; 0x200
        return false;
    3652:	2000      	movs	r0, #0
        port->MTDR = LPI2C_MTDR_CMD_STOP;
    3654:	661a      	str	r2, [r3, #96]	; 0x60
}
    3656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3658:	00003099 	.word	0x00003099
    365c:	01000200 	.word	0x01000200

00003660 <IMX_RT1060_I2CMaster::write_async(unsigned char, unsigned char const*, unsigned int, bool)>:
void IMX_RT1060_I2CMaster::write_async(uint8_t address, const uint8_t* buffer, size_t num_bytes, bool send_stop) {
    3660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3662:	4616      	mov	r6, r2
    if (!start(address, MASTER_WRITE)) {
    3664:	2200      	movs	r2, #0
void IMX_RT1060_I2CMaster::write_async(uint8_t address, const uint8_t* buffer, size_t num_bytes, bool send_stop) {
    3666:	4604      	mov	r4, r0
    3668:	461d      	mov	r5, r3
    366a:	f89d 7018 	ldrb.w	r7, [sp, #24]
    if (!start(address, MASTER_WRITE)) {
    366e:	f7ff ff87 	bl	3580 <IMX_RT1060_I2CMaster::start(unsigned char, unsigned long)>
    3672:	b158      	cbz	r0, 368c <IMX_RT1060_I2CMaster::write_async(unsigned char, unsigned char const*, unsigned int, bool)+0x2c>
    if (num_bytes == 0) {
    3674:	b15d      	cbz	r5, 368e <IMX_RT1060_I2CMaster::write_async(unsigned char, unsigned char const*, unsigned int, bool)+0x2e>
        next_index = 0;
    3676:	2300      	movs	r3, #0
    port->MIER |= LPI2C_MIER_TDIE;
    3678:	6922      	ldr	r2, [r4, #16]
        buffer = new_buffer;
    367a:	61a6      	str	r6, [r4, #24]
        next_index = 0;
    367c:	6223      	str	r3, [r4, #32]
        size = new_size;
    367e:	61e5      	str	r5, [r4, #28]
    stop_on_completion = send_stop;
    3680:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    port->MIER |= LPI2C_MIER_TDIE;
    3684:	6993      	ldr	r3, [r2, #24]
    3686:	f043 0301 	orr.w	r3, r3, #1
    368a:	6193      	str	r3, [r2, #24]
}
    368c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ignore_tdf = true;
    368e:	2101      	movs	r1, #1
        port->MTDR = LPI2C_MTDR_CMD_STOP;
    3690:	6923      	ldr	r3, [r4, #16]
    3692:	f44f 7200 	mov.w	r2, #512	; 0x200
        ignore_tdf = true;
    3696:	62a1      	str	r1, [r4, #40]	; 0x28
        port->MTDR = LPI2C_MTDR_CMD_STOP;
    3698:	661a      	str	r2, [r3, #96]	; 0x60
}
    369a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000369c <IMX_RT1060_I2CMaster::read_async(unsigned char, unsigned char*, unsigned int, bool)>:
    if (num_bytes > MAX_MASTER_READ_LENGTH) {
    369c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
void IMX_RT1060_I2CMaster::read_async(uint8_t address, uint8_t* buffer, size_t num_bytes, bool send_stop) {
    36a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36a2:	4605      	mov	r5, r0
    36a4:	f89d 7018 	ldrb.w	r7, [sp, #24]
    if (num_bytes > MAX_MASTER_READ_LENGTH) {
    36a8:	d902      	bls.n	36b0 <IMX_RT1060_I2CMaster::read_async(unsigned char, unsigned char*, unsigned int, bool)+0x14>
        _error = I2CError::invalid_request;
    36aa:	2304      	movs	r3, #4
    36ac:	6043      	str	r3, [r0, #4]
}
    36ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!start(address, MASTER_READ)) {
    36b0:	4616      	mov	r6, r2
    36b2:	2201      	movs	r2, #1
    36b4:	461c      	mov	r4, r3
    36b6:	f7ff ff63 	bl	3580 <IMX_RT1060_I2CMaster::start(unsigned char, unsigned long)>
    36ba:	2800      	cmp	r0, #0
    36bc:	d0f7      	beq.n	36ae <IMX_RT1060_I2CMaster::read_async(unsigned char, unsigned char*, unsigned int, bool)+0x12>
    if (num_bytes == 0) {
    36be:	b174      	cbz	r4, 36de <IMX_RT1060_I2CMaster::read_async(unsigned char, unsigned char*, unsigned int, bool)+0x42>
        next_index = 0;
    36c0:	2200      	movs	r2, #0
    port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (num_bytes - 1);
    36c2:	692b      	ldr	r3, [r5, #16]
        buffer = new_buffer;
    36c4:	61ae      	str	r6, [r5, #24]
        next_index = 0;
    36c6:	622a      	str	r2, [r5, #32]
        size = new_size;
    36c8:	61ec      	str	r4, [r5, #28]
    36ca:	3c01      	subs	r4, #1
    36cc:	f444 7480 	orr.w	r4, r4, #256	; 0x100
    36d0:	661c      	str	r4, [r3, #96]	; 0x60
    if (send_stop) {
    36d2:	2f00      	cmp	r7, #0
    36d4:	d0eb      	beq.n	36ae <IMX_RT1060_I2CMaster::read_async(unsigned char, unsigned char*, unsigned int, bool)+0x12>
        port->MTDR = LPI2C_MTDR_CMD_STOP;
    36d6:	f44f 7200 	mov.w	r2, #512	; 0x200
    36da:	661a      	str	r2, [r3, #96]	; 0x60
}
    36dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        port->MTDR = LPI2C_MTDR_CMD_STOP;
    36de:	692b      	ldr	r3, [r5, #16]
    36e0:	f44f 7200 	mov.w	r2, #512	; 0x200
    36e4:	661a      	str	r2, [r3, #96]	; 0x60
}
    36e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000036e8 <IMX_RT1060_I2CMaster::set_clock(unsigned long)>:
    if (frequency < 400'000) {
    36e8:	4b11      	ldr	r3, [pc, #68]	; (3730 <IMX_RT1060_I2CMaster::set_clock(unsigned long)+0x48>)
    36ea:	4299      	cmp	r1, r3
void IMX_RT1060_I2CMaster::set_clock(uint32_t frequency) {
    36ec:	b430      	push	{r4, r5}
    if (frequency < 400'000) {
    36ee:	d918      	bls.n	3722 <IMX_RT1060_I2CMaster::set_clock(unsigned long)+0x3a>
    } else if (frequency < 1'000'000) {
    36f0:	4b10      	ldr	r3, [pc, #64]	; (3734 <IMX_RT1060_I2CMaster::set_clock(unsigned long)+0x4c>)
    36f2:	4c11      	ldr	r4, [pc, #68]	; (3738 <IMX_RT1060_I2CMaster::set_clock(unsigned long)+0x50>)
    36f4:	4299      	cmp	r1, r3
    36f6:	4b11      	ldr	r3, [pc, #68]	; (373c <IMX_RT1060_I2CMaster::set_clock(unsigned long)+0x54>)
    36f8:	4911      	ldr	r1, [pc, #68]	; (3740 <IMX_RT1060_I2CMaster::set_clock(unsigned long)+0x58>)
    36fa:	bf88      	it	hi
    36fc:	4619      	movhi	r1, r3
    36fe:	4b11      	ldr	r3, [pc, #68]	; (3744 <IMX_RT1060_I2CMaster::set_clock(unsigned long)+0x5c>)
    3700:	4a11      	ldr	r2, [pc, #68]	; (3748 <IMX_RT1060_I2CMaster::set_clock(unsigned long)+0x60>)
    3702:	bf92      	itee	ls
    3704:	2501      	movls	r5, #1
    3706:	4622      	movhi	r2, r4
    3708:	2500      	movhi	r5, #0
    370a:	4c10      	ldr	r4, [pc, #64]	; (374c <IMX_RT1060_I2CMaster::set_clock(unsigned long)+0x64>)
    370c:	bf88      	it	hi
    370e:	461c      	movhi	r4, r3
    port->MCCR0 = LPI2C_MCCR0_CLKHI(timings.CLKHI) | LPI2C_MCCR0_CLKLO(timings.CLKLO) |
    3710:	6903      	ldr	r3, [r0, #16]
    3712:	649c      	str	r4, [r3, #72]	; 0x48
    port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(timings.PRESCALE);
    3714:	625d      	str	r5, [r3, #36]	; 0x24
    port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(timings.FILTSDA) | LPI2C_MCFGR2_FILTSCL(timings.FILTSCL) |
    3716:	6299      	str	r1, [r3, #40]	; 0x28
    port->MCFGR3 = LPI2C_MCFGR3_PINLOW(timings.PINLOW);
    3718:	62da      	str	r2, [r3, #44]	; 0x2c
    port->MCCR1 = port->MCCR0;
    371a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
}
    371c:	bc30      	pop	{r4, r5}
    port->MCCR1 = port->MCCR0;
    371e:	651a      	str	r2, [r3, #80]	; 0x50
}
    3720:	4770      	bx	lr
    3722:	f44f 32dc 	mov.w	r2, #112640	; 0x1b800
    3726:	490a      	ldr	r1, [pc, #40]	; (3750 <IMX_RT1060_I2CMaster::set_clock(unsigned long)+0x68>)
    3728:	2503      	movs	r5, #3
    372a:	4c0a      	ldr	r4, [pc, #40]	; (3754 <IMX_RT1060_I2CMaster::set_clock(unsigned long)+0x6c>)
    372c:	e7f0      	b.n	3710 <IMX_RT1060_I2CMaster::set_clock(unsigned long)+0x28>
    372e:	bf00      	nop
    3730:	00061a7f 	.word	0x00061a7f
    3734:	000f423f 	.word	0x000f423f
    3738:	000dbc00 	.word	0x000dbc00
    373c:	06060001 	.word	0x06060001
    3740:	0f0f0001 	.word	0x0f0f0001
    3744:	0c130e24 	.word	0x0c130e24
    3748:	0006de00 	.word	0x0006de00
    374c:	0b15172a 	.word	0x0b15172a
    3750:	0f0f0009 	.word	0x0f0f0009
    3754:	072c2225 	.word	0x072c2225

00003758 <IMX_RT1060_I2CMaster::begin(unsigned long)>:
void IMX_RT1060_I2CMaster::begin(uint32_t frequency) {
    3758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    375c:	4604      	mov	r4, r0
    NVIC_DISABLE_IRQ(irq);
    375e:	4a2c      	ldr	r2, [pc, #176]	; (3810 <IMX_RT1060_I2CMaster::begin(unsigned long)+0xb8>)
void IMX_RT1060_I2CMaster::begin(uint32_t frequency) {
    3760:	4688      	mov	r8, r1
    NVIC_DISABLE_IRQ(irq);
    3762:	2601      	movs	r6, #1
    port->MCR = 0;
    3764:	2700      	movs	r7, #0
    port->MCR = (LPI2C_MCR_RST | LPI2C_MCR_RRF | LPI2C_MCR_RTF);
    3766:	f240 3502 	movw	r5, #770	; 0x302
    376a:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 3818 <IMX_RT1060_I2CMaster::begin(unsigned long)+0xc0>
void IMX_RT1060_I2CMaster::begin(uint32_t frequency) {
    376e:	b093      	sub	sp, #76	; 0x4c
    stop(port, config.irq);
    3770:	e9d0 0304 	ldrd	r0, r3, [r0, #16]
    3774:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    port->MCR = (LPI2C_MCR_RST | LPI2C_MCR_RRF | LPI2C_MCR_RTF);
    3778:	6105      	str	r5, [r0, #16]
    NVIC_DISABLE_IRQ(irq);
    377a:	eb02 1253 	add.w	r2, r2, r3, lsr #5
    377e:	f003 011f 	and.w	r1, r3, #31
    3782:	3310      	adds	r3, #16
    port->MCR = 0;
    3784:	6107      	str	r7, [r0, #16]
    NVIC_DISABLE_IRQ(irq);
    3786:	0092      	lsls	r2, r2, #2
    3788:	fa06 f101 	lsl.w	r1, r6, r1
    port->SCR = (LPI2C_SCR_RST | LPI2C_SCR_RRF | LPI2C_SCR_RTF);
    378c:	f8c0 5110 	str.w	r5, [r0, #272]	; 0x110
    port->SCR = 0;
    3790:	f8c0 7110 	str.w	r7, [r0, #272]	; 0x110
    NVIC_DISABLE_IRQ(irq);
    3794:	6011      	str	r1, [r2, #0]
    3796:	f849 7023 	str.w	r7, [r9, r3, lsl #2]
    initialise_common(config, pad_control_config, pullup_config);
    379a:	6965      	ldr	r5, [r4, #20]
    379c:	46ec      	mov	ip, sp
    379e:	68e3      	ldr	r3, [r4, #12]
    37a0:	f105 0e10 	add.w	lr, r5, #16
    37a4:	9311      	str	r3, [sp, #68]	; 0x44
    37a6:	68a3      	ldr	r3, [r4, #8]
    37a8:	9310      	str	r3, [sp, #64]	; 0x40
    37aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    37ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    37b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    37b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    37ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    37be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    37c2:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
    37c6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    37ca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    37ce:	f7ff fd99 	bl	3304 <initialise_common(IMX_RT1060_I2CBase::Config, unsigned long, InternalPullup)>
    port->MFCR = LPI2C_MFCR_RXWATER(0) | LPI2C_MFCR_TXWATER(0);
    37d2:	6923      	ldr	r3, [r4, #16]
    set_clock(frequency);
    37d4:	4641      	mov	r1, r8
    37d6:	4620      	mov	r0, r4
    port->MFCR = LPI2C_MFCR_RXWATER(0) | LPI2C_MFCR_TXWATER(0);
    37d8:	659f      	str	r7, [r3, #88]	; 0x58
    set_clock(frequency);
    37da:	f7ff ff85 	bl	36e8 <IMX_RT1060_I2CMaster::set_clock(unsigned long)>
    37de:	f895 304c 	ldrb.w	r3, [r5, #76]	; 0x4c
    attachInterruptVector(config.irq, isr);
    37e2:	6b22      	ldr	r2, [r4, #48]	; 0x30
    37e4:	3310      	adds	r3, #16
    37e6:	f849 2023 	str.w	r2, [r9, r3, lsl #2]
    NVIC_ENABLE_IRQ(config.irq);
    37ea:	6962      	ldr	r2, [r4, #20]
    port->MIER = LPI2C_MIER_RDIE | LPI2C_MIER_SDIE | LPI2C_MIER_NDIE | LPI2C_MIER_ALIE | LPI2C_MIER_FEIE | LPI2C_MIER_PLTIE;
    37ec:	f643 6002 	movw	r0, #15874	; 0x3e02
    NVIC_ENABLE_IRQ(config.irq);
    37f0:	4b08      	ldr	r3, [pc, #32]	; (3814 <IMX_RT1060_I2CMaster::begin(unsigned long)+0xbc>)
    37f2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
    port->MIER = LPI2C_MIER_RDIE | LPI2C_MIER_SDIE | LPI2C_MIER_NDIE | LPI2C_MIER_ALIE | LPI2C_MIER_FEIE | LPI2C_MIER_PLTIE;
    37f6:	6921      	ldr	r1, [r4, #16]
    NVIC_ENABLE_IRQ(config.irq);
    37f8:	eb03 1352 	add.w	r3, r3, r2, lsr #5
    37fc:	f002 021f 	and.w	r2, r2, #31
    port->MIER = LPI2C_MIER_RDIE | LPI2C_MIER_SDIE | LPI2C_MIER_NDIE | LPI2C_MIER_ALIE | LPI2C_MIER_FEIE | LPI2C_MIER_PLTIE;
    3800:	6188      	str	r0, [r1, #24]
    NVIC_ENABLE_IRQ(config.irq);
    3802:	009b      	lsls	r3, r3, #2
    3804:	4096      	lsls	r6, r2
    3806:	601e      	str	r6, [r3, #0]
}
    3808:	b013      	add	sp, #76	; 0x4c
    380a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    380e:	bf00      	nop
    3810:	38003860 	.word	0x38003860
    3814:	38003840 	.word	0x38003840
    3818:	2001a000 	.word	0x2001a000

0000381c <IMX_RT1060_I2CSlave::listen(unsigned long, unsigned long)>:
    stop_listening();
    381c:	6803      	ldr	r3, [r0, #0]
void IMX_RT1060_I2CSlave::listen(uint32_t samr, uint32_t address_config) {
    381e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    stop_listening();
    3822:	68db      	ldr	r3, [r3, #12]
void IMX_RT1060_I2CSlave::listen(uint32_t samr, uint32_t address_config) {
    3824:	4616      	mov	r6, r2
    3826:	4a3b      	ldr	r2, [pc, #236]	; (3914 <IMX_RT1060_I2CSlave::listen(unsigned long, unsigned long)+0xf8>)
    3828:	b092      	sub	sp, #72	; 0x48
    382a:	4604      	mov	r4, r0
    382c:	460f      	mov	r7, r1
    382e:	4293      	cmp	r3, r2
    3830:	d16c      	bne.n	390c <IMX_RT1060_I2CSlave::listen(unsigned long, unsigned long)+0xf0>
    NVIC_DISABLE_IRQ(irq);
    3832:	4a39      	ldr	r2, [pc, #228]	; (3918 <IMX_RT1060_I2CSlave::listen(unsigned long, unsigned long)+0xfc>)
    3834:	2501      	movs	r5, #1
    port->MCR = (LPI2C_MCR_RST | LPI2C_MCR_RRF | LPI2C_MCR_RTF);
    3836:	f240 3c02 	movw	ip, #770	; 0x302
    383a:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 3924 <IMX_RT1060_I2CSlave::listen(unsigned long, unsigned long)+0x108>
    stop(port, config.irq);
    383e:	e9d0 1304 	ldrd	r1, r3, [r0, #16]
    3842:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    port->MCR = (LPI2C_MCR_RST | LPI2C_MCR_RRF | LPI2C_MCR_RTF);
    3846:	f8c1 c010 	str.w	ip, [r1, #16]
    NVIC_DISABLE_IRQ(irq);
    384a:	f003 001f 	and.w	r0, r3, #31
    384e:	eb02 1253 	add.w	r2, r2, r3, lsr #5
    3852:	3310      	adds	r3, #16
    3854:	4085      	lsls	r5, r0
    3856:	0092      	lsls	r2, r2, #2
    port->MCR = 0;
    3858:	2000      	movs	r0, #0
    385a:	6108      	str	r0, [r1, #16]
    port->SCR = (LPI2C_SCR_RST | LPI2C_SCR_RRF | LPI2C_SCR_RTF);
    385c:	f8c1 c110 	str.w	ip, [r1, #272]	; 0x110
    port->SCR = 0;
    3860:	f8c1 0110 	str.w	r0, [r1, #272]	; 0x110
    NVIC_DISABLE_IRQ(irq);
    3864:	6015      	str	r5, [r2, #0]
    3866:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
    initialise_common(config, pad_control_config, pullup_config);
    386a:	6965      	ldr	r5, [r4, #20]
    386c:	46ec      	mov	ip, sp
    386e:	68e3      	ldr	r3, [r4, #12]
    port->SCFGR1 = (address_config | LPI2C_SCFGR1_TXDSTALL | LPI2C_SCFGR1_RXSTALL);
    3870:	f046 0606 	orr.w	r6, r6, #6
    initialise_common(config, pad_control_config, pullup_config);
    3874:	f105 0e10 	add.w	lr, r5, #16
    3878:	9311      	str	r3, [sp, #68]	; 0x44
    387a:	68a3      	ldr	r3, [r4, #8]
    387c:	9310      	str	r3, [sp, #64]	; 0x40
    387e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3882:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3886:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    388a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    388e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3892:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3896:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
    389a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    389e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    38a2:	f7ff fd2f 	bl	3304 <initialise_common(IMX_RT1060_I2CBase::Config, unsigned long, InternalPullup)>
    _error = I2CError::ok;
    38a6:	2100      	movs	r1, #0
    38a8:	f895 204c 	ldrb.w	r2, [r5, #76]	; 0x4c
    port->SAMR = samr;
    38ac:	6923      	ldr	r3, [r4, #16]
    _error = I2CError::ok;
    38ae:	6061      	str	r1, [r4, #4]
    port->SCFGR2 = LPI2C_SCFGR2_DATAVD(timings.DATAVD);
    38b0:	f44f 7140 	mov.w	r1, #768	; 0x300
    port->SAMR = samr;
    38b4:	f8c3 7140 	str.w	r7, [r3, #320]	; 0x140
    38b8:	3210      	adds	r2, #16
    port->SCFGR2 = LPI2C_SCFGR2_DATAVD(timings.DATAVD);
    38ba:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    port->SCFGR2 = port->SCFGR2 | LPI2C_SCFGR2_FILTSDA(timings.FILTSDA) | LPI2C_SCFGR2_FILTSCL(timings.FILTSCL);
    38be:	4917      	ldr	r1, [pc, #92]	; (391c <IMX_RT1060_I2CSlave::listen(unsigned long, unsigned long)+0x100>)
    38c0:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
    38c4:	4301      	orrs	r1, r0
    38c6:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    attachInterruptVector(config.irq, isr);
    38ca:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    port->SCFGR2 = port->SCFGR2 | LPI2C_SCFGR2_CLKHOLD(timings.CLKHOLD);
    38cc:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
    38d0:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
    port->SCFGR1 = (address_config | LPI2C_SCFGR1_TXDSTALL | LPI2C_SCFGR1_RXSTALL);
    38d4:	f8c3 6124 	str.w	r6, [r3, #292]	; 0x124
    38d8:	f848 1022 	str.w	r1, [r8, r2, lsl #2]
    NVIC_ENABLE_IRQ(config.irq);
    38dc:	6962      	ldr	r2, [r4, #20]
    38de:	2101      	movs	r1, #1
    38e0:	4b0f      	ldr	r3, [pc, #60]	; (3920 <IMX_RT1060_I2CSlave::listen(unsigned long, unsigned long)+0x104>)
    38e2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
    port->SIER = (LPI2C_SIER_RSIE | LPI2C_SIER_SDIE | LPI2C_SIER_TDIE | LPI2C_SIER_RDIE);
    38e6:	6920      	ldr	r0, [r4, #16]
    38e8:	f240 3403 	movw	r4, #771	; 0x303
    NVIC_ENABLE_IRQ(config.irq);
    38ec:	eb03 1352 	add.w	r3, r3, r2, lsr #5
    38f0:	f002 021f 	and.w	r2, r2, #31
    port->SIER = (LPI2C_SIER_RSIE | LPI2C_SIER_SDIE | LPI2C_SIER_TDIE | LPI2C_SIER_RDIE);
    38f4:	f8c0 4118 	str.w	r4, [r0, #280]	; 0x118
    NVIC_ENABLE_IRQ(config.irq);
    38f8:	fa01 f202 	lsl.w	r2, r1, r2
    38fc:	009b      	lsls	r3, r3, #2
    port->SCR = LPI2C_SCR_SEN | LPI2C_SCR_FILTEN;
    38fe:	2111      	movs	r1, #17
    NVIC_ENABLE_IRQ(config.irq);
    3900:	601a      	str	r2, [r3, #0]
    port->SCR = LPI2C_SCR_SEN | LPI2C_SCR_FILTEN;
    3902:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
}
    3906:	b012      	add	sp, #72	; 0x48
    3908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    390c:	f8df 8014 	ldr.w	r8, [pc, #20]	; 3924 <IMX_RT1060_I2CSlave::listen(unsigned long, unsigned long)+0x108>
    stop_listening();
    3910:	4798      	blx	r3
    3912:	e7aa      	b.n	386a <IMX_RT1060_I2CSlave::listen(unsigned long, unsigned long)+0x4e>
    3914:	0000311d 	.word	0x0000311d
    3918:	38003860 	.word	0x38003860
    391c:	06060000 	.word	0x06060000
    3920:	38003840 	.word	0x38003840
    3924:	2001a000 	.word	0x2001a000

00003928 <IMX_RT1060_I2CSlave::listen(unsigned char)>:
    uint32_t samr = LPI2C_SAMR_ADDR0(address);
    3928:	0049      	lsls	r1, r1, #1
    listen(samr, address_config);
    392a:	2200      	movs	r2, #0
    392c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
    3930:	f7ff bf74 	b.w	381c <IMX_RT1060_I2CSlave::listen(unsigned long, unsigned long)>

00003934 <IMX_RT1060_I2CSlave::listen(unsigned char, unsigned char)>:
void IMX_RT1060_I2CSlave::listen(uint8_t first_address, uint8_t second_address) {
    3934:	4613      	mov	r3, r2
    uint32_t samr = LPI2C_SAMR_ADDR0(first_address) | LPI2C_SAMR_ADDR1(second_address);
    3936:	0049      	lsls	r1, r1, #1
    listen(samr, address_config);
    3938:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    uint32_t samr = LPI2C_SAMR_ADDR0(first_address) | LPI2C_SAMR_ADDR1(second_address);
    393c:	045b      	lsls	r3, r3, #17
    393e:	b2c9      	uxtb	r1, r1
    3940:	f403 037e 	and.w	r3, r3, #16646144	; 0xfe0000
    listen(samr, address_config);
    3944:	4319      	orrs	r1, r3
    3946:	f7ff bf69 	b.w	381c <IMX_RT1060_I2CSlave::listen(unsigned long, unsigned long)>
    394a:	bf00      	nop

0000394c <IMX_RT1060_I2CSlave::listen_range(unsigned char, unsigned char)>:
void IMX_RT1060_I2CSlave::listen_range(uint8_t first_address, uint8_t last_address) {
    394c:	4613      	mov	r3, r2
    uint32_t samr = LPI2C_SAMR_ADDR0(first_address) | LPI2C_SAMR_ADDR1(last_address);
    394e:	0049      	lsls	r1, r1, #1
    listen(samr, address_config);
    3950:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
    uint32_t samr = LPI2C_SAMR_ADDR0(first_address) | LPI2C_SAMR_ADDR1(last_address);
    3954:	045b      	lsls	r3, r3, #17
    3956:	b2c9      	uxtb	r1, r1
    3958:	f403 037e 	and.w	r3, r3, #16646144	; 0xfe0000
    listen(samr, address_config);
    395c:	4319      	orrs	r1, r3
    395e:	f7ff bf5d 	b.w	381c <IMX_RT1060_I2CSlave::listen(unsigned long, unsigned long)>
    3962:	bf00      	nop

00003964 <IMX_RT1060_I2CSlave::end_of_frame()>:
    if (state == State::receiving) {
    3964:	6983      	ldr	r3, [r0, #24]
void IMX_RT1060_I2CSlave::end_of_frame() {
    3966:	b510      	push	{r4, lr}
    3968:	4604      	mov	r4, r0
    396a:	b082      	sub	sp, #8
    if (state == State::receiving) {
    396c:	b98b      	cbnz	r3, 3992 <IMX_RT1060_I2CSlave::end_of_frame()+0x2e>
        if (after_receive_callback) {
    396e:	6c83      	ldr	r3, [r0, #72]	; 0x48
    3970:	b15b      	cbz	r3, 398a <IMX_RT1060_I2CSlave::end_of_frame()+0x26>
        return next_index;
    3972:	6a80      	ldr	r0, [r0, #40]	; 0x28
      _Res
      operator()(_ArgTypes... __args) const
      {
	if (_M_empty())
	  __throw_bad_function_call();
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    3974:	f10d 0202 	add.w	r2, sp, #2
            after_receive_callback(rx_buffer.get_bytes_transferred(), address_called);
    3978:	8ba1      	ldrh	r1, [r4, #28]
    397a:	9001      	str	r0, [sp, #4]
    397c:	f104 0040 	add.w	r0, r4, #64	; 0x40
    3980:	f8ad 1002 	strh.w	r1, [sp, #2]
    3984:	a901      	add	r1, sp, #4
    3986:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    3988:	4798      	blx	r3
    state = State::idle;
    398a:	2364      	movs	r3, #100	; 0x64
    398c:	61a3      	str	r3, [r4, #24]
}
    398e:	b002      	add	sp, #8
    3990:	bd10      	pop	{r4, pc}
    } else if (state == State::transmitting) {
    3992:	6983      	ldr	r3, [r0, #24]
    3994:	2b01      	cmp	r3, #1
    3996:	d1f8      	bne.n	398a <IMX_RT1060_I2CSlave::end_of_frame()+0x26>
        trailing_byte_sent = false;
    3998:	2200      	movs	r2, #0
        if (after_transmit_callback) {
    399a:	6e83      	ldr	r3, [r0, #104]	; 0x68
        trailing_byte_sent = false;
    399c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
        if (after_transmit_callback) {
    39a0:	2b00      	cmp	r3, #0
    39a2:	d0f2      	beq.n	398a <IMX_RT1060_I2CSlave::end_of_frame()+0x26>
            after_transmit_callback(address_called);
    39a4:	8b82      	ldrh	r2, [r0, #28]
    39a6:	a901      	add	r1, sp, #4
    39a8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    39aa:	3060      	adds	r0, #96	; 0x60
    39ac:	f8ad 2004 	strh.w	r2, [sp, #4]
    39b0:	4798      	blx	r3
    39b2:	e7ea      	b.n	398a <IMX_RT1060_I2CSlave::end_of_frame()+0x26>

000039b4 <IMX_RT1060_I2CSlave::_interrupt_service_routine()>:
    uint32_t ssr = port->SSR;
    39b4:	6903      	ldr	r3, [r0, #16]
void IMX_RT1060_I2CSlave::_interrupt_service_routine() {
    39b6:	b530      	push	{r4, r5, lr}
    uint32_t ssr = port->SSR;
    39b8:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
void IMX_RT1060_I2CSlave::_interrupt_service_routine() {
    39bc:	b083      	sub	sp, #12
    39be:	4604      	mov	r4, r0
    if (ssr & LPI2C_SSR_AVF) {
    39c0:	076a      	lsls	r2, r5, #29
    39c2:	d504      	bpl.n	39ce <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0x1a>
        address_called = (port->SASR & LPI2C_SASR_RADDR(0x7FF)) >> 1;
    39c4:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
    39c8:	f3c2 0249 	ubfx	r2, r2, #1, #10
    39cc:	8382      	strh	r2, [r0, #28]
    if (ssr & (LPI2C_SSR_RSF | LPI2C_SSR_SDF)) {
    39ce:	f415 7f40 	tst.w	r5, #768	; 0x300
    39d2:	d16e      	bne.n	3ab2 <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0xfe>
    if (ssr & LPI2C_SSR_RDF) {
    39d4:	07ab      	lsls	r3, r5, #30
    39d6:	d517      	bpl.n	3a08 <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0x54>
        uint32_t srdr = port->SRDR; // Read the Slave Received Data Register
    39d8:	6923      	ldr	r3, [r4, #16]
    39da:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
        if (srdr & LPI2C_SRDR_SOF) {
    39de:	0418      	lsls	r0, r3, #16
    39e0:	d505      	bpl.n	39ee <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0x3a>
            _error = I2CError::ok;
    39e2:	2200      	movs	r2, #0
    39e4:	6062      	str	r2, [r4, #4]
        return size > 0;
    39e6:	6a61      	ldr	r1, [r4, #36]	; 0x24
            if (rx_buffer.initialised()) {
    39e8:	b109      	cbz	r1, 39ee <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0x3a>
        next_index = 0;
    39ea:	62a2      	str	r2, [r4, #40]	; 0x28
                state = State::receiving;
    39ec:	61a2      	str	r2, [r4, #24]
        return size > 0;
    39ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if (rx_buffer.initialised()) {
    39f0:	2a00      	cmp	r2, #0
    39f2:	d059      	beq.n	3aa8 <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0xf4>
        if (next_index == size) {
    39f4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    39f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    39f8:	4291      	cmp	r1, r2
    39fa:	d06e      	beq.n	3ada <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0x126>
            buffer[next_index++] = data;
    39fc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        uint8_t data = srdr & LPI2C_SRDR_DATA(0xFF);
    39fe:	b2db      	uxtb	r3, r3
    3a00:	6a21      	ldr	r1, [r4, #32]
    3a02:	1c50      	adds	r0, r2, #1
    3a04:	62a0      	str	r0, [r4, #40]	; 0x28
    3a06:	548b      	strb	r3, [r1, r2]
    if (ssr & LPI2C_SSR_TDF) {
    3a08:	07e9      	lsls	r1, r5, #31
    3a0a:	d525      	bpl.n	3a58 <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0xa4>
        bool start_of_frame = state >= State::idle;
    3a0c:	69a3      	ldr	r3, [r4, #24]
        if (start_of_frame) {
    3a0e:	2b63      	cmp	r3, #99	; 0x63
    3a10:	dd3e      	ble.n	3a90 <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0xdc>
            _error = I2CError::ok;
    3a12:	2100      	movs	r1, #0
            state = State::transmitting;
    3a14:	2201      	movs	r2, #1
            if (before_transmit_callback) {
    3a16:	6da3      	ldr	r3, [r4, #88]	; 0x58
            _error = I2CError::ok;
    3a18:	6061      	str	r1, [r4, #4]
            state = State::transmitting;
    3a1a:	61a2      	str	r2, [r4, #24]
            if (before_transmit_callback) {
    3a1c:	b143      	cbz	r3, 3a30 <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0x7c>
                before_transmit_callback(address_called);
    3a1e:	8ba2      	ldrh	r2, [r4, #28]
    3a20:	f10d 0106 	add.w	r1, sp, #6
    3a24:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    3a26:	f104 0050 	add.w	r0, r4, #80	; 0x50
    3a2a:	f8ad 2006 	strh.w	r2, [sp, #6]
    3a2e:	4798      	blx	r3
        return size > 0;
    3a30:	6b23      	ldr	r3, [r4, #48]	; 0x30
        if (tx_buffer.initialised()) {
    3a32:	2b00      	cmp	r3, #0
    3a34:	d02f      	beq.n	3a96 <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0xe2>
        next_index = 0;
    3a36:	2300      	movs	r3, #0
    3a38:	6363      	str	r3, [r4, #52]	; 0x34
        return next_index < size;
    3a3a:	6b62      	ldr	r2, [r4, #52]	; 0x34
    3a3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
            if (tx_buffer.has_data_available()) {
    3a3e:	429a      	cmp	r2, r3
    3a40:	d33f      	bcc.n	3ac2 <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0x10e>
                port->STDR = DUMMY_BYTE;
    3a42:	6922      	ldr	r2, [r4, #16]
    3a44:	2100      	movs	r1, #0
                if (!trailing_byte_sent) {
    3a46:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                port->STDR = DUMMY_BYTE;
    3a4a:	f8c2 1160 	str.w	r1, [r2, #352]	; 0x160
                if (!trailing_byte_sent) {
    3a4e:	2b00      	cmp	r3, #0
    3a50:	d146      	bne.n	3ae0 <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0x12c>
                    trailing_byte_sent = true;
    3a52:	2301      	movs	r3, #1
    3a54:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    if (ssr & LPI2C_SSR_FEF) {
    3a58:	052a      	lsls	r2, r5, #20
    3a5a:	d403      	bmi.n	3a64 <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0xb0>
    if (ssr & LPI2C_SSR_BEF) {
    3a5c:	056b      	lsls	r3, r5, #21
    3a5e:	d408      	bmi.n	3a72 <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0xbe>
}
    3a60:	b003      	add	sp, #12
    3a62:	bd30      	pop	{r4, r5, pc}
        port->SSR = LPI2C_SSR_FEF;
    3a64:	6923      	ldr	r3, [r4, #16]
    3a66:	f44f 6200 	mov.w	r2, #2048	; 0x800
    3a6a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    if (ssr & LPI2C_SSR_BEF) {
    3a6e:	056b      	lsls	r3, r5, #21
    3a70:	d5f6      	bpl.n	3a60 <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0xac>
        port->SSR = LPI2C_SSR_BEF;
    3a72:	6921      	ldr	r1, [r4, #16]
    3a74:	f44f 6080 	mov.w	r0, #1024	; 0x400
        state = State::aborted;
    3a78:	2265      	movs	r2, #101	; 0x65
        _error = I2CError::bit_error;
    3a7a:	230b      	movs	r3, #11
        port->SSR = LPI2C_SSR_BEF;
    3a7c:	f8c1 0114 	str.w	r0, [r1, #276]	; 0x114
        end_of_frame();
    3a80:	4620      	mov	r0, r4
        state = State::aborted;
    3a82:	61a2      	str	r2, [r4, #24]
        _error = I2CError::bit_error;
    3a84:	6063      	str	r3, [r4, #4]
}
    3a86:	b003      	add	sp, #12
    3a88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        end_of_frame();
    3a8c:	f7ff bf6a 	b.w	3964 <IMX_RT1060_I2CSlave::end_of_frame()>
        return size > 0;
    3a90:	6b23      	ldr	r3, [r4, #48]	; 0x30
        if (tx_buffer.initialised()) {
    3a92:	2b00      	cmp	r3, #0
    3a94:	d1d1      	bne.n	3a3a <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0x86>
            port->STDR = DUMMY_BYTE;
    3a96:	6922      	ldr	r2, [r4, #16]
    3a98:	2100      	movs	r1, #0
            _error = I2CError::buffer_underflow;
    3a9a:	2303      	movs	r3, #3
            port->STDR = DUMMY_BYTE;
    3a9c:	f8c2 1160 	str.w	r1, [r2, #352]	; 0x160
    if (ssr & LPI2C_SSR_FEF) {
    3aa0:	052a      	lsls	r2, r5, #20
            _error = I2CError::buffer_underflow;
    3aa2:	6063      	str	r3, [r4, #4]
    if (ssr & LPI2C_SSR_FEF) {
    3aa4:	d5da      	bpl.n	3a5c <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0xa8>
    3aa6:	e7dd      	b.n	3a64 <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0xb0>
            _error = I2CError::buffer_overflow;
    3aa8:	2202      	movs	r2, #2
            state = State::idle;
    3aaa:	2364      	movs	r3, #100	; 0x64
            _error = I2CError::buffer_overflow;
    3aac:	6062      	str	r2, [r4, #4]
            state = State::idle;
    3aae:	61a3      	str	r3, [r4, #24]
    3ab0:	e7aa      	b.n	3a08 <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0x54>
        port->SSR = (LPI2C_SSR_RSF | LPI2C_SSR_SDF);
    3ab2:	f44f 7240 	mov.w	r2, #768	; 0x300
        end_of_frame();
    3ab6:	4620      	mov	r0, r4
        port->SSR = (LPI2C_SSR_RSF | LPI2C_SSR_SDF);
    3ab8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        end_of_frame();
    3abc:	f7ff ff52 	bl	3964 <IMX_RT1060_I2CSlave::end_of_frame()>
    3ac0:	e788      	b.n	39d4 <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0x20>
        return buffer[next_index++];
    3ac2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3ac4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3ac6:	1c59      	adds	r1, r3, #1
    3ac8:	6361      	str	r1, [r4, #52]	; 0x34
    3aca:	5cd3      	ldrb	r3, [r2, r3]
                port->STDR = tx_buffer.read();
    3acc:	6922      	ldr	r2, [r4, #16]
    3ace:	b2db      	uxtb	r3, r3
    3ad0:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    if (ssr & LPI2C_SSR_FEF) {
    3ad4:	052a      	lsls	r2, r5, #20
    3ad6:	d5c1      	bpl.n	3a5c <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0xa8>
    3ad8:	e7c4      	b.n	3a64 <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0xb0>
                _error = I2CError::buffer_overflow;
    3ada:	2302      	movs	r3, #2
    3adc:	6063      	str	r3, [r4, #4]
    3ade:	e793      	b.n	3a08 <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0x54>
                    _error = I2CError::buffer_underflow;
    3ae0:	2303      	movs	r3, #3
    3ae2:	6063      	str	r3, [r4, #4]
    3ae4:	e7b8      	b.n	3a58 <IMX_RT1060_I2CSlave::_interrupt_service_routine()+0xa4>
    3ae6:	bf00      	nop

00003ae8 <slave2_isr()>:
static void slave2_isr();

IMX_RT1060_I2CSlave Slave2(&LPI2C4, i2c4_config, slave2_isr);

static void slave2_isr() {
    Slave2._interrupt_service_routine();
    3ae8:	4801      	ldr	r0, [pc, #4]	; (3af0 <slave2_isr()+0x8>)
    3aea:	f7ff bf63 	b.w	39b4 <IMX_RT1060_I2CSlave::_interrupt_service_routine()>
    3aee:	bf00      	nop
    3af0:	2001a664 	.word	0x2001a664

00003af4 <slave1_isr()>:
    Slave1._interrupt_service_routine();
    3af4:	4801      	ldr	r0, [pc, #4]	; (3afc <slave1_isr()+0x8>)
    3af6:	f7ff bf5d 	b.w	39b4 <IMX_RT1060_I2CSlave::_interrupt_service_routine()>
    3afa:	bf00      	nop
    3afc:	2001a5f4 	.word	0x2001a5f4

00003b00 <slave_isr()>:
    Slave._interrupt_service_routine();
    3b00:	4801      	ldr	r0, [pc, #4]	; (3b08 <slave_isr()+0x8>)
    3b02:	f7ff bf57 	b.w	39b4 <IMX_RT1060_I2CSlave::_interrupt_service_routine()>
    3b06:	bf00      	nop
    3b08:	2001a584 	.word	0x2001a584

00003b0c <_GLOBAL__sub_I__ZN9I2CBufferC2Ev>:
}
    3b0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    : pad_control_config(PAD_CONTROL_CONFIG), pullup_config(InternalPullup::enabled_22k_ohm) {
    3b10:	f8df c140 	ldr.w	ip, [pc, #320]	; 3c54 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x148>
    3b14:	2300      	movs	r3, #0
    3b16:	f8df e140 	ldr.w	lr, [pc, #320]	; 3c58 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x14c>
        : port(port), config(config), isr(isr) {
    3b1a:	f04f 0b64 	mov.w	fp, #100	; 0x64
    : pad_control_config(PAD_CONTROL_CONFIG), pullup_config(InternalPullup::enabled_22k_ohm) {
    3b1e:	483e      	ldr	r0, [pc, #248]	; (3c18 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x10c>)
    3b20:	4c3e      	ldr	r4, [pc, #248]	; (3c1c <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x110>)
        : port(port), config(config), isr(isr) {
    3b22:	4f3f      	ldr	r7, [pc, #252]	; (3c20 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x114>)
    : pad_control_config(PAD_CONTROL_CONFIG), pullup_config(InternalPullup::enabled_22k_ohm) {
    3b24:	f8cc 4008 	str.w	r4, [ip, #8]
    3b28:	f8ce 4008 	str.w	r4, [lr, #8]
    3b2c:	6084      	str	r4, [r0, #8]
    3b2e:	2403      	movs	r4, #3
        : port(port), config(config), isr(isr) {
    3b30:	6107      	str	r7, [r0, #16]
    3b32:	4f3c      	ldr	r7, [pc, #240]	; (3c24 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x118>)
    : pad_control_config(PAD_CONTROL_CONFIG), pullup_config(InternalPullup::enabled_22k_ohm) {
    3b34:	f8cc 400c 	str.w	r4, [ip, #12]
I2CBuffer::I2CBuffer() : buffer(empty_buffer) {
    3b38:	4e3b      	ldr	r6, [pc, #236]	; (3c28 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x11c>)
        : port(port), config(config), isr(isr) {
    3b3a:	493c      	ldr	r1, [pc, #240]	; (3c2c <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x120>)
    3b3c:	4a3c      	ldr	r2, [pc, #240]	; (3c30 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x124>)
    : pad_control_config(PAD_CONTROL_CONFIG), pullup_config(InternalPullup::enabled_22k_ohm) {
    3b3e:	f8ce 400c 	str.w	r4, [lr, #12]
    3b42:	60c4      	str	r4, [r0, #12]
        : port(port), config(config), isr(isr) {
    3b44:	6147      	str	r7, [r0, #20]
    3b46:	4c3b      	ldr	r4, [pc, #236]	; (3c34 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x128>)
    3b48:	4f3b      	ldr	r7, [pc, #236]	; (3c38 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x12c>)
    : pad_control_config(PAD_CONTROL_CONFIG), pullup_config(InternalPullup::enabled_22k_ohm) {
    3b4a:	f8ce 3004 	str.w	r3, [lr, #4]
        : port(port), config(config), isr(isr) {
    3b4e:	f8ce 1010 	str.w	r1, [lr, #16]
I2CBuffer::I2CBuffer() : buffer(empty_buffer) {
    3b52:	f8ce 301c 	str.w	r3, [lr, #28]
        : port(port), config(config), isr(isr) {
    3b56:	f8ce 2014 	str.w	r2, [lr, #20]
I2CBuffer::I2CBuffer() : buffer(empty_buffer) {
    3b5a:	f8ce 3020 	str.w	r3, [lr, #32]
        : port(port), config(config), isr(isr) {
    3b5e:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 3c5c <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x150>
    3b62:	f8ce b024 	str.w	fp, [lr, #36]	; 0x24
    3b66:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 3c60 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x154>
    3b6a:	f8ce 3028 	str.w	r3, [lr, #40]	; 0x28
    3b6e:	f8ce 4000 	str.w	r4, [lr]
    3b72:	f88e 302c 	strb.w	r3, [lr, #44]	; 0x2c
I2CBuffer::I2CBuffer() : buffer(empty_buffer) {
    3b76:	f8ce 6018 	str.w	r6, [lr, #24]
        : port(port), config(config), isr(isr) {
    3b7a:	f8ce 7030 	str.w	r7, [lr, #48]	; 0x30
    3b7e:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 3c64 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x158>
    : pad_control_config(PAD_CONTROL_CONFIG), pullup_config(InternalPullup::enabled_22k_ohm) {
    3b82:	f8cc 3004 	str.w	r3, [ip, #4]
        : port(port), config(config), isr(isr) {
    3b86:	f8cc 4000 	str.w	r4, [ip]
I2CBuffer::I2CBuffer() : buffer(empty_buffer) {
    3b8a:	f8cc 301c 	str.w	r3, [ip, #28]
    3b8e:	f8cc 6018 	str.w	r6, [ip, #24]
    3b92:	f8cc 3020 	str.w	r3, [ip, #32]
        : port(port), config(config), isr(isr) {
    3b96:	f8cc 8010 	str.w	r8, [ip, #16]
    3b9a:	f8cc b024 	str.w	fp, [ip, #36]	; 0x24
    3b9e:	f8cc 9014 	str.w	r9, [ip, #20]
    3ba2:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
IMX_RT1060_I2CSlave Slave(&LPI2C1, i2c1_config, slave_isr);
    3ba6:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 3c68 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x15c>
        : port(port), config(config), isr(isr) {
    3baa:	f88c 302c 	strb.w	r3, [ip, #44]	; 0x2c
    3bae:	6004      	str	r4, [r0, #0]
    : pad_control_config(PAD_CONTROL_CONFIG), pullup_config(InternalPullup::enabled_22k_ohm) {
    3bb0:	6043      	str	r3, [r0, #4]
        : port(port), config(config), isr(isr) {
    3bb2:	f8cc e030 	str.w	lr, [ip, #48]	; 0x30
I2CBuffer::I2CBuffer() : buffer(empty_buffer) {
    3bb6:	61c3      	str	r3, [r0, #28]
    3bb8:	6203      	str	r3, [r0, #32]
        : port(port), config(config), isr(isr) {
    3bba:	f8c0 b024 	str.w	fp, [r0, #36]	; 0x24
    3bbe:	6283      	str	r3, [r0, #40]	; 0x28
    3bc0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    3bc4:	4b1d      	ldr	r3, [pc, #116]	; (3c3c <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x130>)
IMX_RT1060_I2CSlave Slave(&LPI2C1, i2c1_config, slave_isr);
    3bc6:	4d1e      	ldr	r5, [pc, #120]	; (3c40 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x134>)
    3bc8:	4c1e      	ldr	r4, [pc, #120]	; (3c44 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x138>)
IMX_RT1060_I2CSlave Slave1(&LPI2C3, i2c3_config, slave1_isr);
    3bca:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 3c6c <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x160>
I2CBuffer::I2CBuffer() : buffer(empty_buffer) {
    3bce:	6186      	str	r6, [r0, #24]
        : port(port), config(config), isr(isr) {
    3bd0:	6303      	str	r3, [r0, #48]	; 0x30
IMX_RT1060_I2CSlave Slave(&LPI2C1, i2c1_config, slave_isr);
    3bd2:	4650      	mov	r0, sl
    3bd4:	4b1c      	ldr	r3, [pc, #112]	; (3c48 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x13c>)
    3bd6:	f7ff fb67 	bl	32a8 <IMX_RT1060_I2CSlave::IMX_RT1060_I2CSlave(IMXRT_LPI2C_Registers*, IMX_RT1060_I2CBase::Config&, void (*)())>
    3bda:	462a      	mov	r2, r5
    3bdc:	4621      	mov	r1, r4
    3bde:	4650      	mov	r0, sl
    3be0:	f002 fddc 	bl	679c <__aeabi_atexit>
IMX_RT1060_I2CSlave Slave1(&LPI2C3, i2c3_config, slave1_isr);
    3be4:	464a      	mov	r2, r9
    3be6:	4641      	mov	r1, r8
    3be8:	4b18      	ldr	r3, [pc, #96]	; (3c4c <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x140>)
IMX_RT1060_I2CSlave Slave2(&LPI2C4, i2c4_config, slave2_isr);
    3bea:	f8df 8084 	ldr.w	r8, [pc, #132]	; 3c70 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x164>
IMX_RT1060_I2CSlave Slave1(&LPI2C3, i2c3_config, slave1_isr);
    3bee:	4658      	mov	r0, fp
    3bf0:	f7ff fb5a 	bl	32a8 <IMX_RT1060_I2CSlave::IMX_RT1060_I2CSlave(IMXRT_LPI2C_Registers*, IMX_RT1060_I2CBase::Config&, void (*)())>
    3bf4:	462a      	mov	r2, r5
    3bf6:	4621      	mov	r1, r4
    3bf8:	4658      	mov	r0, fp
    3bfa:	f002 fdcf 	bl	679c <__aeabi_atexit>
IMX_RT1060_I2CSlave Slave2(&LPI2C4, i2c4_config, slave2_isr);
    3bfe:	4a09      	ldr	r2, [pc, #36]	; (3c24 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x118>)
    3c00:	4907      	ldr	r1, [pc, #28]	; (3c20 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x114>)
    3c02:	4640      	mov	r0, r8
    3c04:	4b12      	ldr	r3, [pc, #72]	; (3c50 <_GLOBAL__sub_I__ZN9I2CBufferC2Ev+0x144>)
    3c06:	f7ff fb4f 	bl	32a8 <IMX_RT1060_I2CSlave::IMX_RT1060_I2CSlave(IMXRT_LPI2C_Registers*, IMX_RT1060_I2CBase::Config&, void (*)())>
    3c0a:	462a      	mov	r2, r5
    3c0c:	4621      	mov	r1, r4
    3c0e:	4640      	mov	r0, r8
}
    3c10:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
IMX_RT1060_I2CSlave Slave2(&LPI2C4, i2c4_config, slave2_isr);
    3c14:	f002 bdc2 	b.w	679c <__aeabi_atexit>
    3c18:	2001a550 	.word	0x2001a550
    3c1c:	00010810 	.word	0x00010810
    3c20:	403fc000 	.word	0x403fc000
    3c24:	20019984 	.word	0x20019984
    3c28:	2001a83c 	.word	0x2001a83c
    3c2c:	403f0000 	.word	0x403f0000
    3c30:	200198e4 	.word	0x200198e4
    3c34:	20018998 	.word	0x20018998
    3c38:	00003575 	.word	0x00003575
    3c3c:	0000355d 	.word	0x0000355d
    3c40:	20019320 	.word	0x20019320
    3c44:	000031ad 	.word	0x000031ad
    3c48:	00003b01 	.word	0x00003b01
    3c4c:	00003af5 	.word	0x00003af5
    3c50:	00003ae9 	.word	0x00003ae9
    3c54:	2001a51c 	.word	0x2001a51c
    3c58:	2001a4e8 	.word	0x2001a4e8
    3c5c:	403f8000 	.word	0x403f8000
    3c60:	20019934 	.word	0x20019934
    3c64:	00003569 	.word	0x00003569
    3c68:	2001a584 	.word	0x2001a584
    3c6c:	2001a5f4 	.word	0x2001a5f4
    3c70:	2001a664 	.word	0x2001a664

00003c74 <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    3c74:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
    3c78:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    3c7a:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
    3c7e:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    3c80:	d101      	bne.n	3c86 <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    3c82:	6883      	ldr	r3, [r0, #8]
    3c84:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
    3c86:	f000 b9e9 	b.w	405c <EventResponder::triggerEventNotImmediate()>
    3c8a:	bf00      	nop

00003c8c <_spi_dma_rxISR0()>:

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    3c8c:	4b32      	ldr	r3, [pc, #200]	; (3d58 <_spi_dma_rxISR0()+0xcc>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    3c8e:	4933      	ldr	r1, [pc, #204]	; (3d5c <_spi_dma_rxISR0()+0xd0>)
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    3c90:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    3c92:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    3c96:	7920      	ldrb	r0, [r4, #4]
    3c98:	77c8      	strb	r0, [r1, #31]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    3c9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    3c9c:	f895 c004 	ldrb.w	ip, [r5, #4]
    3ca0:	f881 c01c 	strb.w	ip, [r1, #28]
    3ca4:	7708      	strb	r0, [r1, #28]
    3ca6:	b152      	cbz	r2, 3cbe <_spi_dma_rxISR0()+0x32>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    3ca8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    3cac:	d323      	bcc.n	3cf6 <_spi_dma_rxISR0()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    3cae:	492c      	ldr	r1, [pc, #176]	; (3d60 <_spi_dma_rxISR0()+0xd4>)
    3cb0:	4411      	add	r1, r2
		DMA_SERQ = channel;
    3cb2:	4a2a      	ldr	r2, [pc, #168]	; (3d5c <_spi_dma_rxISR0()+0xd0>)
    3cb4:	6419      	str	r1, [r3, #64]	; 0x40
    3cb6:	76d0      	strb	r0, [r2, #27]
    3cb8:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    3cbc:	bd30      	pop	{r4, r5, pc}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    3cbe:	6819      	ldr	r1, [r3, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    3cc0:	240f      	movs	r4, #15

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    3cc2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    3cc4:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    3cc6:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    3cca:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    3ccc:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    3cce:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    3cd2:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    3cd4:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    3cd6:	6804      	ldr	r4, [r0, #0]
    3cd8:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    3cda:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    3cde:	4b21      	ldr	r3, [pc, #132]	; (3d64 <_spi_dma_rxISR0()+0xd8>)
    3ce0:	429c      	cmp	r4, r3
    3ce2:	d126      	bne.n	3d32 <_spi_dma_rxISR0()+0xa6>
		if (_type == EventTypeImmediate) {
    3ce4:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    3ce6:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    3ce8:	2b02      	cmp	r3, #2
		_data = data;
    3cea:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    3cec:	d126      	bne.n	3d3c <_spi_dma_rxISR0()+0xb0>
			(*_function)(*this);
    3cee:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    3cf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    3cf4:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    3cf6:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    3cf8:	8be9      	ldrh	r1, [r5, #30]
    3cfa:	0409      	lsls	r1, r1, #16
    3cfc:	d422      	bmi.n	3d44 <_spi_dma_rxISR0()+0xb8>
		tcd->BITER = len & 0x7fff;
    3cfe:	b292      	uxth	r2, r2
    3d00:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    3d02:	6821      	ldr	r1, [r4, #0]
    3d04:	8bec      	ldrh	r4, [r5, #30]
    3d06:	b2a4      	uxth	r4, r4
    3d08:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    3d0a:	8bcc      	ldrh	r4, [r1, #30]
    3d0c:	0424      	lsls	r4, r4, #16
    3d0e:	d505      	bpl.n	3d1c <_spi_dma_rxISR0()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    3d10:	8bcc      	ldrh	r4, [r1, #30]
    3d12:	f3c2 0208 	ubfx	r2, r2, #0, #9
    3d16:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    3d1a:	4322      	orrs	r2, r4
    3d1c:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    3d1e:	8bca      	ldrh	r2, [r1, #30]
    3d20:	b292      	uxth	r2, r2
    3d22:	82ca      	strh	r2, [r1, #22]
    3d24:	2100      	movs	r1, #0
    3d26:	4a0d      	ldr	r2, [pc, #52]	; (3d5c <_spi_dma_rxISR0()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    3d28:	6419      	str	r1, [r3, #64]	; 0x40
    3d2a:	76d0      	strb	r0, [r2, #27]
    3d2c:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    3d30:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    3d32:	4623      	mov	r3, r4
    3d34:	4611      	mov	r1, r2
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    3d36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    3d3a:	4718      	bx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    3d3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    3d40:	f000 b98c 	b.w	405c <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    3d44:	8be9      	ldrh	r1, [r5, #30]
    3d46:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    3d4a:	b292      	uxth	r2, r2
    3d4c:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    3d50:	ea41 010e 	orr.w	r1, r1, lr
    3d54:	83e9      	strh	r1, [r5, #30]
    3d56:	e7d4      	b.n	3d02 <_spi_dma_rxISR0()+0x76>
    3d58:	200191e8 	.word	0x200191e8
    3d5c:	400e8000 	.word	0x400e8000
    3d60:	ffff8001 	.word	0xffff8001
    3d64:	00003c75 	.word	0x00003c75

00003d68 <SPIClass::begin()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    3d68:	6843      	ldr	r3, [r0, #4]
{
    3d6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    3d6e:	e9d3 4100 	ldrd	r4, r1, [r3]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    3d72:	4d81      	ldr	r5, [pc, #516]	; (3f78 <SPIClass::begin()+0x210>)
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    3d74:	f04f 0ab8 	mov.w	sl, #184	; 0xb8
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    3d78:	6822      	ldr	r2, [r4, #0]
	port().CR = LPSPI_CR_RST;
    3d7a:	f04f 0802 	mov.w	r8, #2
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    3d7e:	ea22 0201 	bic.w	r2, r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    3d82:	497e      	ldr	r1, [pc, #504]	; (3f7c <SPIClass::begin()+0x214>)
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    3d84:	6022      	str	r2, [r4, #0]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    3d86:	69aa      	ldr	r2, [r5, #24]
    3d88:	4011      	ands	r1, r2
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    3d8a:	4a7d      	ldr	r2, [pc, #500]	; (3f80 <SPIClass::begin()+0x218>)
    3d8c:	430a      	orrs	r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    3d8e:	61aa      	str	r2, [r5, #24]
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    3d90:	f890 e010 	ldrb.w	lr, [r0, #16]
    3d94:	4a7b      	ldr	r2, [pc, #492]	; (3f84 <SPIClass::begin()+0x21c>)
    3d96:	eb03 060e 	add.w	r6, r3, lr
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    3d9a:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    3d9e:	7c31      	ldrb	r1, [r6, #16]
    3da0:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    3da4:	6889      	ldr	r1, [r1, #8]
    3da6:	f8c1 a000 	str.w	sl, [r1]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    3daa:	f890 c011 	ldrb.w	ip, [r0, #17]
    3dae:	eb03 050c 	add.w	r5, r3, ip
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    3db2:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    3db6:	f895 1020 	ldrb.w	r1, [r5, #32]
    3dba:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    3dbe:	6889      	ldr	r1, [r1, #8]
    3dc0:	f8c1 a000 	str.w	sl, [r1]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    3dc4:	7c81      	ldrb	r1, [r0, #18]
    3dc6:	eb03 0901 	add.w	r9, r3, r1
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    3dca:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    3dce:	f899 b030 	ldrb.w	fp, [r9, #48]	; 0x30
    3dd2:	eb02 1b0b 	add.w	fp, r2, fp, lsl #4
    3dd6:	f8db b008 	ldr.w	fp, [fp, #8]
    3dda:	f8cb a000 	str.w	sl, [fp]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    3dde:	f8d4 a000 	ldr.w	sl, [r4]
    3de2:	685f      	ldr	r7, [r3, #4]
    3de4:	ea4a 0a07 	orr.w	sl, sl, r7
    3de8:	f8c4 a000 	str.w	sl, [r4]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    3dec:	7c34      	ldrb	r4, [r6, #16]
    3dee:	f8de e014 	ldr.w	lr, [lr, #20]
    3df2:	eb02 1404 	add.w	r4, r2, r4, lsl #4
    3df6:	6864      	ldr	r4, [r4, #4]
    3df8:	f8c4 e000 	str.w	lr, [r4]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    3dfc:	f895 4020 	ldrb.w	r4, [r5, #32]
    3e00:	f8dc c024 	ldr.w	ip, [ip, #36]	; 0x24
    3e04:	eb02 1404 	add.w	r4, r2, r4, lsl #4
    3e08:	6864      	ldr	r4, [r4, #4]
    3e0a:	f8c4 c000 	str.w	ip, [r4]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    3e0e:	6b49      	ldr	r1, [r1, #52]	; 0x34
    3e10:	f899 4030 	ldrb.w	r4, [r9, #48]	; 0x30
    3e14:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    3e18:	6852      	ldr	r2, [r2, #4]
    3e1a:	6011      	str	r1, [r2, #0]
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    3e1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    3e1e:	f899 1038 	ldrb.w	r1, [r9, #56]	; 0x38
    3e22:	6011      	str	r1, [r2, #0]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    3e24:	69da      	ldr	r2, [r3, #28]
    3e26:	7e31      	ldrb	r1, [r6, #24]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    3e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    3e2a:	6011      	str	r1, [r2, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    3e2c:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    3e30:	601a      	str	r2, [r3, #0]
	port().FCR = LPSPI_FCR_TXWATER(15);
    3e32:	220f      	movs	r2, #15
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    3e34:	6803      	ldr	r3, [r0, #0]
	port().CR = LPSPI_CR_RST;
    3e36:	f8c3 8010 	str.w	r8, [r3, #16]
	port().FCR = LPSPI_FCR_TXWATER(15);
    3e3a:	659a      	str	r2, [r3, #88]	; 0x58
		if (interruptMasksUsed) {
    3e3c:	7cc2      	ldrb	r2, [r0, #19]
    3e3e:	2a00      	cmp	r2, #0
    3e40:	d031      	beq.n	3ea6 <SPIClass::begin()+0x13e>
			__disable_irq();
    3e42:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    3e44:	7cc3      	ldrb	r3, [r0, #19]
    3e46:	07dc      	lsls	r4, r3, #31
    3e48:	d508      	bpl.n	3e5c <SPIClass::begin()+0xf4>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    3e4a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3e4e:	6944      	ldr	r4, [r0, #20]
    3e50:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    3e54:	4022      	ands	r2, r4
    3e56:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    3e58:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    3e5c:	0799      	lsls	r1, r3, #30
    3e5e:	d508      	bpl.n	3e72 <SPIClass::begin()+0x10a>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    3e60:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3e64:	6984      	ldr	r4, [r0, #24]
    3e66:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    3e6a:	4022      	ands	r2, r4
    3e6c:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    3e6e:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    3e72:	075a      	lsls	r2, r3, #29
    3e74:	d508      	bpl.n	3e88 <SPIClass::begin()+0x120>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    3e76:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3e7a:	69c4      	ldr	r4, [r0, #28]
    3e7c:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    3e80:	4022      	ands	r2, r4
    3e82:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    3e84:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    3e88:	071f      	lsls	r7, r3, #28
    3e8a:	d508      	bpl.n	3e9e <SPIClass::begin()+0x136>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    3e8c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3e90:	6a04      	ldr	r4, [r0, #32]
    3e92:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    3e96:	4022      	ands	r2, r4
    3e98:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    3e9a:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    3e9e:	06de      	lsls	r6, r3, #27
    3ea0:	d455      	bmi.n	3f4e <SPIClass::begin()+0x1e6>
			__enable_irq();
    3ea2:	b662      	cpsie	i
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    3ea4:	6803      	ldr	r3, [r0, #0]
		if (settings.clock() != _clock) {
    3ea6:	4c38      	ldr	r4, [pc, #224]	; (3f88 <SPIClass::begin()+0x220>)
    3ea8:	6882      	ldr	r2, [r0, #8]
    3eaa:	42a2      	cmp	r2, r4
    3eac:	d059      	beq.n	3f62 <SPIClass::begin()+0x1fa>
			uint32_t cbcmr = CCM_CBCMR;
    3eae:	4a32      	ldr	r2, [pc, #200]	; (3f78 <SPIClass::begin()+0x210>)
		    _clock = settings.clock();
    3eb0:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    3eb2:	6992      	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    3eb4:	4935      	ldr	r1, [pc, #212]	; (3f8c <SPIClass::begin()+0x224>)
    3eb6:	f3c2 1601 	ubfx	r6, r2, #4, #2
    3eba:	f3c2 6282 	ubfx	r2, r2, #26, #3
			if (d && clkhz/d > _clock) d++;
    3ebe:	4d34      	ldr	r5, [pc, #208]	; (3f90 <SPIClass::begin()+0x228>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    3ec0:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
    3ec4:	3201      	adds	r2, #1
    3ec6:	fbb1 f2f2 	udiv	r2, r1, r2
			if (d && clkhz/d > _clock) d++;
    3eca:	42aa      	cmp	r2, r5
    3ecc:	d831      	bhi.n	3f32 <SPIClass::begin()+0x1ca>
    3ece:	2200      	movs	r2, #0
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    3ed0:	60c2      	str	r2, [r0, #12]
		port().CR = 0;
    3ed2:	2400      	movs	r4, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    3ed4:	2103      	movs	r1, #3
		port().CR = 0;
    3ed6:	611c      	str	r4, [r3, #16]
		port().TCR = settings.tcr;
    3ed8:	2407      	movs	r4, #7
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    3eda:	6259      	str	r1, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    3edc:	2101      	movs	r1, #1
		port().CCR = _ccr;
    3ede:	641a      	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    3ee0:	661c      	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    3ee2:	6119      	str	r1, [r3, #16]
		if (interruptMasksUsed) {
    3ee4:	7cc3      	ldrb	r3, [r0, #19]
    3ee6:	b313      	cbz	r3, 3f2e <SPIClass::begin()+0x1c6>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    3ee8:	07dd      	lsls	r5, r3, #31
    3eea:	d504      	bpl.n	3ef6 <SPIClass::begin()+0x18e>
    3eec:	6a81      	ldr	r1, [r0, #40]	; 0x28
    3eee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3ef2:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    3ef6:	079c      	lsls	r4, r3, #30
    3ef8:	d504      	bpl.n	3f04 <SPIClass::begin()+0x19c>
    3efa:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    3efc:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3f00:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    3f04:	0759      	lsls	r1, r3, #29
    3f06:	d504      	bpl.n	3f12 <SPIClass::begin()+0x1aa>
    3f08:	6b01      	ldr	r1, [r0, #48]	; 0x30
    3f0a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3f0e:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    3f12:	071a      	lsls	r2, r3, #28
    3f14:	d504      	bpl.n	3f20 <SPIClass::begin()+0x1b8>
    3f16:	6b41      	ldr	r1, [r0, #52]	; 0x34
    3f18:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3f1c:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    3f20:	06db      	lsls	r3, r3, #27
    3f22:	d504      	bpl.n	3f2e <SPIClass::begin()+0x1c6>
    3f24:	6b82      	ldr	r2, [r0, #56]	; 0x38
    3f26:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3f2a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    3f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			d = _clock ? clkhz/_clock : clkhz;
    3f32:	4918      	ldr	r1, [pc, #96]	; (3f94 <SPIClass::begin()+0x22c>)
    3f34:	fba1 5102 	umull	r5, r1, r1, r2
    3f38:	0d09      	lsrs	r1, r1, #20
			if (d && clkhz/d > _clock) d++;
    3f3a:	fbb2 f2f1 	udiv	r2, r2, r1
    3f3e:	42a2      	cmp	r2, r4
    3f40:	bf88      	it	hi
    3f42:	3101      	addhi	r1, #1
			if (d > 257) d= 257;  // max div
    3f44:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    3f48:	d30d      	bcc.n	3f66 <SPIClass::begin()+0x1fe>
    3f4a:	4a13      	ldr	r2, [pc, #76]	; (3f98 <SPIClass::begin()+0x230>)
				div = d-2;
    3f4c:	e7c0      	b.n	3ed0 <SPIClass::begin()+0x168>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    3f4e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3f52:	6a41      	ldr	r1, [r0, #36]	; 0x24
    3f54:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    3f58:	400b      	ands	r3, r1
    3f5a:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    3f5c:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    3f60:	e79f      	b.n	3ea2 <SPIClass::begin()+0x13a>
		port().CCR = _ccr;
    3f62:	68c2      	ldr	r2, [r0, #12]
    3f64:	e7b5      	b.n	3ed2 <SPIClass::begin()+0x16a>
			if (d > 2) {
    3f66:	2902      	cmp	r1, #2
    3f68:	d9b1      	bls.n	3ece <SPIClass::begin()+0x166>
				div = d-2;
    3f6a:	3902      	subs	r1, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    3f6c:	084c      	lsrs	r4, r1, #1
    3f6e:	0222      	lsls	r2, r4, #8
    3f70:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    3f74:	430a      	orrs	r2, r1
    3f76:	e7ab      	b.n	3ed0 <SPIClass::begin()+0x168>
    3f78:	400fc000 	.word	0x400fc000
    3f7c:	e3ffffcf 	.word	0xe3ffffcf
    3f80:	08000010 	.word	0x08000010
    3f84:	20018c8c 	.word	0x20018c8c
    3f88:	003d0900 	.word	0x003d0900
    3f8c:	200189d8 	.word	0x200189d8
    3f90:	003d08ff 	.word	0x003d08ff
    3f94:	431bde83 	.word	0x431bde83
    3f98:	007f7fff 	.word	0x007f7fff

00003f9c <SPIClass::setClockDivider_noInline(unsigned long)>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    3f9c:	6843      	ldr	r3, [r0, #4]
void SPIClass::setClockDivider_noInline(uint32_t clk) {
    3f9e:	b410      	push	{r4}
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    3fa0:	e9d3 2400 	ldrd	r2, r4, [r3]
    3fa4:	6813      	ldr	r3, [r2, #0]
    3fa6:	4323      	orrs	r3, r4
    3fa8:	6013      	str	r3, [r2, #0]
	if (clk != _clock) {
    3faa:	6883      	ldr	r3, [r0, #8]
    3fac:	428b      	cmp	r3, r1
    3fae:	d029      	beq.n	4004 <SPIClass::setClockDivider_noInline(unsigned long)+0x68>
		uint32_t cbcmr = CCM_CBCMR;
    3fb0:	4b1c      	ldr	r3, [pc, #112]	; (4024 <SPIClass::setClockDivider_noInline(unsigned long)+0x88>)
	    _clock = clk;
    3fb2:	6081      	str	r1, [r0, #8]
		uint32_t cbcmr = CCM_CBCMR;
    3fb4:	699b      	ldr	r3, [r3, #24]
		uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    3fb6:	4a1c      	ldr	r2, [pc, #112]	; (4028 <SPIClass::setClockDivider_noInline(unsigned long)+0x8c>)
    3fb8:	f3c3 1401 	ubfx	r4, r3, #4, #2
    3fbc:	f3c3 6382 	ubfx	r3, r3, #26, #3
    3fc0:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
    3fc4:	3301      	adds	r3, #1
    3fc6:	fbb4 f2f3 	udiv	r2, r4, r3
		d = _clock ? clkhz/_clock : clkhz;
    3fca:	b1b9      	cbz	r1, 3ffc <SPIClass::setClockDivider_noInline(unsigned long)+0x60>
		if (d && clkhz/d > _clock) d++;
    3fcc:	4291      	cmp	r1, r2
    3fce:	d81b      	bhi.n	4008 <SPIClass::setClockDivider_noInline(unsigned long)+0x6c>
		d = _clock ? clkhz/_clock : clkhz;
    3fd0:	fbb2 f3f1 	udiv	r3, r2, r1
		if (d && clkhz/d > _clock) d++;
    3fd4:	fbb2 f2f3 	udiv	r2, r2, r3
    3fd8:	428a      	cmp	r2, r1
    3fda:	d820      	bhi.n	401e <SPIClass::setClockDivider_noInline(unsigned long)+0x82>
		if (d > 257) d= 257;  // max div
    3fdc:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    3fe0:	d314      	bcc.n	400c <SPIClass::setClockDivider_noInline(unsigned long)+0x70>
    3fe2:	4912      	ldr	r1, [pc, #72]	; (402c <SPIClass::setClockDivider_noInline(unsigned long)+0x90>)
		_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    3fe4:	60c1      	str	r1, [r0, #12]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    3fe6:	6803      	ldr	r3, [r0, #0]
	port().CR = 0;
    3fe8:	2400      	movs	r4, #0
	port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    3fea:	2003      	movs	r0, #3
	port().CR = LPSPI_CR_MEN;
    3fec:	2201      	movs	r2, #1
	port().CR = 0;
    3fee:	611c      	str	r4, [r3, #16]
	port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    3ff0:	6258      	str	r0, [r3, #36]	; 0x24
}
    3ff2:	f85d 4b04 	ldr.w	r4, [sp], #4
	port().CCR = _ccr;
    3ff6:	6419      	str	r1, [r3, #64]	; 0x40
	port().CR = LPSPI_CR_MEN;
    3ff8:	611a      	str	r2, [r3, #16]
}
    3ffa:	4770      	bx	lr
		if (d && clkhz/d > _clock) d++;
    3ffc:	429c      	cmp	r4, r3
    3ffe:	d3f1      	bcc.n	3fe4 <SPIClass::setClockDivider_noInline(unsigned long)+0x48>
    4000:	1c53      	adds	r3, r2, #1
    4002:	e7eb      	b.n	3fdc <SPIClass::setClockDivider_noInline(unsigned long)+0x40>
	port().CCR = _ccr;
    4004:	68c1      	ldr	r1, [r0, #12]
    4006:	e7ee      	b.n	3fe6 <SPIClass::setClockDivider_noInline(unsigned long)+0x4a>
    4008:	2100      	movs	r1, #0
    400a:	e7eb      	b.n	3fe4 <SPIClass::setClockDivider_noInline(unsigned long)+0x48>
		if (d > 2) {
    400c:	2b02      	cmp	r3, #2
    400e:	d9fb      	bls.n	4008 <SPIClass::setClockDivider_noInline(unsigned long)+0x6c>
			div = d-2;
    4010:	3b02      	subs	r3, #2
		_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    4012:	085a      	lsrs	r2, r3, #1
    4014:	0411      	lsls	r1, r2, #16
    4016:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    401a:	4319      	orrs	r1, r3
    401c:	e7e2      	b.n	3fe4 <SPIClass::setClockDivider_noInline(unsigned long)+0x48>
		d = _clock ? clkhz/_clock : clkhz;
    401e:	461a      	mov	r2, r3
    4020:	e7ee      	b.n	4000 <SPIClass::setClockDivider_noInline(unsigned long)+0x64>
    4022:	bf00      	nop
    4024:	400fc000 	.word	0x400fc000
    4028:	200189e8 	.word	0x200189e8
    402c:	007f7fff 	.word	0x007f7fff

00004030 <SPIClass::setBitOrder(unsigned char)>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    4030:	6843      	ldr	r3, [r0, #4]
{
    4032:	b410      	push	{r4}
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    4034:	e9d3 2400 	ldrd	r2, r4, [r3]
    4038:	6813      	ldr	r3, [r2, #0]
    403a:	4323      	orrs	r3, r4
    403c:	6013      	str	r3, [r2, #0]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    403e:	6802      	ldr	r2, [r0, #0]
		port().TCR |= LPSPI_TCR_LSBF;
    4040:	6e13      	ldr	r3, [r2, #96]	; 0x60
	if (bitOrder == LSBFIRST) {
    4042:	b929      	cbnz	r1, 4050 <SPIClass::setBitOrder(unsigned char)+0x20>
		port().TCR |= LPSPI_TCR_LSBF;
    4044:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
}
    4048:	f85d 4b04 	ldr.w	r4, [sp], #4
		port().TCR |= LPSPI_TCR_LSBF;
    404c:	6613      	str	r3, [r2, #96]	; 0x60
}
    404e:	4770      	bx	lr
		port().TCR &= ~LPSPI_TCR_LSBF;
    4050:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
}
    4054:	f85d 4b04 	ldr.w	r4, [sp], #4
		port().TCR &= ~LPSPI_TCR_LSBF;
    4058:	6613      	str	r3, [r2, #96]	; 0x60
}
    405a:	4770      	bx	lr

0000405c <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    405c:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    4060:	b672      	cpsid	i
	if (_triggered == false) {
    4062:	7f43      	ldrb	r3, [r0, #29]
    4064:	b95b      	cbnz	r3, 407e <EventResponder::triggerEventNotImmediate()+0x22>
		if (_type == EventTypeYield) {
    4066:	7f01      	ldrb	r1, [r0, #28]
    4068:	2901      	cmp	r1, #1
{
    406a:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
    406c:	d00b      	beq.n	4086 <EventResponder::triggerEventNotImmediate()+0x2a>
		} else if (_type == EventTypeInterrupt) {
    406e:	2903      	cmp	r1, #3
    4070:	d013      	beq.n	409a <EventResponder::triggerEventNotImmediate()+0x3e>
		_triggered = true;
    4072:	2301      	movs	r3, #1
    4074:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    4076:	b902      	cbnz	r2, 407a <EventResponder::triggerEventNotImmediate()+0x1e>
    4078:	b662      	cpsie	i
}
    407a:	bc30      	pop	{r4, r5}
    407c:	4770      	bx	lr
    407e:	b90a      	cbnz	r2, 4084 <EventResponder::triggerEventNotImmediate()+0x28>
    4080:	b662      	cpsie	i
    4082:	4770      	bx	lr
    4084:	4770      	bx	lr
			if (firstYield == nullptr) {
    4086:	4c12      	ldr	r4, [pc, #72]	; (40d0 <EventResponder::triggerEventNotImmediate()+0x74>)
    4088:	6821      	ldr	r1, [r4, #0]
    408a:	b1b1      	cbz	r1, 40ba <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    408c:	4911      	ldr	r1, [pc, #68]	; (40d4 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    408e:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    4090:	680b      	ldr	r3, [r1, #0]
				lastYield = this;
    4092:	6008      	str	r0, [r1, #0]
				_prev = lastYield;
    4094:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    4096:	6158      	str	r0, [r3, #20]
				lastYield = this;
    4098:	e7eb      	b.n	4072 <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    409a:	4d0f      	ldr	r5, [pc, #60]	; (40d8 <EventResponder::triggerEventNotImmediate()+0x7c>)
    409c:	490f      	ldr	r1, [pc, #60]	; (40dc <EventResponder::triggerEventNotImmediate()+0x80>)
    409e:	682c      	ldr	r4, [r5, #0]
    40a0:	b18c      	cbz	r4, 40c6 <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    40a2:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    40a4:	680b      	ldr	r3, [r1, #0]
    40a6:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    40a8:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    40aa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    40ae:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    40b2:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    40b4:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
    40b8:	e7db      	b.n	4072 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    40ba:	4b06      	ldr	r3, [pc, #24]	; (40d4 <EventResponder::triggerEventNotImmediate()+0x78>)
				firstYield = this;
    40bc:	6020      	str	r0, [r4, #0]
				lastYield = this;
    40be:	6018      	str	r0, [r3, #0]
				_prev = nullptr;
    40c0:	e9c0 1105 	strd	r1, r1, [r0, #20]
				lastYield = this;
    40c4:	e7d5      	b.n	4072 <EventResponder::triggerEventNotImmediate()+0x16>
				_prev = nullptr;
    40c6:	e9c0 4405 	strd	r4, r4, [r0, #20]
				firstInterrupt = this;
    40ca:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
    40cc:	e7ed      	b.n	40aa <EventResponder::triggerEventNotImmediate()+0x4e>
    40ce:	bf00      	nop
    40d0:	2001a840 	.word	0x2001a840
    40d4:	2001a84c 	.word	0x2001a84c
    40d8:	2001a848 	.word	0x2001a848
    40dc:	2001a844 	.word	0x2001a844

000040e0 <EventResponder::runFromInterrupt()>:
{
    40e0:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    40e2:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    40e6:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    40e8:	4c0c      	ldr	r4, [pc, #48]	; (411c <EventResponder::runFromInterrupt()+0x3c>)
    40ea:	6820      	ldr	r0, [r4, #0]
		if (first) {
    40ec:	b180      	cbz	r0, 4110 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    40ee:	4e0c      	ldr	r6, [pc, #48]	; (4120 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    40f0:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    40f2:	6943      	ldr	r3, [r0, #20]
    40f4:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    40f6:	b173      	cbz	r3, 4116 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    40f8:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    40fa:	b902      	cbnz	r2, 40fe <EventResponder::runFromInterrupt()+0x1e>
    40fc:	b662      	cpsie	i
			(*(first->_function))(*first);
    40fe:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    4100:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    4102:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4104:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    4108:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    410a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    410c:	2800      	cmp	r0, #0
    410e:	d1f0      	bne.n	40f2 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    4110:	b902      	cbnz	r2, 4114 <EventResponder::runFromInterrupt()+0x34>
    4112:	b662      	cpsie	i
}
    4114:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    4116:	6033      	str	r3, [r6, #0]
    4118:	e7ef      	b.n	40fa <EventResponder::runFromInterrupt()+0x1a>
    411a:	bf00      	nop
    411c:	2001a848 	.word	0x2001a848
    4120:	2001a844 	.word	0x2001a844

00004124 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    4124:	f7ff bfdc 	b.w	40e0 <EventResponder::runFromInterrupt()>

00004128 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    4128:	4904      	ldr	r1, [pc, #16]	; (413c <systick_isr+0x14>)
	systick_millis_count++;
    412a:	4a05      	ldr	r2, [pc, #20]	; (4140 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    412c:	6849      	ldr	r1, [r1, #4]
    412e:	4b05      	ldr	r3, [pc, #20]	; (4144 <systick_isr+0x1c>)
    4130:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    4132:	6813      	ldr	r3, [r2, #0]
    4134:	3301      	adds	r3, #1
    4136:	6013      	str	r3, [r2, #0]
}
    4138:	4770      	bx	lr
    413a:	bf00      	nop
    413c:	e0001000 	.word	0xe0001000
    4140:	2001ac40 	.word	0x2001ac40
    4144:	2001ac3c 	.word	0x2001ac3c

00004148 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*)#1}::_FUN(void*)>:
        invoke_ptr{ [](storage_ptr_t, Args&&...) -> R
    4148:	4770      	bx	lr
    414a:	bf00      	nop

0000414c <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*, void*)#2}::_FUN(void*, void*)>:
        copy_ptr{ [](storage_ptr_t, storage_ptr_t) -> void {} },
    414c:	4770      	bx	lr
    414e:	bf00      	nop

00004150 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*, void*)#3}::_FUN(void*, void*)>:
        relocate_ptr{ [](storage_ptr_t, storage_ptr_t) -> void {} },
    4150:	4770      	bx	lr
    4152:	bf00      	nop

00004154 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*)#4}::_FUN(void*)>:
        destructor_ptr{ [](storage_ptr_t) -> void {} }
    4154:	4770      	bx	lr
    4156:	bf00      	nop

00004158 <pit_isr()>:
#endif
}

//FASTRUN
static void pit_isr()
{
    4158:	b570      	push	{r4, r5, r6, lr}
        return operator bool();
    }

    explicit constexpr operator bool() const noexcept
    {
        return vtable_ptr_ != std::addressof(inplace_function_detail::empty_vtable<R, Args...>);
    415a:	4c1a      	ldr	r4, [pc, #104]	; (41c4 <pit_isr()+0x6c>)

		}
	}
#else
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
    415c:	4d1a      	ldr	r5, [pc, #104]	; (41c8 <pit_isr()+0x70>)
    415e:	6823      	ldr	r3, [r4, #0]
    4160:	42ab      	cmp	r3, r5
    4162:	d002      	beq.n	416a <pit_isr()+0x12>
    4164:	4a19      	ldr	r2, [pc, #100]	; (41cc <pit_isr()+0x74>)
    4166:	68d1      	ldr	r1, [r2, #12]
    4168:	bb29      	cbnz	r1, 41b6 <pit_isr()+0x5e>
    416a:	69a3      	ldr	r3, [r4, #24]
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
    416c:	42ab      	cmp	r3, r5
    416e:	d002      	beq.n	4176 <pit_isr()+0x1e>
    4170:	4a16      	ldr	r2, [pc, #88]	; (41cc <pit_isr()+0x74>)
    4172:	69d1      	ldr	r1, [r2, #28]
    4174:	b9c9      	cbnz	r1, 41aa <pit_isr()+0x52>
    4176:	6b23      	ldr	r3, [r4, #48]	; 0x30
	channel++;
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
    4178:	42ab      	cmp	r3, r5
    417a:	d002      	beq.n	4182 <pit_isr()+0x2a>
    417c:	4a13      	ldr	r2, [pc, #76]	; (41cc <pit_isr()+0x74>)
    417e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    4180:	b969      	cbnz	r1, 419e <pit_isr()+0x46>
    4182:	6ca3      	ldr	r3, [r4, #72]	; 0x48
	channel++;
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
    4184:	42ab      	cmp	r3, r5
    4186:	d009      	beq.n	419c <pit_isr()+0x44>
    4188:	4a10      	ldr	r2, [pc, #64]	; (41cc <pit_isr()+0x74>)
    418a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    418c:	b131      	cbz	r1, 419c <pit_isr()+0x44>
    418e:	2101      	movs	r1, #1
        return vtable_ptr_->invoke_ptr(
    4190:	681b      	ldr	r3, [r3, #0]
    4192:	480f      	ldr	r0, [pc, #60]	; (41d0 <pit_isr()+0x78>)
    4194:	63d1      	str	r1, [r2, #60]	; 0x3c
#endif
}
    4196:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    419a:	4718      	bx	r3
    419c:	bd70      	pop	{r4, r5, r6, pc}
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
    419e:	2101      	movs	r1, #1
    41a0:	681b      	ldr	r3, [r3, #0]
    41a2:	480c      	ldr	r0, [pc, #48]	; (41d4 <pit_isr()+0x7c>)
    41a4:	62d1      	str	r1, [r2, #44]	; 0x2c
    41a6:	4798      	blx	r3
        );
    41a8:	e7eb      	b.n	4182 <pit_isr()+0x2a>
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
    41aa:	2101      	movs	r1, #1
        return vtable_ptr_->invoke_ptr(
    41ac:	681b      	ldr	r3, [r3, #0]
    41ae:	480a      	ldr	r0, [pc, #40]	; (41d8 <pit_isr()+0x80>)
    41b0:	61d1      	str	r1, [r2, #28]
    41b2:	4798      	blx	r3
        );
    41b4:	e7df      	b.n	4176 <pit_isr()+0x1e>
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
    41b6:	2101      	movs	r1, #1
        return vtable_ptr_->invoke_ptr(
    41b8:	681b      	ldr	r3, [r3, #0]
    41ba:	f104 0008 	add.w	r0, r4, #8
    41be:	60d1      	str	r1, [r2, #12]
    41c0:	4798      	blx	r3
        );
    41c2:	e7d2      	b.n	416a <pit_isr()+0x12>
    41c4:	2001a2c0 	.word	0x2001a2c0
    41c8:	200103d4 	.word	0x200103d4
    41cc:	40084100 	.word	0x40084100
    41d0:	2001a310 	.word	0x2001a310
    41d4:	2001a2f8 	.word	0x2001a2f8
    41d8:	2001a2e0 	.word	0x2001a2e0

000041dc <__tcf_0>:
static IntervalTimer::callback_t funct_table[4] __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
    41dc:	b538      	push	{r3, r4, r5, lr}
    41de:	4c06      	ldr	r4, [pc, #24]	; (41f8 <__tcf_0+0x1c>)
    41e0:	f1a4 0560 	sub.w	r5, r4, #96	; 0x60
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    41e4:	f854 3c08 	ldr.w	r3, [r4, #-8]
    41e8:	4620      	mov	r0, r4
    41ea:	3c18      	subs	r4, #24
    41ec:	68db      	ldr	r3, [r3, #12]
    41ee:	4798      	blx	r3
    41f0:	42ac      	cmp	r4, r5
    41f2:	d1f7      	bne.n	41e4 <__tcf_0+0x8>
    41f4:	bd38      	pop	{r3, r4, r5, pc}
    41f6:	bf00      	nop
    41f8:	2001a310 	.word	0x2001a310

000041fc <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)>:
	if (channel) {
    41fc:	6803      	ldr	r3, [r0, #0]
{
    41fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4202:	4604      	mov	r4, r0
    4204:	b088      	sub	sp, #32
    4206:	4617      	mov	r7, r2
	if (channel) {
    4208:	2b00      	cmp	r3, #0
    420a:	d04b      	beq.n	42a4 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xa8>
		channel->TCTRL = 0;
    420c:	2200      	movs	r2, #0
    420e:	609a      	str	r2, [r3, #8]
		channel->TFLG = 1;
    4210:	2201      	movs	r2, #1
    4212:	60da      	str	r2, [r3, #12]
	int index = channel - IMXRT_PIT_CHANNELS;
    4214:	4d30      	ldr	r5, [pc, #192]	; (42d8 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xdc>)
        vtable_ptr_->copy_ptr(
    4216:	a804      	add	r0, sp, #16
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    4218:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 42fc <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0x100>
    421c:	441d      	add	r5, r3
        vtable_ptr_{other.vtable_ptr_}
    421e:	f851 3b08 	ldr.w	r3, [r1], #8
    4222:	112d      	asrs	r5, r5, #4
    4224:	9302      	str	r3, [sp, #8]
        vtable_ptr_->copy_ptr(
    4226:	685b      	ldr	r3, [r3, #4]
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    4228:	eb05 0645 	add.w	r6, r5, r5, lsl #1
        vtable_ptr_->copy_ptr(
    422c:	4798      	blx	r3
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    422e:	00f6      	lsls	r6, r6, #3
    4230:	f106 0008 	add.w	r0, r6, #8
    4234:	f858 3006 	ldr.w	r3, [r8, r6]
    4238:	4440      	add	r0, r8
    423a:	68db      	ldr	r3, [r3, #12]
    423c:	9001      	str	r0, [sp, #4]
    423e:	4798      	blx	r3
      __obj = std::forward<_Up>(__new_val);
    4240:	4a26      	ldr	r2, [pc, #152]	; (42dc <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xe0>)
        vtable_ptr_->relocate_ptr(
    4242:	a904      	add	r1, sp, #16
      _Tp __old_val = std::move(__obj);
    4244:	e9dd 0301 	ldrd	r0, r3, [sp, #4]
      __obj = std::forward<_Up>(__new_val);
    4248:	9202      	str	r2, [sp, #8]
        vtable_ptr_ = std::exchange(other.vtable_ptr_, std::addressof(inplace_function_detail::empty_vtable<R, Args...>));
    424a:	f848 3006 	str.w	r3, [r8, r6]
        vtable_ptr_->relocate_ptr(
    424e:	689b      	ldr	r3, [r3, #8]
    4250:	4798      	blx	r3
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    4252:	9b02      	ldr	r3, [sp, #8]
    4254:	a804      	add	r0, sp, #16
    4256:	68db      	ldr	r3, [r3, #12]
    4258:	4798      	blx	r3
	channel->LDVAL = cycles;
    425a:	6823      	ldr	r3, [r4, #0]
	channel->TCTRL = 3;
    425c:	2203      	movs	r2, #3
    425e:	4820      	ldr	r0, [pc, #128]	; (42e0 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xe4>)
	channel->LDVAL = cycles;
    4260:	601f      	str	r7, [r3, #0]
	channel->TCTRL = 3;
    4262:	609a      	str	r2, [r3, #8]
	nvic_priorites[index] = nvic_priority;
    4264:	4a1f      	ldr	r2, [pc, #124]	; (42e4 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xe8>)
    4266:	7923      	ldrb	r3, [r4, #4]
    4268:	4c1f      	ldr	r4, [pc, #124]	; (42e8 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xec>)
    426a:	5553      	strb	r3, [r2, r5]
		if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    426c:	7813      	ldrb	r3, [r2, #0]
    426e:	7851      	ldrb	r1, [r2, #1]
    4270:	f8c0 4228 	str.w	r4, [r0, #552]	; 0x228
    4274:	428b      	cmp	r3, r1
    4276:	bf28      	it	cs
    4278:	460b      	movcs	r3, r1
    427a:	7891      	ldrb	r1, [r2, #2]
    427c:	78d2      	ldrb	r2, [r2, #3]
    427e:	428b      	cmp	r3, r1
    4280:	bf28      	it	cs
    4282:	460b      	movcs	r3, r1
    4284:	4293      	cmp	r3, r2
    4286:	bf28      	it	cs
    4288:	4613      	movcs	r3, r2
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    428a:	4c18      	ldr	r4, [pc, #96]	; (42ec <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xf0>)
	NVIC_ENABLE_IRQ(IRQ_PIT);
    428c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4290:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
	return true;
    4294:	2001      	movs	r0, #1
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    4296:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	NVIC_ENABLE_IRQ(IRQ_PIT);
    429a:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
}
    429e:	b008      	add	sp, #32
    42a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    42a4:	4a12      	ldr	r2, [pc, #72]	; (42f0 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xf4>)
    42a6:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
    42a8:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    42ac:	66d3      	str	r3, [r2, #108]	; 0x6c
		PIT_MCR = 1;
    42ae:	2201      	movs	r2, #1
    42b0:	4b10      	ldr	r3, [pc, #64]	; (42f4 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xf8>)
    42b2:	601a      	str	r2, [r3, #0]
		channel = IMXRT_PIT_CHANNELS;
    42b4:	4a10      	ldr	r2, [pc, #64]	; (42f8 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xfc>)
    42b6:	4613      	mov	r3, r2
    42b8:	6002      	str	r2, [r0, #0]
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    42ba:	3240      	adds	r2, #64	; 0x40
			if (channel->TCTRL == 0) break;
    42bc:	6898      	ldr	r0, [r3, #8]
    42be:	2800      	cmp	r0, #0
    42c0:	d0a8      	beq.n	4214 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0x18>
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    42c2:	3310      	adds	r3, #16
    42c4:	4293      	cmp	r3, r2
    42c6:	6023      	str	r3, [r4, #0]
    42c8:	d1f8      	bne.n	42bc <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xc0>
				channel = NULL;
    42ca:	2300      	movs	r3, #0
				return false;
    42cc:	4618      	mov	r0, r3
				channel = NULL;
    42ce:	6023      	str	r3, [r4, #0]
}
    42d0:	b008      	add	sp, #32
    42d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    42d6:	bf00      	nop
    42d8:	bff7bf00 	.word	0xbff7bf00
    42dc:	200103d4 	.word	0x200103d4
    42e0:	2001a000 	.word	0x2001a000
    42e4:	20019248 	.word	0x20019248
    42e8:	00004159 	.word	0x00004159
    42ec:	e000e400 	.word	0xe000e400
    42f0:	400fc000 	.word	0x400fc000
    42f4:	40084000 	.word	0x40084000
    42f8:	40084100 	.word	0x40084100
    42fc:	2001a2c0 	.word	0x2001a2c0

00004300 <IntervalTimer::end()>:
void IntervalTimer::end() {
    4300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (channel) {
    4302:	6803      	ldr	r3, [r0, #0]
    4304:	b343      	cbz	r3, 4358 <IntervalTimer::end()+0x58>
		int index = channel - IMXRT_PIT_CHANNELS;
    4306:	4c15      	ldr	r4, [pc, #84]	; (435c <IntervalTimer::end()+0x5c>)
    4308:	4607      	mov	r7, r0
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    430a:	4e15      	ldr	r6, [pc, #84]	; (4360 <IntervalTimer::end()+0x60>)
    430c:	441c      	add	r4, r3
    430e:	1124      	asrs	r4, r4, #4
    4310:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    4314:	00ed      	lsls	r5, r5, #3
    4316:	5973      	ldr	r3, [r6, r5]
    4318:	f105 0008 	add.w	r0, r5, #8
    431c:	68db      	ldr	r3, [r3, #12]
    431e:	4430      	add	r0, r6
    4320:	4798      	blx	r3
        vtable_ptr_ = std::addressof(inplace_function_detail::empty_vtable<R, Args...>);
    4322:	4b10      	ldr	r3, [pc, #64]	; (4364 <IntervalTimer::end()+0x64>)
		channel->TCTRL = 0;
    4324:	2100      	movs	r1, #0
		channel->TFLG = 1;
    4326:	2201      	movs	r2, #1
    4328:	5173      	str	r3, [r6, r5]
		channel->TCTRL = 0;
    432a:	683b      	ldr	r3, [r7, #0]
    432c:	6099      	str	r1, [r3, #8]
		channel->TFLG = 1;
    432e:	60da      	str	r2, [r3, #12]
		nvic_priorites[index] = 255;
    4330:	23ff      	movs	r3, #255	; 0xff
    4332:	4a0d      	ldr	r2, [pc, #52]	; (4368 <IntervalTimer::end()+0x68>)
    4334:	5513      	strb	r3, [r2, r4]
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    4336:	7813      	ldrb	r3, [r2, #0]
    4338:	7850      	ldrb	r0, [r2, #1]
    433a:	7894      	ldrb	r4, [r2, #2]
    433c:	4283      	cmp	r3, r0
    433e:	bf28      	it	cs
    4340:	4603      	movcs	r3, r0
    4342:	78d0      	ldrb	r0, [r2, #3]
		NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    4344:	4a09      	ldr	r2, [pc, #36]	; (436c <IntervalTimer::end()+0x6c>)
    4346:	42a3      	cmp	r3, r4
    4348:	bf28      	it	cs
    434a:	4623      	movcs	r3, r4
    434c:	4283      	cmp	r3, r0
    434e:	bf28      	it	cs
    4350:	4603      	movcs	r3, r0
    4352:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
		channel = 0;
    4356:	6039      	str	r1, [r7, #0]
}
    4358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    435a:	bf00      	nop
    435c:	bff7bf00 	.word	0xbff7bf00
    4360:	2001a2c0 	.word	0x2001a2c0
    4364:	200103d4 	.word	0x200103d4
    4368:	20019248 	.word	0x20019248
    436c:	e000e400 	.word	0xe000e400

00004370 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE>:
}
    4370:	b410      	push	{r4}
        vtable_ptr_{std::addressof(inplace_function_detail::empty_vtable<R, Args...>)}
    4372:	4b06      	ldr	r3, [pc, #24]	; (438c <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x1c>)
static IntervalTimer::callback_t funct_table[4] __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
    4374:	2000      	movs	r0, #0
    4376:	4c06      	ldr	r4, [pc, #24]	; (4390 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x20>)
    4378:	4a06      	ldr	r2, [pc, #24]	; (4394 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x24>)
    437a:	601c      	str	r4, [r3, #0]
    437c:	619c      	str	r4, [r3, #24]
    437e:	631c      	str	r4, [r3, #48]	; 0x30
    4380:	649c      	str	r4, [r3, #72]	; 0x48
    4382:	4905      	ldr	r1, [pc, #20]	; (4398 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x28>)
}
    4384:	f85d 4b04 	ldr.w	r4, [sp], #4
static IntervalTimer::callback_t funct_table[4] __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
    4388:	f002 ba08 	b.w	679c <__aeabi_atexit>
    438c:	2001a2c0 	.word	0x2001a2c0
    4390:	200103d4 	.word	0x200103d4
    4394:	20019320 	.word	0x20019320
    4398:	000041dd 	.word	0x000041dd

0000439c <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    439c:	4608      	mov	r0, r1
    439e:	f001 bf73 	b.w	6288 <usb_serial_putchar>
    43a2:	bf00      	nop

000043a4 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    43a4:	4b05      	ldr	r3, [pc, #20]	; (43bc <_write+0x18>)
    43a6:	2802      	cmp	r0, #2
    43a8:	bf88      	it	hi
    43aa:	4603      	movhi	r3, r0
{
    43ac:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    43ae:	681c      	ldr	r4, [r3, #0]
    43b0:	4618      	mov	r0, r3
    43b2:	6863      	ldr	r3, [r4, #4]
}
    43b4:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    43b8:	4718      	bx	r3
    43ba:	bf00      	nop
    43bc:	20019238 	.word	0x20019238

000043c0 <Print::printf(char const*, ...)>:
{
    43c0:	b40e      	push	{r1, r2, r3}
    43c2:	b500      	push	{lr}
    43c4:	b082      	sub	sp, #8
    43c6:	aa03      	add	r2, sp, #12
    43c8:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, format);
    43cc:	9201      	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    43ce:	f002 ff89 	bl	72e4 <vdprintf>
}
    43d2:	b002      	add	sp, #8
    43d4:	f85d eb04 	ldr.w	lr, [sp], #4
    43d8:	b003      	add	sp, #12
    43da:	4770      	bx	lr

000043dc <random(long, long)>:
	return random() % howbig;
}

int32_t random(int32_t howsmall, int32_t howbig)
{
	if (howsmall >= howbig) return howsmall;
    43dc:	4288      	cmp	r0, r1
    43de:	db00      	blt.n	43e2 <random(long, long)+0x6>
	int32_t diff = howbig - howsmall;
	return random(diff) + howsmall;
}
    43e0:	4770      	bx	lr
{
    43e2:	b430      	push	{r4, r5}
	x = seed;
    43e4:	4c12      	ldr	r4, [pc, #72]	; (4430 <random(long, long)+0x54>)
	int32_t diff = howbig - howsmall;
    43e6:	1a09      	subs	r1, r1, r0
	x = seed;
    43e8:	6823      	ldr	r3, [r4, #0]
	if (x == 0) x = 123459876;
    43ea:	b1eb      	cbz	r3, 4428 <random(long, long)+0x4c>
	lo = x % 127773;
    43ec:	4a11      	ldr	r2, [pc, #68]	; (4434 <random(long, long)+0x58>)
    43ee:	4d12      	ldr	r5, [pc, #72]	; (4438 <random(long, long)+0x5c>)
    43f0:	fb82 2c03 	smull	r2, ip, r2, r3
    43f4:	17da      	asrs	r2, r3, #31
    43f6:	449c      	add	ip, r3
    43f8:	ebc2 422c 	rsb	r2, r2, ip, asr #16
	x = 16807 * lo - 2836 * hi;
    43fc:	f244 1ca7 	movw	ip, #16807	; 0x41a7
	lo = x % 127773;
    4400:	fb05 3312 	mls	r3, r5, r2, r3
	x = 16807 * lo - 2836 * hi;
    4404:	4d0d      	ldr	r5, [pc, #52]	; (443c <random(long, long)+0x60>)
    4406:	fb05 f202 	mul.w	r2, r5, r2
    440a:	fb0c 2203 	mla	r2, ip, r3, r2
	if (x < 0) x += 0x7FFFFFFF;
    440e:	2a00      	cmp	r2, #0
    4410:	da0c      	bge.n	442c <random(long, long)+0x50>
    4412:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    4416:	4413      	add	r3, r2
	seed = x;
    4418:	6023      	str	r3, [r4, #0]
	return random() % howbig;
    441a:	fbb3 f2f1 	udiv	r2, r3, r1
    441e:	fb01 3312 	mls	r3, r1, r2, r3
}
    4422:	bc30      	pop	{r4, r5}
	return random(diff) + howsmall;
    4424:	4418      	add	r0, r3
}
    4426:	4770      	bx	lr
    4428:	4b05      	ldr	r3, [pc, #20]	; (4440 <random(long, long)+0x64>)
    442a:	e7f5      	b.n	4418 <random(long, long)+0x3c>
	seed = x;
    442c:	4613      	mov	r3, r2
    442e:	e7f3      	b.n	4418 <random(long, long)+0x3c>
    4430:	2001a83c 	.word	0x2001a83c
    4434:	834e0b5f 	.word	0x834e0b5f
    4438:	0001f31d 	.word	0x0001f31d
    443c:	fffff4ec 	.word	0xfffff4ec
    4440:	1f0cce42 	.word	0x1f0cce42

00004444 <analogRead>:
	if (pin > sizeof(pin_to_channel)) return 0;
    4444:	281c      	cmp	r0, #28
    4446:	d849      	bhi.n	44dc <analogRead+0x98>
{
    4448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (calibrating) wait_for_cal();
    444a:	4f25      	ldr	r7, [pc, #148]	; (44e0 <analogRead+0x9c>)
    444c:	4604      	mov	r4, r0
    444e:	783b      	ldrb	r3, [r7, #0]
    4450:	b9e3      	cbnz	r3, 448c <analogRead+0x48>
	uint8_t ch = pin_to_channel[pin];
    4452:	4b24      	ldr	r3, [pc, #144]	; (44e4 <analogRead+0xa0>)
    4454:	5d1b      	ldrb	r3, [r3, r4]
	if (ch == 255) return 0;
    4456:	2bff      	cmp	r3, #255	; 0xff
    4458:	d029      	beq.n	44ae <analogRead+0x6a>
	volatile uint32_t *pad = portControlRegister(pin);
    445a:	4a23      	ldr	r2, [pc, #140]	; (44e8 <analogRead+0xa4>)
    445c:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    4460:	6891      	ldr	r1, [r2, #8]
	uint32_t padval = *pad;
    4462:	680a      	ldr	r2, [r1, #0]
	if ((padval & (IOMUXC_PAD_PUE | IOMUXC_PAD_PKE)) == IOMUXC_PAD_PKE) {
    4464:	f402 5040 	and.w	r0, r2, #12288	; 0x3000
    4468:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    446c:	d030      	beq.n	44d0 <analogRead+0x8c>
	if(!(ch & 0x80)) {
    446e:	061c      	lsls	r4, r3, #24
    4470:	d41f      	bmi.n	44b2 <analogRead+0x6e>
		ADC1_HC0 = ch;
    4472:	4c1e      	ldr	r4, [pc, #120]	; (44ec <analogRead+0xa8>)
    4474:	6023      	str	r3, [r4, #0]
		while (!(ADC1_HS & ADC_HS_COCO0)) {
    4476:	6a23      	ldr	r3, [r4, #32]
    4478:	07d8      	lsls	r0, r3, #31
    447a:	d404      	bmi.n	4486 <analogRead+0x42>
			yield(); // TODO: what happens if yield-called code uses analogRead()
    447c:	f001 ff98 	bl	63b0 <yield>
		while (!(ADC1_HS & ADC_HS_COCO0)) {
    4480:	6a23      	ldr	r3, [r4, #32]
    4482:	07d9      	lsls	r1, r3, #31
    4484:	d5fa      	bpl.n	447c <analogRead+0x38>
		return ADC1_R0;
    4486:	4b19      	ldr	r3, [pc, #100]	; (44ec <analogRead+0xa8>)
    4488:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    448a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	while ((ADC1_GC & ADC_GC_CAL) || (ADC2_GC & ADC_GC_CAL)) {
    448c:	4d17      	ldr	r5, [pc, #92]	; (44ec <analogRead+0xa8>)
    448e:	4e18      	ldr	r6, [pc, #96]	; (44f0 <analogRead+0xac>)
    4490:	e001      	b.n	4496 <analogRead+0x52>
		yield();
    4492:	f001 ff8d 	bl	63b0 <yield>
	while ((ADC1_GC & ADC_GC_CAL) || (ADC2_GC & ADC_GC_CAL)) {
    4496:	6cab      	ldr	r3, [r5, #72]	; 0x48
    4498:	061b      	lsls	r3, r3, #24
    449a:	d4fa      	bmi.n	4492 <analogRead+0x4e>
    449c:	6cb3      	ldr	r3, [r6, #72]	; 0x48
    449e:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    44a2:	d1f6      	bne.n	4492 <analogRead+0x4e>
	calibrating = 0;
    44a4:	703b      	strb	r3, [r7, #0]
	uint8_t ch = pin_to_channel[pin];
    44a6:	4b0f      	ldr	r3, [pc, #60]	; (44e4 <analogRead+0xa0>)
    44a8:	5d1b      	ldrb	r3, [r3, r4]
	if (ch == 255) return 0;
    44aa:	2bff      	cmp	r3, #255	; 0xff
    44ac:	d1d5      	bne.n	445a <analogRead+0x16>
	if (pin > sizeof(pin_to_channel)) return 0;
    44ae:	2000      	movs	r0, #0
}
    44b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ADC2_HC0 = ch & 0x7f;
    44b2:	4c0f      	ldr	r4, [pc, #60]	; (44f0 <analogRead+0xac>)
    44b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    44b8:	6023      	str	r3, [r4, #0]
		while (!(ADC2_HS & ADC_HS_COCO0)) {
    44ba:	6a23      	ldr	r3, [r4, #32]
    44bc:	07da      	lsls	r2, r3, #31
    44be:	d404      	bmi.n	44ca <analogRead+0x86>
			yield(); // TODO: what happens if yield-called code uses analogRead()
    44c0:	f001 ff76 	bl	63b0 <yield>
		while (!(ADC2_HS & ADC_HS_COCO0)) {
    44c4:	6a23      	ldr	r3, [r4, #32]
    44c6:	07db      	lsls	r3, r3, #31
    44c8:	d5fa      	bpl.n	44c0 <analogRead+0x7c>
		return ADC2_R0;
    44ca:	4b09      	ldr	r3, [pc, #36]	; (44f0 <analogRead+0xac>)
    44cc:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    44ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*pad = padval & ~IOMUXC_PAD_PKE;
    44d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
	if(!(ch & 0x80)) {
    44d4:	061c      	lsls	r4, r3, #24
		*pad = padval & ~IOMUXC_PAD_PKE;
    44d6:	600a      	str	r2, [r1, #0]
	if(!(ch & 0x80)) {
    44d8:	d4eb      	bmi.n	44b2 <analogRead+0x6e>
    44da:	e7ca      	b.n	4472 <analogRead+0x2e>
	if (pin > sizeof(pin_to_channel)) return 0;
    44dc:	2000      	movs	r0, #0
}
    44de:	4770      	bx	lr
    44e0:	2001ac79 	.word	0x2001ac79
    44e4:	20018f18 	.word	0x20018f18
    44e8:	20018c8c 	.word	0x20018c8c
    44ec:	400c4000 	.word	0x400c4000
    44f0:	400c8000 	.word	0x400c8000

000044f4 <delay>:
	if (msec == 0) return;
    44f4:	b900      	cbnz	r0, 44f8 <delay+0x4>
    44f6:	4770      	bx	lr
{
    44f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    44fc:	2101      	movs	r1, #1
    44fe:	4681      	mov	r9, r0
    4500:	4c21      	ldr	r4, [pc, #132]	; (4588 <delay+0x94>)
    4502:	4d22      	ldr	r5, [pc, #136]	; (458c <delay+0x98>)
    4504:	4e22      	ldr	r6, [pc, #136]	; (4590 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    4506:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    450a:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    450c:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    450e:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    4512:	2b00      	cmp	r3, #0
    4514:	d1f7      	bne.n	4506 <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    4516:	491f      	ldr	r1, [pc, #124]	; (4594 <delay+0xa0>)
    4518:	684b      	ldr	r3, [r1, #4]
	uint32_t usec = 1000*smc + frac;
    451a:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    451e:	f8df a078 	ldr.w	sl, [pc, #120]	; 4598 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    4522:	1a1b      	subs	r3, r3, r0
    4524:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    4526:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    452a:	f8da 2000 	ldr.w	r2, [sl]
    452e:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    4532:	455a      	cmp	r2, fp
    4534:	bf94      	ite	ls
    4536:	4490      	addls	r8, r2
    4538:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    453a:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    453e:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    4540:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    4542:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    4546:	2b00      	cmp	r3, #0
    4548:	d1f7      	bne.n	453a <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    454a:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    454c:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    4550:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    4552:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    4556:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    455a:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    455e:	bf94      	ite	ls
    4560:	4462      	addls	r2, ip
    4562:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    4566:	eba2 0208 	sub.w	r2, r2, r8
    456a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    456e:	d306      	bcc.n	457e <delay+0x8a>
			if (--msec == 0) return;
    4570:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    4574:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    4578:	d1df      	bne.n	453a <delay+0x46>
}
    457a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    457e:	f001 ff17 	bl	63b0 <yield>
		while ((micros() - start) >= 1000) {
    4582:	4904      	ldr	r1, [pc, #16]	; (4594 <delay+0xa0>)
    4584:	e7d9      	b.n	453a <delay+0x46>
    4586:	bf00      	nop
    4588:	2001ac44 	.word	0x2001ac44
    458c:	2001ac40 	.word	0x2001ac40
    4590:	2001ac3c 	.word	0x2001ac3c
    4594:	e0001000 	.word	0xe0001000
    4598:	2001ac18 	.word	0x2001ac18

0000459c <digitalWrite.part.0>:
	p = digital_pin_to_info_PGM + pin;
    459c:	0102      	lsls	r2, r0, #4
    459e:	4b10      	ldr	r3, [pc, #64]	; (45e0 <digitalWrite.part.0+0x44>)
    45a0:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    45a4:	589b      	ldr	r3, [r3, r2]
void digitalWrite(uint8_t pin, uint8_t val)
    45a6:	b410      	push	{r4}
	mask = p->mask;
    45a8:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    45aa:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    45ac:	4214      	tst	r4, r2
    45ae:	d005      	beq.n	45bc <digitalWrite.part.0+0x20>
		if (val) {
    45b0:	b181      	cbz	r1, 45d4 <digitalWrite.part.0+0x38>
		}
	}
}
    45b2:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    45b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    45ba:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    45bc:	6883      	ldr	r3, [r0, #8]
		if (val) {
    45be:	b921      	cbnz	r1, 45ca <digitalWrite.part.0+0x2e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    45c0:	4a08      	ldr	r2, [pc, #32]	; (45e4 <digitalWrite.part.0+0x48>)
}
    45c2:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    45c6:	601a      	str	r2, [r3, #0]
}
    45c8:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    45ca:	4a07      	ldr	r2, [pc, #28]	; (45e8 <digitalWrite.part.0+0x4c>)
}
    45cc:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    45d0:	601a      	str	r2, [r3, #0]
}
    45d2:	4770      	bx	lr
    45d4:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    45d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    45dc:	4770      	bx	lr
    45de:	bf00      	nop
    45e0:	20018c8c 	.word	0x20018c8c
    45e4:	00013038 	.word	0x00013038
    45e8:	0001f038 	.word	0x0001f038

000045ec <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    45ec:	2827      	cmp	r0, #39	; 0x27
    45ee:	d816      	bhi.n	461e <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    45f0:	0102      	lsls	r2, r0, #4
    45f2:	4b10      	ldr	r3, [pc, #64]	; (4634 <digitalWrite+0x48>)
    45f4:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    45f8:	589b      	ldr	r3, [r3, r2]
{
    45fa:	b410      	push	{r4}
	mask = p->mask;
    45fc:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    45fe:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    4600:	4214      	tst	r4, r2
    4602:	d005      	beq.n	4610 <digitalWrite+0x24>
		if (val) {
    4604:	b961      	cbnz	r1, 4620 <digitalWrite+0x34>
}
    4606:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    460a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    460e:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    4610:	6883      	ldr	r3, [r0, #8]
		if (val) {
    4612:	b151      	cbz	r1, 462a <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    4614:	4a08      	ldr	r2, [pc, #32]	; (4638 <digitalWrite+0x4c>)
}
    4616:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    461a:	601a      	str	r2, [r3, #0]
}
    461c:	4770      	bx	lr
    461e:	4770      	bx	lr
    4620:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    4624:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    4628:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    462a:	4a04      	ldr	r2, [pc, #16]	; (463c <digitalWrite+0x50>)
}
    462c:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    4630:	601a      	str	r2, [r3, #0]
}
    4632:	4770      	bx	lr
    4634:	20018c8c 	.word	0x20018c8c
    4638:	0001f038 	.word	0x0001f038
    463c:	00013038 	.word	0x00013038

00004640 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    4640:	2827      	cmp	r0, #39	; 0x27
    4642:	d829      	bhi.n	4698 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    4644:	4b16      	ldr	r3, [pc, #88]	; (46a0 <pinMode+0x60>)
    4646:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    4648:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    464a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    464e:	589a      	ldr	r2, [r3, r2]
{
    4650:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    4652:	6853      	ldr	r3, [r2, #4]
    4654:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    4656:	d00e      	beq.n	4676 <pinMode+0x36>
    4658:	2904      	cmp	r1, #4
    465a:	d00c      	beq.n	4676 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    465c:	ea23 0304 	bic.w	r3, r3, r4
    4660:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    4662:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    4664:	b1a9      	cbz	r1, 4692 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    4666:	2902      	cmp	r1, #2
    4668:	d017      	beq.n	469a <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    466a:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    466c:	bf0c      	ite	eq
    466e:	4a0d      	ldreq	r2, [pc, #52]	; (46a4 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    4670:	4a0d      	ldrne	r2, [pc, #52]	; (46a8 <pinMode+0x68>)
    4672:	601a      	str	r2, [r3, #0]
    4674:	e007      	b.n	4686 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    4676:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    4678:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    467a:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    467c:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    467e:	d008      	beq.n	4692 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    4680:	f640 0238 	movw	r2, #2104	; 0x838
    4684:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    4686:	6843      	ldr	r3, [r0, #4]
    4688:	2215      	movs	r2, #21
}
    468a:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    468e:	601a      	str	r2, [r3, #0]
}
    4690:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    4692:	2238      	movs	r2, #56	; 0x38
    4694:	601a      	str	r2, [r3, #0]
    4696:	e7f6      	b.n	4686 <pinMode+0x46>
    4698:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    469a:	4a04      	ldr	r2, [pc, #16]	; (46ac <pinMode+0x6c>)
    469c:	601a      	str	r2, [r3, #0]
    469e:	e7f2      	b.n	4686 <pinMode+0x46>
    46a0:	20018c8c 	.word	0x20018c8c
    46a4:	00013038 	.word	0x00013038
    46a8:	00010038 	.word	0x00010038
    46ac:	0001f038 	.word	0x0001f038

000046b0 <shiftOut_lsbFirst>:

static const unsigned maxSpeed = 10000000ULL; //10 MHz
static const unsigned maxSpeedBeforeDelay = 392000000ULL; //max F_CPU_ACTUAL before doing delays (measured for 10MHz, -O2)

void shiftOut_lsbFirst(uint8_t dataPin, uint8_t clockPin, uint8_t value)
{
    46b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t mask;
	if (F_CPU_ACTUAL > maxSpeedBeforeDelay) {
    46b4:	4b4f      	ldr	r3, [pc, #316]	; (47f4 <shiftOut_lsbFirst+0x144>)
{
    46b6:	b085      	sub	sp, #20
    46b8:	4681      	mov	r9, r0
    46ba:	468a      	mov	sl, r1
	if (F_CPU_ACTUAL > maxSpeedBeforeDelay) {
    46bc:	681c      	ldr	r4, [r3, #0]
{
    46be:	9203      	str	r2, [sp, #12]
	if (F_CPU_ACTUAL > maxSpeedBeforeDelay) {
    46c0:	4a4d      	ldr	r2, [pc, #308]	; (47f8 <shiftOut_lsbFirst+0x148>)
    46c2:	4294      	cmp	r4, r2
    46c4:	d964      	bls.n	4790 <shiftOut_lsbFirst+0xe0>
		uint32_t cycles = (F_CPU_ACTUAL / 2 / maxSpeed);
    46c6:	f102 42a8 	add.w	r2, r2, #1409286144	; 0x54000000
    46ca:	681b      	ldr	r3, [r3, #0]
		uint32_t t = ARM_DWT_CYCCNT;
    46cc:	4d4b      	ldr	r5, [pc, #300]	; (47fc <shiftOut_lsbFirst+0x14c>)
		for (mask = 0x01; mask; mask <<= 1) {
    46ce:	f04f 0801 	mov.w	r8, #1
		uint32_t cycles = (F_CPU_ACTUAL / 2 / maxSpeed);
    46d2:	f502 3216 	add.w	r2, r2, #153600	; 0x25800
		uint32_t t = ARM_DWT_CYCCNT;
    46d6:	686f      	ldr	r7, [r5, #4]
		uint32_t cycles = (F_CPU_ACTUAL / 2 / maxSpeed);
    46d8:	326b      	adds	r2, #107	; 0x6b
    46da:	fba2 2303 	umull	r2, r3, r2, r3
	p = digital_pin_to_info_PGM + pin;
    46de:	4a48      	ldr	r2, [pc, #288]	; (4800 <shiftOut_lsbFirst+0x150>)
		    digitalWrite(dataPin, value & mask);
		    do {;} while(ARM_DWT_CYCCNT - t < cycles);
		    t += cycles / 2;
    46e0:	0e1e      	lsrs	r6, r3, #24
	p = digital_pin_to_info_PGM + pin;
    46e2:	eb02 1b01 	add.w	fp, r2, r1, lsl #4
    46e6:	0072      	lsls	r2, r6, #1
    46e8:	443e      	add	r6, r7
		uint32_t cycles = (F_CPU_ACTUAL / 2 / maxSpeed);
    46ea:	0ddc      	lsrs	r4, r3, #23
		for (mask = 0x01; mask; mask <<= 1) {
    46ec:	eb02 52d3 	add.w	r2, r2, r3, lsr #23
	p = digital_pin_to_info_PGM + pin;
    46f0:	2308      	movs	r3, #8
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    46f2:	4692      	mov	sl, r2
    46f4:	4699      	mov	r9, r3
    46f6:	460b      	mov	r3, r1
	if (pin >= CORE_NUM_DIGITAL) return;
    46f8:	2827      	cmp	r0, #39	; 0x27
    46fa:	d808      	bhi.n	470e <shiftOut_lsbFirst+0x5e>
    46fc:	9302      	str	r3, [sp, #8]
    46fe:	9b03      	ldr	r3, [sp, #12]
    4700:	9001      	str	r0, [sp, #4]
    4702:	ea03 0108 	and.w	r1, r3, r8
    4706:	f7ff ff49 	bl	459c <digitalWrite.part.0>
    470a:	e9dd 0301 	ldrd	r0, r3, [sp, #4]
		    do {;} while(ARM_DWT_CYCCNT - t < cycles);
    470e:	686a      	ldr	r2, [r5, #4]
    4710:	1bd2      	subs	r2, r2, r7
    4712:	42a2      	cmp	r2, r4
    4714:	d3fb      	bcc.n	470e <shiftOut_lsbFirst+0x5e>
	if (pin >= CORE_NUM_DIGITAL) return;
    4716:	2b27      	cmp	r3, #39	; 0x27
    4718:	d80a      	bhi.n	4730 <shiftOut_lsbFirst+0x80>
	pinmode = *(p->reg + 1);
    471a:	f8db 2000 	ldr.w	r2, [fp]
	mask = p->mask;
    471e:	f8db 100c 	ldr.w	r1, [fp, #12]
	pinmode = *(p->reg + 1);
    4722:	f8d2 c004 	ldr.w	ip, [r2, #4]
	if (pinmode & mask) {
    4726:	ea1c 0f01 	tst.w	ip, r1
    472a:	d02c      	beq.n	4786 <shiftOut_lsbFirst+0xd6>
			*(p->reg + 0x21) = mask; // set register
    472c:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84

		    digitalWrite(clockPin, HIGH);
		    do {;} while(ARM_DWT_CYCCNT - t < cycles);
    4730:	686a      	ldr	r2, [r5, #4]
    4732:	1b92      	subs	r2, r2, r6
    4734:	42a2      	cmp	r2, r4
    4736:	d3fb      	bcc.n	4730 <shiftOut_lsbFirst+0x80>
		    t += cycles;
    4738:	19a1      	adds	r1, r4, r6
	if (pin >= CORE_NUM_DIGITAL) return;
    473a:	2b27      	cmp	r3, #39	; 0x27
		    t += cycles;
    473c:	9101      	str	r1, [sp, #4]
	if (pin >= CORE_NUM_DIGITAL) return;
    473e:	d81a      	bhi.n	4776 <shiftOut_lsbFirst+0xc6>
	pinmode = *(p->reg + 1);
    4740:	f8db 2000 	ldr.w	r2, [fp]
	mask = p->mask;
    4744:	f8db c00c 	ldr.w	ip, [fp, #12]
	pinmode = *(p->reg + 1);
    4748:	f8d2 e004 	ldr.w	lr, [r2, #4]
	if (pinmode & mask) {
    474c:	ea1e 0f0c 	tst.w	lr, ip
    4750:	d013      	beq.n	477a <shiftOut_lsbFirst+0xca>
			*(p->reg + 0x22) = mask; // clear register
    4752:	f8c2 c088 	str.w	ip, [r2, #136]	; 0x88

		    digitalWrite(clockPin, LOW);
		    do {;} while(ARM_DWT_CYCCNT - t < cycles);
    4756:	686a      	ldr	r2, [r5, #4]
    4758:	1a52      	subs	r2, r2, r1
    475a:	42a2      	cmp	r2, r4
    475c:	d3fb      	bcc.n	4756 <shiftOut_lsbFirst+0xa6>
		for (mask = 0x01; mask; mask <<= 1) {
    475e:	ea4f 0848 	mov.w	r8, r8, lsl #1
    4762:	f1b9 0901 	subs.w	r9, r9, #1
    4766:	4457      	add	r7, sl
    4768:	4456      	add	r6, sl
    476a:	fa5f f888 	uxtb.w	r8, r8
    476e:	d1c3      	bne.n	46f8 <shiftOut_lsbFirst+0x48>
	for (mask=0x01; mask; mask <<= 1) {
		digitalWrite(dataPin, value & mask);
		digitalWrite(clockPin, HIGH);
		digitalWrite(clockPin, LOW);
	}
}
    4770:	b005      	add	sp, #20
    4772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4776:	9901      	ldr	r1, [sp, #4]
    4778:	e7ed      	b.n	4756 <shiftOut_lsbFirst+0xa6>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    477a:	4922      	ldr	r1, [pc, #136]	; (4804 <shiftOut_lsbFirst+0x154>)
    477c:	f8db 2008 	ldr.w	r2, [fp, #8]
    4780:	6011      	str	r1, [r2, #0]
    4782:	9901      	ldr	r1, [sp, #4]
    4784:	e7e7      	b.n	4756 <shiftOut_lsbFirst+0xa6>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    4786:	f8db 2008 	ldr.w	r2, [fp, #8]
    478a:	491f      	ldr	r1, [pc, #124]	; (4808 <shiftOut_lsbFirst+0x158>)
    478c:	6011      	str	r1, [r2, #0]
    478e:	e7cf      	b.n	4730 <shiftOut_lsbFirst+0x80>
	p = digital_pin_to_info_PGM + pin;
    4790:	4e1b      	ldr	r6, [pc, #108]	; (4800 <shiftOut_lsbFirst+0x150>)
    4792:	2508      	movs	r5, #8
	for (mask=0x01; mask; mask <<= 1) {
    4794:	2401      	movs	r4, #1
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    4796:	f8df 806c 	ldr.w	r8, [pc, #108]	; 4804 <shiftOut_lsbFirst+0x154>
	p = digital_pin_to_info_PGM + pin;
    479a:	eb06 1601 	add.w	r6, r6, r1, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    479e:	4f1a      	ldr	r7, [pc, #104]	; (4808 <shiftOut_lsbFirst+0x158>)
    47a0:	f8dd b00c 	ldr.w	fp, [sp, #12]
    47a4:	e00b      	b.n	47be <shiftOut_lsbFirst+0x10e>
			*(p->reg + 0x21) = mask; // set register
    47a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	pinmode = *(p->reg + 1);
    47aa:	6859      	ldr	r1, [r3, #4]
	mask = p->mask;
    47ac:	68f2      	ldr	r2, [r6, #12]
	if (pinmode & mask) {
    47ae:	4211      	tst	r1, r2
    47b0:	d01b      	beq.n	47ea <shiftOut_lsbFirst+0x13a>
			*(p->reg + 0x22) = mask; // clear register
    47b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	for (mask=0x01; mask; mask <<= 1) {
    47b6:	0064      	lsls	r4, r4, #1
    47b8:	3d01      	subs	r5, #1
    47ba:	b2e4      	uxtb	r4, r4
    47bc:	d0d8      	beq.n	4770 <shiftOut_lsbFirst+0xc0>
	if (pin >= CORE_NUM_DIGITAL) return;
    47be:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
    47c2:	d804      	bhi.n	47ce <shiftOut_lsbFirst+0x11e>
    47c4:	ea0b 0104 	and.w	r1, fp, r4
    47c8:	4648      	mov	r0, r9
    47ca:	f7ff fee7 	bl	459c <digitalWrite.part.0>
    47ce:	f1ba 0f27 	cmp.w	sl, #39	; 0x27
    47d2:	d8f0      	bhi.n	47b6 <shiftOut_lsbFirst+0x106>
	pinmode = *(p->reg + 1);
    47d4:	6833      	ldr	r3, [r6, #0]
	mask = p->mask;
    47d6:	68f2      	ldr	r2, [r6, #12]
	pinmode = *(p->reg + 1);
    47d8:	6859      	ldr	r1, [r3, #4]
	if (pinmode & mask) {
    47da:	4211      	tst	r1, r2
    47dc:	d1e3      	bne.n	47a6 <shiftOut_lsbFirst+0xf6>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    47de:	68b2      	ldr	r2, [r6, #8]
    47e0:	6017      	str	r7, [r2, #0]
	pinmode = *(p->reg + 1);
    47e2:	6859      	ldr	r1, [r3, #4]
	mask = p->mask;
    47e4:	68f2      	ldr	r2, [r6, #12]
	if (pinmode & mask) {
    47e6:	4211      	tst	r1, r2
    47e8:	d1e3      	bne.n	47b2 <shiftOut_lsbFirst+0x102>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    47ea:	68b3      	ldr	r3, [r6, #8]
    47ec:	f8c3 8000 	str.w	r8, [r3]
    47f0:	e7e1      	b.n	47b6 <shiftOut_lsbFirst+0x106>
    47f2:	bf00      	nop
    47f4:	200191e4 	.word	0x200191e4
    47f8:	175d7200 	.word	0x175d7200
    47fc:	e0001000 	.word	0xe0001000
    4800:	20018c8c 	.word	0x20018c8c
    4804:	00013038 	.word	0x00013038
    4808:	0001f038 	.word	0x0001f038

0000480c <shiftOut_msbFirst>:

void shiftOut_msbFirst(uint8_t dataPin, uint8_t clockPin, uint8_t value)
{
	uint32_t v;
	asm volatile ("rbit %0, %1" : "=r" (v) : "r" (value) );
    480c:	fa92 f2a2 	rbit	r2, r2
	shiftOut_lsbFirst(dataPin, clockPin, v >> 24);
    4810:	0e12      	lsrs	r2, r2, #24
    4812:	f7ff bf4d 	b.w	46b0 <shiftOut_lsbFirst>
    4816:	bf00      	nop

00004818 <flash_wait>:
{
    4818:	b430      	push	{r4, r5}
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    481a:	4a12      	ldr	r2, [pc, #72]	; (4864 <flash_wait+0x4c>)
	FLEXSPI_LUT61 = 0;
    481c:	2000      	movs	r0, #0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    481e:	4b12      	ldr	r3, [pc, #72]	; (4868 <flash_wait+0x50>)
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    4820:	2101      	movs	r1, #1
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    4822:	4d12      	ldr	r5, [pc, #72]	; (486c <flash_wait+0x54>)
		status = *(uint8_t *)&FLEXSPI_RFDR0;
    4824:	4c12      	ldr	r4, [pc, #72]	; (4870 <flash_wait+0x58>)
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    4826:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    482a:	f8c2 02f4 	str.w	r0, [r2, #756]	; 0x2f4
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    482e:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
		FLEXSPI_IPCR0 = 0;
    4832:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    4836:	f8c2 50a4 	str.w	r5, [r2, #164]	; 0xa4
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    483a:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
    483e:	6953      	ldr	r3, [r2, #20]
    4840:	07db      	lsls	r3, r3, #31
    4842:	d5fc      	bpl.n	483e <flash_wait+0x26>
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    4844:	6151      	str	r1, [r2, #20]
	} while (status & 1);
    4846:	7823      	ldrb	r3, [r4, #0]
    4848:	07db      	lsls	r3, r3, #31
    484a:	d4f0      	bmi.n	482e <flash_wait+0x16>
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    484c:	6813      	ldr	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    484e:	4905      	ldr	r1, [pc, #20]	; (4864 <flash_wait+0x4c>)
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    4850:	f043 0301 	orr.w	r3, r3, #1
    4854:	6013      	str	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    4856:	680b      	ldr	r3, [r1, #0]
    4858:	07db      	lsls	r3, r3, #31
    485a:	d4fc      	bmi.n	4856 <flash_wait+0x3e>
	__enable_irq();
    485c:	b662      	cpsie	i
}
    485e:	bc30      	pop	{r4, r5}
    4860:	4770      	bx	lr
    4862:	bf00      	nop
    4864:	402a8000 	.word	0x402a8000
    4868:	24010405 	.word	0x24010405
    486c:	000f0001 	.word	0x000f0001
    4870:	402a8100 	.word	0x402a8100

00004874 <eeprom_initialize>:
{
    4874:	b570      	push	{r4, r5, r6, lr}
    4876:	4c0e      	ldr	r4, [pc, #56]	; (48b0 <eeprom_initialize+0x3c>)
			if (*p++ == 0xFFFF) break;
    4878:	f64f 7eff 	movw	lr, #65535	; 0xffff
{
    487c:	4e0d      	ldr	r6, [pc, #52]	; (48b4 <eeprom_initialize+0x40>)
    487e:	f104 051e 	add.w	r5, r4, #30
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    4882:	f5a6 5380 	sub.w	r3, r6, #4096	; 0x1000
		uint16_t index = 0;
    4886:	2100      	movs	r1, #0
    4888:	e002      	b.n	4890 <eeprom_initialize+0x1c>
		} while (p < end);
    488a:	42b3      	cmp	r3, r6
			index++;
    488c:	b281      	uxth	r1, r0
		} while (p < end);
    488e:	d204      	bcs.n	489a <eeprom_initialize+0x26>
			if (*p++ == 0xFFFF) break;
    4890:	881a      	ldrh	r2, [r3, #0]
			index++;
    4892:	1c48      	adds	r0, r1, #1
			if (*p++ == 0xFFFF) break;
    4894:	3302      	adds	r3, #2
    4896:	4572      	cmp	r2, lr
    4898:	d1f7      	bne.n	488a <eeprom_initialize+0x16>
		sector_index[sector] = index;
    489a:	f824 1f02 	strh.w	r1, [r4, #2]!
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    489e:	42ac      	cmp	r4, r5
    48a0:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
    48a4:	d1ed      	bne.n	4882 <eeprom_initialize+0xe>
	initialized = 1;
    48a6:	4b04      	ldr	r3, [pc, #16]	; (48b8 <eeprom_initialize+0x44>)
    48a8:	2201      	movs	r2, #1
    48aa:	701a      	strb	r2, [r3, #0]
}
    48ac:	bd70      	pop	{r4, r5, r6, pc}
    48ae:	bf00      	nop
    48b0:	2001ac1a 	.word	0x2001ac1a
    48b4:	601f1000 	.word	0x601f1000
    48b8:	2001ac7a 	.word	0x2001ac7a

000048bc <eeprom_read_byte>:
	if (addr > E2END) return 0xFF;
    48bc:	f5b0 6f87 	cmp.w	r0, #1080	; 0x438
    48c0:	d22c      	bcs.n	491c <eeprom_read_byte+0x60>
	if (!initialized) eeprom_initialize();
    48c2:	4b17      	ldr	r3, [pc, #92]	; (4920 <eeprom_read_byte+0x64>)
{
    48c4:	b510      	push	{r4, lr}
	if (!initialized) eeprom_initialize();
    48c6:	781b      	ldrb	r3, [r3, #0]
    48c8:	4604      	mov	r4, r0
    48ca:	b323      	cbz	r3, 4916 <eeprom_read_byte+0x5a>
	sector = (addr >> 2) % FLASH_SECTORS;
    48cc:	08a0      	lsrs	r0, r4, #2
    48ce:	4b15      	ldr	r3, [pc, #84]	; (4924 <eeprom_read_byte+0x68>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    48d0:	f004 0103 	and.w	r1, r4, #3
	end = p + sector_index[sector];
    48d4:	4c14      	ldr	r4, [pc, #80]	; (4928 <eeprom_read_byte+0x6c>)
	sector = (addr >> 2) % FLASH_SECTORS;
    48d6:	fba3 2300 	umull	r2, r3, r3, r0
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    48da:	4a14      	ldr	r2, [pc, #80]	; (492c <eeprom_read_byte+0x70>)
	sector = (addr >> 2) % FLASH_SECTORS;
    48dc:	08db      	lsrs	r3, r3, #3
    48de:	ebc3 1e03 	rsb	lr, r3, r3, lsl #4
    48e2:	469c      	mov	ip, r3
    48e4:	eba0 030e 	sub.w	r3, r0, lr
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    48e8:	ea41 018c 	orr.w	r1, r1, ip, lsl #2
	uint8_t data=0xFF;
    48ec:	20ff      	movs	r0, #255	; 0xff
	end = p + sector_index[sector];
    48ee:	f834 c013 	ldrh.w	ip, [r4, r3, lsl #1]
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    48f2:	441a      	add	r2, r3
	end = p + sector_index[sector];
    48f4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    48f8:	0313      	lsls	r3, r2, #12
	end = p + sector_index[sector];
    48fa:	eb0c 3c02 	add.w	ip, ip, r2, lsl #12
	while (p < end) {
    48fe:	ebbc 3f02 	cmp.w	ip, r2, lsl #12
    4902:	d907      	bls.n	4914 <eeprom_read_byte+0x58>
		uint32_t val = *p++;
    4904:	881a      	ldrh	r2, [r3, #0]
    4906:	3302      	adds	r3, #2
		if ((val & 255) == offset) data = val >> 8;
    4908:	b2d4      	uxtb	r4, r2
    490a:	428c      	cmp	r4, r1
    490c:	bf08      	it	eq
    490e:	0a10      	lsreq	r0, r2, #8
	while (p < end) {
    4910:	459c      	cmp	ip, r3
    4912:	d8f7      	bhi.n	4904 <eeprom_read_byte+0x48>
}
    4914:	bd10      	pop	{r4, pc}
	if (!initialized) eeprom_initialize();
    4916:	f7ff ffad 	bl	4874 <eeprom_initialize>
    491a:	e7d7      	b.n	48cc <eeprom_read_byte+0x10>
	if (addr > E2END) return 0xFF;
    491c:	20ff      	movs	r0, #255	; 0xff
}
    491e:	4770      	bx	lr
    4920:	2001ac7a 	.word	0x2001ac7a
    4924:	88888889 	.word	0x88888889
    4928:	2001ac1c 	.word	0x2001ac1c
    492c:	000601f0 	.word	0x000601f0

00004930 <eepromemu_flash_write>:
{
    4930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4932:	460f      	mov	r7, r1
    4934:	4616      	mov	r6, r2
	__disable_irq();
    4936:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    4938:	4b34      	ldr	r3, [pc, #208]	; (4a0c <eepromemu_flash_write+0xdc>)
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    493a:	f240 4106 	movw	r1, #1030	; 0x406
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    493e:	4a34      	ldr	r2, [pc, #208]	; (4a10 <eepromemu_flash_write+0xe0>)
    4940:	619a      	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    4942:	2202      	movs	r2, #2
    4944:	61da      	str	r2, [r3, #28]
	FLEXSPI_IPCR0 = 0;
    4946:	2200      	movs	r2, #0
    4948:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    494c:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    4950:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    4954:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    4958:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    495c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    4960:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    4964:	2201      	movs	r2, #1
    4966:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    496a:	f020 031f 	bic.w	r3, r0, #31
	uint32_t end_addr = (uint32_t)addr + size;
    496e:	1982      	adds	r2, r0, r6
	asm volatile("": : :"memory");
	asm("dsb");
    4970:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    4974:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    4978:	f8c4 3f5c 	str.w	r3, [r4, #3932]	; 0xf5c
		location += 32;
    497c:	3320      	adds	r3, #32
	} while (location < end_addr);
    497e:	429a      	cmp	r2, r3
    4980:	d8fa      	bhi.n	4978 <eepromemu_flash_write+0x48>
	asm("dsb");
    4982:	f3bf 8f4f 	dsb	sy
	asm("isb");
    4986:	f3bf 8f6f 	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    498a:	4d20      	ldr	r5, [pc, #128]	; (4a0c <eepromemu_flash_write+0xdc>)
    498c:	696b      	ldr	r3, [r5, #20]
    498e:	07da      	lsls	r2, r3, #31
    4990:	d5fc      	bpl.n	498c <eepromemu_flash_write+0x5c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    4992:	2301      	movs	r3, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    4994:	491f      	ldr	r1, [pc, #124]	; (4a14 <eepromemu_flash_write+0xe4>)
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    4996:	b2b2      	uxth	r2, r6
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    4998:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    499c:	616b      	str	r3, [r5, #20]
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    499e:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    49a2:	f8c5 12f0 	str.w	r1, [r5, #752]	; 0x2f0
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    49a6:	f242 2101 	movw	r1, #8705	; 0x2201
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    49aa:	4c18      	ldr	r4, [pc, #96]	; (4a0c <eepromemu_flash_write+0xdc>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    49ac:	f8c5 12f4 	str.w	r1, [r5, #756]	; 0x2f4
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
    49b0:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    49b4:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    49b8:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    49bc:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    49c0:	4d15      	ldr	r5, [pc, #84]	; (4a18 <eepromemu_flash_write+0xe8>)
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    49c2:	e001      	b.n	49c8 <eepromemu_flash_write+0x98>
		if (n & FLEXSPI_INTR_IPTXWE) {
    49c4:	065b      	lsls	r3, r3, #25
    49c6:	d409      	bmi.n	49dc <eepromemu_flash_write+0xac>
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    49c8:	6963      	ldr	r3, [r4, #20]
    49ca:	f013 0001 	ands.w	r0, r3, #1
    49ce:	d0f9      	beq.n	49c4 <eepromemu_flash_write+0x94>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
    49d0:	2341      	movs	r3, #65	; 0x41
    49d2:	6163      	str	r3, [r4, #20]
}
    49d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	flash_wait();
    49d8:	f7ff bf1e 	b.w	4818 <flash_wait>
			if (wrlen > 8) wrlen = 8;
    49dc:	2e08      	cmp	r6, #8
    49de:	d80a      	bhi.n	49f6 <eepromemu_flash_write+0xc6>
			if (wrlen > 0) {
    49e0:	b136      	cbz	r6, 49f0 <eepromemu_flash_write+0xc0>
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    49e2:	4632      	mov	r2, r6
    49e4:	4639      	mov	r1, r7
				src += wrlen;
    49e6:	4437      	add	r7, r6
				len -= wrlen;
    49e8:	4606      	mov	r6, r0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    49ea:	4628      	mov	r0, r5
    49ec:	f000 f910 	bl	4c10 <memcpy>
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
    49f0:	2340      	movs	r3, #64	; 0x40
    49f2:	6163      	str	r3, [r4, #20]
    49f4:	e7e8      	b.n	49c8 <eepromemu_flash_write+0x98>
    49f6:	f1a6 0008 	sub.w	r0, r6, #8
			if (wrlen > 8) wrlen = 8;
    49fa:	2608      	movs	r6, #8
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    49fc:	4639      	mov	r1, r7
    49fe:	4632      	mov	r2, r6
				src += wrlen;
    4a00:	4437      	add	r7, r6
				len -= wrlen;
    4a02:	4606      	mov	r6, r0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    4a04:	4628      	mov	r0, r5
    4a06:	f000 f903 	bl	4c10 <memcpy>
				len -= wrlen;
    4a0a:	e7f1      	b.n	49f0 <eepromemu_flash_write+0xc0>
    4a0c:	402a8000 	.word	0x402a8000
    4a10:	5af05af0 	.word	0x5af05af0
    4a14:	08180432 	.word	0x08180432
    4a18:	402a8180 	.word	0x402a8180

00004a1c <eepromemu_flash_erase_sector>:
{
    4a1c:	b410      	push	{r4}
	__disable_irq();
    4a1e:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    4a20:	4b28      	ldr	r3, [pc, #160]	; (4ac4 <eepromemu_flash_erase_sector+0xa8>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    4a22:	2102      	movs	r1, #2
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    4a24:	4c28      	ldr	r4, [pc, #160]	; (4ac8 <eepromemu_flash_erase_sector+0xac>)
	FLEXSPI_LUT61 = 0;
    4a26:	2200      	movs	r2, #0
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    4a28:	619c      	str	r4, [r3, #24]
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    4a2a:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    4a2e:	61d9      	str	r1, [r3, #28]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    4a30:	f240 4106 	movw	r1, #1030	; 0x406
    4a34:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    4a38:	2101      	movs	r1, #1
	FLEXSPI_LUT61 = 0;
    4a3a:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    4a3e:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    4a42:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR0 = 0;
    4a46:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    4a4a:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    4a4e:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    4a52:	4002      	ands	r2, r0
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    4a54:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
	asm("dsb");
    4a58:	f3bf 8f4f 	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
    4a5c:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
    4a60:	f102 0320 	add.w	r3, r2, #32
		SCB_CACHE_DCIMVAC = location;
    4a64:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    4a68:	4299      	cmp	r1, r3
    4a6a:	bf34      	ite	cc
    4a6c:	2101      	movcc	r1, #1
    4a6e:	2180      	movcs	r1, #128	; 0x80
    4a70:	eb02 1141 	add.w	r1, r2, r1, lsl #5
	} while (location < end_addr);
    4a74:	428b      	cmp	r3, r1
		SCB_CACHE_DCIMVAC = location;
    4a76:	f8cc 2f5c 	str.w	r2, [ip, #3932]	; 0xf5c
		location += 32;
    4a7a:	461a      	mov	r2, r3
	} while (location < end_addr);
    4a7c:	f103 0320 	add.w	r3, r3, #32
    4a80:	d1f8      	bne.n	4a74 <eepromemu_flash_erase_sector+0x58>
	asm("dsb");
    4a82:	f3bf 8f4f 	dsb	sy
	asm("isb");
    4a86:	f3bf 8f6f 	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    4a8a:	4a0e      	ldr	r2, [pc, #56]	; (4ac4 <eepromemu_flash_erase_sector+0xa8>)
    4a8c:	6953      	ldr	r3, [r2, #20]
    4a8e:	07d9      	lsls	r1, r3, #31
    4a90:	d5fc      	bpl.n	4a8c <eepromemu_flash_erase_sector+0x70>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    4a92:	2401      	movs	r4, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    4a94:	490d      	ldr	r1, [pc, #52]	; (4acc <eepromemu_flash_erase_sector+0xb0>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    4a96:	4b0e      	ldr	r3, [pc, #56]	; (4ad0 <eepromemu_flash_erase_sector+0xb4>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    4a98:	6154      	str	r4, [r2, #20]
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    4a9a:	4003      	ands	r3, r0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    4a9c:	f8c2 12f0 	str.w	r1, [r2, #752]	; 0x2f0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    4aa0:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    4aa4:	4907      	ldr	r1, [pc, #28]	; (4ac4 <eepromemu_flash_erase_sector+0xa8>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    4aa6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    4aaa:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    4aae:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    4ab2:	694b      	ldr	r3, [r1, #20]
    4ab4:	07db      	lsls	r3, r3, #31
    4ab6:	d5fc      	bpl.n	4ab2 <eepromemu_flash_erase_sector+0x96>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    4ab8:	2301      	movs	r3, #1
}
    4aba:	f85d 4b04 	ldr.w	r4, [sp], #4
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    4abe:	614b      	str	r3, [r1, #20]
	flash_wait();
    4ac0:	f7ff beaa 	b.w	4818 <flash_wait>
    4ac4:	402a8000 	.word	0x402a8000
    4ac8:	5af05af0 	.word	0x5af05af0
    4acc:	08180420 	.word	0x08180420
    4ad0:	00fff000 	.word	0x00fff000

00004ad4 <eeprom_write_byte>:
	if (addr > E2END) return;
    4ad4:	f5b0 6f87 	cmp.w	r0, #1080	; 0x438
    4ad8:	f080 8086 	bcs.w	4be8 <eeprom_write_byte+0x114>
	if (!initialized) eeprom_initialize();
    4adc:	4b44      	ldr	r3, [pc, #272]	; (4bf0 <eeprom_write_byte+0x11c>)
{
    4ade:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!initialized) eeprom_initialize();
    4ae2:	781b      	ldrb	r3, [r3, #0]
{
    4ae4:	b0c2      	sub	sp, #264	; 0x108
    4ae6:	4605      	mov	r5, r0
    4ae8:	4689      	mov	r9, r1
	if (!initialized) eeprom_initialize();
    4aea:	2b00      	cmp	r3, #0
    4aec:	d079      	beq.n	4be2 <eeprom_write_byte+0x10e>
	sector = (addr >> 2) % FLASH_SECTORS; 
    4aee:	08ab      	lsrs	r3, r5, #2
    4af0:	4e40      	ldr	r6, [pc, #256]	; (4bf4 <eeprom_write_byte+0x120>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    4af2:	f005 0503 	and.w	r5, r5, #3
	end = p + sector_index[sector];
    4af6:	4f40      	ldr	r7, [pc, #256]	; (4bf8 <eeprom_write_byte+0x124>)
	sector = (addr >> 2) % FLASH_SECTORS; 
    4af8:	fba6 2603 	umull	r2, r6, r6, r3
    4afc:	08f6      	lsrs	r6, r6, #3
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    4afe:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
	sector = (addr >> 2) % FLASH_SECTORS; 
    4b02:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    4b06:	1b9e      	subs	r6, r3, r6
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    4b08:	4b3c      	ldr	r3, [pc, #240]	; (4bfc <eeprom_write_byte+0x128>)
	end = p + sector_index[sector];
    4b0a:	f837 4016 	ldrh.w	r4, [r7, r6, lsl #1]
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    4b0e:	4433      	add	r3, r6
	end = p + sector_index[sector];
    4b10:	0060      	lsls	r0, r4, #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    4b12:	ea4f 3803 	mov.w	r8, r3, lsl #12
	end = p + sector_index[sector];
    4b16:	eb00 3003 	add.w	r0, r0, r3, lsl #12
	while (p < end) {
    4b1a:	ebb0 3f03 	cmp.w	r0, r3, lsl #12
    4b1e:	d964      	bls.n	4bea <eeprom_write_byte+0x116>
    4b20:	4643      	mov	r3, r8
	uint8_t olddata=0xFF;
    4b22:	f04f 0cff 	mov.w	ip, #255	; 0xff
		uint16_t val = *p++;
    4b26:	881a      	ldrh	r2, [r3, #0]
    4b28:	3302      	adds	r3, #2
		if ((val & 255) == offset) olddata = val >> 8;
    4b2a:	b2d1      	uxtb	r1, r2
    4b2c:	42a9      	cmp	r1, r5
    4b2e:	bf08      	it	eq
    4b30:	ea4f 2c12 	moveq.w	ip, r2, lsr #8
	while (p < end) {
    4b34:	4298      	cmp	r0, r3
    4b36:	d8f6      	bhi.n	4b26 <eeprom_write_byte+0x52>
	if (data == olddata) return;
    4b38:	45e1      	cmp	r9, ip
    4b3a:	d041      	beq.n	4bc0 <eeprom_write_byte+0xec>
	if (sector_index[sector] < 2048) {
    4b3c:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
    4b40:	d341      	bcc.n	4bc6 <eeprom_write_byte+0xf2>
		memset(buf, 0xFF, sizeof(buf));
    4b42:	ac02      	add	r4, sp, #8
    4b44:	f44f 7280 	mov.w	r2, #256	; 0x100
    4b48:	21ff      	movs	r1, #255	; 0xff
    4b4a:	4620      	mov	r0, r4
    4b4c:	f002 fc78 	bl	7440 <memset>
		while (p < end) {
    4b50:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
    4b54:	f108 0302 	add.w	r3, r8, #2
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    4b58:	4642      	mov	r2, r8
    4b5a:	4298      	cmp	r0, r3
    4b5c:	bf34      	ite	cc
    4b5e:	2001      	movcc	r0, #1
    4b60:	f44f 6000 	movcs.w	r0, #2048	; 0x800
    4b64:	eb08 0040 	add.w	r0, r8, r0, lsl #1
			uint16_t val = *p++;
    4b68:	4613      	mov	r3, r2
    4b6a:	3202      	adds	r2, #2
    4b6c:	881b      	ldrh	r3, [r3, #0]
		while (p < end) {
    4b6e:	4282      	cmp	r2, r0
			buf[val & 255] = val >> 8;
    4b70:	b2d9      	uxtb	r1, r3
    4b72:	ea4f 2313 	mov.w	r3, r3, lsr #8
    4b76:	5463      	strb	r3, [r4, r1]
		while (p < end) {
    4b78:	d1f6      	bne.n	4b68 <eeprom_write_byte+0x94>
		buf[offset] = data;
    4b7a:	f804 9005 	strb.w	r9, [r4, r5]
		eepromemu_flash_erase_sector(p);
    4b7e:	f10d 0907 	add.w	r9, sp, #7
    4b82:	f20d 1a07 	addw	sl, sp, #263	; 0x107
		index = 0;
    4b86:	2500      	movs	r5, #0
		eepromemu_flash_erase_sector(p);
    4b88:	464c      	mov	r4, r9
    4b8a:	4640      	mov	r0, r8
    4b8c:	f7ff ff46 	bl	4a1c <eepromemu_flash_erase_sector>
			if (buf[i] != 0xFF) {
    4b90:	f814 cf01 	ldrb.w	ip, [r4, #1]!
				eepromemu_flash_write(p + index, &newval, 2);
    4b94:	eb08 0045 	add.w	r0, r8, r5, lsl #1
    4b98:	2202      	movs	r2, #2
    4b9a:	f10d 0106 	add.w	r1, sp, #6
				uint16_t newval = i | (buf[i] << 8);
    4b9e:	1e63      	subs	r3, r4, #1
			if (buf[i] != 0xFF) {
    4ba0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
				uint16_t newval = i | (buf[i] << 8);
    4ba4:	eba3 0309 	sub.w	r3, r3, r9
			if (buf[i] != 0xFF) {
    4ba8:	d006      	beq.n	4bb8 <eeprom_write_byte+0xe4>
				uint16_t newval = i | (buf[i] << 8);
    4baa:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
				index = index + 1;
    4bae:	3501      	adds	r5, #1
				uint16_t newval = i | (buf[i] << 8);
    4bb0:	f8ad 3006 	strh.w	r3, [sp, #6]
				eepromemu_flash_write(p + index, &newval, 2);
    4bb4:	f7ff febc 	bl	4930 <eepromemu_flash_write>
		for (i=0; i < 256; i++) {
    4bb8:	45a2      	cmp	sl, r4
    4bba:	d1e9      	bne.n	4b90 <eeprom_write_byte+0xbc>
		sector_index[sector] = index;
    4bbc:	f827 5016 	strh.w	r5, [r7, r6, lsl #1]
}
    4bc0:	b042      	add	sp, #264	; 0x108
    4bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint16_t newdata = offset | (data << 8);
    4bc6:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
		eepromemu_flash_write(end, &newdata, 2);
    4bca:	a902      	add	r1, sp, #8
    4bcc:	2202      	movs	r2, #2
		sector_index[sector] = sector_index[sector] + 1;
    4bce:	3401      	adds	r4, #1
		uint16_t newdata = offset | (data << 8);
    4bd0:	f8ad 5008 	strh.w	r5, [sp, #8]
		eepromemu_flash_write(end, &newdata, 2);
    4bd4:	f7ff feac 	bl	4930 <eepromemu_flash_write>
		sector_index[sector] = sector_index[sector] + 1;
    4bd8:	f827 4016 	strh.w	r4, [r7, r6, lsl #1]
}
    4bdc:	b042      	add	sp, #264	; 0x108
    4bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!initialized) eeprom_initialize();
    4be2:	f7ff fe47 	bl	4874 <eeprom_initialize>
    4be6:	e782      	b.n	4aee <eeprom_write_byte+0x1a>
    4be8:	4770      	bx	lr
	uint8_t olddata=0xFF;
    4bea:	f04f 0cff 	mov.w	ip, #255	; 0xff
    4bee:	e7a3      	b.n	4b38 <eeprom_write_byte+0x64>
    4bf0:	2001ac7a 	.word	0x2001ac7a
    4bf4:	88888889 	.word	0x88888889
    4bf8:	2001ac1c 	.word	0x2001ac1c
    4bfc:	000601f0 	.word	0x000601f0

00004c00 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    4c00:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    4c02:	f7fd fd53 	bl	26ac <setup>
	while (1) {
		loop();
    4c06:	f7fd f947 	bl	1e98 <loop>
		yield();
    4c0a:	f001 fbd1 	bl	63b0 <yield>
	while (1) {
    4c0e:	e7fa      	b.n	4c06 <main+0x6>

00004c10 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    4c10:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    4c12:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    4c16:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    4c1a:	d16d      	bne.n	4cf8 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    4c1c:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    4c1e:	d341      	bcc.n	4ca4 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    4c20:	f851 3b04 	ldr.w	r3, [r1], #4
    4c24:	f840 3b04 	str.w	r3, [r0], #4
    4c28:	f851 3b04 	ldr.w	r3, [r1], #4
    4c2c:	f840 3b04 	str.w	r3, [r0], #4
    4c30:	f851 3b04 	ldr.w	r3, [r1], #4
    4c34:	f840 3b04 	str.w	r3, [r0], #4
    4c38:	f851 3b04 	ldr.w	r3, [r1], #4
    4c3c:	f840 3b04 	str.w	r3, [r0], #4
    4c40:	f851 3b04 	ldr.w	r3, [r1], #4
    4c44:	f840 3b04 	str.w	r3, [r0], #4
    4c48:	f851 3b04 	ldr.w	r3, [r1], #4
    4c4c:	f840 3b04 	str.w	r3, [r0], #4
    4c50:	f851 3b04 	ldr.w	r3, [r1], #4
    4c54:	f840 3b04 	str.w	r3, [r0], #4
    4c58:	f851 3b04 	ldr.w	r3, [r1], #4
    4c5c:	f840 3b04 	str.w	r3, [r0], #4
    4c60:	f851 3b04 	ldr.w	r3, [r1], #4
    4c64:	f840 3b04 	str.w	r3, [r0], #4
    4c68:	f851 3b04 	ldr.w	r3, [r1], #4
    4c6c:	f840 3b04 	str.w	r3, [r0], #4
    4c70:	f851 3b04 	ldr.w	r3, [r1], #4
    4c74:	f840 3b04 	str.w	r3, [r0], #4
    4c78:	f851 3b04 	ldr.w	r3, [r1], #4
    4c7c:	f840 3b04 	str.w	r3, [r0], #4
    4c80:	f851 3b04 	ldr.w	r3, [r1], #4
    4c84:	f840 3b04 	str.w	r3, [r0], #4
    4c88:	f851 3b04 	ldr.w	r3, [r1], #4
    4c8c:	f840 3b04 	str.w	r3, [r0], #4
    4c90:	f851 3b04 	ldr.w	r3, [r1], #4
    4c94:	f840 3b04 	str.w	r3, [r0], #4
    4c98:	f851 3b04 	ldr.w	r3, [r1], #4
    4c9c:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    4ca0:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    4ca2:	d2bd      	bcs.n	4c20 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    4ca4:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    4ca6:	d311      	bcc.n	4ccc <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    4ca8:	f851 3b04 	ldr.w	r3, [r1], #4
    4cac:	f840 3b04 	str.w	r3, [r0], #4
    4cb0:	f851 3b04 	ldr.w	r3, [r1], #4
    4cb4:	f840 3b04 	str.w	r3, [r0], #4
    4cb8:	f851 3b04 	ldr.w	r3, [r1], #4
    4cbc:	f840 3b04 	str.w	r3, [r0], #4
    4cc0:	f851 3b04 	ldr.w	r3, [r1], #4
    4cc4:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    4cc8:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    4cca:	d2ed      	bcs.n	4ca8 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    4ccc:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    4cce:	d305      	bcc.n	4cdc <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    4cd0:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    4cd4:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    4cd8:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    4cda:	d2f9      	bcs.n	4cd0 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    4cdc:	3204      	adds	r2, #4
	beq	.Ldone
    4cde:	d008      	beq.n	4cf2 <memcpy+0xe2>

	lsls	r2, r2, #31
    4ce0:	07d2      	lsls	r2, r2, #31
	itt ne
    4ce2:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    4ce4:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    4ce8:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    4cec:	d301      	bcc.n	4cf2 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    4cee:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    4cf0:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    4cf2:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    4cf4:	4770      	bx	lr
    4cf6:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    4cf8:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    4cfa:	d313      	bcc.n	4d24 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    4cfc:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    4cfe:	d08d      	beq.n	4c1c <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    4d00:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    4d04:	d08a      	beq.n	4c1c <memcpy+0xc>

	rsb	r3, #4
    4d06:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    4d0a:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    4d0c:	07db      	lsls	r3, r3, #31
	itt ne
    4d0e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    4d10:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    4d14:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    4d18:	d380      	bcc.n	4c1c <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    4d1a:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    4d1e:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    4d22:	e77b      	b.n	4c1c <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    4d24:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    4d26:	d3d9      	bcc.n	4cdc <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    4d28:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    4d2a:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    4d2e:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    4d32:	d2f9      	bcs.n	4d28 <memcpy+0x118>

	ldrb	r3, [r1]
    4d34:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    4d36:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    4d38:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    4d3a:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    4d3c:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    4d3e:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    4d40:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    4d42:	4770      	bx	lr

00004d44 <operator new(unsigned int)>:

#include <stdlib.h>

void * operator new(size_t size)
{
	return malloc(size);
    4d44:	f001 bd30 	b.w	67a8 <malloc>

00004d48 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    4d48:	f001 bd36 	b.w	67b8 <free>

00004d4c <ultoa>:
	int i=0, j;
    4d4c:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
{
    4d50:	b570      	push	{r4, r5, r6, lr}
		digit = val % radix;
    4d52:	4666      	mov	r6, ip
	int i=0, j;
    4d54:	2400      	movs	r4, #0
    4d56:	e000      	b.n	4d5a <ultoa+0xe>
		i++;
    4d58:	3401      	adds	r4, #1
		digit = val % radix;
    4d5a:	fbb0 f5f2 	udiv	r5, r0, r2
    4d5e:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    4d62:	2b09      	cmp	r3, #9
    4d64:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    4d68:	f103 0330 	add.w	r3, r3, #48	; 0x30
    4d6c:	fa5f fe8e 	uxtb.w	lr, lr
    4d70:	bf98      	it	ls
    4d72:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    4d76:	4290      	cmp	r0, r2
		val /= radix;
    4d78:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    4d7a:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    4d7e:	d2eb      	bcs.n	4d58 <ultoa+0xc>
	buf[i + 1] = 0;
    4d80:	1c63      	adds	r3, r4, #1
    4d82:	2200      	movs	r2, #0
    4d84:	18c8      	adds	r0, r1, r3
    4d86:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    4d88:	b17c      	cbz	r4, 4daa <ultoa+0x5e>
		t = buf[j];
    4d8a:	4662      	mov	r2, ip
    4d8c:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    4d90:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    4d94:	eba1 030c 	sub.w	r3, r1, ip
    4d98:	3202      	adds	r2, #2
		buf[j] = buf[i];
    4d9a:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    4d9e:	3b01      	subs	r3, #1
    4da0:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    4da2:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    4da4:	4423      	add	r3, r4
    4da6:	429a      	cmp	r2, r3
    4da8:	dbef      	blt.n	4d8a <ultoa+0x3e>
}
    4daa:	4608      	mov	r0, r1
    4dac:	bd70      	pop	{r4, r5, r6, pc}
    4dae:	bf00      	nop

00004db0 <flexpwmWrite>:
	uint16_t mask = 1 << submodule;
    4db0:	f04f 0c01 	mov.w	ip, #1
    4db4:	fa0c fc01 	lsl.w	ip, ip, r1
	uint32_t modulo = p->SM[submodule].VAL1;
    4db8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    4dbc:	eb00 1141 	add.w	r1, r0, r1, lsl #5
{
    4dc0:	b570      	push	{r4, r5, r6, lr}
	uint32_t modulo = p->SM[submodule].VAL1;
    4dc2:	f8b1 e00e 	ldrh.w	lr, [r1, #14]
	uint16_t mask = 1 << submodule;
    4dc6:	fa1f f58c 	uxth.w	r5, ip
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
    4dca:	4c25      	ldr	r4, [pc, #148]	; (4e60 <flexpwmWrite+0xb0>)
	uint32_t modulo = p->SM[submodule].VAL1;
    4dcc:	fa1f fe8e 	uxth.w	lr, lr
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
    4dd0:	7824      	ldrb	r4, [r4, #0]
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    4dd2:	012e      	lsls	r6, r5, #4
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
    4dd4:	fb0e 3303 	mla	r3, lr, r3, r3
    4dd8:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
    4ddc:	40e3      	lsrs	r3, r4
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    4dde:	f8b0 4188 	ldrh.w	r4, [r0, #392]	; 0x188
    4de2:	4573      	cmp	r3, lr
    4de4:	b2a4      	uxth	r4, r4
    4de6:	bf28      	it	cs
    4de8:	4673      	movcs	r3, lr
    4dea:	4334      	orrs	r4, r6
	switch (channel) {
    4dec:	2a01      	cmp	r2, #1
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    4dee:	f8a0 4188 	strh.w	r4, [r0, #392]	; 0x188
	switch (channel) {
    4df2:	d00d      	beq.n	4e10 <flexpwmWrite+0x60>
    4df4:	2a02      	cmp	r2, #2
    4df6:	d028      	beq.n	4e4a <flexpwmWrite+0x9a>
    4df8:	b1c2      	cbz	r2, 4e2c <flexpwmWrite+0x7c>
    4dfa:	f00c 020f 	and.w	r2, ip, #15
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
    4dfe:	f8b0 c188 	ldrh.w	ip, [r0, #392]	; 0x188
    4e02:	fa1f fc8c 	uxth.w	ip, ip
    4e06:	ea4c 0c02 	orr.w	ip, ip, r2
    4e0a:	f8a0 c188 	strh.w	ip, [r0, #392]	; 0x188
}
    4e0e:	bd70      	pop	{r4, r5, r6, pc}
		p->SM[submodule].VAL3 = cval;
    4e10:	b29b      	uxth	r3, r3
    4e12:	f00c 020f 	and.w	r2, ip, #15
		p->OUTEN |= FLEXPWM_OUTEN_PWMA_EN(mask);
    4e16:	022d      	lsls	r5, r5, #8
		p->SM[submodule].VAL3 = cval;
    4e18:	82cb      	strh	r3, [r1, #22]
		p->OUTEN |= FLEXPWM_OUTEN_PWMA_EN(mask);
    4e1a:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
    4e1e:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
    4e22:	b29b      	uxth	r3, r3
    4e24:	432b      	orrs	r3, r5
    4e26:	f8a0 3180 	strh.w	r3, [r0, #384]	; 0x180
		break;
    4e2a:	e7e8      	b.n	4dfe <flexpwmWrite+0x4e>
		p->SM[submodule].VAL0 = modulo - cval;
    4e2c:	ebae 0e03 	sub.w	lr, lr, r3
    4e30:	f00c 020f 	and.w	r2, ip, #15
    4e34:	fa1f fe8e 	uxth.w	lr, lr
    4e38:	f8a1 e00a 	strh.w	lr, [r1, #10]
		p->OUTEN |= FLEXPWM_OUTEN_PWMX_EN(mask);
    4e3c:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
    4e40:	b29b      	uxth	r3, r3
    4e42:	4313      	orrs	r3, r2
    4e44:	f8a0 3180 	strh.w	r3, [r0, #384]	; 0x180
		break;
    4e48:	e7d9      	b.n	4dfe <flexpwmWrite+0x4e>
		p->SM[submodule].VAL5 = cval;
    4e4a:	b29b      	uxth	r3, r3
    4e4c:	f00c 020f 	and.w	r2, ip, #15
    4e50:	83cb      	strh	r3, [r1, #30]
		p->OUTEN |= FLEXPWM_OUTEN_PWMB_EN(mask);
    4e52:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
    4e56:	b29b      	uxth	r3, r3
    4e58:	431e      	orrs	r6, r3
    4e5a:	f8a0 6180 	strh.w	r6, [r0, #384]	; 0x180
    4e5e:	e7ce      	b.n	4dfe <flexpwmWrite+0x4e>
    4e60:	20019f7c 	.word	0x20019f7c

00004e64 <analogWrite>:

void analogWrite(uint8_t pin, int val)
{
	const struct pwm_pin_info_struct *info;

	if (pin >= CORE_NUM_DIGITAL) return;
    4e64:	2827      	cmp	r0, #39	; 0x27
    4e66:	d84b      	bhi.n	4f00 <analogWrite+0x9c>
{
    4e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//printf("analogWrite, pin %d, val %d\n", pin, val);
	info = pwm_pin_info + pin;
    4e6a:	4d2a      	ldr	r5, [pc, #168]	; (4f14 <analogWrite+0xb0>)
    4e6c:	4604      	mov	r4, r0
	if (info->type == 1) {
    4e6e:	f815 2020 	ldrb.w	r2, [r5, r0, lsl #2]
	info = pwm_pin_info + pin;
    4e72:	eb05 0580 	add.w	r5, r5, r0, lsl #2
	if (info->type == 1) {
    4e76:	2a01      	cmp	r2, #1
    4e78:	d02d      	beq.n	4ed6 <analogWrite+0x72>
		  case 1: flexpwm = &IMXRT_FLEXPWM2; break;
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
		  default: flexpwm = &IMXRT_FLEXPWM4;
		}
		flexpwmWrite(flexpwm, info->module & 0x03, info->channel, val);
	} else if (info->type == 2) {
    4e7a:	2a02      	cmp	r2, #2
    4e7c:	d13f      	bne.n	4efe <analogWrite+0x9a>
		// QuadTimer pin
		IMXRT_TMR_t *qtimer;
		switch ((info->module >> 4) & 3) {
    4e7e:	786b      	ldrb	r3, [r5, #1]
    4e80:	f3c3 1001 	ubfx	r0, r3, #4, #2
    4e84:	2803      	cmp	r0, #3
    4e86:	d03e      	beq.n	4f06 <analogWrite+0xa2>
    4e88:	4a23      	ldr	r2, [pc, #140]	; (4f18 <analogWrite+0xb4>)
    4e8a:	eb02 3280 	add.w	r2, r2, r0, lsl #14
		  case 0: qtimer = &IMXRT_TMR1; break;
		  case 1: qtimer = &IMXRT_TMR2; break;
		  case 2: qtimer = &IMXRT_TMR3; break;
		  default: qtimer = &IMXRT_TMR4;
		}
		quadtimerWrite(qtimer, info->module & 0x03, val);
    4e8e:	f003 0c03 	and.w	ip, r3, #3
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
    4e92:	4822      	ldr	r0, [pc, #136]	; (4f1c <analogWrite+0xb8>)
    4e94:	b289      	uxth	r1, r1
    4e96:	4663      	mov	r3, ip
	uint32_t modulo = 65537 - p->CH[submodule].LOAD + p->CH[submodule].CMPLD1;
    4e98:	eb02 1c4c 	add.w	ip, r2, ip, lsl #5
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
    4e9c:	7806      	ldrb	r6, [r0, #0]
	uint32_t modulo = 65537 - p->CH[submodule].LOAD + p->CH[submodule].CMPLD1;
    4e9e:	f8bc e006 	ldrh.w	lr, [ip, #6]
    4ea2:	0158      	lsls	r0, r3, #5
    4ea4:	f8bc 3010 	ldrh.w	r3, [ip, #16]
    4ea8:	fa1f fe8e 	uxth.w	lr, lr
    4eac:	f1ce 1e01 	rsb	lr, lr, #65537	; 0x10001
    4eb0:	fa1e f383 	uxtah	r3, lr, r3
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
    4eb4:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
    4eb8:	fb0e f101 	mul.w	r1, lr, r1
    4ebc:	40f1      	lsrs	r1, r6
	if (high >= modulo - 1) high = modulo - 2;
    4ebe:	458e      	cmp	lr, r1
    4ec0:	d923      	bls.n	4f0a <analogWrite+0xa6>
	uint32_t low = modulo - high; // low must 2 or higher
    4ec2:	1a5b      	subs	r3, r3, r1
	p->CH[submodule].LOAD = 65537 - low;
    4ec4:	f1c3 0301 	rsb	r3, r3, #1
    4ec8:	b29b      	uxth	r3, r3
	p->CH[submodule].CMPLD1 = high;
    4eca:	b289      	uxth	r1, r1
    4ecc:	4402      	add	r2, r0
	p->CH[submodule].LOAD = 65537 - low;
    4ece:	f8ac 3006 	strh.w	r3, [ip, #6]
	p->CH[submodule].CMPLD1 = high;
    4ed2:	8211      	strh	r1, [r2, #16]
}
    4ed4:	e00d      	b.n	4ef2 <analogWrite+0x8e>
		switch ((info->module >> 4) & 3) {
    4ed6:	786a      	ldrb	r2, [r5, #1]
    4ed8:	f3c2 1301 	ubfx	r3, r2, #4, #2
    4edc:	2b03      	cmp	r3, #3
    4ede:	d010      	beq.n	4f02 <analogWrite+0x9e>
    4ee0:	480f      	ldr	r0, [pc, #60]	; (4f20 <analogWrite+0xbc>)
    4ee2:	eb00 3083 	add.w	r0, r0, r3, lsl #14
		flexpwmWrite(flexpwm, info->module & 0x03, info->channel, val);
    4ee6:	b28b      	uxth	r3, r1
    4ee8:	f002 0103 	and.w	r1, r2, #3
    4eec:	78aa      	ldrb	r2, [r5, #2]
    4eee:	f7ff ff5f 	bl	4db0 <flexpwmWrite>
	} else {
		return;
	}
	*(portConfigRegister(pin)) = info->muxval;
    4ef2:	4b0c      	ldr	r3, [pc, #48]	; (4f24 <analogWrite+0xc0>)
    4ef4:	78ea      	ldrb	r2, [r5, #3]
    4ef6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    4efa:	685b      	ldr	r3, [r3, #4]
    4efc:	601a      	str	r2, [r3, #0]
	// TODO: pad config register
}
    4efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f00:	4770      	bx	lr
		switch ((info->module >> 4) & 3) {
    4f02:	4809      	ldr	r0, [pc, #36]	; (4f28 <analogWrite+0xc4>)
    4f04:	e7ef      	b.n	4ee6 <analogWrite+0x82>
		switch ((info->module >> 4) & 3) {
    4f06:	4a09      	ldr	r2, [pc, #36]	; (4f2c <analogWrite+0xc8>)
    4f08:	e7c1      	b.n	4e8e <analogWrite+0x2a>
	if (high >= modulo - 1) high = modulo - 2;
    4f0a:	1e99      	subs	r1, r3, #2
    4f0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    4f10:	e7db      	b.n	4eca <analogWrite+0x66>
    4f12:	bf00      	nop
    4f14:	20018f34 	.word	0x20018f34
    4f18:	401dc000 	.word	0x401dc000
    4f1c:	20019f7c 	.word	0x20019f7c
    4f20:	403dc000 	.word	0x403dc000
    4f24:	20018c8c 	.word	0x20018c8c
    4f28:	403e8000 	.word	0x403e8000
    4f2c:	401e8000 	.word	0x401e8000

00004f30 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    4f30:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    4f32:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    4f34:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    4f38:	4619      	mov	r1, r3
{
    4f3a:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    4f3c:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    4f40:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    4f44:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4f48:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    4f4c:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    4f50:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    4f52:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    4f56:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    4f5a:	b29b      	uxth	r3, r3
    4f5c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    4f60:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4f64:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    4f68:	3101      	adds	r1, #1
    4f6a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    4f6e:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4f70:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    4f72:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    4f76:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    4f78:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    4f7a:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    4f7c:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    4f7e:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    4f82:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    4f84:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    4f86:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    4f88:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    4f8a:	d1eb      	bne.n	4f64 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    4f8c:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    4f90:	b29b      	uxth	r3, r3
    4f92:	f043 030f 	orr.w	r3, r3, #15
    4f96:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    4f9a:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    4f9e:	b29b      	uxth	r3, r3
    4fa0:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    4fa4:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    4fa8:	bd10      	pop	{r4, pc}
    4faa:	bf00      	nop

00004fac <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    4fac:	4b37      	ldr	r3, [pc, #220]	; (508c <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    4fae:	4a38      	ldr	r2, [pc, #224]	; (5090 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    4fb0:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    4fb2:	4838      	ldr	r0, [pc, #224]	; (5094 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    4fb4:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    4fb8:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    4fba:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4fbc:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    4fc0:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4fc4:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    4fc8:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    4fcc:	430a      	orrs	r2, r1
    4fce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    4fd2:	f7ff ffad 	bl	4f30 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    4fd6:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    4fda:	f7ff ffa9 	bl	4f30 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    4fde:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    4fe2:	f7ff ffa5 	bl	4f30 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    4fe6:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    4fea:	f7ff ffa1 	bl	4f30 <flexpwm_init>
	for (i=0; i < 4; i++) {
    4fee:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    4ff0:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    4ff4:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    4ff8:	4611      	mov	r1, r2
    4ffa:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    4ffe:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    5002:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    5004:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    5006:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    5008:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    500a:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    500e:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    5010:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    5012:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    5016:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    5018:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    501a:	d1ee      	bne.n	4ffa <pwm_init+0x4e>
    501c:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    501e:	481e      	ldr	r0, [pc, #120]	; (5098 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    5020:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    5024:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    5028:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    502a:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    502e:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    5032:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    5036:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    503a:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    503c:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    503e:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    5040:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    5042:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    5046:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    5048:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    504a:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    504e:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    5050:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    5052:	d1ee      	bne.n	5032 <pwm_init+0x86>
    5054:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    5056:	4811      	ldr	r0, [pc, #68]	; (509c <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    5058:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    505a:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    505e:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    5060:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    5064:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    5068:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    506c:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    5070:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    5072:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    5074:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    5076:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    5078:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    507a:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    507c:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    507e:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    5082:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    5084:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    5088:	d1ee      	bne.n	5068 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    508a:	bd70      	pop	{r4, r5, r6, pc}
    508c:	400fc000 	.word	0x400fc000
    5090:	fc030000 	.word	0xfc030000
    5094:	403dc000 	.word	0x403dc000
    5098:	401e0000 	.word	0x401e0000
    509c:	401e4000 	.word	0x401e4000

000050a0 <unused_interrupt_vector>:
	__disable_irq();
    50a0:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    50a2:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    50a6:	4c52      	ldr	r4, [pc, #328]	; (51f0 <unused_interrupt_vector+0x150>)
    50a8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    50ac:	f01e 0f04 	tst.w	lr, #4
    50b0:	bf0c      	ite	eq
    50b2:	f3ef 8208 	mrseq	r2, MSP
    50b6:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    50ba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    50be:	4e4d      	ldr	r6, [pc, #308]	; (51f4 <unused_interrupt_vector+0x154>)
	while (p < end) {
    50c0:	4d4d      	ldr	r5, [pc, #308]	; (51f8 <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
    50c2:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    50c6:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    50ca:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    50ce:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    50d2:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    50d6:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    50da:	6993      	ldr	r3, [r2, #24]
    50dc:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    50e0:	69d3      	ldr	r3, [r2, #28]
    50e2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    50e6:	f000 f8d3 	bl	5290 <tempmonGetTemp>
    50ea:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    50ee:	f001 fb43 	bl	6778 <rtc_get>
	info->len = sizeof(*info) / 4;
    50f2:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    50f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	info->time = rtc_get();
    50f8:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    50fc:	460b      	mov	r3, r1
    50fe:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    5102:	493e      	ldr	r1, [pc, #248]	; (51fc <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    5104:	1d30      	adds	r0, r6, #4
    5106:	405a      	eors	r2, r3
    5108:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    510a:	f002 0301 	and.w	r3, r2, #1
    510e:	3c01      	subs	r4, #1
    5110:	fb01 f303 	mul.w	r3, r1, r3
    5114:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    5118:	d1f7      	bne.n	510a <unused_interrupt_vector+0x6a>
	while (p < end) {
    511a:	42a8      	cmp	r0, r5
    511c:	d002      	beq.n	5124 <unused_interrupt_vector+0x84>
		crc ^= *p++;
    511e:	6873      	ldr	r3, [r6, #4]
    5120:	4606      	mov	r6, r0
    5122:	e7ef      	b.n	5104 <unused_interrupt_vector+0x64>
	info->crc = crc;
    5124:	4b32      	ldr	r3, [pc, #200]	; (51f0 <unused_interrupt_vector+0x150>)
    5126:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    512a:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    512e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    5132:	4930      	ldr	r1, [pc, #192]	; (51f4 <unused_interrupt_vector+0x154>)
    5134:	4a32      	ldr	r2, [pc, #200]	; (5200 <unused_interrupt_vector+0x160>)
    5136:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    513a:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    513e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    5142:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    5146:	4a2f      	ldr	r2, [pc, #188]	; (5204 <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
    5148:	2502      	movs	r5, #2
    514a:	482f      	ldr	r0, [pc, #188]	; (5208 <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    514c:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    514e:	492f      	ldr	r1, [pc, #188]	; (520c <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    5150:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    5154:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    5156:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    5158:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    515a:	482d      	ldr	r0, [pc, #180]	; (5210 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    515c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    5160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5164:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    5166:	680b      	ldr	r3, [r1, #0]
    5168:	4283      	cmp	r3, r0
    516a:	d83d      	bhi.n	51e8 <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
    516c:	4d26      	ldr	r5, [pc, #152]	; (5208 <unused_interrupt_vector+0x168>)
    516e:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    5170:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    5174:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	PIT_MCR = 0;
    5178:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    517a:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    517c:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    5180:	4924      	ldr	r1, [pc, #144]	; (5214 <unused_interrupt_vector+0x174>)
    5182:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    5186:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    518a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    518e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    5192:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    5196:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    519a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    519e:	e001      	b.n	51a4 <unused_interrupt_vector+0x104>
		usb_isr();
    51a0:	f000 f968 	bl	5474 <usb_isr>
		if (PIT_TFLG0) {
    51a4:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    51a8:	2b00      	cmp	r3, #0
    51aa:	d0f9      	beq.n	51a0 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
    51ac:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    51ae:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    51b2:	2c4f      	cmp	r4, #79	; 0x4f
    51b4:	d9f4      	bls.n	51a0 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    51b6:	4b18      	ldr	r3, [pc, #96]	; (5218 <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
    51b8:	2002      	movs	r0, #2
    51ba:	4918      	ldr	r1, [pc, #96]	; (521c <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    51bc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    51c0:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    51c4:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    51c6:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    51ca:	b93b      	cbnz	r3, 51dc <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
    51cc:	4814      	ldr	r0, [pc, #80]	; (5220 <unused_interrupt_vector+0x180>)
    51ce:	4915      	ldr	r1, [pc, #84]	; (5224 <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    51d0:	4a0d      	ldr	r2, [pc, #52]	; (5208 <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
    51d2:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    51d4:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    51d8:	2b00      	cmp	r3, #0
    51da:	d0fa      	beq.n	51d2 <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
    51dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    51e0:	4a11      	ldr	r2, [pc, #68]	; (5228 <unused_interrupt_vector+0x188>)
    51e2:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    51e6:	e7fe      	b.n	51e6 <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    51e8:	f001 f94e 	bl	6488 <set_arm_clock>
    51ec:	e7be      	b.n	516c <unused_interrupt_vector+0xcc>
    51ee:	bf00      	nop
    51f0:	2027ff00 	.word	0x2027ff00
    51f4:	2027ff80 	.word	0x2027ff80
    51f8:	2027ffa8 	.word	0x2027ffa8
    51fc:	edb88320 	.word	0xedb88320
    5200:	2027ffa0 	.word	0x2027ffa0
    5204:	400fc000 	.word	0x400fc000
    5208:	40084000 	.word	0x40084000
    520c:	200191e4 	.word	0x200191e4
    5210:	0bcd3d80 	.word	0x0bcd3d80
    5214:	00249f00 	.word	0x00249f00
    5218:	400d9000 	.word	0x400d9000
    521c:	402e0000 	.word	0x402e0000
    5220:	400f8000 	.word	0x400f8000
    5224:	0bad00f1 	.word	0x0bad00f1
    5228:	05fa0004 	.word	0x05fa0004

0000522c <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    522c:	490a      	ldr	r1, [pc, #40]	; (5258 <_sbrk+0x2c>)
    522e:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    5230:	b138      	cbz	r0, 5242 <_sbrk+0x16>
{
    5232:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    5234:	1813      	adds	r3, r2, r0
    5236:	4809      	ldr	r0, [pc, #36]	; (525c <_sbrk+0x30>)
    5238:	4283      	cmp	r3, r0
    523a:	d804      	bhi.n	5246 <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    523c:	4610      	mov	r0, r2
                __brkval = prev + incr;
    523e:	600b      	str	r3, [r1, #0]
}
    5240:	bd08      	pop	{r3, pc}
    5242:	4610      	mov	r0, r2
    5244:	4770      	bx	lr
                        errno = ENOMEM;
    5246:	f002 f9e5 	bl	7614 <__errno>
    524a:	230c      	movs	r3, #12
                        return (void *)-1;
    524c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
                        errno = ENOMEM;
    5250:	6003      	str	r3, [r0, #0]
}
    5252:	4610      	mov	r0, r2
    5254:	bd08      	pop	{r3, pc}
    5256:	bf00      	nop
    5258:	2001931c 	.word	0x2001931c
    525c:	20280000 	.word	0x20280000

00005260 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    5260:	2000      	movs	r0, #0
    5262:	4770      	bx	lr

00005264 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    5264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5268:	4770      	bx	lr
    526a:	bf00      	nop

0000526c <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    526c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    5270:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    5272:	604b      	str	r3, [r1, #4]
}
    5274:	4770      	bx	lr
    5276:	bf00      	nop

00005278 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    5278:	2001      	movs	r0, #1
    527a:	4770      	bx	lr

0000527c <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    527c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5280:	4770      	bx	lr
    5282:	bf00      	nop

00005284 <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
    5284:	bf30      	wfi
    5286:	e7fd      	b.n	5284 <__cxa_pure_virtual>

00005288 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    5288:	bf30      	wfi
    528a:	e7fd      	b.n	5288 <abort>

0000528c <Panic_Temp_isr>:
  unused_interrupt_vector();
    528c:	f7ff bf08 	b.w	50a0 <unused_interrupt_vector>

00005290 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    5290:	4a12      	ldr	r2, [pc, #72]	; (52dc <tempmonGetTemp+0x4c>)
    5292:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    5296:	075b      	lsls	r3, r3, #29
    5298:	d5fb      	bpl.n	5292 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    529a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    529e:	4810      	ldr	r0, [pc, #64]	; (52e0 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    52a0:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    52a4:	490f      	ldr	r1, [pc, #60]	; (52e4 <tempmonGetTemp+0x54>)
    52a6:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    52aa:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    52ae:	ed91 6a00 	vldr	s12, [r1]
    52b2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    52b6:	4a0c      	ldr	r2, [pc, #48]	; (52e8 <tempmonGetTemp+0x58>)
    52b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    52bc:	4b0b      	ldr	r3, [pc, #44]	; (52ec <tempmonGetTemp+0x5c>)
    52be:	edd2 6a00 	vldr	s13, [r2]
    52c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
    52c6:	ed93 7a00 	vldr	s14, [r3]
    52ca:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    52ce:	ee67 7a86 	vmul.f32	s15, s15, s12
    52d2:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    52d6:	ee37 0a40 	vsub.f32	s0, s14, s0
    52da:	4770      	bx	lr
    52dc:	400d8100 	.word	0x400d8100
    52e0:	2001ac08 	.word	0x2001ac08
    52e4:	2001ac10 	.word	0x2001ac10
    52e8:	2001ac14 	.word	0x2001ac14
    52ec:	2001ac0c 	.word	0x2001ac0c

000052f0 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    52f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    52f2:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    52f4:	b11b      	cbz	r3, 52fe <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    52f6:	6853      	ldr	r3, [r2, #4]
    52f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    52fc:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    52fe:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    5300:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    5302:	b33c      	cbz	r4, 5354 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    5304:	4b1a      	ldr	r3, [pc, #104]	; (5370 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    5306:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    5308:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    530c:	420c      	tst	r4, r1
    530e:	d11d      	bne.n	534c <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    5310:	4e18      	ldr	r6, [pc, #96]	; (5374 <schedule_transfer+0x84>)
    5312:	6877      	ldr	r7, [r6, #4]
    5314:	e004      	b.n	5320 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    5316:	6874      	ldr	r4, [r6, #4]
    5318:	1be4      	subs	r4, r4, r7
    531a:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    531e:	d20b      	bcs.n	5338 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    5320:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    5324:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    5328:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    532c:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    5330:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    5334:	0464      	lsls	r4, r4, #17
    5336:	d5ee      	bpl.n	5316 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    5338:	400d      	ands	r5, r1
    533a:	d107      	bne.n	534c <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    533c:	4c0c      	ldr	r4, [pc, #48]	; (5370 <schedule_transfer+0x80>)
		endpoint->status = 0;
    533e:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    5342:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    5346:	430b      	orrs	r3, r1
    5348:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    534c:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    534e:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    5350:	bcf0      	pop	{r4, r5, r6, r7}
    5352:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    5354:	4d06      	ldr	r5, [pc, #24]	; (5370 <schedule_transfer+0x80>)
	endpoint->status = 0;
    5356:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    535a:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    535e:	430b      	orrs	r3, r1
    5360:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    5364:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    5366:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    5368:	b662      	cpsie	i
}
    536a:	bcf0      	pop	{r4, r5, r6, r7}
    536c:	4770      	bx	lr
    536e:	bf00      	nop
    5370:	402e0000 	.word	0x402e0000
    5374:	e0001000 	.word	0xe0001000

00005378 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    5378:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    537a:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    537c:	b19d      	cbz	r5, 53a6 <run_callbacks+0x2e>
    537e:	4606      	mov	r6, r0
    5380:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    5382:	2400      	movs	r4, #0
    5384:	e003      	b.n	538e <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    5386:	6812      	ldr	r2, [r2, #0]
		count++;
    5388:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    538a:	2a01      	cmp	r2, #1
    538c:	d00c      	beq.n	53a8 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    538e:	6853      	ldr	r3, [r2, #4]
    5390:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    5394:	d0f7      	beq.n	5386 <run_callbacks+0xe>
			ep->first_transfer = t;
    5396:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    5398:	b12c      	cbz	r4, 53a6 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    539a:	4628      	mov	r0, r5
		ep->callback_function(first);
    539c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    539e:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    53a0:	4798      	blx	r3
	while (count) {
    53a2:	3c01      	subs	r4, #1
    53a4:	d1f9      	bne.n	539a <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    53a6:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    53a8:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    53ac:	e7f4      	b.n	5398 <run_callbacks+0x20>
    53ae:	bf00      	nop

000053b0 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    53b0:	b430      	push	{r4, r5}
	if (len > 0) {
    53b2:	b9d9      	cbnz	r1, 53ec <endpoint0_transmit.constprop.0+0x3c>
    53b4:	4c1f      	ldr	r4, [pc, #124]	; (5434 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    53b6:	4b20      	ldr	r3, [pc, #128]	; (5438 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    53b8:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    53ba:	4a20      	ldr	r2, [pc, #128]	; (543c <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    53bc:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    53be:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    53c2:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    53c4:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    53c6:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    53ca:	2480      	movs	r4, #128	; 0x80
    53cc:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    53ce:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    53d2:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    53d6:	481a      	ldr	r0, [pc, #104]	; (5440 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    53d8:	432b      	orrs	r3, r5
    53da:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    53de:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    53e0:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    53e4:	2b00      	cmp	r3, #0
    53e6:	d1fb      	bne.n	53e0 <endpoint0_transmit.constprop.0+0x30>
}
    53e8:	bc30      	pop	{r4, r5}
    53ea:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    53ec:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    53ee:	4b15      	ldr	r3, [pc, #84]	; (5444 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    53f0:	4c10      	ldr	r4, [pc, #64]	; (5434 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    53f2:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    53f4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    53f8:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    53fa:	4a10      	ldr	r2, [pc, #64]	; (543c <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    53fc:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    53fe:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    5402:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    5404:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    5406:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    540a:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    540c:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    540e:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    5412:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    5416:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    5418:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    541a:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    541c:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    541e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    5422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    5426:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    542a:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    542e:	2b00      	cmp	r3, #0
    5430:	d1fb      	bne.n	542a <endpoint0_transmit.constprop.0+0x7a>
    5432:	e7c0      	b.n	53b6 <endpoint0_transmit.constprop.0+0x6>
    5434:	20000000 	.word	0x20000000
    5438:	2001a320 	.word	0x2001a320
    543c:	402e0000 	.word	0x402e0000
    5440:	2001aba0 	.word	0x2001aba0
    5444:	2001a340 	.word	0x2001a340

00005448 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    5448:	4908      	ldr	r1, [pc, #32]	; (546c <usb_stop_sof_interrupts+0x24>)
    544a:	2201      	movs	r2, #1
    544c:	780b      	ldrb	r3, [r1, #0]
    544e:	fa02 f000 	lsl.w	r0, r2, r0
    5452:	ea23 0000 	bic.w	r0, r3, r0
    5456:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    5458:	b930      	cbnz	r0, 5468 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    545a:	4a05      	ldr	r2, [pc, #20]	; (5470 <usb_stop_sof_interrupts+0x28>)
    545c:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    5460:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    5464:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    5468:	4770      	bx	lr
    546a:	bf00      	nop
    546c:	2001ac7d 	.word	0x2001ac7d
    5470:	402e0000 	.word	0x402e0000

00005474 <usb_isr>:
{
    5474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    5478:	4c97      	ldr	r4, [pc, #604]	; (56d8 <usb_isr+0x264>)
{
    547a:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    547c:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    5480:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    5482:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    5486:	d553      	bpl.n	5530 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    5488:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    548c:	2a00      	cmp	r2, #0
    548e:	d04a      	beq.n	5526 <usb_isr+0xb2>
    5490:	4e92      	ldr	r6, [pc, #584]	; (56dc <usb_isr+0x268>)
    5492:	f8df a260 	ldr.w	sl, [pc, #608]	; 56f4 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    5496:	f8df 9274 	ldr.w	r9, [pc, #628]	; 570c <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    549a:	f8df b274 	ldr.w	fp, [pc, #628]	; 5710 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    549e:	f8df 8274 	ldr.w	r8, [pc, #628]	; 5714 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    54a2:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    54a6:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    54aa:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    54ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    54b2:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    54b6:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    54ba:	049d      	lsls	r5, r3, #18
    54bc:	d5f5      	bpl.n	54aa <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    54be:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    54c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    54c6:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    54ca:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    54ce:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    54d2:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    54d6:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    54da:	d1fa      	bne.n	54d2 <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    54dc:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    54de:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    54e0:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    54e4:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    54e8:	f000 81cf 	beq.w	588a <usb_isr+0x416>
    54ec:	f200 80db 	bhi.w	56a6 <usb_isr+0x232>
    54f0:	f240 3102 	movw	r1, #770	; 0x302
    54f4:	428b      	cmp	r3, r1
    54f6:	f000 81e7 	beq.w	58c8 <usb_isr+0x454>
    54fa:	f200 809a 	bhi.w	5632 <usb_isr+0x1be>
    54fe:	2b82      	cmp	r3, #130	; 0x82
    5500:	f000 81cb 	beq.w	589a <usb_isr+0x426>
    5504:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    5508:	f040 808a 	bne.w	5620 <usb_isr+0x1ac>
		if (endpoint > 7) break;
    550c:	f010 0f78 	tst.w	r0, #120	; 0x78
    5510:	b283      	uxth	r3, r0
    5512:	f000 8203 	beq.w	591c <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    5516:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    551a:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    551e:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    5522:	2a00      	cmp	r2, #0
    5524:	d1bd      	bne.n	54a2 <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    5526:	4a6c      	ldr	r2, [pc, #432]	; (56d8 <usb_isr+0x264>)
    5528:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    552c:	2b00      	cmp	r3, #0
    552e:	d142      	bne.n	55b6 <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    5530:	067e      	lsls	r6, r7, #25
    5532:	d516      	bpl.n	5562 <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    5534:	4b68      	ldr	r3, [pc, #416]	; (56d8 <usb_isr+0x264>)
    5536:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    553a:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    553e:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    5542:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    5546:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    554a:	2c00      	cmp	r4, #0
    554c:	d1fb      	bne.n	5546 <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    554e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5552:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    5556:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    555a:	f000 fd2d 	bl	5fb8 <usb_serial_reset>
		endpointN_notify_mask = 0;
    555e:	4b60      	ldr	r3, [pc, #384]	; (56e0 <usb_isr+0x26c>)
    5560:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    5562:	01fc      	lsls	r4, r7, #7
    5564:	d503      	bpl.n	556e <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    5566:	4b5f      	ldr	r3, [pc, #380]	; (56e4 <usb_isr+0x270>)
    5568:	681b      	ldr	r3, [r3, #0]
    556a:	b103      	cbz	r3, 556e <usb_isr+0xfa>
    556c:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    556e:	01b8      	lsls	r0, r7, #6
    5570:	d503      	bpl.n	557a <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    5572:	4b5d      	ldr	r3, [pc, #372]	; (56e8 <usb_isr+0x274>)
    5574:	681b      	ldr	r3, [r3, #0]
    5576:	b103      	cbz	r3, 557a <usb_isr+0x106>
    5578:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    557a:	0779      	lsls	r1, r7, #29
    557c:	d508      	bpl.n	5590 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    557e:	4b56      	ldr	r3, [pc, #344]	; (56d8 <usb_isr+0x264>)
    5580:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    5584:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    5588:	d047      	beq.n	561a <usb_isr+0x1a6>
			usb_high_speed = 1;
    558a:	4b58      	ldr	r3, [pc, #352]	; (56ec <usb_isr+0x278>)
    558c:	2201      	movs	r2, #1
    558e:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    5590:	4b51      	ldr	r3, [pc, #324]	; (56d8 <usb_isr+0x264>)
    5592:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    5596:	061a      	lsls	r2, r3, #24
    5598:	d50a      	bpl.n	55b0 <usb_isr+0x13c>
    559a:	063b      	lsls	r3, r7, #24
    559c:	d508      	bpl.n	55b0 <usb_isr+0x13c>
		if (usb_reboot_timer) {
    559e:	4a54      	ldr	r2, [pc, #336]	; (56f0 <usb_isr+0x27c>)
    55a0:	7813      	ldrb	r3, [r2, #0]
    55a2:	b12b      	cbz	r3, 55b0 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    55a4:	3b01      	subs	r3, #1
    55a6:	b2db      	uxtb	r3, r3
    55a8:	7013      	strb	r3, [r2, #0]
    55aa:	2b00      	cmp	r3, #0
    55ac:	f000 8272 	beq.w	5a94 <usb_isr+0x620>
}
    55b0:	b003      	add	sp, #12
    55b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    55b6:	494f      	ldr	r1, [pc, #316]	; (56f4 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    55b8:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    55bc:	6808      	ldr	r0, [r1, #0]
    55be:	4203      	tst	r3, r0
    55c0:	f040 81d1 	bne.w	5966 <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    55c4:	4a46      	ldr	r2, [pc, #280]	; (56e0 <usb_isr+0x26c>)
    55c6:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    55c8:	401c      	ands	r4, r3
    55ca:	d0b1      	beq.n	5530 <usb_isr+0xbc>
				while (tx) {
    55cc:	ea5f 4814 	movs.w	r8, r4, lsr #16
    55d0:	d010      	beq.n	55f4 <usb_isr+0x180>
    55d2:	4e42      	ldr	r6, [pc, #264]	; (56dc <usb_isr+0x268>)
					tx &= ~(1<<p);
    55d4:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    55d8:	fa98 f5a8 	rbit	r5, r8
    55dc:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    55e0:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    55e4:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    55e8:	3040      	adds	r0, #64	; 0x40
    55ea:	f7ff fec5 	bl	5378 <run_callbacks>
				while (tx) {
    55ee:	ea38 0805 	bics.w	r8, r8, r5
    55f2:	d1f1      	bne.n	55d8 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    55f4:	b2a4      	uxth	r4, r4
				while(rx) {
    55f6:	2c00      	cmp	r4, #0
    55f8:	d09a      	beq.n	5530 <usb_isr+0xbc>
    55fa:	4e38      	ldr	r6, [pc, #224]	; (56dc <usb_isr+0x268>)
					rx &= ~(1<<p);
    55fc:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    5600:	fa94 f5a4 	rbit	r5, r4
    5604:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    5608:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    560c:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    5610:	f7ff feb2 	bl	5378 <run_callbacks>
				while(rx) {
    5614:	43ac      	bics	r4, r5
    5616:	d1f3      	bne.n	5600 <usb_isr+0x18c>
    5618:	e78a      	b.n	5530 <usb_isr+0xbc>
			usb_high_speed = 0;
    561a:	4a34      	ldr	r2, [pc, #208]	; (56ec <usb_isr+0x278>)
    561c:	7013      	strb	r3, [r2, #0]
    561e:	e7b7      	b.n	5590 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    5620:	2b80      	cmp	r3, #128	; 0x80
    5622:	f47f af78 	bne.w	5516 <usb_isr+0xa2>
		reply_buffer[0] = 0;
    5626:	4834      	ldr	r0, [pc, #208]	; (56f8 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    5628:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    562a:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    562c:	f7ff fec0 	bl	53b0 <endpoint0_transmit.constprop.0>
		return;
    5630:	e775      	b.n	551e <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    5632:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    5636:	f000 810b 	beq.w	5850 <usb_isr+0x3dc>
    563a:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    563e:	2b01      	cmp	r3, #1
    5640:	f63f af69 	bhi.w	5516 <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    5644:	4b2d      	ldr	r3, [pc, #180]	; (56fc <usb_isr+0x288>)
    5646:	685d      	ldr	r5, [r3, #4]
    5648:	2d00      	cmp	r5, #0
    564a:	f43f af64 	beq.w	5516 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    564e:	fa1f fc8c 	uxth.w	ip, ip
    5652:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    5656:	e004      	b.n	5662 <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    5658:	691d      	ldr	r5, [r3, #16]
    565a:	330c      	adds	r3, #12
    565c:	2d00      	cmp	r5, #0
    565e:	f43f af5a 	beq.w	5516 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    5662:	881a      	ldrh	r2, [r3, #0]
    5664:	4572      	cmp	r2, lr
    5666:	d1f7      	bne.n	5658 <usb_isr+0x1e4>
    5668:	885a      	ldrh	r2, [r3, #2]
    566a:	4562      	cmp	r2, ip
    566c:	d1f4      	bne.n	5658 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    566e:	ea4f 221e 	mov.w	r2, lr, lsr #8
    5672:	2a03      	cmp	r2, #3
    5674:	f000 81a5 	beq.w	59c2 <usb_isr+0x54e>
					datalen = list->length;
    5678:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    567a:	0c00      	lsrs	r0, r0, #16
    567c:	4282      	cmp	r2, r0
    567e:	bf28      	it	cs
    5680:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    5682:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    5686:	f040 81a1 	bne.w	59cc <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    568a:	4b18      	ldr	r3, [pc, #96]	; (56ec <usb_isr+0x278>)
    568c:	491c      	ldr	r1, [pc, #112]	; (5700 <usb_isr+0x28c>)
    568e:	7818      	ldrb	r0, [r3, #0]
    5690:	4b1c      	ldr	r3, [pc, #112]	; (5704 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    5692:	9201      	str	r2, [sp, #4]
    5694:	2800      	cmp	r0, #0
    5696:	bf18      	it	ne
    5698:	4619      	movne	r1, r3
    569a:	481b      	ldr	r0, [pc, #108]	; (5708 <usb_isr+0x294>)
    569c:	f7ff fab8 	bl	4c10 <memcpy>
    56a0:	4d19      	ldr	r5, [pc, #100]	; (5708 <usb_isr+0x294>)
    56a2:	9a01      	ldr	r2, [sp, #4]
    56a4:	e1e1      	b.n	5a6a <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    56a6:	f242 2121 	movw	r1, #8737	; 0x2221
    56aa:	428b      	cmp	r3, r1
    56ac:	d07c      	beq.n	57a8 <usb_isr+0x334>
    56ae:	d933      	bls.n	5718 <usb_isr+0x2a4>
    56b0:	f242 3121 	movw	r1, #8993	; 0x2321
    56b4:	428b      	cmp	r3, r1
    56b6:	f000 8081 	beq.w	57bc <usb_isr+0x348>
    56ba:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    56be:	428b      	cmp	r3, r1
    56c0:	f47f af29 	bne.w	5516 <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    56c4:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    56c8:	b283      	uxth	r3, r0
    56ca:	f47f af24 	bne.w	5516 <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    56ce:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    56d2:	f363 0c0f 	bfi	ip, r3, #0, #16
    56d6:	e7b5      	b.n	5644 <usb_isr+0x1d0>
    56d8:	402e0000 	.word	0x402e0000
    56dc:	20000000 	.word	0x20000000
    56e0:	2001aba4 	.word	0x2001aba4
    56e4:	2001ac68 	.word	0x2001ac68
    56e8:	2001ac6c 	.word	0x2001ac6c
    56ec:	2001ac83 	.word	0x2001ac83
    56f0:	2001ac84 	.word	0x2001ac84
    56f4:	2001aba0 	.word	0x2001aba0
    56f8:	2001abd0 	.word	0x2001abd0
    56fc:	2001901c 	.word	0x2001901c
    5700:	600a484c 	.word	0x600a484c
    5704:	600a48b0 	.word	0x600a48b0
    5708:	20200000 	.word	0x20200000
    570c:	2001ab98 	.word	0x2001ab98
    5710:	b8c6cf5d 	.word	0xb8c6cf5d
    5714:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    5718:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    571c:	d066      	beq.n	57ec <usb_isr+0x378>
    571e:	f242 0121 	movw	r1, #8225	; 0x2021
    5722:	428b      	cmp	r3, r1
    5724:	f47f aef7 	bne.w	5516 <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    5728:	0c03      	lsrs	r3, r0, #16
    572a:	2b07      	cmp	r3, #7
    572c:	f47f aef3 	bne.w	5516 <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    5730:	4bb2      	ldr	r3, [pc, #712]	; (59fc <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    5732:	49b3      	ldr	r1, [pc, #716]	; (5a00 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    5734:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    5736:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    5738:	49b2      	ldr	r1, [pc, #712]	; (5a04 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    573a:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    573c:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    5740:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    5744:	2201      	movs	r2, #1
    5746:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    5748:	4aaf      	ldr	r2, [pc, #700]	; (5a08 <usb_isr+0x594>)
    574a:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    574c:	4aaf      	ldr	r2, [pc, #700]	; (5a0c <usb_isr+0x598>)
    574e:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    5750:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    5754:	f041 0101 	orr.w	r1, r1, #1
    5758:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    575c:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    5760:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    5764:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    5766:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    5768:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    576c:	2b00      	cmp	r3, #0
    576e:	d1fb      	bne.n	5768 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    5770:	4aa7      	ldr	r2, [pc, #668]	; (5a10 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    5772:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    5774:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    5776:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    5778:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    577a:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    577c:	f248 0380 	movw	r3, #32896	; 0x8080
    5780:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    5782:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    5786:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    578a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    578e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    5792:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    5796:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    579a:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    579e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    57a2:	2b00      	cmp	r3, #0
    57a4:	d1fb      	bne.n	579e <usb_isr+0x32a>
    57a6:	e6ba      	b.n	551e <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    57a8:	b280      	uxth	r0, r0
    57aa:	b938      	cbnz	r0, 57bc <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    57ac:	4b99      	ldr	r3, [pc, #612]	; (5a14 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    57ae:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    57b2:	6819      	ldr	r1, [r3, #0]
    57b4:	4b98      	ldr	r3, [pc, #608]	; (5a18 <usb_isr+0x5a4>)
    57b6:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    57b8:	4b98      	ldr	r3, [pc, #608]	; (5a1c <usb_isr+0x5a8>)
    57ba:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    57bc:	4b94      	ldr	r3, [pc, #592]	; (5a10 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    57be:	2200      	movs	r2, #0
    57c0:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    57c2:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    57c4:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    57c6:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    57c8:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    57ca:	2280      	movs	r2, #128	; 0x80
    57cc:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    57ce:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    57d2:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    57d6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    57da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    57de:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    57e2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    57e6:	2b00      	cmp	r3, #0
    57e8:	d1fb      	bne.n	57e2 <usb_isr+0x36e>
    57ea:	e698      	b.n	551e <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    57ec:	f3c2 4207 	ubfx	r2, r2, #16, #8
    57f0:	4b8b      	ldr	r3, [pc, #556]	; (5a20 <usb_isr+0x5ac>)
    57f2:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    57f4:	4b8b      	ldr	r3, [pc, #556]	; (5a24 <usb_isr+0x5b0>)
    57f6:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    57fa:	4b8b      	ldr	r3, [pc, #556]	; (5a28 <usb_isr+0x5b4>)
    57fc:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    5800:	4b8a      	ldr	r3, [pc, #552]	; (5a2c <usb_isr+0x5b8>)
    5802:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    5806:	f000 fbd9 	bl	5fbc <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    580a:	2280      	movs	r2, #128	; 0x80
    580c:	4629      	mov	r1, r5
    580e:	4888      	ldr	r0, [pc, #544]	; (5a30 <usb_isr+0x5bc>)
    5810:	f001 fe16 	bl	7440 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    5814:	4b87      	ldr	r3, [pc, #540]	; (5a34 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    5816:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    5818:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    581c:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    5820:	4b7b      	ldr	r3, [pc, #492]	; (5a10 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    5822:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    5824:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    5826:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    5828:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    582a:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    582c:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    582e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    5832:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    5836:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    583a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    583e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    5842:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    5846:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    584a:	2b00      	cmp	r3, #0
    584c:	d1fb      	bne.n	5846 <usb_isr+0x3d2>
    584e:	e666      	b.n	551e <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    5850:	4b6f      	ldr	r3, [pc, #444]	; (5a10 <usb_isr+0x59c>)
    5852:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    5854:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    5856:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    5858:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    585a:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    585c:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    585e:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    5860:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    5864:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    5868:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    586c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    5870:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    5874:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    5878:	2b00      	cmp	r3, #0
    587a:	d1fb      	bne.n	5874 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    587c:	0c13      	lsrs	r3, r2, #16
    587e:	065b      	lsls	r3, r3, #25
    5880:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    5884:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    5888:	e649      	b.n	551e <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    588a:	4b65      	ldr	r3, [pc, #404]	; (5a20 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    588c:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    588e:	486a      	ldr	r0, [pc, #424]	; (5a38 <usb_isr+0x5c4>)
    5890:	781b      	ldrb	r3, [r3, #0]
    5892:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    5894:	f7ff fd8c 	bl	53b0 <endpoint0_transmit.constprop.0>
		return;
    5898:	e641      	b.n	551e <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    589a:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    589c:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    58a0:	f47f ae39 	bne.w	5516 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    58a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    58a8:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    58ac:	4a62      	ldr	r2, [pc, #392]	; (5a38 <usb_isr+0x5c4>)
    58ae:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    58b0:	0618      	lsls	r0, r3, #24
    58b2:	f100 809e 	bmi.w	59f2 <usb_isr+0x57e>
    58b6:	07cb      	lsls	r3, r1, #31
    58b8:	d501      	bpl.n	58be <usb_isr+0x44a>
			reply_buffer[0] = 1;
    58ba:	2301      	movs	r3, #1
    58bc:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    58be:	2102      	movs	r1, #2
    58c0:	485d      	ldr	r0, [pc, #372]	; (5a38 <usb_isr+0x5c4>)
    58c2:	f7ff fd75 	bl	53b0 <endpoint0_transmit.constprop.0>
		return;
    58c6:	e62a      	b.n	551e <usb_isr+0xaa>
		if (endpoint > 7) break;
    58c8:	f010 0f78 	tst.w	r0, #120	; 0x78
    58cc:	b283      	uxth	r3, r0
    58ce:	f47f ae22 	bne.w	5516 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    58d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    58d6:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    58da:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    58de:	bf14      	ite	ne
    58e0:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    58e4:	f043 0301 	orreq.w	r3, r3, #1
    58e8:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    58ec:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    58ee:	4b48      	ldr	r3, [pc, #288]	; (5a10 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    58f0:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    58f2:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    58f4:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    58f6:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    58f8:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    58fa:	2280      	movs	r2, #128	; 0x80
    58fc:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    58fe:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    5902:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    5906:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    590a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    590e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    5912:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    5916:	2b00      	cmp	r3, #0
    5918:	d1fb      	bne.n	5912 <usb_isr+0x49e>
    591a:	e600      	b.n	551e <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    591c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    5920:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    5924:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    5928:	bf14      	ite	ne
    592a:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    592e:	f023 0301 	biceq.w	r3, r3, #1
    5932:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    5936:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    5938:	4b35      	ldr	r3, [pc, #212]	; (5a10 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    593a:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    593c:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    593e:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    5940:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    5942:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    5944:	2280      	movs	r2, #128	; 0x80
    5946:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    5948:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    594c:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    5950:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    5954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    5958:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    595c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    5960:	2b00      	cmp	r3, #0
    5962:	d1fb      	bne.n	595c <usb_isr+0x4e8>
    5964:	e5db      	b.n	551e <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    5966:	2000      	movs	r0, #0
    5968:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    596a:	4926      	ldr	r1, [pc, #152]	; (5a04 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    596c:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    596e:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    5970:	f242 0121 	movw	r1, #8225	; 0x2021
    5974:	428c      	cmp	r4, r1
    5976:	f47f ae25 	bne.w	55c4 <usb_isr+0x150>
    597a:	b280      	uxth	r0, r0
    597c:	2800      	cmp	r0, #0
    597e:	f47f ae21 	bne.w	55c4 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    5982:	492e      	ldr	r1, [pc, #184]	; (5a3c <usb_isr+0x5c8>)
    5984:	4c2e      	ldr	r4, [pc, #184]	; (5a40 <usb_isr+0x5cc>)
    5986:	c903      	ldmia	r1, {r0, r1}
    5988:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    598a:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    598c:	ea4f 4111 	mov.w	r1, r1, lsr #16
    5990:	6020      	str	r0, [r4, #0]
    5992:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    5994:	f47f ae16 	bne.w	55c4 <usb_isr+0x150>
	__disable_irq();
    5998:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    599a:	482a      	ldr	r0, [pc, #168]	; (5a44 <usb_isr+0x5d0>)
    599c:	7801      	ldrb	r1, [r0, #0]
    599e:	f041 0108 	orr.w	r1, r1, #8
    59a2:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    59a4:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    59a8:	060d      	lsls	r5, r1, #24
    59aa:	d405      	bmi.n	59b8 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    59ac:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    59ae:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    59b0:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    59b4:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    59b8:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    59ba:	4a23      	ldr	r2, [pc, #140]	; (5a48 <usb_isr+0x5d4>)
    59bc:	2150      	movs	r1, #80	; 0x50
    59be:	7011      	strb	r1, [r2, #0]
    59c0:	e600      	b.n	55c4 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    59c2:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    59c4:	782a      	ldrb	r2, [r5, #0]
    59c6:	4282      	cmp	r2, r0
    59c8:	bf28      	it	cs
    59ca:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    59cc:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    59d0:	d144      	bne.n	5a5c <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    59d2:	4b1e      	ldr	r3, [pc, #120]	; (5a4c <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    59d4:	4d1e      	ldr	r5, [pc, #120]	; (5a50 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    59d6:	7818      	ldrb	r0, [r3, #0]
    59d8:	491e      	ldr	r1, [pc, #120]	; (5a54 <usb_isr+0x5e0>)
    59da:	4b1f      	ldr	r3, [pc, #124]	; (5a58 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    59dc:	9201      	str	r2, [sp, #4]
    59de:	2800      	cmp	r0, #0
    59e0:	bf18      	it	ne
    59e2:	4619      	movne	r1, r3
    59e4:	4628      	mov	r0, r5
    59e6:	f7ff f913 	bl	4c10 <memcpy>
					usb_descriptor_buffer[1] = 7;
    59ea:	2307      	movs	r3, #7
    59ec:	706b      	strb	r3, [r5, #1]
    59ee:	9a01      	ldr	r2, [sp, #4]
    59f0:	e03b      	b.n	5a6a <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    59f2:	03c9      	lsls	r1, r1, #15
    59f4:	f53f af61 	bmi.w	58ba <usb_isr+0x446>
    59f8:	e761      	b.n	58be <usb_isr+0x44a>
    59fa:	bf00      	nop
    59fc:	2001a340 	.word	0x2001a340
    5a00:	2001bb98 	.word	0x2001bb98
    5a04:	2001a4e0 	.word	0x2001a4e0
    5a08:	00070080 	.word	0x00070080
    5a0c:	2001cb98 	.word	0x2001cb98
    5a10:	2001a320 	.word	0x2001a320
    5a14:	2001ac40 	.word	0x2001ac40
    5a18:	2001ac64 	.word	0x2001ac64
    5a1c:	2001ac81 	.word	0x2001ac81
    5a20:	2001ac82 	.word	0x2001ac82
    5a24:	00cc0002 	.word	0x00cc0002
    5a28:	000200c8 	.word	0x000200c8
    5a2c:	00c80002 	.word	0x00c80002
    5a30:	20000080 	.word	0x20000080
    5a34:	74d59319 	.word	0x74d59319
    5a38:	2001abd0 	.word	0x2001abd0
    5a3c:	2001ab98 	.word	0x2001ab98
    5a40:	2001ac5c 	.word	0x2001ac5c
    5a44:	2001ac7d 	.word	0x2001ac7d
    5a48:	2001ac84 	.word	0x2001ac84
    5a4c:	2001ac83 	.word	0x2001ac83
    5a50:	20200000 	.word	0x20200000
    5a54:	600a48b0 	.word	0x600a48b0
    5a58:	600a484c 	.word	0x600a484c
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    5a5c:	4629      	mov	r1, r5
    5a5e:	4d10      	ldr	r5, [pc, #64]	; (5aa0 <usb_isr+0x62c>)
    5a60:	9201      	str	r2, [sp, #4]
    5a62:	4628      	mov	r0, r5
    5a64:	f7ff f8d4 	bl	4c10 <memcpy>
    5a68:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    5a6a:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    5a6e:	4415      	add	r5, r2
	asm("dsb");
    5a70:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    5a74:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    5a78:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    5a7c:	3320      	adds	r3, #32
	} while (location < end_addr);
    5a7e:	429d      	cmp	r5, r3
    5a80:	d8fa      	bhi.n	5a78 <usb_isr+0x604>
	asm("dsb");
    5a82:	f3bf 8f4f 	dsb	sy
	asm("isb");
    5a86:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    5a8a:	4805      	ldr	r0, [pc, #20]	; (5aa0 <usb_isr+0x62c>)
    5a8c:	4611      	mov	r1, r2
    5a8e:	f7ff fc8f 	bl	53b0 <endpoint0_transmit.constprop.0>
				return;
    5a92:	e544      	b.n	551e <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    5a94:	2003      	movs	r0, #3
    5a96:	f7ff fcd7 	bl	5448 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    5a9a:	f007 f81d 	bl	cad8 <___reboot_Teensyduino__veneer>
    5a9e:	bf00      	nop
    5aa0:	20200000 	.word	0x20200000

00005aa4 <usb_config_rx>:
{
    5aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5aa8:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    5aaa:	1e83      	subs	r3, r0, #2
    5aac:	2b02      	cmp	r3, #2
    5aae:	d901      	bls.n	5ab4 <usb_config_rx+0x10>
}
    5ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    5ab4:	f8df 904c 	ldr.w	r9, [pc, #76]	; 5b04 <usb_config_rx+0x60>
    5ab8:	4615      	mov	r5, r2
    5aba:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    5abc:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    5abe:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    5ac2:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    5ac4:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    5ac8:	2100      	movs	r1, #0
    5aca:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    5ace:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    5ad0:	f001 fcb6 	bl	7440 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    5ad4:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    5ad8:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    5ada:	0952      	lsrs	r2, r2, #5
    5adc:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    5ae0:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    5ae4:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    5ae8:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    5aec:	2f00      	cmp	r7, #0
    5aee:	d0df      	beq.n	5ab0 <usb_config_rx+0xc>
    5af0:	4a03      	ldr	r2, [pc, #12]	; (5b00 <usb_config_rx+0x5c>)
    5af2:	40b3      	lsls	r3, r6
    5af4:	6811      	ldr	r1, [r2, #0]
    5af6:	430b      	orrs	r3, r1
    5af8:	6013      	str	r3, [r2, #0]
}
    5afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5afe:	bf00      	nop
    5b00:	2001aba4 	.word	0x2001aba4
    5b04:	20000000 	.word	0x20000000

00005b08 <usb_config_tx>:
{
    5b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5b0c:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    5b0e:	1e81      	subs	r1, r0, #2
    5b10:	2902      	cmp	r1, #2
    5b12:	d901      	bls.n	5b18 <usb_config_tx+0x10>
}
    5b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    5b18:	01c7      	lsls	r7, r0, #7
    5b1a:	f8df 904c 	ldr.w	r9, [pc, #76]	; 5b68 <usb_config_tx+0x60>
    5b1e:	4692      	mov	sl, r2
    5b20:	4604      	mov	r4, r0
    5b22:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    5b24:	223c      	movs	r2, #60	; 0x3c
    5b26:	2100      	movs	r1, #0
    5b28:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    5b2a:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    5b2e:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    5b30:	f108 0004 	add.w	r0, r8, #4
    5b34:	f001 fc84 	bl	7440 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    5b38:	faba f28a 	clz	r2, sl
    5b3c:	0952      	lsrs	r2, r2, #5
    5b3e:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    5b42:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    5b46:	2201      	movs	r2, #1
	qh->callback_function = callback;
    5b48:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    5b4c:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    5b50:	2e00      	cmp	r6, #0
    5b52:	d0df      	beq.n	5b14 <usb_config_tx+0xc>
    5b54:	4b03      	ldr	r3, [pc, #12]	; (5b64 <usb_config_tx+0x5c>)
    5b56:	3410      	adds	r4, #16
    5b58:	6819      	ldr	r1, [r3, #0]
    5b5a:	40a2      	lsls	r2, r4
    5b5c:	430a      	orrs	r2, r1
    5b5e:	601a      	str	r2, [r3, #0]
}
    5b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5b64:	2001aba4 	.word	0x2001aba4
    5b68:	20000000 	.word	0x20000000

00005b6c <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    5b6c:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    5b6e:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    5b70:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    5b72:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    5b76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    5b7a:	b410      	push	{r4}
	transfer->next = 1;
    5b7c:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    5b7e:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    5b80:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    5b84:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    5b86:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    5b8a:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    5b8e:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    5b90:	6181      	str	r1, [r0, #24]
}
    5b92:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    5b96:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    5b9a:	4770      	bx	lr

00005b9c <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    5b9c:	1e83      	subs	r3, r0, #2
{
    5b9e:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    5ba0:	2b02      	cmp	r3, #2
    5ba2:	d900      	bls.n	5ba6 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    5ba4:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    5ba6:	4b06      	ldr	r3, [pc, #24]	; (5bc0 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    5ba8:	f100 0110 	add.w	r1, r0, #16
    5bac:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    5bb0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    5bb4:	fa0c f101 	lsl.w	r1, ip, r1
    5bb8:	3040      	adds	r0, #64	; 0x40
    5bba:	f7ff bb99 	b.w	52f0 <schedule_transfer>
    5bbe:	bf00      	nop
    5bc0:	20000000 	.word	0x20000000

00005bc4 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    5bc4:	1e83      	subs	r3, r0, #2
{
    5bc6:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    5bc8:	2b02      	cmp	r3, #2
    5bca:	d900      	bls.n	5bce <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    5bcc:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    5bce:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    5bd0:	4b02      	ldr	r3, [pc, #8]	; (5bdc <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    5bd2:	4081      	lsls	r1, r0
    5bd4:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    5bd8:	f7ff bb8a 	b.w	52f0 <schedule_transfer>
    5bdc:	20000000 	.word	0x20000000

00005be0 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    5be0:	6840      	ldr	r0, [r0, #4]
#endif
}
    5be2:	4770      	bx	lr

00005be4 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    5be4:	4a12      	ldr	r2, [pc, #72]	; (5c30 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    5be6:	4b13      	ldr	r3, [pc, #76]	; (5c34 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    5be8:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    5bec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    5bf0:	4298      	cmp	r0, r3
{
    5bf2:	b510      	push	{r4, lr}
    5bf4:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    5bf6:	d202      	bcs.n	5bfe <usb_init_serialnumber+0x1a>
    5bf8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5bfc:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    5bfe:	4c0e      	ldr	r4, [pc, #56]	; (5c38 <usb_init_serialnumber+0x54>)
    5c00:	a901      	add	r1, sp, #4
    5c02:	220a      	movs	r2, #10
    5c04:	f7ff f8a2 	bl	4d4c <ultoa>
	for (i=0; i<10; i++) {
    5c08:	a901      	add	r1, sp, #4
    5c0a:	2300      	movs	r3, #0
    5c0c:	4620      	mov	r0, r4
		char c = buf[i];
    5c0e:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    5c12:	3301      	adds	r3, #1
		if (!c) break;
    5c14:	b13a      	cbz	r2, 5c26 <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    5c16:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    5c18:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    5c1c:	d1f7      	bne.n	5c0e <usb_init_serialnumber+0x2a>
    5c1e:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    5c20:	7023      	strb	r3, [r4, #0]
}
    5c22:	b004      	add	sp, #16
    5c24:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    5c26:	005b      	lsls	r3, r3, #1
    5c28:	b2db      	uxtb	r3, r3
    5c2a:	7023      	strb	r3, [r4, #0]
}
    5c2c:	b004      	add	sp, #16
    5c2e:	bd10      	pop	{r4, pc}
    5c30:	401f4400 	.word	0x401f4400
    5c34:	00989680 	.word	0x00989680
    5c38:	20019a40 	.word	0x20019a40

00005c3c <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    5c3c:	f000 badc 	b.w	61f8 <usb_serial_flush_input>

00005c40 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    5c40:	f000 baac 	b.w	619c <usb_serial_peekchar>

00005c44 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    5c44:	f000 bb10 	b.w	6268 <usb_serial_getchar>

00005c48 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    5c48:	f000 baca 	b.w	61e0 <usb_serial_available>

00005c4c <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    5c4c:	f000 bb66 	b.w	631c <usb_serial_flush_output>

00005c50 <usb_serial_class::availableForWrite()>:
	size_t write(int n) { return write((uint8_t)n); }
	// Returns the number of bytes which may be transmitted by write() or print()
	// without waiting.  Typically programs which must maintain rapid checking
	// and response to sensors use availableForWrite() to decide whether to
	// transmit.
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    5c50:	f000 bb3c 	b.w	62cc <usb_serial_write_buffer_free>

00005c54 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5c54:	4608      	mov	r0, r1
    5c56:	4611      	mov	r1, r2
    5c58:	f000 bb2c 	b.w	62b4 <usb_serial_write>

00005c5c <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    5c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    5c5e:	4c14      	ldr	r4, [pc, #80]	; (5cb0 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    5c60:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    5c64:	4e13      	ldr	r6, [pc, #76]	; (5cb4 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    5c66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    5c6a:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    5c6e:	4f12      	ldr	r7, [pc, #72]	; (5cb8 <rx_queue_transfer+0x5c>)
    5c70:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    5c74:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    5c76:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    5c7a:	4621      	mov	r1, r4
    5c7c:	883a      	ldrh	r2, [r7, #0]
    5c7e:	4630      	mov	r0, r6
    5c80:	f7ff ff74 	bl	5b6c <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    5c84:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    5c86:	4423      	add	r3, r4
	asm("dsb");
    5c88:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    5c8c:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    5c90:	3420      	adds	r4, #32
	} while (location < end_addr);
    5c92:	42a3      	cmp	r3, r4
    5c94:	d8fa      	bhi.n	5c8c <rx_queue_transfer+0x30>
	asm("dsb");
    5c96:	f3bf 8f4f 	dsb	sy
	asm("isb");
    5c9a:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    5c9e:	2003      	movs	r0, #3
    5ca0:	4631      	mov	r1, r6
    5ca2:	f7ff ff8f 	bl	5bc4 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    5ca6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    5caa:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    5cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5cb0:	20200080 	.word	0x20200080
    5cb4:	2001a360 	.word	0x2001a360
    5cb8:	2001ac70 	.word	0x2001ac70

00005cbc <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    5cbc:	4b24      	ldr	r3, [pc, #144]	; (5d50 <rx_event+0x94>)
{
    5cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    5cc2:	881c      	ldrh	r4, [r3, #0]
    5cc4:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    5cc6:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    5cc8:	f3c3 430e 	ubfx	r3, r3, #16, #15
    5ccc:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    5cce:	2c00      	cmp	r4, #0
    5cd0:	dd24      	ble.n	5d1c <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    5cd2:	4920      	ldr	r1, [pc, #128]	; (5d54 <rx_event+0x98>)
		if (head != rx_tail) {
    5cd4:	4820      	ldr	r0, [pc, #128]	; (5d58 <rx_event+0x9c>)
		uint32_t head = rx_head;
    5cd6:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    5cd8:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    5cda:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    5cdc:	4e1f      	ldr	r6, [pc, #124]	; (5d5c <rx_event+0xa0>)
		if (head != rx_tail) {
    5cde:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    5ce0:	481f      	ldr	r0, [pc, #124]	; (5d60 <rx_event+0xa4>)
		if (head != rx_tail) {
    5ce2:	d007      	beq.n	5cf4 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    5ce4:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    5ce8:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    5cec:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    5cf0:	4294      	cmp	r4, r2
    5cf2:	d918      	bls.n	5d26 <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    5cf4:	3301      	adds	r3, #1
		rx_index[i] = 0;
    5cf6:	2200      	movs	r2, #0
		rx_count[i] = len;
    5cf8:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    5cfc:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    5cfe:	4e19      	ldr	r6, [pc, #100]	; (5d64 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    5d00:	bf88      	it	hi
    5d02:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    5d04:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    5d08:	bf98      	it	ls
    5d0a:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    5d0c:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    5d0e:	4b16      	ldr	r3, [pc, #88]	; (5d68 <rx_event+0xac>)
		rx_head = head;
    5d10:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    5d12:	681a      	ldr	r2, [r3, #0]
    5d14:	4414      	add	r4, r2
    5d16:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    5d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    5d1c:	4628      	mov	r0, r5
}
    5d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    5d22:	f7ff bf9b 	b.w	5c5c <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    5d26:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    5d2a:	4910      	ldr	r1, [pc, #64]	; (5d6c <rx_event+0xb0>)
    5d2c:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    5d2e:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    5d30:	4408      	add	r0, r1
    5d32:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    5d36:	f7fe ff6b 	bl	4c10 <memcpy>
				rx_available += len;
    5d3a:	4a0b      	ldr	r2, [pc, #44]	; (5d68 <rx_event+0xac>)
				rx_queue_transfer(i);
    5d3c:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    5d3e:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    5d42:	6813      	ldr	r3, [r2, #0]
    5d44:	4423      	add	r3, r4
}
    5d46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    5d4a:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    5d4c:	f7ff bf86 	b.w	5c5c <rx_queue_transfer>
    5d50:	2001ac70 	.word	0x2001ac70
    5d54:	2001ac7b 	.word	0x2001ac7b
    5d58:	2001ac7c 	.word	0x2001ac7c
    5d5c:	2001abdc 	.word	0x2001abdc
    5d60:	2001abfc 	.word	0x2001abfc
    5d64:	2001abec 	.word	0x2001abec
    5d68:	2001abd8 	.word	0x2001abd8
    5d6c:	20200080 	.word	0x20200080

00005d70 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    5d70:	4b1d      	ldr	r3, [pc, #116]	; (5de8 <usb_serial_flush_callback+0x78>)
    5d72:	781a      	ldrb	r2, [r3, #0]
    5d74:	2a00      	cmp	r2, #0
    5d76:	d136      	bne.n	5de6 <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    5d78:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    5d7c:	4a1b      	ldr	r2, [pc, #108]	; (5dec <usb_serial_flush_callback+0x7c>)
    5d7e:	7812      	ldrb	r2, [r2, #0]
    5d80:	b38a      	cbz	r2, 5de6 <usb_serial_flush_callback+0x76>
{
    5d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    5d86:	4d1a      	ldr	r5, [pc, #104]	; (5df0 <usb_serial_flush_callback+0x80>)
    5d88:	882a      	ldrh	r2, [r5, #0]
    5d8a:	b352      	cbz	r2, 5de2 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    5d8c:	4e19      	ldr	r6, [pc, #100]	; (5df4 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    5d8e:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    5d92:	4f19      	ldr	r7, [pc, #100]	; (5df8 <usb_serial_flush_callback+0x88>)
    5d94:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    5d96:	4c19      	ldr	r4, [pc, #100]	; (5dfc <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    5d98:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    5d9c:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    5da0:	4642      	mov	r2, r8
    5da2:	4638      	mov	r0, r7
    5da4:	4621      	mov	r1, r4
    5da6:	f7ff fee1 	bl	5b6c <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    5daa:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    5dae:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    5db2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    5db6:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    5dba:	3420      	adds	r4, #32
	} while (location < end_addr);
    5dbc:	42a2      	cmp	r2, r4
    5dbe:	d8fa      	bhi.n	5db6 <usb_serial_flush_callback+0x46>
	asm("dsb");
    5dc0:	f3bf 8f4f 	dsb	sy
	asm("isb");
    5dc4:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    5dc8:	2004      	movs	r0, #4
    5dca:	4639      	mov	r1, r7
    5dcc:	f7ff fee6 	bl	5b9c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    5dd0:	7833      	ldrb	r3, [r6, #0]
    5dd2:	3301      	adds	r3, #1
    5dd4:	b2db      	uxtb	r3, r3
    5dd6:	2b03      	cmp	r3, #3
    5dd8:	bf88      	it	hi
    5dda:	2300      	movhi	r3, #0
    5ddc:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    5dde:	2300      	movs	r3, #0
    5de0:	802b      	strh	r3, [r5, #0]
}
    5de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5de6:	4770      	bx	lr
    5de8:	2001ac80 	.word	0x2001ac80
    5dec:	2001ac82 	.word	0x2001ac82
    5df0:	2001ac72 	.word	0x2001ac72
    5df4:	2001ac7f 	.word	0x2001ac7f
    5df8:	2001a460 	.word	0x2001a460
    5dfc:	20201080 	.word	0x20201080

00005e00 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    5e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e04:	b085      	sub	sp, #20
	while (size > 0) {
    5e06:	e9cd 1001 	strd	r1, r0, [sp, #4]
    5e0a:	2900      	cmp	r1, #0
    5e0c:	f000 80bf 	beq.w	5f8e <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    5e10:	2300      	movs	r3, #0
    5e12:	4c60      	ldr	r4, [pc, #384]	; (5f94 <usb_serial_write.part.0+0x194>)
    5e14:	f8df 8198 	ldr.w	r8, [pc, #408]	; 5fb0 <usb_serial_write.part.0+0x1b0>
    5e18:	f8df a198 	ldr.w	sl, [pc, #408]	; 5fb4 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    5e1c:	4f5e      	ldr	r7, [pc, #376]	; (5f98 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    5e1e:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    5e20:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    5e22:	4a5e      	ldr	r2, [pc, #376]	; (5f9c <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    5e24:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    5e26:	4b5e      	ldr	r3, [pc, #376]	; (5fa0 <usb_serial_write.part.0+0x1a0>)
    5e28:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    5e2a:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    5e2e:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    5e32:	2b00      	cmp	r3, #0
    5e34:	f040 80a7 	bne.w	5f86 <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    5e38:	461e      	mov	r6, r3
		int waiting=0;
    5e3a:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    5e3c:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    5e3e:	4648      	mov	r0, r9
    5e40:	f7ff fece 	bl	5be0 <usb_transfer_status>
			if (!(status & 0x80)) {
    5e44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    5e48:	f000 808c 	beq.w	5f64 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    5e4c:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    5e50:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    5e54:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    5e58:	b905      	cbnz	r5, 5e5c <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    5e5a:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    5e5c:	2b00      	cmp	r3, #0
    5e5e:	d17d      	bne.n	5f5c <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    5e60:	683b      	ldr	r3, [r7, #0]
    5e62:	1b9b      	subs	r3, r3, r6
    5e64:	2b78      	cmp	r3, #120	; 0x78
    5e66:	f200 8087 	bhi.w	5f78 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    5e6a:	4b4e      	ldr	r3, [pc, #312]	; (5fa4 <usb_serial_write.part.0+0x1a4>)
    5e6c:	781b      	ldrb	r3, [r3, #0]
    5e6e:	2b00      	cmp	r3, #0
    5e70:	d074      	beq.n	5f5c <usb_serial_write.part.0+0x15c>
			yield();
    5e72:	f000 fa9d 	bl	63b0 <yield>
			tx_noautoflush = 1;
    5e76:	2201      	movs	r2, #1
		while (!tx_available) {
    5e78:	f8b8 3000 	ldrh.w	r3, [r8]
    5e7c:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    5e7e:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    5e80:	2b00      	cmp	r3, #0
    5e82:	d0dc      	beq.n	5e3e <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    5e84:	4a46      	ldr	r2, [pc, #280]	; (5fa0 <usb_serial_write.part.0+0x1a0>)
    5e86:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    5e8a:	7811      	ldrb	r1, [r2, #0]
    5e8c:	461a      	mov	r2, r3
    5e8e:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    5e92:	4d45      	ldr	r5, [pc, #276]	; (5fa8 <usb_serial_write.part.0+0x1a8>)
    5e94:	02c9      	lsls	r1, r1, #11
    5e96:	4428      	add	r0, r5
		if (size >= tx_available) {
    5e98:	9d01      	ldr	r5, [sp, #4]
    5e9a:	4295      	cmp	r5, r2
    5e9c:	d217      	bcs.n	5ece <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    5e9e:	9303      	str	r3, [sp, #12]
    5ea0:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    5ea4:	462a      	mov	r2, r5
    5ea6:	f7fe feb3 	bl	4c10 <memcpy>
			tx_available -= size;
    5eaa:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    5eac:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    5eb0:	1b5b      	subs	r3, r3, r5
    5eb2:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    5eb6:	4b3d      	ldr	r3, [pc, #244]	; (5fac <usb_serial_write.part.0+0x1ac>)
    5eb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    5ebc:	f3bf 8f4f 	dsb	sy
			sent += size;
    5ec0:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    5ec2:	2300      	movs	r3, #0
			sent += size;
    5ec4:	4428      	add	r0, r5
		tx_noautoflush = 0;
    5ec6:	7023      	strb	r3, [r4, #0]
}
    5ec8:	b005      	add	sp, #20
    5eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    5ece:	4b36      	ldr	r3, [pc, #216]	; (5fa8 <usb_serial_write.part.0+0x1a8>)
    5ed0:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    5ed2:	9902      	ldr	r1, [sp, #8]
    5ed4:	f7fe fe9c 	bl	4c10 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    5ed8:	2300      	movs	r3, #0
    5eda:	f44f 6200 	mov.w	r2, #2048	; 0x800
    5ede:	4629      	mov	r1, r5
    5ee0:	4648      	mov	r0, r9
    5ee2:	f7ff fe43 	bl	5b6c <usb_prepare_transfer>
	asm("dsb");
    5ee6:	f3bf 8f4f 	dsb	sy
    5eea:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    5eee:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    5ef2:	4293      	cmp	r3, r2
    5ef4:	bf34      	ite	cc
    5ef6:	2301      	movcc	r3, #1
    5ef8:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    5efa:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    5efe:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    5f02:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    5f06:	3520      	adds	r5, #32
	} while (location < end_addr);
    5f08:	42ab      	cmp	r3, r5
    5f0a:	d1fa      	bne.n	5f02 <usb_serial_write.part.0+0x102>
	asm("dsb");
    5f0c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    5f10:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    5f14:	2004      	movs	r0, #4
    5f16:	4649      	mov	r1, r9
    5f18:	f7ff fe40 	bl	5b9c <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    5f1c:	4a20      	ldr	r2, [pc, #128]	; (5fa0 <usb_serial_write.part.0+0x1a0>)
    5f1e:	7813      	ldrb	r3, [r2, #0]
    5f20:	3301      	adds	r3, #1
    5f22:	b2db      	uxtb	r3, r3
    5f24:	2b03      	cmp	r3, #3
    5f26:	bf84      	itt	hi
    5f28:	2300      	movhi	r3, #0
    5f2a:	4a1d      	ldrhi	r2, [pc, #116]	; (5fa0 <usb_serial_write.part.0+0x1a0>)
    5f2c:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    5f2e:	f8b8 3000 	ldrh.w	r3, [r8]
    5f32:	9a01      	ldr	r2, [sp, #4]
    5f34:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    5f36:	9a00      	ldr	r2, [sp, #0]
    5f38:	441a      	add	r2, r3
			size -= tx_available;
    5f3a:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    5f3c:	9200      	str	r2, [sp, #0]
			data += tx_available;
    5f3e:	9a02      	ldr	r2, [sp, #8]
    5f40:	441a      	add	r2, r3
			tx_available = 0;
    5f42:	2300      	movs	r3, #0
			data += tx_available;
    5f44:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    5f46:	4a19      	ldr	r2, [pc, #100]	; (5fac <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    5f48:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    5f4c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    5f50:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    5f54:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    5f56:	2900      	cmp	r1, #0
    5f58:	f47f af62 	bne.w	5e20 <usb_serial_write.part.0+0x20>
	return sent;
    5f5c:	9800      	ldr	r0, [sp, #0]
}
    5f5e:	b005      	add	sp, #20
    5f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    5f64:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    5f68:	4b0d      	ldr	r3, [pc, #52]	; (5fa0 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    5f6a:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    5f6e:	7819      	ldrb	r1, [r3, #0]
				break;
    5f70:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    5f72:	f8a8 2000 	strh.w	r2, [r8]
				break;
    5f76:	e78a      	b.n	5e8e <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    5f78:	2301      	movs	r3, #1
				return sent;
    5f7a:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    5f7c:	f88a 3000 	strb.w	r3, [sl]
}
    5f80:	b005      	add	sp, #20
    5f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    5f86:	461a      	mov	r2, r3
    5f88:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    5f8c:	e77f      	b.n	5e8e <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    5f8e:	9801      	ldr	r0, [sp, #4]
	return sent;
    5f90:	e7e5      	b.n	5f5e <usb_serial_write.part.0+0x15e>
    5f92:	bf00      	nop
    5f94:	2001ac80 	.word	0x2001ac80
    5f98:	2001ac40 	.word	0x2001ac40
    5f9c:	2001a460 	.word	0x2001a460
    5fa0:	2001ac7f 	.word	0x2001ac7f
    5fa4:	2001ac82 	.word	0x2001ac82
    5fa8:	20201080 	.word	0x20201080
    5fac:	402e0000 	.word	0x402e0000
    5fb0:	2001ac72 	.word	0x2001ac72
    5fb4:	2001ac7e 	.word	0x2001ac7e

00005fb8 <usb_serial_reset>:
}
    5fb8:	4770      	bx	lr
    5fba:	bf00      	nop

00005fbc <usb_serial_configure>:
	if (usb_high_speed) {
    5fbc:	4b2d      	ldr	r3, [pc, #180]	; (6074 <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    5fbe:	2100      	movs	r1, #0
    5fc0:	2280      	movs	r2, #128	; 0x80
    5fc2:	482d      	ldr	r0, [pc, #180]	; (6078 <usb_serial_configure+0xbc>)
{
    5fc4:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    5fc6:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    5fc8:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    5fca:	4d2c      	ldr	r5, [pc, #176]	; (607c <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    5fcc:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    5fce:	4e2c      	ldr	r6, [pc, #176]	; (6080 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    5fd0:	bf0c      	ite	eq
    5fd2:	2340      	moveq	r3, #64	; 0x40
    5fd4:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    5fd8:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    5fda:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    5fdc:	f001 fa30 	bl	7440 <memset>
	tx_head = 0;
    5fe0:	4a28      	ldr	r2, [pc, #160]	; (6084 <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    5fe2:	4621      	mov	r1, r4
	tx_available = 0;
    5fe4:	4b28      	ldr	r3, [pc, #160]	; (6088 <usb_serial_configure+0xcc>)
	tx_head = 0;
    5fe6:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    5fe8:	f44f 7280 	mov.w	r2, #256	; 0x100
    5fec:	4827      	ldr	r0, [pc, #156]	; (608c <usb_serial_configure+0xd0>)
	tx_available = 0;
    5fee:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    5ff0:	f001 fa26 	bl	7440 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    5ff4:	4a26      	ldr	r2, [pc, #152]	; (6090 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    5ff6:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    5ff8:	4b26      	ldr	r3, [pc, #152]	; (6094 <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    5ffa:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    5ffc:	e9c2 4400 	strd	r4, r4, [r2]
    6000:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    6004:	4a24      	ldr	r2, [pc, #144]	; (6098 <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    6006:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    600a:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    600c:	4a23      	ldr	r2, [pc, #140]	; (609c <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    600e:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    6012:	4b23      	ldr	r3, [pc, #140]	; (60a0 <usb_serial_configure+0xe4>)
    6014:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    6016:	4623      	mov	r3, r4
	rx_available = 0;
    6018:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    601a:	4622      	mov	r2, r4
    601c:	f7ff fd74 	bl	5b08 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    6020:	4622      	mov	r2, r4
    6022:	8831      	ldrh	r1, [r6, #0]
    6024:	2003      	movs	r0, #3
    6026:	4b1f      	ldr	r3, [pc, #124]	; (60a4 <usb_serial_configure+0xe8>)
    6028:	f7ff fd3c 	bl	5aa4 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    602c:	4623      	mov	r3, r4
    602e:	2201      	movs	r2, #1
    6030:	8829      	ldrh	r1, [r5, #0]
    6032:	2004      	movs	r0, #4
    6034:	f7ff fd68 	bl	5b08 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    6038:	4620      	mov	r0, r4
    603a:	3401      	adds	r4, #1
    603c:	f7ff fe0e 	bl	5c5c <rx_queue_transfer>
    6040:	2c08      	cmp	r4, #8
    6042:	d1f9      	bne.n	6038 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    6044:	4b18      	ldr	r3, [pc, #96]	; (60a8 <usb_serial_configure+0xec>)
    6046:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    6048:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    604a:	4818      	ldr	r0, [pc, #96]	; (60ac <usb_serial_configure+0xf0>)
    604c:	4c18      	ldr	r4, [pc, #96]	; (60b0 <usb_serial_configure+0xf4>)
    604e:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    6050:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    6054:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    6058:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    605c:	4915      	ldr	r1, [pc, #84]	; (60b4 <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    605e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    6062:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    6066:	b121      	cbz	r1, 6072 <usb_serial_configure+0xb6>
    6068:	4a13      	ldr	r2, [pc, #76]	; (60b8 <usb_serial_configure+0xfc>)
    606a:	7813      	ldrb	r3, [r2, #0]
    606c:	f043 0301 	orr.w	r3, r3, #1
    6070:	7013      	strb	r3, [r2, #0]
}
    6072:	bd70      	pop	{r4, r5, r6, pc}
    6074:	2001ac83 	.word	0x2001ac83
    6078:	2001a460 	.word	0x2001a460
    607c:	2001ac74 	.word	0x2001ac74
    6080:	2001ac70 	.word	0x2001ac70
    6084:	2001ac7f 	.word	0x2001ac7f
    6088:	2001ac72 	.word	0x2001ac72
    608c:	2001a360 	.word	0x2001a360
    6090:	2001abdc 	.word	0x2001abdc
    6094:	2001abec 	.word	0x2001abec
    6098:	2001ac7b 	.word	0x2001ac7b
    609c:	2001abd8 	.word	0x2001abd8
    60a0:	2001ac7c 	.word	0x2001ac7c
    60a4:	00005cbd 	.word	0x00005cbd
    60a8:	402e0000 	.word	0x402e0000
    60ac:	2001ac68 	.word	0x2001ac68
    60b0:	00005d71 	.word	0x00005d71
    60b4:	00000000 	.word	0x00000000
    60b8:	2001ac85 	.word	0x2001ac85

000060bc <usb_serial_read>:
{
    60bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    60c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    60c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    60c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 6194 <usb_serial_read+0xd8>
{
    60cc:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    60ce:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    60d2:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    60d4:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    60d8:	2900      	cmp	r1, #0
    60da:	d04f      	beq.n	617c <usb_serial_read+0xc0>
    60dc:	4680      	mov	r8, r0
    60de:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    60e0:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    60e2:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 6198 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    60e6:	4b26      	ldr	r3, [pc, #152]	; (6180 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    60e8:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    60ec:	4925      	ldr	r1, [pc, #148]	; (6184 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    60ee:	781b      	ldrb	r3, [r3, #0]
    60f0:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    60f2:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    60f6:	d03f      	beq.n	6178 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    60f8:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    60fa:	4b23      	ldr	r3, [pc, #140]	; (6188 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    60fc:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    60fe:	bf28      	it	cs
    6100:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    6102:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    6104:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    6108:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    610c:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    610e:	4b1f      	ldr	r3, [pc, #124]	; (618c <usb_serial_read+0xd0>)
    6110:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    6114:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    6118:	42aa      	cmp	r2, r5
    611a:	d21c      	bcs.n	6156 <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    611c:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    6120:	4918      	ldr	r1, [pc, #96]	; (6184 <usb_serial_read+0xc8>)
			rx_available -= len;
    6122:	4c1b      	ldr	r4, [pc, #108]	; (6190 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    6124:	4461      	add	r1, ip
    6126:	9201      	str	r2, [sp, #4]
    6128:	f7fe fd72 	bl	4c10 <memcpy>
			rx_available -= len;
    612c:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    612e:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    6132:	4658      	mov	r0, fp
			rx_index[i] += len;
    6134:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    6136:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    613a:	442a      	add	r2, r5
			rx_available -= len;
    613c:	4439      	add	r1, r7
			rx_index[i] += len;
    613e:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    6142:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    6144:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    6148:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    614c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    6150:	b003      	add	sp, #12
    6152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    6156:	462a      	mov	r2, r5
			count += avail;
    6158:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    615a:	f7fe fd59 	bl	4c10 <memcpy>
			rx_available -= avail;
    615e:	490c      	ldr	r1, [pc, #48]	; (6190 <usb_serial_read+0xd4>)
			rx_tail = tail;
    6160:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    6162:	4630      	mov	r0, r6
			rx_available -= avail;
    6164:	680a      	ldr	r2, [r1, #0]
			p += avail;
    6166:	44a8      	add	r8, r5
			rx_available -= avail;
    6168:	1b52      	subs	r2, r2, r5
    616a:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    616c:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    6170:	f7ff fd74 	bl	5c5c <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    6174:	45bb      	cmp	fp, r7
    6176:	d8b6      	bhi.n	60e6 <usb_serial_read+0x2a>
	return count;
    6178:	4638      	mov	r0, r7
    617a:	e7e3      	b.n	6144 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    617c:	4608      	mov	r0, r1
    617e:	e7e1      	b.n	6144 <usb_serial_read+0x88>
    6180:	2001ac7b 	.word	0x2001ac7b
    6184:	20200080 	.word	0x20200080
    6188:	2001abfc 	.word	0x2001abfc
    618c:	2001abdc 	.word	0x2001abdc
    6190:	2001abd8 	.word	0x2001abd8
    6194:	2001ac7c 	.word	0x2001ac7c
    6198:	2001abec 	.word	0x2001abec

0000619c <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    619c:	4b0b      	ldr	r3, [pc, #44]	; (61cc <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    619e:	4a0c      	ldr	r2, [pc, #48]	; (61d0 <usb_serial_peekchar+0x34>)
    61a0:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    61a2:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    61a4:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    61a6:	428a      	cmp	r2, r1
    61a8:	d00d      	beq.n	61c6 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    61aa:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    61ac:	4809      	ldr	r0, [pc, #36]	; (61d4 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    61ae:	4a0a      	ldr	r2, [pc, #40]	; (61d8 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    61b0:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    61b2:	490a      	ldr	r1, [pc, #40]	; (61dc <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    61b4:	bf28      	it	cs
    61b6:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    61b8:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    61ba:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    61be:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    61c2:	5c58      	ldrb	r0, [r3, r1]
    61c4:	4770      	bx	lr
	if (tail == rx_head) return -1;
    61c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    61ca:	4770      	bx	lr
    61cc:	2001ac7b 	.word	0x2001ac7b
    61d0:	2001ac7c 	.word	0x2001ac7c
    61d4:	2001abfc 	.word	0x2001abfc
    61d8:	20200080 	.word	0x20200080
    61dc:	2001abec 	.word	0x2001abec

000061e0 <usb_serial_available>:
	uint32_t n = rx_available;
    61e0:	4b04      	ldr	r3, [pc, #16]	; (61f4 <usb_serial_available+0x14>)
{
    61e2:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    61e4:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    61e6:	b10c      	cbz	r4, 61ec <usb_serial_available+0xc>
}
    61e8:	4620      	mov	r0, r4
    61ea:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    61ec:	f000 f8e0 	bl	63b0 <yield>
}
    61f0:	4620      	mov	r0, r4
    61f2:	bd10      	pop	{r4, pc}
    61f4:	2001abd8 	.word	0x2001abd8

000061f8 <usb_serial_flush_input>:
{
    61f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    61fc:	4e14      	ldr	r6, [pc, #80]	; (6250 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    61fe:	4d15      	ldr	r5, [pc, #84]	; (6254 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    6200:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    6202:	782a      	ldrb	r2, [r5, #0]
    6204:	4293      	cmp	r3, r2
    6206:	d021      	beq.n	624c <usb_serial_flush_input+0x54>
    6208:	b2dc      	uxtb	r4, r3
    620a:	f8df 9050 	ldr.w	r9, [pc, #80]	; 625c <usb_serial_flush_input+0x64>
    620e:	f8df b050 	ldr.w	fp, [pc, #80]	; 6260 <usb_serial_flush_input+0x68>
    6212:	f8df 8050 	ldr.w	r8, [pc, #80]	; 6264 <usb_serial_flush_input+0x6c>
    6216:	4f10      	ldr	r7, [pc, #64]	; (6258 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    6218:	3401      	adds	r4, #1
    621a:	2c08      	cmp	r4, #8
		rx_tail = tail;
    621c:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    6220:	d901      	bls.n	6226 <usb_serial_flush_input+0x2e>
    6222:	2400      	movs	r4, #0
    6224:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    6226:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    622a:	f8db 3000 	ldr.w	r3, [fp]
    622e:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    6232:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    6236:	1a52      	subs	r2, r2, r1
    6238:	1a9b      	subs	r3, r3, r2
    623a:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    623e:	f7ff fd0d 	bl	5c5c <rx_queue_transfer>
		rx_tail = tail;
    6242:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    6246:	782b      	ldrb	r3, [r5, #0]
    6248:	42a3      	cmp	r3, r4
    624a:	d1e5      	bne.n	6218 <usb_serial_flush_input+0x20>
}
    624c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6250:	2001ac7c 	.word	0x2001ac7c
    6254:	2001ac7b 	.word	0x2001ac7b
    6258:	2001abec 	.word	0x2001abec
    625c:	2001abfc 	.word	0x2001abfc
    6260:	2001abd8 	.word	0x2001abd8
    6264:	2001abdc 	.word	0x2001abdc

00006268 <usb_serial_getchar>:
{
    6268:	b500      	push	{lr}
    626a:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    626c:	2101      	movs	r1, #1
    626e:	f10d 0007 	add.w	r0, sp, #7
    6272:	f7ff ff23 	bl	60bc <usb_serial_read>
    6276:	b120      	cbz	r0, 6282 <usb_serial_getchar+0x1a>
    6278:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    627c:	b003      	add	sp, #12
    627e:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    6282:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6286:	e7f9      	b.n	627c <usb_serial_getchar+0x14>

00006288 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    6288:	4b09      	ldr	r3, [pc, #36]	; (62b0 <usb_serial_putchar+0x28>)
{
    628a:	b500      	push	{lr}
    628c:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    628e:	781b      	ldrb	r3, [r3, #0]
{
    6290:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    6294:	b13b      	cbz	r3, 62a6 <usb_serial_putchar+0x1e>
    6296:	2101      	movs	r1, #1
    6298:	f10d 0007 	add.w	r0, sp, #7
    629c:	f7ff fdb0 	bl	5e00 <usb_serial_write.part.0>
}
    62a0:	b003      	add	sp, #12
    62a2:	f85d fb04 	ldr.w	pc, [sp], #4
    62a6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    62aa:	b003      	add	sp, #12
    62ac:	f85d fb04 	ldr.w	pc, [sp], #4
    62b0:	2001ac82 	.word	0x2001ac82

000062b4 <usb_serial_write>:
	if (!usb_configuration) return 0;
    62b4:	4b04      	ldr	r3, [pc, #16]	; (62c8 <usb_serial_write+0x14>)
    62b6:	781b      	ldrb	r3, [r3, #0]
    62b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    62bc:	b10b      	cbz	r3, 62c2 <usb_serial_write+0xe>
    62be:	f7ff bd9f 	b.w	5e00 <usb_serial_write.part.0>
}
    62c2:	4610      	mov	r0, r2
    62c4:	4770      	bx	lr
    62c6:	bf00      	nop
    62c8:	2001ac82 	.word	0x2001ac82

000062cc <usb_serial_write_buffer_free>:
{
    62cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    62d0:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    62d2:	f8df 8044 	ldr.w	r8, [pc, #68]	; 6318 <usb_serial_write_buffer_free+0x4c>
    62d6:	2301      	movs	r3, #1
    62d8:	4d0d      	ldr	r5, [pc, #52]	; (6310 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    62da:	4627      	mov	r7, r4
    62dc:	4e0d      	ldr	r6, [pc, #52]	; (6314 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    62de:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    62e2:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    62e4:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    62e6:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    62e8:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    62ea:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    62ee:	d005      	beq.n	62fc <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    62f0:	f7ff fc76 	bl	5be0 <usb_transfer_status>
    62f4:	0603      	lsls	r3, r0, #24
    62f6:	bf58      	it	pl
    62f8:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    62fc:	2c04      	cmp	r4, #4
    62fe:	d1f0      	bne.n	62e2 <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    6300:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    6304:	2300      	movs	r3, #0
}
    6306:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    6308:	f888 3000 	strb.w	r3, [r8]
}
    630c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6310:	2001a460 	.word	0x2001a460
    6314:	2001ac7f 	.word	0x2001ac7f
    6318:	2001ac80 	.word	0x2001ac80

0000631c <usb_serial_flush_output>:
{
    631c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    6320:	4b1d      	ldr	r3, [pc, #116]	; (6398 <usb_serial_flush_output+0x7c>)
    6322:	781b      	ldrb	r3, [r3, #0]
    6324:	b113      	cbz	r3, 632c <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    6326:	4d1d      	ldr	r5, [pc, #116]	; (639c <usb_serial_flush_output+0x80>)
    6328:	882a      	ldrh	r2, [r5, #0]
    632a:	b90a      	cbnz	r2, 6330 <usb_serial_flush_output+0x14>
}
    632c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    6330:	4e1b      	ldr	r6, [pc, #108]	; (63a0 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    6332:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    6336:	491b      	ldr	r1, [pc, #108]	; (63a4 <usb_serial_flush_output+0x88>)
    6338:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    633a:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    633c:	4c1a      	ldr	r4, [pc, #104]	; (63a8 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    633e:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    6342:	4f1a      	ldr	r7, [pc, #104]	; (63ac <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    6344:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    6348:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    634a:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    634c:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    634e:	4621      	mov	r1, r4
    6350:	2300      	movs	r3, #0
    6352:	f7ff fc0b 	bl	5b6c <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    6356:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    635a:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    635e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    6362:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    6366:	3420      	adds	r4, #32
	} while (location < end_addr);
    6368:	42a2      	cmp	r2, r4
    636a:	d8fa      	bhi.n	6362 <usb_serial_flush_output+0x46>
	asm("dsb");
    636c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    6370:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    6374:	2004      	movs	r0, #4
    6376:	4641      	mov	r1, r8
    6378:	f7ff fc10 	bl	5b9c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    637c:	7833      	ldrb	r3, [r6, #0]
    637e:	3301      	adds	r3, #1
    6380:	b2db      	uxtb	r3, r3
    6382:	2b03      	cmp	r3, #3
    6384:	bf88      	it	hi
    6386:	2300      	movhi	r3, #0
    6388:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    638a:	2300      	movs	r3, #0
    638c:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    638e:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    6392:	703b      	strb	r3, [r7, #0]
}
    6394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6398:	2001ac82 	.word	0x2001ac82
    639c:	2001ac72 	.word	0x2001ac72
    63a0:	2001ac7f 	.word	0x2001ac7f
    63a4:	2001a460 	.word	0x2001a460
    63a8:	20201080 	.word	0x20201080
    63ac:	2001ac80 	.word	0x2001ac80

000063b0 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    63b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    63b4:	4b2d      	ldr	r3, [pc, #180]	; (646c <yield+0xbc>)
    63b6:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    63b8:	b166      	cbz	r6, 63d4 <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    63ba:	4f2d      	ldr	r7, [pc, #180]	; (6470 <yield+0xc0>)
    63bc:	783b      	ldrb	r3, [r7, #0]
    63be:	b94b      	cbnz	r3, 63d4 <yield+0x24>
	running = 1;
    63c0:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    63c2:	07f1      	lsls	r1, r6, #31
	running = 1;
    63c4:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    63c6:	d443      	bmi.n	6450 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    63c8:	07b2      	lsls	r2, r6, #30
    63ca:	d426      	bmi.n	641a <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    63cc:	2300      	movs	r3, #0
    63ce:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    63d0:	0773      	lsls	r3, r6, #29
    63d2:	d401      	bmi.n	63d8 <yield+0x28>
		EventResponder::runFromYield();
	}
};
    63d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    63d8:	4b26      	ldr	r3, [pc, #152]	; (6474 <yield+0xc4>)
    63da:	681a      	ldr	r2, [r3, #0]
    63dc:	2a00      	cmp	r2, #0
    63de:	d0f9      	beq.n	63d4 <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    63e0:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    63e4:	2a00      	cmp	r2, #0
    63e6:	d1f5      	bne.n	63d4 <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    63e8:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    63ec:	b672      	cpsid	i
		EventResponder *first = firstYield;
    63ee:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    63f0:	2800      	cmp	r0, #0
    63f2:	d034      	beq.n	645e <yield+0xae>
		if (runningFromYield) {
    63f4:	4c20      	ldr	r4, [pc, #128]	; (6478 <yield+0xc8>)
    63f6:	7821      	ldrb	r1, [r4, #0]
    63f8:	2900      	cmp	r1, #0
    63fa:	d130      	bne.n	645e <yield+0xae>
		runningFromYield = true;
    63fc:	2201      	movs	r2, #1
    63fe:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    6400:	6942      	ldr	r2, [r0, #20]
    6402:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    6404:	2a00      	cmp	r2, #0
    6406:	d02e      	beq.n	6466 <yield+0xb6>
			firstYield->_prev = nullptr;
    6408:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    640a:	b905      	cbnz	r5, 640e <yield+0x5e>
    640c:	b662      	cpsie	i
		first->_triggered = false;
    640e:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    6410:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    6412:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    6414:	4798      	blx	r3
		runningFromYield = false;
    6416:	7025      	strb	r5, [r4, #0]
    6418:	e7dc      	b.n	63d4 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    641a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 6480 <yield+0xd0>
    641e:	f898 3000 	ldrb.w	r3, [r8]
    6422:	2b00      	cmp	r3, #0
    6424:	d0d2      	beq.n	63cc <yield+0x1c>
    6426:	2500      	movs	r5, #0
    6428:	f8df 9058 	ldr.w	r9, [pc, #88]	; 6484 <yield+0xd4>
    642c:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    642e:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    6432:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    6434:	6823      	ldr	r3, [r4, #0]
    6436:	4620      	mov	r0, r4
    6438:	691b      	ldr	r3, [r3, #16]
    643a:	4798      	blx	r3
    643c:	b110      	cbz	r0, 6444 <yield+0x94>
    643e:	6963      	ldr	r3, [r4, #20]
    6440:	689b      	ldr	r3, [r3, #8]
    6442:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    6444:	f898 2000 	ldrb.w	r2, [r8]
    6448:	b2eb      	uxtb	r3, r5
    644a:	429a      	cmp	r2, r3
    644c:	d8ef      	bhi.n	642e <yield+0x7e>
    644e:	e7bd      	b.n	63cc <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    6450:	f7ff fec6 	bl	61e0 <usb_serial_available>
		if (Serial.available()) serialEvent();
    6454:	2800      	cmp	r0, #0
    6456:	d0b7      	beq.n	63c8 <yield+0x18>
    6458:	f3af 8000 	nop.w
    645c:	e7b4      	b.n	63c8 <yield+0x18>
		if (doit) __enable_irq();
    645e:	2d00      	cmp	r5, #0
    6460:	d1b8      	bne.n	63d4 <yield+0x24>
    6462:	b662      	cpsie	i
    6464:	e7b6      	b.n	63d4 <yield+0x24>
			lastYield = nullptr;
    6466:	4b05      	ldr	r3, [pc, #20]	; (647c <yield+0xcc>)
    6468:	601a      	str	r2, [r3, #0]
    646a:	e7ce      	b.n	640a <yield+0x5a>
    646c:	2001ac85 	.word	0x2001ac85
    6470:	2001ac78 	.word	0x2001ac78
    6474:	2001a840 	.word	0x2001a840
    6478:	2001ac76 	.word	0x2001ac76
    647c:	2001a84c 	.word	0x2001a84c
    6480:	2001ac77 	.word	0x2001ac77
    6484:	2001a850 	.word	0x2001a850

00006488 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    6488:	49a2      	ldr	r1, [pc, #648]	; (6714 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    648a:	4ba3      	ldr	r3, [pc, #652]	; (6718 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    648c:	4288      	cmp	r0, r1
{
    648e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    6492:	4ca2      	ldr	r4, [pc, #648]	; (671c <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    6494:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    6496:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    6498:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    649c:	d91b      	bls.n	64d6 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    649e:	4ba0      	ldr	r3, [pc, #640]	; (6720 <set_arm_clock+0x298>)
    64a0:	4298      	cmp	r0, r3
    64a2:	f240 8102 	bls.w	66aa <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    64a6:	1ac3      	subs	r3, r0, r3
    64a8:	499e      	ldr	r1, [pc, #632]	; (6724 <set_arm_clock+0x29c>)
    64aa:	0a1b      	lsrs	r3, r3, #8
    64ac:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    64b0:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    64b4:	09db      	lsrs	r3, r3, #7
    64b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    64ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    64be:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    64c2:	428b      	cmp	r3, r1
    64c4:	bf28      	it	cs
    64c6:	460b      	movcs	r3, r1
    64c8:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    64cc:	4b96      	ldr	r3, [pc, #600]	; (6728 <set_arm_clock+0x2a0>)
    64ce:	fba3 3707 	umull	r3, r7, r3, r7
    64d2:	08ff      	lsrs	r7, r7, #3
    64d4:	e004      	b.n	64e0 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    64d6:	4f95      	ldr	r7, [pc, #596]	; (672c <set_arm_clock+0x2a4>)
    64d8:	42b8      	cmp	r0, r7
    64da:	bf8c      	ite	hi
    64dc:	270e      	movhi	r7, #14
    64de:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    64e0:	498d      	ldr	r1, [pc, #564]	; (6718 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    64e2:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    64e6:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    64ea:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    64ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    64f0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    64f4:	d20c      	bcs.n	6510 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    64f6:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    64fa:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    64fe:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    6502:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    6506:	680b      	ldr	r3, [r1, #0]
    6508:	2b00      	cmp	r3, #0
    650a:	dafc      	bge.n	6506 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    650c:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    6510:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    6514:	d124      	bne.n	6560 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    6516:	4986      	ldr	r1, [pc, #536]	; (6730 <set_arm_clock+0x2a8>)
    6518:	690c      	ldr	r4, [r1, #16]
    651a:	4986      	ldr	r1, [pc, #536]	; (6734 <set_arm_clock+0x2ac>)
    651c:	43a1      	bics	r1, r4
    651e:	f000 80ea 	beq.w	66f6 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    6522:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    6526:	4634      	mov	r4, r6
    6528:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    652c:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    6530:	d004      	beq.n	653c <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    6532:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    6536:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    6538:	4b77      	ldr	r3, [pc, #476]	; (6718 <set_arm_clock+0x290>)
    653a:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    653c:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    6540:	d007      	beq.n	6552 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    6542:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    6546:	4974      	ldr	r1, [pc, #464]	; (6718 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    6548:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    654a:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    654c:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    654e:	071a      	lsls	r2, r3, #28
    6550:	d4fc      	bmi.n	654c <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    6552:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    6556:	4a70      	ldr	r2, [pc, #448]	; (6718 <set_arm_clock+0x290>)
    6558:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    655a:	6c93      	ldr	r3, [r2, #72]	; 0x48
    655c:	069b      	lsls	r3, r3, #26
    655e:	d4fc      	bmi.n	655a <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    6560:	4c75      	ldr	r4, [pc, #468]	; (6738 <set_arm_clock+0x2b0>)
    6562:	42a0      	cmp	r0, r4
    6564:	f200 80ce 	bhi.w	6704 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    6568:	f04f 0c01 	mov.w	ip, #1
    656c:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    656e:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    6570:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    6574:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    6578:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    657c:	42a2      	cmp	r2, r4
    657e:	d818      	bhi.n	65b2 <set_arm_clock+0x12a>
		if (div_arm < 8) {
    6580:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    6584:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    6588:	f040 808d 	bne.w	66a6 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    658c:	f1bc 0f04 	cmp.w	ip, #4
    6590:	f200 8091 	bhi.w	66b6 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    6594:	180a      	adds	r2, r1, r0
    6596:	42a2      	cmp	r2, r4
    6598:	f200 80a4 	bhi.w	66e4 <set_arm_clock+0x25c>
    659c:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    65a0:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    65a2:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    65a6:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    65aa:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    65ae:	42a2      	cmp	r2, r4
    65b0:	d9e6      	bls.n	6580 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    65b2:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    65b6:	028c      	lsls	r4, r1, #10
    65b8:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    65bc:	485f      	ldr	r0, [pc, #380]	; (673c <set_arm_clock+0x2b4>)
    65be:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    65c0:	4a5f      	ldr	r2, [pc, #380]	; (6740 <set_arm_clock+0x2b8>)
    65c2:	4290      	cmp	r0, r2
    65c4:	d97f      	bls.n	66c6 <set_arm_clock+0x23e>
    65c6:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 676c <set_arm_clock+0x2e4>
    65ca:	226c      	movs	r2, #108	; 0x6c
    65cc:	485d      	ldr	r0, [pc, #372]	; (6744 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    65ce:	4d58      	ldr	r5, [pc, #352]	; (6730 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    65d0:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    65d4:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    65d8:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    65dc:	f8df c190 	ldr.w	ip, [pc, #400]	; 6770 <set_arm_clock+0x2e8>
    65e0:	ea0e 0c0c 	and.w	ip, lr, ip
    65e4:	45d4      	cmp	ip, sl
    65e6:	d009      	beq.n	65fc <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    65e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    65ec:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    65f0:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    65f4:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    65f6:	682a      	ldr	r2, [r5, #0]
    65f8:	2a00      	cmp	r2, #0
    65fa:	dafc      	bge.n	65f6 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    65fc:	4a46      	ldr	r2, [pc, #280]	; (6718 <set_arm_clock+0x290>)
    65fe:	6915      	ldr	r5, [r2, #16]
    6600:	f005 0507 	and.w	r5, r5, #7
    6604:	429d      	cmp	r5, r3
    6606:	d003      	beq.n	6610 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    6608:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    660a:	6c93      	ldr	r3, [r2, #72]	; 0x48
    660c:	03dd      	lsls	r5, r3, #15
    660e:	d4fc      	bmi.n	660a <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    6610:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    6614:	d009      	beq.n	662a <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    6616:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    661a:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    661e:	4a3e      	ldr	r2, [pc, #248]	; (6718 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    6620:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    6622:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    6624:	6c93      	ldr	r3, [r2, #72]	; 0x48
    6626:	0799      	lsls	r1, r3, #30
    6628:	d4fc      	bmi.n	6624 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    662a:	4947      	ldr	r1, [pc, #284]	; (6748 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    662c:	4a47      	ldr	r2, [pc, #284]	; (674c <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    662e:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    6630:	4291      	cmp	r1, r2
    6632:	d83c      	bhi.n	66ae <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    6634:	4b46      	ldr	r3, [pc, #280]	; (6750 <set_arm_clock+0x2c8>)
    6636:	09c9      	lsrs	r1, r1, #7
    6638:	fba3 3101 	umull	r3, r1, r3, r1
    663c:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    663e:	1e4b      	subs	r3, r1, #1
    6640:	021b      	lsls	r3, r3, #8
    6642:	ea86 0203 	eor.w	r2, r6, r3
    6646:	f412 7f40 	tst.w	r2, #768	; 0x300
    664a:	d006      	beq.n	665a <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    664c:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    6650:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    6654:	4a30      	ldr	r2, [pc, #192]	; (6718 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    6656:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    6658:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    665a:	4a2f      	ldr	r2, [pc, #188]	; (6718 <set_arm_clock+0x290>)
    665c:	6953      	ldr	r3, [r2, #20]
    665e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    6662:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    6664:	6c93      	ldr	r3, [r2, #72]	; 0x48
    6666:	069b      	lsls	r3, r3, #26
    6668:	d4fc      	bmi.n	6664 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    666a:	4b3a      	ldr	r3, [pc, #232]	; (6754 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    666c:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    666e:	fba3 2300 	umull	r2, r3, r3, r0
    6672:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6676:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    667a:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    667e:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    6682:	4a35      	ldr	r2, [pc, #212]	; (6758 <set_arm_clock+0x2d0>)
    6684:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    6686:	4a35      	ldr	r2, [pc, #212]	; (675c <set_arm_clock+0x2d4>)
    6688:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    668a:	4a35      	ldr	r2, [pc, #212]	; (6760 <set_arm_clock+0x2d8>)
    668c:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    668e:	d208      	bcs.n	66a2 <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    6690:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    6694:	4a21      	ldr	r2, [pc, #132]	; (671c <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    6696:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    669a:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    669c:	6813      	ldr	r3, [r2, #0]
    669e:	2b00      	cmp	r3, #0
    66a0:	dafc      	bge.n	669c <set_arm_clock+0x214>
	}

	return frequency;
}
    66a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    66a6:	4673      	mov	r3, lr
    66a8:	e762      	b.n	6570 <set_arm_clock+0xe8>
    66aa:	2712      	movs	r7, #18
    66ac:	e718      	b.n	64e0 <set_arm_clock+0x58>
    66ae:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    66b2:	2104      	movs	r1, #4
    66b4:	e7c5      	b.n	6642 <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    66b6:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    66ba:	4820      	ldr	r0, [pc, #128]	; (673c <set_arm_clock+0x2b4>)
    66bc:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    66be:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    66c0:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    66c2:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    66c6:	4a27      	ldr	r2, [pc, #156]	; (6764 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    66c8:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 6774 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    66cc:	fba2 2000 	umull	r2, r0, r2, r0
    66d0:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    66d2:	4825      	ldr	r0, [pc, #148]	; (6768 <set_arm_clock+0x2e0>)
    66d4:	2a36      	cmp	r2, #54	; 0x36
    66d6:	bf38      	it	cc
    66d8:	2236      	movcc	r2, #54	; 0x36
    66da:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    66de:	ea42 0a0a 	orr.w	sl, r2, sl
    66e2:	e774      	b.n	65ce <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    66e4:	ea4f 248c 	mov.w	r4, ip, lsl #10
    66e8:	2300      	movs	r3, #0
    66ea:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    66ee:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    66f2:	46ac      	mov	ip, r5
    66f4:	e762      	b.n	65bc <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    66f6:	461d      	mov	r5, r3
    66f8:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    66fc:	4611      	mov	r1, r2
    66fe:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    6702:	e713      	b.n	652c <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    6704:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    6706:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    670a:	4602      	mov	r2, r0
    670c:	4631      	mov	r1, r6
    670e:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    6710:	46e6      	mov	lr, ip
    6712:	e753      	b.n	65bc <set_arm_clock+0x134>
    6714:	1f78a400 	.word	0x1f78a400
    6718:	400fc000 	.word	0x400fc000
    671c:	40080000 	.word	0x40080000
    6720:	23c34600 	.word	0x23c34600
    6724:	004cb223 	.word	0x004cb223
    6728:	51eb851f 	.word	0x51eb851f
    672c:	016e3600 	.word	0x016e3600
    6730:	400d8000 	.word	0x400d8000
    6734:	80003040 	.word	0x80003040
    6738:	269fb1ff 	.word	0x269fb1ff
    673c:	005b8d80 	.word	0x005b8d80
    6740:	4df67eff 	.word	0x4df67eff
    6744:	4d3f6400 	.word	0x4d3f6400
    6748:	08f0d17f 	.word	0x08f0d17f
    674c:	2cb4177f 	.word	0x2cb4177f
    6750:	00e5109f 	.word	0x00e5109f
    6754:	431bde83 	.word	0x431bde83
    6758:	200191e4 	.word	0x200191e4
    675c:	200191e0 	.word	0x200191e0
    6760:	2001ac18 	.word	0x2001ac18
    6764:	165e9f81 	.word	0x165e9f81
    6768:	00b71b00 	.word	0x00b71b00
    676c:	8000206c 	.word	0x8000206c
    6770:	8001307f 	.word	0x8001307f
    6774:	80002000 	.word	0x80002000

00006778 <rtc_get>:
#include "debug/printf.h"
#include <sys/time.h> // for struct timeval

unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
    6778:	4a07      	ldr	r2, [pc, #28]	; (6798 <rtc_get+0x20>)
    677a:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    677c:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    677e:	4619      	mov	r1, r3
    6780:	4684      	mov	ip, r0
    6782:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    6784:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    6786:	4299      	cmp	r1, r3
    6788:	d1f9      	bne.n	677e <rtc_get+0x6>
    678a:	4584      	cmp	ip, r0
    678c:	d1f7      	bne.n	677e <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    678e:	0bdb      	lsrs	r3, r3, #15
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
    6790:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    6794:	4770      	bx	lr
    6796:	bf00      	nop
    6798:	400d4000 	.word	0x400d4000

0000679c <__aeabi_atexit>:
    679c:	4603      	mov	r3, r0
    679e:	4608      	mov	r0, r1
    67a0:	4619      	mov	r1, r3
    67a2:	f000 bf09 	b.w	75b8 <__cxa_atexit>
    67a6:	bf00      	nop

000067a8 <malloc>:
    67a8:	4b02      	ldr	r3, [pc, #8]	; (67b4 <malloc+0xc>)
    67aa:	4601      	mov	r1, r0
    67ac:	6818      	ldr	r0, [r3, #0]
    67ae:	f000 b80b 	b.w	67c8 <_malloc_r>
    67b2:	bf00      	nop
    67b4:	200198ac 	.word	0x200198ac

000067b8 <free>:
    67b8:	4b02      	ldr	r3, [pc, #8]	; (67c4 <free+0xc>)
    67ba:	4601      	mov	r1, r0
    67bc:	6818      	ldr	r0, [r3, #0]
    67be:	f001 b861 	b.w	7884 <_free_r>
    67c2:	bf00      	nop
    67c4:	200198ac 	.word	0x200198ac

000067c8 <_malloc_r>:
    67c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    67cc:	f101 060b 	add.w	r6, r1, #11
    67d0:	2e16      	cmp	r6, #22
    67d2:	b083      	sub	sp, #12
    67d4:	4604      	mov	r4, r0
    67d6:	d824      	bhi.n	6822 <_malloc_r+0x5a>
    67d8:	2910      	cmp	r1, #16
    67da:	f200 80ba 	bhi.w	6952 <_malloc_r+0x18a>
    67de:	f000 faa3 	bl	6d28 <__malloc_lock>
    67e2:	2610      	movs	r6, #16
    67e4:	2218      	movs	r2, #24
    67e6:	2002      	movs	r0, #2
    67e8:	4fb5      	ldr	r7, [pc, #724]	; (6ac0 <_malloc_r+0x2f8>)
    67ea:	443a      	add	r2, r7
    67ec:	f1a2 0108 	sub.w	r1, r2, #8
    67f0:	6853      	ldr	r3, [r2, #4]
    67f2:	428b      	cmp	r3, r1
    67f4:	f000 80ba 	beq.w	696c <_malloc_r+0x1a4>
    67f8:	685a      	ldr	r2, [r3, #4]
    67fa:	68d9      	ldr	r1, [r3, #12]
    67fc:	f022 0203 	bic.w	r2, r2, #3
    6800:	441a      	add	r2, r3
    6802:	689d      	ldr	r5, [r3, #8]
    6804:	60e9      	str	r1, [r5, #12]
    6806:	608d      	str	r5, [r1, #8]
    6808:	6851      	ldr	r1, [r2, #4]
    680a:	f041 0101 	orr.w	r1, r1, #1
    680e:	4620      	mov	r0, r4
    6810:	6051      	str	r1, [r2, #4]
    6812:	f103 0508 	add.w	r5, r3, #8
    6816:	f000 fa8d 	bl	6d34 <__malloc_unlock>
    681a:	4628      	mov	r0, r5
    681c:	b003      	add	sp, #12
    681e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6822:	f036 0607 	bics.w	r6, r6, #7
    6826:	f100 8094 	bmi.w	6952 <_malloc_r+0x18a>
    682a:	42b1      	cmp	r1, r6
    682c:	f200 8091 	bhi.w	6952 <_malloc_r+0x18a>
    6830:	f000 fa7a 	bl	6d28 <__malloc_lock>
    6834:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    6838:	f0c0 819a 	bcc.w	6b70 <_malloc_r+0x3a8>
    683c:	0a73      	lsrs	r3, r6, #9
    683e:	f000 808f 	beq.w	6960 <_malloc_r+0x198>
    6842:	2b04      	cmp	r3, #4
    6844:	f200 816f 	bhi.w	6b26 <_malloc_r+0x35e>
    6848:	09b3      	lsrs	r3, r6, #6
    684a:	f103 0039 	add.w	r0, r3, #57	; 0x39
    684e:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    6852:	00c3      	lsls	r3, r0, #3
    6854:	4f9a      	ldr	r7, [pc, #616]	; (6ac0 <_malloc_r+0x2f8>)
    6856:	443b      	add	r3, r7
    6858:	f1a3 0508 	sub.w	r5, r3, #8
    685c:	685b      	ldr	r3, [r3, #4]
    685e:	429d      	cmp	r5, r3
    6860:	d106      	bne.n	6870 <_malloc_r+0xa8>
    6862:	e00c      	b.n	687e <_malloc_r+0xb6>
    6864:	2900      	cmp	r1, #0
    6866:	f280 8127 	bge.w	6ab8 <_malloc_r+0x2f0>
    686a:	68db      	ldr	r3, [r3, #12]
    686c:	429d      	cmp	r5, r3
    686e:	d006      	beq.n	687e <_malloc_r+0xb6>
    6870:	685a      	ldr	r2, [r3, #4]
    6872:	f022 0203 	bic.w	r2, r2, #3
    6876:	1b91      	subs	r1, r2, r6
    6878:	290f      	cmp	r1, #15
    687a:	ddf3      	ble.n	6864 <_malloc_r+0x9c>
    687c:	4660      	mov	r0, ip
    687e:	693d      	ldr	r5, [r7, #16]
    6880:	f8df c250 	ldr.w	ip, [pc, #592]	; 6ad4 <_malloc_r+0x30c>
    6884:	4565      	cmp	r5, ip
    6886:	d07c      	beq.n	6982 <_malloc_r+0x1ba>
    6888:	686a      	ldr	r2, [r5, #4]
    688a:	f022 0203 	bic.w	r2, r2, #3
    688e:	1b93      	subs	r3, r2, r6
    6890:	2b0f      	cmp	r3, #15
    6892:	f300 817b 	bgt.w	6b8c <_malloc_r+0x3c4>
    6896:	2b00      	cmp	r3, #0
    6898:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    689c:	f280 816c 	bge.w	6b78 <_malloc_r+0x3b0>
    68a0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    68a4:	f080 811a 	bcs.w	6adc <_malloc_r+0x314>
    68a8:	08d3      	lsrs	r3, r2, #3
    68aa:	6879      	ldr	r1, [r7, #4]
    68ac:	3301      	adds	r3, #1
    68ae:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    68b2:	2201      	movs	r2, #1
    68b4:	fa02 f20e 	lsl.w	r2, r2, lr
    68b8:	430a      	orrs	r2, r1
    68ba:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    68be:	f8c5 e008 	str.w	lr, [r5, #8]
    68c2:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    68c6:	3908      	subs	r1, #8
    68c8:	60e9      	str	r1, [r5, #12]
    68ca:	607a      	str	r2, [r7, #4]
    68cc:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    68d0:	f8ce 500c 	str.w	r5, [lr, #12]
    68d4:	1083      	asrs	r3, r0, #2
    68d6:	2101      	movs	r1, #1
    68d8:	4099      	lsls	r1, r3
    68da:	4291      	cmp	r1, r2
    68dc:	d857      	bhi.n	698e <_malloc_r+0x1c6>
    68de:	4211      	tst	r1, r2
    68e0:	d106      	bne.n	68f0 <_malloc_r+0x128>
    68e2:	f020 0003 	bic.w	r0, r0, #3
    68e6:	0049      	lsls	r1, r1, #1
    68e8:	4211      	tst	r1, r2
    68ea:	f100 0004 	add.w	r0, r0, #4
    68ee:	d0fa      	beq.n	68e6 <_malloc_r+0x11e>
    68f0:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    68f4:	464d      	mov	r5, r9
    68f6:	4686      	mov	lr, r0
    68f8:	f8d5 800c 	ldr.w	r8, [r5, #12]
    68fc:	4545      	cmp	r5, r8
    68fe:	d108      	bne.n	6912 <_malloc_r+0x14a>
    6900:	e11d      	b.n	6b3e <_malloc_r+0x376>
    6902:	2b00      	cmp	r3, #0
    6904:	f280 8124 	bge.w	6b50 <_malloc_r+0x388>
    6908:	f8d8 800c 	ldr.w	r8, [r8, #12]
    690c:	4545      	cmp	r5, r8
    690e:	f000 8116 	beq.w	6b3e <_malloc_r+0x376>
    6912:	f8d8 2004 	ldr.w	r2, [r8, #4]
    6916:	f022 0203 	bic.w	r2, r2, #3
    691a:	1b93      	subs	r3, r2, r6
    691c:	2b0f      	cmp	r3, #15
    691e:	ddf0      	ble.n	6902 <_malloc_r+0x13a>
    6920:	4620      	mov	r0, r4
    6922:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    6926:	eb08 0106 	add.w	r1, r8, r6
    692a:	f046 0601 	orr.w	r6, r6, #1
    692e:	f8c8 6004 	str.w	r6, [r8, #4]
    6932:	60ec      	str	r4, [r5, #12]
    6934:	60a5      	str	r5, [r4, #8]
    6936:	f043 0401 	orr.w	r4, r3, #1
    693a:	e9c7 1104 	strd	r1, r1, [r7, #16]
    693e:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    6942:	604c      	str	r4, [r1, #4]
    6944:	f848 3002 	str.w	r3, [r8, r2]
    6948:	f000 f9f4 	bl	6d34 <__malloc_unlock>
    694c:	f108 0508 	add.w	r5, r8, #8
    6950:	e002      	b.n	6958 <_malloc_r+0x190>
    6952:	230c      	movs	r3, #12
    6954:	6023      	str	r3, [r4, #0]
    6956:	2500      	movs	r5, #0
    6958:	4628      	mov	r0, r5
    695a:	b003      	add	sp, #12
    695c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6960:	f44f 7300 	mov.w	r3, #512	; 0x200
    6964:	2040      	movs	r0, #64	; 0x40
    6966:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    696a:	e773      	b.n	6854 <_malloc_r+0x8c>
    696c:	68d3      	ldr	r3, [r2, #12]
    696e:	429a      	cmp	r2, r3
    6970:	bf08      	it	eq
    6972:	3002      	addeq	r0, #2
    6974:	f47f af40 	bne.w	67f8 <_malloc_r+0x30>
    6978:	693d      	ldr	r5, [r7, #16]
    697a:	f8df c158 	ldr.w	ip, [pc, #344]	; 6ad4 <_malloc_r+0x30c>
    697e:	4565      	cmp	r5, ip
    6980:	d182      	bne.n	6888 <_malloc_r+0xc0>
    6982:	687a      	ldr	r2, [r7, #4]
    6984:	1083      	asrs	r3, r0, #2
    6986:	2101      	movs	r1, #1
    6988:	4099      	lsls	r1, r3
    698a:	4291      	cmp	r1, r2
    698c:	d9a7      	bls.n	68de <_malloc_r+0x116>
    698e:	68bd      	ldr	r5, [r7, #8]
    6990:	686b      	ldr	r3, [r5, #4]
    6992:	f023 0903 	bic.w	r9, r3, #3
    6996:	454e      	cmp	r6, r9
    6998:	d803      	bhi.n	69a2 <_malloc_r+0x1da>
    699a:	eba9 0306 	sub.w	r3, r9, r6
    699e:	2b0f      	cmp	r3, #15
    69a0:	dc7a      	bgt.n	6a98 <_malloc_r+0x2d0>
    69a2:	f8df b134 	ldr.w	fp, [pc, #308]	; 6ad8 <_malloc_r+0x310>
    69a6:	4b47      	ldr	r3, [pc, #284]	; (6ac4 <_malloc_r+0x2fc>)
    69a8:	f8db 2000 	ldr.w	r2, [fp]
    69ac:	681b      	ldr	r3, [r3, #0]
    69ae:	3201      	adds	r2, #1
    69b0:	4433      	add	r3, r6
    69b2:	eb05 0a09 	add.w	sl, r5, r9
    69b6:	f000 8133 	beq.w	6c20 <_malloc_r+0x458>
    69ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    69be:	330f      	adds	r3, #15
    69c0:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    69c4:	f028 080f 	bic.w	r8, r8, #15
    69c8:	4641      	mov	r1, r8
    69ca:	4620      	mov	r0, r4
    69cc:	f000 fdfa 	bl	75c4 <_sbrk_r>
    69d0:	1c41      	adds	r1, r0, #1
    69d2:	4602      	mov	r2, r0
    69d4:	f000 80f3 	beq.w	6bbe <_malloc_r+0x3f6>
    69d8:	4582      	cmp	sl, r0
    69da:	f200 80ee 	bhi.w	6bba <_malloc_r+0x3f2>
    69de:	4b3a      	ldr	r3, [pc, #232]	; (6ac8 <_malloc_r+0x300>)
    69e0:	6819      	ldr	r1, [r3, #0]
    69e2:	4441      	add	r1, r8
    69e4:	6019      	str	r1, [r3, #0]
    69e6:	4608      	mov	r0, r1
    69e8:	f000 814e 	beq.w	6c88 <_malloc_r+0x4c0>
    69ec:	f8db 1000 	ldr.w	r1, [fp]
    69f0:	9301      	str	r3, [sp, #4]
    69f2:	3101      	adds	r1, #1
    69f4:	bf1b      	ittet	ne
    69f6:	eba2 010a 	subne.w	r1, r2, sl
    69fa:	1809      	addne	r1, r1, r0
    69fc:	f8cb 2000 	streq.w	r2, [fp]
    6a00:	6019      	strne	r1, [r3, #0]
    6a02:	f012 0b07 	ands.w	fp, r2, #7
    6a06:	f000 8117 	beq.w	6c38 <_malloc_r+0x470>
    6a0a:	f1cb 0108 	rsb	r1, fp, #8
    6a0e:	440a      	add	r2, r1
    6a10:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    6a14:	4490      	add	r8, r2
    6a16:	3108      	adds	r1, #8
    6a18:	eba1 0108 	sub.w	r1, r1, r8
    6a1c:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    6a20:	4651      	mov	r1, sl
    6a22:	4620      	mov	r0, r4
    6a24:	9200      	str	r2, [sp, #0]
    6a26:	f000 fdcd 	bl	75c4 <_sbrk_r>
    6a2a:	1c42      	adds	r2, r0, #1
    6a2c:	e9dd 2300 	ldrd	r2, r3, [sp]
    6a30:	f000 814f 	beq.w	6cd2 <_malloc_r+0x50a>
    6a34:	1a80      	subs	r0, r0, r2
    6a36:	eb00 080a 	add.w	r8, r0, sl
    6a3a:	6819      	ldr	r1, [r3, #0]
    6a3c:	60ba      	str	r2, [r7, #8]
    6a3e:	f048 0001 	orr.w	r0, r8, #1
    6a42:	4451      	add	r1, sl
    6a44:	42bd      	cmp	r5, r7
    6a46:	6050      	str	r0, [r2, #4]
    6a48:	6019      	str	r1, [r3, #0]
    6a4a:	f000 8129 	beq.w	6ca0 <_malloc_r+0x4d8>
    6a4e:	f1b9 0f0f 	cmp.w	r9, #15
    6a52:	f240 8127 	bls.w	6ca4 <_malloc_r+0x4dc>
    6a56:	6868      	ldr	r0, [r5, #4]
    6a58:	f1a9 0c0c 	sub.w	ip, r9, #12
    6a5c:	f02c 0c07 	bic.w	ip, ip, #7
    6a60:	f000 0001 	and.w	r0, r0, #1
    6a64:	ea40 000c 	orr.w	r0, r0, ip
    6a68:	6068      	str	r0, [r5, #4]
    6a6a:	f04f 0e05 	mov.w	lr, #5
    6a6e:	eb05 000c 	add.w	r0, r5, ip
    6a72:	f1bc 0f0f 	cmp.w	ip, #15
    6a76:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    6a7a:	f200 8132 	bhi.w	6ce2 <_malloc_r+0x51a>
    6a7e:	6850      	ldr	r0, [r2, #4]
    6a80:	4615      	mov	r5, r2
    6a82:	4b12      	ldr	r3, [pc, #72]	; (6acc <_malloc_r+0x304>)
    6a84:	681a      	ldr	r2, [r3, #0]
    6a86:	428a      	cmp	r2, r1
    6a88:	bf38      	it	cc
    6a8a:	6019      	strcc	r1, [r3, #0]
    6a8c:	4b10      	ldr	r3, [pc, #64]	; (6ad0 <_malloc_r+0x308>)
    6a8e:	681a      	ldr	r2, [r3, #0]
    6a90:	428a      	cmp	r2, r1
    6a92:	bf38      	it	cc
    6a94:	6019      	strcc	r1, [r3, #0]
    6a96:	e094      	b.n	6bc2 <_malloc_r+0x3fa>
    6a98:	19aa      	adds	r2, r5, r6
    6a9a:	f043 0301 	orr.w	r3, r3, #1
    6a9e:	f046 0601 	orr.w	r6, r6, #1
    6aa2:	606e      	str	r6, [r5, #4]
    6aa4:	4620      	mov	r0, r4
    6aa6:	60ba      	str	r2, [r7, #8]
    6aa8:	6053      	str	r3, [r2, #4]
    6aaa:	f000 f943 	bl	6d34 <__malloc_unlock>
    6aae:	3508      	adds	r5, #8
    6ab0:	4628      	mov	r0, r5
    6ab2:	b003      	add	sp, #12
    6ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6ab8:	68d9      	ldr	r1, [r3, #12]
    6aba:	441a      	add	r2, r3
    6abc:	e6a1      	b.n	6802 <_malloc_r+0x3a>
    6abe:	bf00      	nop
    6ac0:	20019490 	.word	0x20019490
    6ac4:	2001aa3c 	.word	0x2001aa3c
    6ac8:	2001aa0c 	.word	0x2001aa0c
    6acc:	2001aa34 	.word	0x2001aa34
    6ad0:	2001aa38 	.word	0x2001aa38
    6ad4:	20019498 	.word	0x20019498
    6ad8:	20019898 	.word	0x20019898
    6adc:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    6ae0:	ea4f 2352 	mov.w	r3, r2, lsr #9
    6ae4:	d363      	bcc.n	6bae <_malloc_r+0x3e6>
    6ae6:	2b14      	cmp	r3, #20
    6ae8:	f200 80b7 	bhi.w	6c5a <_malloc_r+0x492>
    6aec:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    6af0:	00c9      	lsls	r1, r1, #3
    6af2:	335b      	adds	r3, #91	; 0x5b
    6af4:	eb07 0e01 	add.w	lr, r7, r1
    6af8:	5879      	ldr	r1, [r7, r1]
    6afa:	f1ae 0e08 	sub.w	lr, lr, #8
    6afe:	458e      	cmp	lr, r1
    6b00:	f000 8091 	beq.w	6c26 <_malloc_r+0x45e>
    6b04:	684b      	ldr	r3, [r1, #4]
    6b06:	f023 0303 	bic.w	r3, r3, #3
    6b0a:	4293      	cmp	r3, r2
    6b0c:	d902      	bls.n	6b14 <_malloc_r+0x34c>
    6b0e:	6889      	ldr	r1, [r1, #8]
    6b10:	458e      	cmp	lr, r1
    6b12:	d1f7      	bne.n	6b04 <_malloc_r+0x33c>
    6b14:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    6b18:	687a      	ldr	r2, [r7, #4]
    6b1a:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    6b1e:	f8ce 5008 	str.w	r5, [lr, #8]
    6b22:	60cd      	str	r5, [r1, #12]
    6b24:	e6d6      	b.n	68d4 <_malloc_r+0x10c>
    6b26:	2b14      	cmp	r3, #20
    6b28:	d959      	bls.n	6bde <_malloc_r+0x416>
    6b2a:	2b54      	cmp	r3, #84	; 0x54
    6b2c:	f200 809d 	bhi.w	6c6a <_malloc_r+0x4a2>
    6b30:	0b33      	lsrs	r3, r6, #12
    6b32:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    6b36:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    6b3a:	00c3      	lsls	r3, r0, #3
    6b3c:	e68a      	b.n	6854 <_malloc_r+0x8c>
    6b3e:	f10e 0e01 	add.w	lr, lr, #1
    6b42:	f01e 0f03 	tst.w	lr, #3
    6b46:	f105 0508 	add.w	r5, r5, #8
    6b4a:	f47f aed5 	bne.w	68f8 <_malloc_r+0x130>
    6b4e:	e051      	b.n	6bf4 <_malloc_r+0x42c>
    6b50:	4442      	add	r2, r8
    6b52:	4645      	mov	r5, r8
    6b54:	6853      	ldr	r3, [r2, #4]
    6b56:	f8d8 100c 	ldr.w	r1, [r8, #12]
    6b5a:	f043 0301 	orr.w	r3, r3, #1
    6b5e:	6053      	str	r3, [r2, #4]
    6b60:	f855 3f08 	ldr.w	r3, [r5, #8]!
    6b64:	4620      	mov	r0, r4
    6b66:	60d9      	str	r1, [r3, #12]
    6b68:	608b      	str	r3, [r1, #8]
    6b6a:	f000 f8e3 	bl	6d34 <__malloc_unlock>
    6b6e:	e6f3      	b.n	6958 <_malloc_r+0x190>
    6b70:	08f0      	lsrs	r0, r6, #3
    6b72:	f106 0208 	add.w	r2, r6, #8
    6b76:	e637      	b.n	67e8 <_malloc_r+0x20>
    6b78:	442a      	add	r2, r5
    6b7a:	4620      	mov	r0, r4
    6b7c:	6853      	ldr	r3, [r2, #4]
    6b7e:	f043 0301 	orr.w	r3, r3, #1
    6b82:	6053      	str	r3, [r2, #4]
    6b84:	3508      	adds	r5, #8
    6b86:	f000 f8d5 	bl	6d34 <__malloc_unlock>
    6b8a:	e6e5      	b.n	6958 <_malloc_r+0x190>
    6b8c:	19a9      	adds	r1, r5, r6
    6b8e:	4620      	mov	r0, r4
    6b90:	f046 0601 	orr.w	r6, r6, #1
    6b94:	f043 0401 	orr.w	r4, r3, #1
    6b98:	606e      	str	r6, [r5, #4]
    6b9a:	e9c7 1104 	strd	r1, r1, [r7, #16]
    6b9e:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    6ba2:	604c      	str	r4, [r1, #4]
    6ba4:	50ab      	str	r3, [r5, r2]
    6ba6:	f000 f8c5 	bl	6d34 <__malloc_unlock>
    6baa:	3508      	adds	r5, #8
    6bac:	e6d4      	b.n	6958 <_malloc_r+0x190>
    6bae:	0993      	lsrs	r3, r2, #6
    6bb0:	f103 0139 	add.w	r1, r3, #57	; 0x39
    6bb4:	00c9      	lsls	r1, r1, #3
    6bb6:	3338      	adds	r3, #56	; 0x38
    6bb8:	e79c      	b.n	6af4 <_malloc_r+0x32c>
    6bba:	42bd      	cmp	r5, r7
    6bbc:	d05f      	beq.n	6c7e <_malloc_r+0x4b6>
    6bbe:	68bd      	ldr	r5, [r7, #8]
    6bc0:	6868      	ldr	r0, [r5, #4]
    6bc2:	f020 0803 	bic.w	r8, r0, #3
    6bc6:	4546      	cmp	r6, r8
    6bc8:	eba8 0306 	sub.w	r3, r8, r6
    6bcc:	d802      	bhi.n	6bd4 <_malloc_r+0x40c>
    6bce:	2b0f      	cmp	r3, #15
    6bd0:	f73f af62 	bgt.w	6a98 <_malloc_r+0x2d0>
    6bd4:	4620      	mov	r0, r4
    6bd6:	f000 f8ad 	bl	6d34 <__malloc_unlock>
    6bda:	2500      	movs	r5, #0
    6bdc:	e6bc      	b.n	6958 <_malloc_r+0x190>
    6bde:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    6be2:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    6be6:	00c3      	lsls	r3, r0, #3
    6be8:	e634      	b.n	6854 <_malloc_r+0x8c>
    6bea:	f859 3908 	ldr.w	r3, [r9], #-8
    6bee:	454b      	cmp	r3, r9
    6bf0:	f040 8096 	bne.w	6d20 <_malloc_r+0x558>
    6bf4:	f010 0f03 	tst.w	r0, #3
    6bf8:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    6bfc:	d1f5      	bne.n	6bea <_malloc_r+0x422>
    6bfe:	687b      	ldr	r3, [r7, #4]
    6c00:	ea23 0301 	bic.w	r3, r3, r1
    6c04:	607b      	str	r3, [r7, #4]
    6c06:	0049      	lsls	r1, r1, #1
    6c08:	4299      	cmp	r1, r3
    6c0a:	f63f aec0 	bhi.w	698e <_malloc_r+0x1c6>
    6c0e:	b919      	cbnz	r1, 6c18 <_malloc_r+0x450>
    6c10:	e6bd      	b.n	698e <_malloc_r+0x1c6>
    6c12:	0049      	lsls	r1, r1, #1
    6c14:	f10e 0e04 	add.w	lr, lr, #4
    6c18:	4219      	tst	r1, r3
    6c1a:	d0fa      	beq.n	6c12 <_malloc_r+0x44a>
    6c1c:	4670      	mov	r0, lr
    6c1e:	e667      	b.n	68f0 <_malloc_r+0x128>
    6c20:	f103 0810 	add.w	r8, r3, #16
    6c24:	e6d0      	b.n	69c8 <_malloc_r+0x200>
    6c26:	109a      	asrs	r2, r3, #2
    6c28:	f04f 0801 	mov.w	r8, #1
    6c2c:	687b      	ldr	r3, [r7, #4]
    6c2e:	fa08 f202 	lsl.w	r2, r8, r2
    6c32:	431a      	orrs	r2, r3
    6c34:	607a      	str	r2, [r7, #4]
    6c36:	e770      	b.n	6b1a <_malloc_r+0x352>
    6c38:	eb02 0108 	add.w	r1, r2, r8
    6c3c:	4249      	negs	r1, r1
    6c3e:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    6c42:	4651      	mov	r1, sl
    6c44:	4620      	mov	r0, r4
    6c46:	9200      	str	r2, [sp, #0]
    6c48:	f000 fcbc 	bl	75c4 <_sbrk_r>
    6c4c:	1c43      	adds	r3, r0, #1
    6c4e:	e9dd 2300 	ldrd	r2, r3, [sp]
    6c52:	f47f aeef 	bne.w	6a34 <_malloc_r+0x26c>
    6c56:	46da      	mov	sl, fp
    6c58:	e6ef      	b.n	6a3a <_malloc_r+0x272>
    6c5a:	2b54      	cmp	r3, #84	; 0x54
    6c5c:	d825      	bhi.n	6caa <_malloc_r+0x4e2>
    6c5e:	0b13      	lsrs	r3, r2, #12
    6c60:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    6c64:	00c9      	lsls	r1, r1, #3
    6c66:	336e      	adds	r3, #110	; 0x6e
    6c68:	e744      	b.n	6af4 <_malloc_r+0x32c>
    6c6a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    6c6e:	d825      	bhi.n	6cbc <_malloc_r+0x4f4>
    6c70:	0bf3      	lsrs	r3, r6, #15
    6c72:	f103 0078 	add.w	r0, r3, #120	; 0x78
    6c76:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    6c7a:	00c3      	lsls	r3, r0, #3
    6c7c:	e5ea      	b.n	6854 <_malloc_r+0x8c>
    6c7e:	4b29      	ldr	r3, [pc, #164]	; (6d24 <_malloc_r+0x55c>)
    6c80:	6818      	ldr	r0, [r3, #0]
    6c82:	4440      	add	r0, r8
    6c84:	6018      	str	r0, [r3, #0]
    6c86:	e6b1      	b.n	69ec <_malloc_r+0x224>
    6c88:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    6c8c:	f1bc 0f00 	cmp.w	ip, #0
    6c90:	f47f aeac 	bne.w	69ec <_malloc_r+0x224>
    6c94:	68bd      	ldr	r5, [r7, #8]
    6c96:	44c8      	add	r8, r9
    6c98:	f048 0001 	orr.w	r0, r8, #1
    6c9c:	6068      	str	r0, [r5, #4]
    6c9e:	e6f0      	b.n	6a82 <_malloc_r+0x2ba>
    6ca0:	4615      	mov	r5, r2
    6ca2:	e6ee      	b.n	6a82 <_malloc_r+0x2ba>
    6ca4:	2301      	movs	r3, #1
    6ca6:	6053      	str	r3, [r2, #4]
    6ca8:	e794      	b.n	6bd4 <_malloc_r+0x40c>
    6caa:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    6cae:	d823      	bhi.n	6cf8 <_malloc_r+0x530>
    6cb0:	0bd3      	lsrs	r3, r2, #15
    6cb2:	f103 0178 	add.w	r1, r3, #120	; 0x78
    6cb6:	00c9      	lsls	r1, r1, #3
    6cb8:	3377      	adds	r3, #119	; 0x77
    6cba:	e71b      	b.n	6af4 <_malloc_r+0x32c>
    6cbc:	f240 5254 	movw	r2, #1364	; 0x554
    6cc0:	4293      	cmp	r3, r2
    6cc2:	d823      	bhi.n	6d0c <_malloc_r+0x544>
    6cc4:	0cb3      	lsrs	r3, r6, #18
    6cc6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    6cca:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    6cce:	00c3      	lsls	r3, r0, #3
    6cd0:	e5c0      	b.n	6854 <_malloc_r+0x8c>
    6cd2:	f1ab 0b08 	sub.w	fp, fp, #8
    6cd6:	44d8      	add	r8, fp
    6cd8:	eba8 0802 	sub.w	r8, r8, r2
    6cdc:	f04f 0a00 	mov.w	sl, #0
    6ce0:	e6ab      	b.n	6a3a <_malloc_r+0x272>
    6ce2:	f105 0108 	add.w	r1, r5, #8
    6ce6:	4620      	mov	r0, r4
    6ce8:	9300      	str	r3, [sp, #0]
    6cea:	f000 fdcb 	bl	7884 <_free_r>
    6cee:	68bd      	ldr	r5, [r7, #8]
    6cf0:	9b00      	ldr	r3, [sp, #0]
    6cf2:	6868      	ldr	r0, [r5, #4]
    6cf4:	6819      	ldr	r1, [r3, #0]
    6cf6:	e6c4      	b.n	6a82 <_malloc_r+0x2ba>
    6cf8:	f240 5154 	movw	r1, #1364	; 0x554
    6cfc:	428b      	cmp	r3, r1
    6cfe:	d80b      	bhi.n	6d18 <_malloc_r+0x550>
    6d00:	0c93      	lsrs	r3, r2, #18
    6d02:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    6d06:	00c9      	lsls	r1, r1, #3
    6d08:	337c      	adds	r3, #124	; 0x7c
    6d0a:	e6f3      	b.n	6af4 <_malloc_r+0x32c>
    6d0c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    6d10:	207f      	movs	r0, #127	; 0x7f
    6d12:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    6d16:	e59d      	b.n	6854 <_malloc_r+0x8c>
    6d18:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    6d1c:	237e      	movs	r3, #126	; 0x7e
    6d1e:	e6e9      	b.n	6af4 <_malloc_r+0x32c>
    6d20:	687b      	ldr	r3, [r7, #4]
    6d22:	e770      	b.n	6c06 <_malloc_r+0x43e>
    6d24:	2001aa0c 	.word	0x2001aa0c

00006d28 <__malloc_lock>:
    6d28:	4801      	ldr	r0, [pc, #4]	; (6d30 <__malloc_lock+0x8>)
    6d2a:	f000 bca1 	b.w	7670 <__retarget_lock_acquire_recursive>
    6d2e:	bf00      	nop
    6d30:	2001aa04 	.word	0x2001aa04

00006d34 <__malloc_unlock>:
    6d34:	4801      	ldr	r0, [pc, #4]	; (6d3c <__malloc_unlock+0x8>)
    6d36:	f000 bc9d 	b.w	7674 <__retarget_lock_release_recursive>
    6d3a:	bf00      	nop
    6d3c:	2001aa04 	.word	0x2001aa04

00006d40 <_realloc_r>:
    6d40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6d44:	4617      	mov	r7, r2
    6d46:	2900      	cmp	r1, #0
    6d48:	f000 8098 	beq.w	6e7c <_realloc_r+0x13c>
    6d4c:	460c      	mov	r4, r1
    6d4e:	f107 050b 	add.w	r5, r7, #11
    6d52:	4680      	mov	r8, r0
    6d54:	f7ff ffe8 	bl	6d28 <__malloc_lock>
    6d58:	2d16      	cmp	r5, #22
    6d5a:	f854 1c04 	ldr.w	r1, [r4, #-4]
    6d5e:	d85b      	bhi.n	6e18 <_realloc_r+0xd8>
    6d60:	2510      	movs	r5, #16
    6d62:	462a      	mov	r2, r5
    6d64:	42af      	cmp	r7, r5
    6d66:	d85c      	bhi.n	6e22 <_realloc_r+0xe2>
    6d68:	f021 0603 	bic.w	r6, r1, #3
    6d6c:	4296      	cmp	r6, r2
    6d6e:	f1a4 0908 	sub.w	r9, r4, #8
    6d72:	da62      	bge.n	6e3a <_realloc_r+0xfa>
    6d74:	4bbc      	ldr	r3, [pc, #752]	; (7068 <_realloc_r+0x328>)
    6d76:	f8d3 c008 	ldr.w	ip, [r3, #8]
    6d7a:	eb09 0006 	add.w	r0, r9, r6
    6d7e:	4584      	cmp	ip, r0
    6d80:	f000 8097 	beq.w	6eb2 <_realloc_r+0x172>
    6d84:	f8d0 c004 	ldr.w	ip, [r0, #4]
    6d88:	f02c 0301 	bic.w	r3, ip, #1
    6d8c:	4403      	add	r3, r0
    6d8e:	685b      	ldr	r3, [r3, #4]
    6d90:	07db      	lsls	r3, r3, #31
    6d92:	d468      	bmi.n	6e66 <_realloc_r+0x126>
    6d94:	f02c 0c03 	bic.w	ip, ip, #3
    6d98:	eb06 030c 	add.w	r3, r6, ip
    6d9c:	4293      	cmp	r3, r2
    6d9e:	da47      	bge.n	6e30 <_realloc_r+0xf0>
    6da0:	07cb      	lsls	r3, r1, #31
    6da2:	d410      	bmi.n	6dc6 <_realloc_r+0x86>
    6da4:	f854 3c08 	ldr.w	r3, [r4, #-8]
    6da8:	eba9 0a03 	sub.w	sl, r9, r3
    6dac:	f8da 3004 	ldr.w	r3, [sl, #4]
    6db0:	f023 0103 	bic.w	r1, r3, #3
    6db4:	448c      	add	ip, r1
    6db6:	44b4      	add	ip, r6
    6db8:	4594      	cmp	ip, r2
    6dba:	f280 8111 	bge.w	6fe0 <_realloc_r+0x2a0>
    6dbe:	1873      	adds	r3, r6, r1
    6dc0:	4293      	cmp	r3, r2
    6dc2:	f280 80e8 	bge.w	6f96 <_realloc_r+0x256>
    6dc6:	4639      	mov	r1, r7
    6dc8:	4640      	mov	r0, r8
    6dca:	f7ff fcfd 	bl	67c8 <_malloc_r>
    6dce:	4607      	mov	r7, r0
    6dd0:	b1e0      	cbz	r0, 6e0c <_realloc_r+0xcc>
    6dd2:	f854 3c04 	ldr.w	r3, [r4, #-4]
    6dd6:	f023 0301 	bic.w	r3, r3, #1
    6dda:	444b      	add	r3, r9
    6ddc:	f1a0 0208 	sub.w	r2, r0, #8
    6de0:	4293      	cmp	r3, r2
    6de2:	f000 80d2 	beq.w	6f8a <_realloc_r+0x24a>
    6de6:	1f32      	subs	r2, r6, #4
    6de8:	2a24      	cmp	r2, #36	; 0x24
    6dea:	f200 80f5 	bhi.w	6fd8 <_realloc_r+0x298>
    6dee:	2a13      	cmp	r2, #19
    6df0:	f200 80ac 	bhi.w	6f4c <_realloc_r+0x20c>
    6df4:	4603      	mov	r3, r0
    6df6:	4622      	mov	r2, r4
    6df8:	6811      	ldr	r1, [r2, #0]
    6dfa:	6019      	str	r1, [r3, #0]
    6dfc:	6851      	ldr	r1, [r2, #4]
    6dfe:	6059      	str	r1, [r3, #4]
    6e00:	6892      	ldr	r2, [r2, #8]
    6e02:	609a      	str	r2, [r3, #8]
    6e04:	4621      	mov	r1, r4
    6e06:	4640      	mov	r0, r8
    6e08:	f000 fd3c 	bl	7884 <_free_r>
    6e0c:	4640      	mov	r0, r8
    6e0e:	f7ff ff91 	bl	6d34 <__malloc_unlock>
    6e12:	4638      	mov	r0, r7
    6e14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6e18:	f025 0507 	bic.w	r5, r5, #7
    6e1c:	2d00      	cmp	r5, #0
    6e1e:	462a      	mov	r2, r5
    6e20:	daa0      	bge.n	6d64 <_realloc_r+0x24>
    6e22:	230c      	movs	r3, #12
    6e24:	f8c8 3000 	str.w	r3, [r8]
    6e28:	2700      	movs	r7, #0
    6e2a:	4638      	mov	r0, r7
    6e2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6e30:	461e      	mov	r6, r3
    6e32:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    6e36:	60d3      	str	r3, [r2, #12]
    6e38:	609a      	str	r2, [r3, #8]
    6e3a:	1b73      	subs	r3, r6, r5
    6e3c:	2b0f      	cmp	r3, #15
    6e3e:	d822      	bhi.n	6e86 <_realloc_r+0x146>
    6e40:	f8d9 3004 	ldr.w	r3, [r9, #4]
    6e44:	f003 0301 	and.w	r3, r3, #1
    6e48:	4333      	orrs	r3, r6
    6e4a:	444e      	add	r6, r9
    6e4c:	f8c9 3004 	str.w	r3, [r9, #4]
    6e50:	6873      	ldr	r3, [r6, #4]
    6e52:	f043 0301 	orr.w	r3, r3, #1
    6e56:	6073      	str	r3, [r6, #4]
    6e58:	4640      	mov	r0, r8
    6e5a:	4627      	mov	r7, r4
    6e5c:	f7ff ff6a 	bl	6d34 <__malloc_unlock>
    6e60:	4638      	mov	r0, r7
    6e62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6e66:	07c9      	lsls	r1, r1, #31
    6e68:	d4ad      	bmi.n	6dc6 <_realloc_r+0x86>
    6e6a:	f854 3c08 	ldr.w	r3, [r4, #-8]
    6e6e:	eba9 0a03 	sub.w	sl, r9, r3
    6e72:	f8da 1004 	ldr.w	r1, [sl, #4]
    6e76:	f021 0103 	bic.w	r1, r1, #3
    6e7a:	e7a0      	b.n	6dbe <_realloc_r+0x7e>
    6e7c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e80:	4611      	mov	r1, r2
    6e82:	f7ff bca1 	b.w	67c8 <_malloc_r>
    6e86:	f8d9 2004 	ldr.w	r2, [r9, #4]
    6e8a:	eb09 0105 	add.w	r1, r9, r5
    6e8e:	f002 0201 	and.w	r2, r2, #1
    6e92:	444e      	add	r6, r9
    6e94:	f043 0301 	orr.w	r3, r3, #1
    6e98:	432a      	orrs	r2, r5
    6e9a:	f8c9 2004 	str.w	r2, [r9, #4]
    6e9e:	604b      	str	r3, [r1, #4]
    6ea0:	6873      	ldr	r3, [r6, #4]
    6ea2:	f043 0301 	orr.w	r3, r3, #1
    6ea6:	3108      	adds	r1, #8
    6ea8:	6073      	str	r3, [r6, #4]
    6eaa:	4640      	mov	r0, r8
    6eac:	f000 fcea 	bl	7884 <_free_r>
    6eb0:	e7d2      	b.n	6e58 <_realloc_r+0x118>
    6eb2:	f8dc 0004 	ldr.w	r0, [ip, #4]
    6eb6:	f020 0b03 	bic.w	fp, r0, #3
    6eba:	eb06 0c0b 	add.w	ip, r6, fp
    6ebe:	f105 0010 	add.w	r0, r5, #16
    6ec2:	4584      	cmp	ip, r0
    6ec4:	da4d      	bge.n	6f62 <_realloc_r+0x222>
    6ec6:	07c9      	lsls	r1, r1, #31
    6ec8:	f53f af7d 	bmi.w	6dc6 <_realloc_r+0x86>
    6ecc:	f854 1c08 	ldr.w	r1, [r4, #-8]
    6ed0:	eba9 0a01 	sub.w	sl, r9, r1
    6ed4:	f8da 1004 	ldr.w	r1, [sl, #4]
    6ed8:	f021 0103 	bic.w	r1, r1, #3
    6edc:	448b      	add	fp, r1
    6ede:	44b3      	add	fp, r6
    6ee0:	4558      	cmp	r0, fp
    6ee2:	f73f af6c 	bgt.w	6dbe <_realloc_r+0x7e>
    6ee6:	4657      	mov	r7, sl
    6ee8:	f8da 100c 	ldr.w	r1, [sl, #12]
    6eec:	f857 0f08 	ldr.w	r0, [r7, #8]!
    6ef0:	1f32      	subs	r2, r6, #4
    6ef2:	2a24      	cmp	r2, #36	; 0x24
    6ef4:	60c1      	str	r1, [r0, #12]
    6ef6:	6088      	str	r0, [r1, #8]
    6ef8:	f200 80db 	bhi.w	70b2 <_realloc_r+0x372>
    6efc:	2a13      	cmp	r2, #19
    6efe:	f240 80d6 	bls.w	70ae <_realloc_r+0x36e>
    6f02:	6821      	ldr	r1, [r4, #0]
    6f04:	f8ca 1008 	str.w	r1, [sl, #8]
    6f08:	6861      	ldr	r1, [r4, #4]
    6f0a:	f8ca 100c 	str.w	r1, [sl, #12]
    6f0e:	2a1b      	cmp	r2, #27
    6f10:	f200 80df 	bhi.w	70d2 <_realloc_r+0x392>
    6f14:	3408      	adds	r4, #8
    6f16:	f10a 0210 	add.w	r2, sl, #16
    6f1a:	6821      	ldr	r1, [r4, #0]
    6f1c:	6011      	str	r1, [r2, #0]
    6f1e:	6861      	ldr	r1, [r4, #4]
    6f20:	6051      	str	r1, [r2, #4]
    6f22:	68a1      	ldr	r1, [r4, #8]
    6f24:	6091      	str	r1, [r2, #8]
    6f26:	eb0a 0105 	add.w	r1, sl, r5
    6f2a:	ebab 0205 	sub.w	r2, fp, r5
    6f2e:	f042 0201 	orr.w	r2, r2, #1
    6f32:	6099      	str	r1, [r3, #8]
    6f34:	604a      	str	r2, [r1, #4]
    6f36:	f8da 3004 	ldr.w	r3, [sl, #4]
    6f3a:	f003 0301 	and.w	r3, r3, #1
    6f3e:	432b      	orrs	r3, r5
    6f40:	4640      	mov	r0, r8
    6f42:	f8ca 3004 	str.w	r3, [sl, #4]
    6f46:	f7ff fef5 	bl	6d34 <__malloc_unlock>
    6f4a:	e76e      	b.n	6e2a <_realloc_r+0xea>
    6f4c:	6823      	ldr	r3, [r4, #0]
    6f4e:	6003      	str	r3, [r0, #0]
    6f50:	6863      	ldr	r3, [r4, #4]
    6f52:	6043      	str	r3, [r0, #4]
    6f54:	2a1b      	cmp	r2, #27
    6f56:	d868      	bhi.n	702a <_realloc_r+0x2ea>
    6f58:	f104 0208 	add.w	r2, r4, #8
    6f5c:	f100 0308 	add.w	r3, r0, #8
    6f60:	e74a      	b.n	6df8 <_realloc_r+0xb8>
    6f62:	eb09 0205 	add.w	r2, r9, r5
    6f66:	609a      	str	r2, [r3, #8]
    6f68:	ebac 0305 	sub.w	r3, ip, r5
    6f6c:	f043 0301 	orr.w	r3, r3, #1
    6f70:	6053      	str	r3, [r2, #4]
    6f72:	f854 3c04 	ldr.w	r3, [r4, #-4]
    6f76:	f003 0301 	and.w	r3, r3, #1
    6f7a:	432b      	orrs	r3, r5
    6f7c:	4640      	mov	r0, r8
    6f7e:	f844 3c04 	str.w	r3, [r4, #-4]
    6f82:	f7ff fed7 	bl	6d34 <__malloc_unlock>
    6f86:	4627      	mov	r7, r4
    6f88:	e74f      	b.n	6e2a <_realloc_r+0xea>
    6f8a:	f850 3c04 	ldr.w	r3, [r0, #-4]
    6f8e:	f023 0303 	bic.w	r3, r3, #3
    6f92:	441e      	add	r6, r3
    6f94:	e751      	b.n	6e3a <_realloc_r+0xfa>
    6f96:	4657      	mov	r7, sl
    6f98:	f8da 100c 	ldr.w	r1, [sl, #12]
    6f9c:	f857 0f08 	ldr.w	r0, [r7, #8]!
    6fa0:	1f32      	subs	r2, r6, #4
    6fa2:	2a24      	cmp	r2, #36	; 0x24
    6fa4:	60c1      	str	r1, [r0, #12]
    6fa6:	6088      	str	r0, [r1, #8]
    6fa8:	d84c      	bhi.n	7044 <_realloc_r+0x304>
    6faa:	2a13      	cmp	r2, #19
    6fac:	d948      	bls.n	7040 <_realloc_r+0x300>
    6fae:	6821      	ldr	r1, [r4, #0]
    6fb0:	f8ca 1008 	str.w	r1, [sl, #8]
    6fb4:	6861      	ldr	r1, [r4, #4]
    6fb6:	f8ca 100c 	str.w	r1, [sl, #12]
    6fba:	2a1b      	cmp	r2, #27
    6fbc:	d856      	bhi.n	706c <_realloc_r+0x32c>
    6fbe:	3408      	adds	r4, #8
    6fc0:	f10a 0210 	add.w	r2, sl, #16
    6fc4:	461e      	mov	r6, r3
    6fc6:	6823      	ldr	r3, [r4, #0]
    6fc8:	6013      	str	r3, [r2, #0]
    6fca:	6863      	ldr	r3, [r4, #4]
    6fcc:	6053      	str	r3, [r2, #4]
    6fce:	68a3      	ldr	r3, [r4, #8]
    6fd0:	6093      	str	r3, [r2, #8]
    6fd2:	46d1      	mov	r9, sl
    6fd4:	463c      	mov	r4, r7
    6fd6:	e730      	b.n	6e3a <_realloc_r+0xfa>
    6fd8:	4621      	mov	r1, r4
    6fda:	f000 f9b5 	bl	7348 <memmove>
    6fde:	e711      	b.n	6e04 <_realloc_r+0xc4>
    6fe0:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    6fe4:	4657      	mov	r7, sl
    6fe6:	60cb      	str	r3, [r1, #12]
    6fe8:	6099      	str	r1, [r3, #8]
    6fea:	f857 1f08 	ldr.w	r1, [r7, #8]!
    6fee:	f8da 300c 	ldr.w	r3, [sl, #12]
    6ff2:	60cb      	str	r3, [r1, #12]
    6ff4:	1f32      	subs	r2, r6, #4
    6ff6:	2a24      	cmp	r2, #36	; 0x24
    6ff8:	6099      	str	r1, [r3, #8]
    6ffa:	d82d      	bhi.n	7058 <_realloc_r+0x318>
    6ffc:	2a13      	cmp	r2, #19
    6ffe:	d929      	bls.n	7054 <_realloc_r+0x314>
    7000:	6823      	ldr	r3, [r4, #0]
    7002:	f8ca 3008 	str.w	r3, [sl, #8]
    7006:	6863      	ldr	r3, [r4, #4]
    7008:	f8ca 300c 	str.w	r3, [sl, #12]
    700c:	2a1b      	cmp	r2, #27
    700e:	d842      	bhi.n	7096 <_realloc_r+0x356>
    7010:	3408      	adds	r4, #8
    7012:	f10a 0310 	add.w	r3, sl, #16
    7016:	6822      	ldr	r2, [r4, #0]
    7018:	601a      	str	r2, [r3, #0]
    701a:	6862      	ldr	r2, [r4, #4]
    701c:	605a      	str	r2, [r3, #4]
    701e:	68a2      	ldr	r2, [r4, #8]
    7020:	609a      	str	r2, [r3, #8]
    7022:	4666      	mov	r6, ip
    7024:	46d1      	mov	r9, sl
    7026:	463c      	mov	r4, r7
    7028:	e707      	b.n	6e3a <_realloc_r+0xfa>
    702a:	68a3      	ldr	r3, [r4, #8]
    702c:	6083      	str	r3, [r0, #8]
    702e:	68e3      	ldr	r3, [r4, #12]
    7030:	60c3      	str	r3, [r0, #12]
    7032:	2a24      	cmp	r2, #36	; 0x24
    7034:	d026      	beq.n	7084 <_realloc_r+0x344>
    7036:	f104 0210 	add.w	r2, r4, #16
    703a:	f100 0310 	add.w	r3, r0, #16
    703e:	e6db      	b.n	6df8 <_realloc_r+0xb8>
    7040:	463a      	mov	r2, r7
    7042:	e7bf      	b.n	6fc4 <_realloc_r+0x284>
    7044:	4621      	mov	r1, r4
    7046:	4638      	mov	r0, r7
    7048:	461e      	mov	r6, r3
    704a:	46d1      	mov	r9, sl
    704c:	f000 f97c 	bl	7348 <memmove>
    7050:	463c      	mov	r4, r7
    7052:	e6f2      	b.n	6e3a <_realloc_r+0xfa>
    7054:	463b      	mov	r3, r7
    7056:	e7de      	b.n	7016 <_realloc_r+0x2d6>
    7058:	4621      	mov	r1, r4
    705a:	4638      	mov	r0, r7
    705c:	4666      	mov	r6, ip
    705e:	46d1      	mov	r9, sl
    7060:	f000 f972 	bl	7348 <memmove>
    7064:	463c      	mov	r4, r7
    7066:	e6e8      	b.n	6e3a <_realloc_r+0xfa>
    7068:	20019490 	.word	0x20019490
    706c:	68a1      	ldr	r1, [r4, #8]
    706e:	f8ca 1010 	str.w	r1, [sl, #16]
    7072:	68e1      	ldr	r1, [r4, #12]
    7074:	f8ca 1014 	str.w	r1, [sl, #20]
    7078:	2a24      	cmp	r2, #36	; 0x24
    707a:	d020      	beq.n	70be <_realloc_r+0x37e>
    707c:	3410      	adds	r4, #16
    707e:	f10a 0218 	add.w	r2, sl, #24
    7082:	e79f      	b.n	6fc4 <_realloc_r+0x284>
    7084:	6923      	ldr	r3, [r4, #16]
    7086:	6103      	str	r3, [r0, #16]
    7088:	6961      	ldr	r1, [r4, #20]
    708a:	6141      	str	r1, [r0, #20]
    708c:	f104 0218 	add.w	r2, r4, #24
    7090:	f100 0318 	add.w	r3, r0, #24
    7094:	e6b0      	b.n	6df8 <_realloc_r+0xb8>
    7096:	68a3      	ldr	r3, [r4, #8]
    7098:	f8ca 3010 	str.w	r3, [sl, #16]
    709c:	68e3      	ldr	r3, [r4, #12]
    709e:	f8ca 3014 	str.w	r3, [sl, #20]
    70a2:	2a24      	cmp	r2, #36	; 0x24
    70a4:	d021      	beq.n	70ea <_realloc_r+0x3aa>
    70a6:	3410      	adds	r4, #16
    70a8:	f10a 0318 	add.w	r3, sl, #24
    70ac:	e7b3      	b.n	7016 <_realloc_r+0x2d6>
    70ae:	463a      	mov	r2, r7
    70b0:	e733      	b.n	6f1a <_realloc_r+0x1da>
    70b2:	4621      	mov	r1, r4
    70b4:	4638      	mov	r0, r7
    70b6:	f000 f947 	bl	7348 <memmove>
    70ba:	4b16      	ldr	r3, [pc, #88]	; (7114 <_realloc_r+0x3d4>)
    70bc:	e733      	b.n	6f26 <_realloc_r+0x1e6>
    70be:	6922      	ldr	r2, [r4, #16]
    70c0:	f8ca 2018 	str.w	r2, [sl, #24]
    70c4:	6962      	ldr	r2, [r4, #20]
    70c6:	f8ca 201c 	str.w	r2, [sl, #28]
    70ca:	3418      	adds	r4, #24
    70cc:	f10a 0220 	add.w	r2, sl, #32
    70d0:	e778      	b.n	6fc4 <_realloc_r+0x284>
    70d2:	68a1      	ldr	r1, [r4, #8]
    70d4:	f8ca 1010 	str.w	r1, [sl, #16]
    70d8:	68e1      	ldr	r1, [r4, #12]
    70da:	f8ca 1014 	str.w	r1, [sl, #20]
    70de:	2a24      	cmp	r2, #36	; 0x24
    70e0:	d00d      	beq.n	70fe <_realloc_r+0x3be>
    70e2:	3410      	adds	r4, #16
    70e4:	f10a 0218 	add.w	r2, sl, #24
    70e8:	e717      	b.n	6f1a <_realloc_r+0x1da>
    70ea:	6923      	ldr	r3, [r4, #16]
    70ec:	f8ca 3018 	str.w	r3, [sl, #24]
    70f0:	6963      	ldr	r3, [r4, #20]
    70f2:	f8ca 301c 	str.w	r3, [sl, #28]
    70f6:	3418      	adds	r4, #24
    70f8:	f10a 0320 	add.w	r3, sl, #32
    70fc:	e78b      	b.n	7016 <_realloc_r+0x2d6>
    70fe:	6922      	ldr	r2, [r4, #16]
    7100:	f8ca 2018 	str.w	r2, [sl, #24]
    7104:	6962      	ldr	r2, [r4, #20]
    7106:	f8ca 201c 	str.w	r2, [sl, #28]
    710a:	3418      	adds	r4, #24
    710c:	f10a 0220 	add.w	r2, sl, #32
    7110:	e703      	b.n	6f1a <_realloc_r+0x1da>
    7112:	bf00      	nop
    7114:	20019490 	.word	0x20019490

00007118 <stdio_exit_handler>:
    7118:	4a02      	ldr	r2, [pc, #8]	; (7124 <stdio_exit_handler+0xc>)
    711a:	4903      	ldr	r1, [pc, #12]	; (7128 <stdio_exit_handler+0x10>)
    711c:	4803      	ldr	r0, [pc, #12]	; (712c <stdio_exit_handler+0x14>)
    711e:	f000 b8ef 	b.w	7300 <_fwalk_sglue>
    7122:	bf00      	nop
    7124:	200198a0 	.word	0x200198a0
    7128:	00009d7d 	.word	0x00009d7d
    712c:	200190c0 	.word	0x200190c0

00007130 <cleanup_stdio>:
    7130:	4b0c      	ldr	r3, [pc, #48]	; (7164 <cleanup_stdio+0x34>)
    7132:	6841      	ldr	r1, [r0, #4]
    7134:	4299      	cmp	r1, r3
    7136:	b510      	push	{r4, lr}
    7138:	4604      	mov	r4, r0
    713a:	d001      	beq.n	7140 <cleanup_stdio+0x10>
    713c:	f002 fe1e 	bl	9d7c <_fclose_r>
    7140:	68a1      	ldr	r1, [r4, #8]
    7142:	4b09      	ldr	r3, [pc, #36]	; (7168 <cleanup_stdio+0x38>)
    7144:	4299      	cmp	r1, r3
    7146:	d002      	beq.n	714e <cleanup_stdio+0x1e>
    7148:	4620      	mov	r0, r4
    714a:	f002 fe17 	bl	9d7c <_fclose_r>
    714e:	68e1      	ldr	r1, [r4, #12]
    7150:	4b06      	ldr	r3, [pc, #24]	; (716c <cleanup_stdio+0x3c>)
    7152:	4299      	cmp	r1, r3
    7154:	d004      	beq.n	7160 <cleanup_stdio+0x30>
    7156:	4620      	mov	r0, r4
    7158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    715c:	f002 be0e 	b.w	9d7c <_fclose_r>
    7160:	bd10      	pop	{r4, pc}
    7162:	bf00      	nop
    7164:	2001aa40 	.word	0x2001aa40
    7168:	2001aaa8 	.word	0x2001aaa8
    716c:	2001ab10 	.word	0x2001ab10

00007170 <global_stdio_init.part.0>:
    7170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7174:	4c2a      	ldr	r4, [pc, #168]	; (7220 <global_stdio_init.part.0+0xb0>)
    7176:	4b2b      	ldr	r3, [pc, #172]	; (7224 <global_stdio_init.part.0+0xb4>)
    7178:	482b      	ldr	r0, [pc, #172]	; (7228 <global_stdio_init.part.0+0xb8>)
    717a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 723c <global_stdio_init.part.0+0xcc>
    717e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 7240 <global_stdio_init.part.0+0xd0>
    7182:	4f2a      	ldr	r7, [pc, #168]	; (722c <global_stdio_init.part.0+0xbc>)
    7184:	6018      	str	r0, [r3, #0]
    7186:	2500      	movs	r5, #0
    7188:	2304      	movs	r3, #4
    718a:	2208      	movs	r2, #8
    718c:	4629      	mov	r1, r5
    718e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    7192:	4e27      	ldr	r6, [pc, #156]	; (7230 <global_stdio_init.part.0+0xc0>)
    7194:	6665      	str	r5, [r4, #100]	; 0x64
    7196:	e9c4 5302 	strd	r5, r3, [r4, #8]
    719a:	e9c4 5500 	strd	r5, r5, [r4]
    719e:	e9c4 5504 	strd	r5, r5, [r4, #16]
    71a2:	61a5      	str	r5, [r4, #24]
    71a4:	f000 f94c 	bl	7440 <memset>
    71a8:	4b22      	ldr	r3, [pc, #136]	; (7234 <global_stdio_init.part.0+0xc4>)
    71aa:	6763      	str	r3, [r4, #116]	; 0x74
    71ac:	2208      	movs	r2, #8
    71ae:	4629      	mov	r1, r5
    71b0:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    71b4:	e9c4 4907 	strd	r4, r9, [r4, #28]
    71b8:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    71bc:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    71c0:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    71c4:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    71c8:	6725      	str	r5, [r4, #112]	; 0x70
    71ca:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    71ce:	62e6      	str	r6, [r4, #44]	; 0x2c
    71d0:	f000 f936 	bl	7440 <memset>
    71d4:	4b18      	ldr	r3, [pc, #96]	; (7238 <global_stdio_init.part.0+0xc8>)
    71d6:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    71da:	4629      	mov	r1, r5
    71dc:	f104 0368 	add.w	r3, r4, #104	; 0x68
    71e0:	2208      	movs	r2, #8
    71e2:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    71e6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    71ea:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    71ee:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    71f2:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    71f6:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    71fa:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    71fe:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    7202:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    7206:	f000 f91b 	bl	7440 <memset>
    720a:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    720e:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    7212:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    7216:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    721a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    721e:	bf00      	nop
    7220:	2001aa40 	.word	0x2001aa40
    7224:	2001ab78 	.word	0x2001ab78
    7228:	00007119 	.word	0x00007119
    722c:	0000a02d 	.word	0x0000a02d
    7230:	0000a04d 	.word	0x0000a04d
    7234:	00010009 	.word	0x00010009
    7238:	00020012 	.word	0x00020012
    723c:	00009fc9 	.word	0x00009fc9
    7240:	00009fed 	.word	0x00009fed

00007244 <__sinit>:
    7244:	b510      	push	{r4, lr}
    7246:	4604      	mov	r4, r0
    7248:	480a      	ldr	r0, [pc, #40]	; (7274 <__sinit+0x30>)
    724a:	f000 fa11 	bl	7670 <__retarget_lock_acquire_recursive>
    724e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7250:	b923      	cbnz	r3, 725c <__sinit+0x18>
    7252:	4b09      	ldr	r3, [pc, #36]	; (7278 <__sinit+0x34>)
    7254:	4a09      	ldr	r2, [pc, #36]	; (727c <__sinit+0x38>)
    7256:	681b      	ldr	r3, [r3, #0]
    7258:	6362      	str	r2, [r4, #52]	; 0x34
    725a:	b123      	cbz	r3, 7266 <__sinit+0x22>
    725c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7260:	4804      	ldr	r0, [pc, #16]	; (7274 <__sinit+0x30>)
    7262:	f000 ba07 	b.w	7674 <__retarget_lock_release_recursive>
    7266:	f7ff ff83 	bl	7170 <global_stdio_init.part.0>
    726a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    726e:	4801      	ldr	r0, [pc, #4]	; (7274 <__sinit+0x30>)
    7270:	f000 ba00 	b.w	7674 <__retarget_lock_release_recursive>
    7274:	2001aa08 	.word	0x2001aa08
    7278:	2001ab78 	.word	0x2001ab78
    727c:	00007131 	.word	0x00007131

00007280 <__sfp_lock_acquire>:
    7280:	4801      	ldr	r0, [pc, #4]	; (7288 <__sfp_lock_acquire+0x8>)
    7282:	f000 b9f5 	b.w	7670 <__retarget_lock_acquire_recursive>
    7286:	bf00      	nop
    7288:	2001aa08 	.word	0x2001aa08

0000728c <__sfp_lock_release>:
    728c:	4801      	ldr	r0, [pc, #4]	; (7294 <__sfp_lock_release+0x8>)
    728e:	f000 b9f1 	b.w	7674 <__retarget_lock_release_recursive>
    7292:	bf00      	nop
    7294:	2001aa08 	.word	0x2001aa08

00007298 <_vdprintf_r>:
    7298:	b5f0      	push	{r4, r5, r6, r7, lr}
    729a:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    729e:	af04      	add	r7, sp, #16
    72a0:	9300      	str	r3, [sp, #0]
    72a2:	4613      	mov	r3, r2
    72a4:	f44f 7200 	mov.w	r2, #512	; 0x200
    72a8:	460e      	mov	r6, r1
    72aa:	9203      	str	r2, [sp, #12]
    72ac:	4639      	mov	r1, r7
    72ae:	aa03      	add	r2, sp, #12
    72b0:	4605      	mov	r5, r0
    72b2:	f000 f949 	bl	7548 <_vasnprintf_r>
    72b6:	b188      	cbz	r0, 72dc <_vdprintf_r+0x44>
    72b8:	4604      	mov	r4, r0
    72ba:	4602      	mov	r2, r0
    72bc:	9b03      	ldr	r3, [sp, #12]
    72be:	4631      	mov	r1, r6
    72c0:	4628      	mov	r0, r5
    72c2:	f000 f991 	bl	75e8 <_write_r>
    72c6:	42bc      	cmp	r4, r7
    72c8:	9003      	str	r0, [sp, #12]
    72ca:	d004      	beq.n	72d6 <_vdprintf_r+0x3e>
    72cc:	4628      	mov	r0, r5
    72ce:	4621      	mov	r1, r4
    72d0:	f000 fad8 	bl	7884 <_free_r>
    72d4:	9803      	ldr	r0, [sp, #12]
    72d6:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    72da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    72dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    72e0:	e7f9      	b.n	72d6 <_vdprintf_r+0x3e>
    72e2:	bf00      	nop

000072e4 <vdprintf>:
    72e4:	b410      	push	{r4}
    72e6:	4c05      	ldr	r4, [pc, #20]	; (72fc <vdprintf+0x18>)
    72e8:	4684      	mov	ip, r0
    72ea:	4613      	mov	r3, r2
    72ec:	6820      	ldr	r0, [r4, #0]
    72ee:	f85d 4b04 	ldr.w	r4, [sp], #4
    72f2:	460a      	mov	r2, r1
    72f4:	4661      	mov	r1, ip
    72f6:	f7ff bfcf 	b.w	7298 <_vdprintf_r>
    72fa:	bf00      	nop
    72fc:	200198ac 	.word	0x200198ac

00007300 <_fwalk_sglue>:
    7300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7304:	4680      	mov	r8, r0
    7306:	460f      	mov	r7, r1
    7308:	4616      	mov	r6, r2
    730a:	f04f 0900 	mov.w	r9, #0
    730e:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    7312:	3d01      	subs	r5, #1
    7314:	d411      	bmi.n	733a <_fwalk_sglue+0x3a>
    7316:	89a3      	ldrh	r3, [r4, #12]
    7318:	2b01      	cmp	r3, #1
    731a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
    731e:	d908      	bls.n	7332 <_fwalk_sglue+0x32>
    7320:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    7324:	3301      	adds	r3, #1
    7326:	4621      	mov	r1, r4
    7328:	d003      	beq.n	7332 <_fwalk_sglue+0x32>
    732a:	4640      	mov	r0, r8
    732c:	47b8      	blx	r7
    732e:	ea49 0900 	orr.w	r9, r9, r0
    7332:	1c6b      	adds	r3, r5, #1
    7334:	f104 0468 	add.w	r4, r4, #104	; 0x68
    7338:	d1ed      	bne.n	7316 <_fwalk_sglue+0x16>
    733a:	6836      	ldr	r6, [r6, #0]
    733c:	2e00      	cmp	r6, #0
    733e:	d1e6      	bne.n	730e <_fwalk_sglue+0xe>
    7340:	4648      	mov	r0, r9
    7342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7346:	bf00      	nop

00007348 <memmove>:
    7348:	4288      	cmp	r0, r1
    734a:	d90d      	bls.n	7368 <memmove+0x20>
    734c:	188b      	adds	r3, r1, r2
    734e:	4283      	cmp	r3, r0
    7350:	d90a      	bls.n	7368 <memmove+0x20>
    7352:	eb00 0c02 	add.w	ip, r0, r2
    7356:	b1ba      	cbz	r2, 7388 <memmove+0x40>
    7358:	4662      	mov	r2, ip
    735a:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    735e:	f802 cd01 	strb.w	ip, [r2, #-1]!
    7362:	4299      	cmp	r1, r3
    7364:	d1f9      	bne.n	735a <memmove+0x12>
    7366:	4770      	bx	lr
    7368:	2a0f      	cmp	r2, #15
    736a:	d80e      	bhi.n	738a <memmove+0x42>
    736c:	4603      	mov	r3, r0
    736e:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
    7372:	b14a      	cbz	r2, 7388 <memmove+0x40>
    7374:	f10c 0c01 	add.w	ip, ip, #1
    7378:	3b01      	subs	r3, #1
    737a:	448c      	add	ip, r1
    737c:	f811 2b01 	ldrb.w	r2, [r1], #1
    7380:	f803 2f01 	strb.w	r2, [r3, #1]!
    7384:	4561      	cmp	r1, ip
    7386:	d1f9      	bne.n	737c <memmove+0x34>
    7388:	4770      	bx	lr
    738a:	ea40 0301 	orr.w	r3, r0, r1
    738e:	079b      	lsls	r3, r3, #30
    7390:	d150      	bne.n	7434 <memmove+0xec>
    7392:	f1a2 0310 	sub.w	r3, r2, #16
    7396:	b570      	push	{r4, r5, r6, lr}
    7398:	f101 0c20 	add.w	ip, r1, #32
    739c:	f023 050f 	bic.w	r5, r3, #15
    73a0:	f101 0e10 	add.w	lr, r1, #16
    73a4:	f100 0410 	add.w	r4, r0, #16
    73a8:	44ac      	add	ip, r5
    73aa:	091b      	lsrs	r3, r3, #4
    73ac:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    73b0:	f844 5c10 	str.w	r5, [r4, #-16]
    73b4:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    73b8:	f844 5c0c 	str.w	r5, [r4, #-12]
    73bc:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    73c0:	f844 5c08 	str.w	r5, [r4, #-8]
    73c4:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    73c8:	f844 5c04 	str.w	r5, [r4, #-4]
    73cc:	f10e 0e10 	add.w	lr, lr, #16
    73d0:	45e6      	cmp	lr, ip
    73d2:	f104 0410 	add.w	r4, r4, #16
    73d6:	d1e9      	bne.n	73ac <memmove+0x64>
    73d8:	3301      	adds	r3, #1
    73da:	f012 0f0c 	tst.w	r2, #12
    73de:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    73e2:	f002 040f 	and.w	r4, r2, #15
    73e6:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    73ea:	d027      	beq.n	743c <memmove+0xf4>
    73ec:	3c04      	subs	r4, #4
    73ee:	f024 0603 	bic.w	r6, r4, #3
    73f2:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    73f6:	441e      	add	r6, r3
    73f8:	1f1c      	subs	r4, r3, #4
    73fa:	468e      	mov	lr, r1
    73fc:	f85e 5b04 	ldr.w	r5, [lr], #4
    7400:	f844 5f04 	str.w	r5, [r4, #4]!
    7404:	42b4      	cmp	r4, r6
    7406:	d1f9      	bne.n	73fc <memmove+0xb4>
    7408:	f10c 0401 	add.w	r4, ip, #1
    740c:	f002 0203 	and.w	r2, r2, #3
    7410:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    7414:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    7418:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
    741c:	b14a      	cbz	r2, 7432 <memmove+0xea>
    741e:	f10c 0c01 	add.w	ip, ip, #1
    7422:	3b01      	subs	r3, #1
    7424:	448c      	add	ip, r1
    7426:	f811 2b01 	ldrb.w	r2, [r1], #1
    742a:	f803 2f01 	strb.w	r2, [r3, #1]!
    742e:	4561      	cmp	r1, ip
    7430:	d1f9      	bne.n	7426 <memmove+0xde>
    7432:	bd70      	pop	{r4, r5, r6, pc}
    7434:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
    7438:	4603      	mov	r3, r0
    743a:	e79b      	b.n	7374 <memmove+0x2c>
    743c:	4622      	mov	r2, r4
    743e:	e7eb      	b.n	7418 <memmove+0xd0>

00007440 <memset>:
    7440:	0783      	lsls	r3, r0, #30
    7442:	b530      	push	{r4, r5, lr}
    7444:	d048      	beq.n	74d8 <memset+0x98>
    7446:	1e54      	subs	r4, r2, #1
    7448:	2a00      	cmp	r2, #0
    744a:	d03f      	beq.n	74cc <memset+0x8c>
    744c:	b2ca      	uxtb	r2, r1
    744e:	4603      	mov	r3, r0
    7450:	e001      	b.n	7456 <memset+0x16>
    7452:	3c01      	subs	r4, #1
    7454:	d33a      	bcc.n	74cc <memset+0x8c>
    7456:	f803 2b01 	strb.w	r2, [r3], #1
    745a:	079d      	lsls	r5, r3, #30
    745c:	d1f9      	bne.n	7452 <memset+0x12>
    745e:	2c03      	cmp	r4, #3
    7460:	d92d      	bls.n	74be <memset+0x7e>
    7462:	b2cd      	uxtb	r5, r1
    7464:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    7468:	2c0f      	cmp	r4, #15
    746a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    746e:	d936      	bls.n	74de <memset+0x9e>
    7470:	f1a4 0210 	sub.w	r2, r4, #16
    7474:	f022 0c0f 	bic.w	ip, r2, #15
    7478:	f103 0e20 	add.w	lr, r3, #32
    747c:	44e6      	add	lr, ip
    747e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    7482:	f103 0210 	add.w	r2, r3, #16
    7486:	e942 5504 	strd	r5, r5, [r2, #-16]
    748a:	e942 5502 	strd	r5, r5, [r2, #-8]
    748e:	3210      	adds	r2, #16
    7490:	4572      	cmp	r2, lr
    7492:	d1f8      	bne.n	7486 <memset+0x46>
    7494:	f10c 0201 	add.w	r2, ip, #1
    7498:	f014 0f0c 	tst.w	r4, #12
    749c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    74a0:	f004 0c0f 	and.w	ip, r4, #15
    74a4:	d013      	beq.n	74ce <memset+0x8e>
    74a6:	f1ac 0304 	sub.w	r3, ip, #4
    74aa:	f023 0303 	bic.w	r3, r3, #3
    74ae:	3304      	adds	r3, #4
    74b0:	4413      	add	r3, r2
    74b2:	f842 5b04 	str.w	r5, [r2], #4
    74b6:	4293      	cmp	r3, r2
    74b8:	d1fb      	bne.n	74b2 <memset+0x72>
    74ba:	f00c 0403 	and.w	r4, ip, #3
    74be:	b12c      	cbz	r4, 74cc <memset+0x8c>
    74c0:	b2c9      	uxtb	r1, r1
    74c2:	441c      	add	r4, r3
    74c4:	f803 1b01 	strb.w	r1, [r3], #1
    74c8:	429c      	cmp	r4, r3
    74ca:	d1fb      	bne.n	74c4 <memset+0x84>
    74cc:	bd30      	pop	{r4, r5, pc}
    74ce:	4664      	mov	r4, ip
    74d0:	4613      	mov	r3, r2
    74d2:	2c00      	cmp	r4, #0
    74d4:	d1f4      	bne.n	74c0 <memset+0x80>
    74d6:	e7f9      	b.n	74cc <memset+0x8c>
    74d8:	4603      	mov	r3, r0
    74da:	4614      	mov	r4, r2
    74dc:	e7bf      	b.n	745e <memset+0x1e>
    74de:	461a      	mov	r2, r3
    74e0:	46a4      	mov	ip, r4
    74e2:	e7e0      	b.n	74a6 <memset+0x66>

000074e4 <strncpy>:
    74e4:	ea40 0301 	orr.w	r3, r0, r1
    74e8:	079b      	lsls	r3, r3, #30
    74ea:	b530      	push	{r4, r5, lr}
    74ec:	d101      	bne.n	74f2 <strncpy+0xe>
    74ee:	2a03      	cmp	r2, #3
    74f0:	d80f      	bhi.n	7512 <strncpy+0x2e>
    74f2:	4684      	mov	ip, r0
    74f4:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    74f8:	e007      	b.n	750a <strncpy+0x26>
    74fa:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    74fe:	f803 1b01 	strb.w	r1, [r3], #1
    7502:	1e54      	subs	r4, r2, #1
    7504:	b1c1      	cbz	r1, 7538 <strncpy+0x54>
    7506:	469c      	mov	ip, r3
    7508:	4622      	mov	r2, r4
    750a:	4663      	mov	r3, ip
    750c:	2a00      	cmp	r2, #0
    750e:	d1f4      	bne.n	74fa <strncpy+0x16>
    7510:	bd30      	pop	{r4, r5, pc}
    7512:	460b      	mov	r3, r1
    7514:	4684      	mov	ip, r0
    7516:	4619      	mov	r1, r3
    7518:	f853 5b04 	ldr.w	r5, [r3], #4
    751c:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    7520:	ea24 0405 	bic.w	r4, r4, r5
    7524:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    7528:	d1e4      	bne.n	74f4 <strncpy+0x10>
    752a:	3a04      	subs	r2, #4
    752c:	2a03      	cmp	r2, #3
    752e:	f84c 5b04 	str.w	r5, [ip], #4
    7532:	4619      	mov	r1, r3
    7534:	d8ef      	bhi.n	7516 <strncpy+0x32>
    7536:	e7dd      	b.n	74f4 <strncpy+0x10>
    7538:	4494      	add	ip, r2
    753a:	2c00      	cmp	r4, #0
    753c:	d0e8      	beq.n	7510 <strncpy+0x2c>
    753e:	f803 1b01 	strb.w	r1, [r3], #1
    7542:	4563      	cmp	r3, ip
    7544:	d1fb      	bne.n	753e <strncpy+0x5a>
    7546:	bd30      	pop	{r4, r5, pc}

00007548 <_vasnprintf_r>:
    7548:	b530      	push	{r4, r5, lr}
    754a:	6814      	ldr	r4, [r2, #0]
    754c:	4615      	mov	r5, r2
    754e:	b09b      	sub	sp, #108	; 0x6c
    7550:	461a      	mov	r2, r3
    7552:	b109      	cbz	r1, 7558 <_vasnprintf_r+0x10>
    7554:	2c00      	cmp	r4, #0
    7556:	d119      	bne.n	758c <_vasnprintf_r+0x44>
    7558:	2100      	movs	r1, #0
    755a:	f44f 7322 	mov.w	r3, #648	; 0x288
    755e:	f8ad 300c 	strh.w	r3, [sp, #12]
    7562:	9100      	str	r1, [sp, #0]
    7564:	9104      	str	r1, [sp, #16]
    7566:	f64f 73ff 	movw	r3, #65535	; 0xffff
    756a:	9102      	str	r1, [sp, #8]
    756c:	9105      	str	r1, [sp, #20]
    756e:	f8ad 300e 	strh.w	r3, [sp, #14]
    7572:	4669      	mov	r1, sp
    7574:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    7576:	f000 faa3 	bl	7ac0 <_svfprintf_r>
    757a:	2800      	cmp	r0, #0
    757c:	db13      	blt.n	75a6 <_vasnprintf_r+0x5e>
    757e:	9b00      	ldr	r3, [sp, #0]
    7580:	6028      	str	r0, [r5, #0]
    7582:	2200      	movs	r2, #0
    7584:	701a      	strb	r2, [r3, #0]
    7586:	9804      	ldr	r0, [sp, #16]
    7588:	b01b      	add	sp, #108	; 0x6c
    758a:	bd30      	pop	{r4, r5, pc}
    758c:	f44f 63c1 	mov.w	r3, #1544	; 0x608
    7590:	9100      	str	r1, [sp, #0]
    7592:	9104      	str	r1, [sp, #16]
    7594:	f8ad 300c 	strh.w	r3, [sp, #12]
    7598:	4621      	mov	r1, r4
    759a:	dae4      	bge.n	7566 <_vasnprintf_r+0x1e>
    759c:	238b      	movs	r3, #139	; 0x8b
    759e:	6003      	str	r3, [r0, #0]
    75a0:	2000      	movs	r0, #0
    75a2:	b01b      	add	sp, #108	; 0x6c
    75a4:	bd30      	pop	{r4, r5, pc}
    75a6:	2000      	movs	r0, #0
    75a8:	e7ee      	b.n	7588 <_vasnprintf_r+0x40>
    75aa:	bf00      	nop

000075ac <__locale_mb_cur_max>:
    75ac:	4b01      	ldr	r3, [pc, #4]	; (75b4 <__locale_mb_cur_max+0x8>)
    75ae:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    75b2:	4770      	bx	lr
    75b4:	20019324 	.word	0x20019324

000075b8 <__cxa_atexit>:
    75b8:	4613      	mov	r3, r2
    75ba:	460a      	mov	r2, r1
    75bc:	4601      	mov	r1, r0
    75be:	2002      	movs	r0, #2
    75c0:	f000 b8cc 	b.w	775c <__register_exitproc>

000075c4 <_sbrk_r>:
    75c4:	b538      	push	{r3, r4, r5, lr}
    75c6:	4d07      	ldr	r5, [pc, #28]	; (75e4 <_sbrk_r+0x20>)
    75c8:	2200      	movs	r2, #0
    75ca:	4604      	mov	r4, r0
    75cc:	4608      	mov	r0, r1
    75ce:	602a      	str	r2, [r5, #0]
    75d0:	f7fd fe2c 	bl	522c <_sbrk>
    75d4:	1c43      	adds	r3, r0, #1
    75d6:	d000      	beq.n	75da <_sbrk_r+0x16>
    75d8:	bd38      	pop	{r3, r4, r5, pc}
    75da:	682b      	ldr	r3, [r5, #0]
    75dc:	2b00      	cmp	r3, #0
    75de:	d0fb      	beq.n	75d8 <_sbrk_r+0x14>
    75e0:	6023      	str	r3, [r4, #0]
    75e2:	bd38      	pop	{r3, r4, r5, pc}
    75e4:	2001aba8 	.word	0x2001aba8

000075e8 <_write_r>:
    75e8:	b538      	push	{r3, r4, r5, lr}
    75ea:	460c      	mov	r4, r1
    75ec:	4d08      	ldr	r5, [pc, #32]	; (7610 <_write_r+0x28>)
    75ee:	4684      	mov	ip, r0
    75f0:	4611      	mov	r1, r2
    75f2:	4620      	mov	r0, r4
    75f4:	461a      	mov	r2, r3
    75f6:	2300      	movs	r3, #0
    75f8:	602b      	str	r3, [r5, #0]
    75fa:	4664      	mov	r4, ip
    75fc:	f7fc fed2 	bl	43a4 <_write>
    7600:	1c43      	adds	r3, r0, #1
    7602:	d000      	beq.n	7606 <_write_r+0x1e>
    7604:	bd38      	pop	{r3, r4, r5, pc}
    7606:	682b      	ldr	r3, [r5, #0]
    7608:	2b00      	cmp	r3, #0
    760a:	d0fb      	beq.n	7604 <_write_r+0x1c>
    760c:	6023      	str	r3, [r4, #0]
    760e:	bd38      	pop	{r3, r4, r5, pc}
    7610:	2001aba8 	.word	0x2001aba8

00007614 <__errno>:
    7614:	4b01      	ldr	r3, [pc, #4]	; (761c <__errno+0x8>)
    7616:	6818      	ldr	r0, [r3, #0]
    7618:	4770      	bx	lr
    761a:	bf00      	nop
    761c:	200198ac 	.word	0x200198ac

00007620 <__libc_init_array>:
    7620:	b570      	push	{r4, r5, r6, lr}
    7622:	4e0d      	ldr	r6, [pc, #52]	; (7658 <__libc_init_array+0x38>)
    7624:	4d0d      	ldr	r5, [pc, #52]	; (765c <__libc_init_array+0x3c>)
    7626:	1b76      	subs	r6, r6, r5
    7628:	10b6      	asrs	r6, r6, #2
    762a:	d006      	beq.n	763a <__libc_init_array+0x1a>
    762c:	2400      	movs	r4, #0
    762e:	f855 3b04 	ldr.w	r3, [r5], #4
    7632:	3401      	adds	r4, #1
    7634:	4798      	blx	r3
    7636:	42a6      	cmp	r6, r4
    7638:	d1f9      	bne.n	762e <__libc_init_array+0xe>
    763a:	4e09      	ldr	r6, [pc, #36]	; (7660 <__libc_init_array+0x40>)
    763c:	4d09      	ldr	r5, [pc, #36]	; (7664 <__libc_init_array+0x44>)
    763e:	1b76      	subs	r6, r6, r5
    7640:	f005 fa46 	bl	cad0 <___init_veneer>
    7644:	10b6      	asrs	r6, r6, #2
    7646:	d006      	beq.n	7656 <__libc_init_array+0x36>
    7648:	2400      	movs	r4, #0
    764a:	f855 3b04 	ldr.w	r3, [r5], #4
    764e:	3401      	adds	r4, #1
    7650:	4798      	blx	r3
    7652:	42a6      	cmp	r6, r4
    7654:	d1f9      	bne.n	764a <__libc_init_array+0x2a>
    7656:	bd70      	pop	{r4, r5, r6, pc}
    7658:	60001af0 	.word	0x60001af0
    765c:	60001af0 	.word	0x60001af0
    7660:	60001b04 	.word	0x60001b04
    7664:	60001af0 	.word	0x60001af0

00007668 <__retarget_lock_init_recursive>:
    7668:	4770      	bx	lr
    766a:	bf00      	nop

0000766c <__retarget_lock_close_recursive>:
    766c:	4770      	bx	lr
    766e:	bf00      	nop

00007670 <__retarget_lock_acquire_recursive>:
    7670:	4770      	bx	lr
    7672:	bf00      	nop

00007674 <__retarget_lock_release_recursive>:
    7674:	4770      	bx	lr
    7676:	bf00      	nop
	...

00007680 <strlen>:
    7680:	f890 f000 	pld	[r0]
    7684:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    7688:	f020 0107 	bic.w	r1, r0, #7
    768c:	f06f 0c00 	mvn.w	ip, #0
    7690:	f010 0407 	ands.w	r4, r0, #7
    7694:	f891 f020 	pld	[r1, #32]
    7698:	f040 8049 	bne.w	772e <strlen+0xae>
    769c:	f04f 0400 	mov.w	r4, #0
    76a0:	f06f 0007 	mvn.w	r0, #7
    76a4:	e9d1 2300 	ldrd	r2, r3, [r1]
    76a8:	f891 f040 	pld	[r1, #64]	; 0x40
    76ac:	f100 0008 	add.w	r0, r0, #8
    76b0:	fa82 f24c 	uadd8	r2, r2, ip
    76b4:	faa4 f28c 	sel	r2, r4, ip
    76b8:	fa83 f34c 	uadd8	r3, r3, ip
    76bc:	faa2 f38c 	sel	r3, r2, ip
    76c0:	bb4b      	cbnz	r3, 7716 <strlen+0x96>
    76c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    76c6:	fa82 f24c 	uadd8	r2, r2, ip
    76ca:	f100 0008 	add.w	r0, r0, #8
    76ce:	faa4 f28c 	sel	r2, r4, ip
    76d2:	fa83 f34c 	uadd8	r3, r3, ip
    76d6:	faa2 f38c 	sel	r3, r2, ip
    76da:	b9e3      	cbnz	r3, 7716 <strlen+0x96>
    76dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    76e0:	fa82 f24c 	uadd8	r2, r2, ip
    76e4:	f100 0008 	add.w	r0, r0, #8
    76e8:	faa4 f28c 	sel	r2, r4, ip
    76ec:	fa83 f34c 	uadd8	r3, r3, ip
    76f0:	faa2 f38c 	sel	r3, r2, ip
    76f4:	b97b      	cbnz	r3, 7716 <strlen+0x96>
    76f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    76fa:	f101 0120 	add.w	r1, r1, #32
    76fe:	fa82 f24c 	uadd8	r2, r2, ip
    7702:	f100 0008 	add.w	r0, r0, #8
    7706:	faa4 f28c 	sel	r2, r4, ip
    770a:	fa83 f34c 	uadd8	r3, r3, ip
    770e:	faa2 f38c 	sel	r3, r2, ip
    7712:	2b00      	cmp	r3, #0
    7714:	d0c6      	beq.n	76a4 <strlen+0x24>
    7716:	2a00      	cmp	r2, #0
    7718:	bf04      	itt	eq
    771a:	3004      	addeq	r0, #4
    771c:	461a      	moveq	r2, r3
    771e:	ba12      	rev	r2, r2
    7720:	fab2 f282 	clz	r2, r2
    7724:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    7728:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    772c:	4770      	bx	lr
    772e:	e9d1 2300 	ldrd	r2, r3, [r1]
    7732:	f004 0503 	and.w	r5, r4, #3
    7736:	f1c4 0000 	rsb	r0, r4, #0
    773a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    773e:	f014 0f04 	tst.w	r4, #4
    7742:	f891 f040 	pld	[r1, #64]	; 0x40
    7746:	fa0c f505 	lsl.w	r5, ip, r5
    774a:	ea62 0205 	orn	r2, r2, r5
    774e:	bf1c      	itt	ne
    7750:	ea63 0305 	ornne	r3, r3, r5
    7754:	4662      	movne	r2, ip
    7756:	f04f 0400 	mov.w	r4, #0
    775a:	e7a9      	b.n	76b0 <strlen+0x30>

0000775c <__register_exitproc>:
    775c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7760:	f8df a07c 	ldr.w	sl, [pc, #124]	; 77e0 <__register_exitproc+0x84>
    7764:	4606      	mov	r6, r0
    7766:	f8da 0000 	ldr.w	r0, [sl]
    776a:	4698      	mov	r8, r3
    776c:	460f      	mov	r7, r1
    776e:	4691      	mov	r9, r2
    7770:	f7ff ff7e 	bl	7670 <__retarget_lock_acquire_recursive>
    7774:	4b18      	ldr	r3, [pc, #96]	; (77d8 <__register_exitproc+0x7c>)
    7776:	681c      	ldr	r4, [r3, #0]
    7778:	b324      	cbz	r4, 77c4 <__register_exitproc+0x68>
    777a:	6865      	ldr	r5, [r4, #4]
    777c:	2d1f      	cmp	r5, #31
    777e:	dc24      	bgt.n	77ca <__register_exitproc+0x6e>
    7780:	b95e      	cbnz	r6, 779a <__register_exitproc+0x3e>
    7782:	1c6b      	adds	r3, r5, #1
    7784:	3502      	adds	r5, #2
    7786:	f8da 0000 	ldr.w	r0, [sl]
    778a:	6063      	str	r3, [r4, #4]
    778c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    7790:	f7ff ff70 	bl	7674 <__retarget_lock_release_recursive>
    7794:	2000      	movs	r0, #0
    7796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    779a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    779e:	2301      	movs	r3, #1
    77a0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    77a4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    77a8:	40ab      	lsls	r3, r5
    77aa:	431a      	orrs	r2, r3
    77ac:	2e02      	cmp	r6, #2
    77ae:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    77b2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    77b6:	d1e4      	bne.n	7782 <__register_exitproc+0x26>
    77b8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    77bc:	431a      	orrs	r2, r3
    77be:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    77c2:	e7de      	b.n	7782 <__register_exitproc+0x26>
    77c4:	4c05      	ldr	r4, [pc, #20]	; (77dc <__register_exitproc+0x80>)
    77c6:	601c      	str	r4, [r3, #0]
    77c8:	e7d7      	b.n	777a <__register_exitproc+0x1e>
    77ca:	f8da 0000 	ldr.w	r0, [sl]
    77ce:	f7ff ff51 	bl	7674 <__retarget_lock_release_recursive>
    77d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    77d6:	e7de      	b.n	7796 <__register_exitproc+0x3a>
    77d8:	2001a86c 	.word	0x2001a86c
    77dc:	2001a870 	.word	0x2001a870
    77e0:	20019318 	.word	0x20019318

000077e4 <_malloc_trim_r>:
    77e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    77e6:	4f24      	ldr	r7, [pc, #144]	; (7878 <_malloc_trim_r+0x94>)
    77e8:	460c      	mov	r4, r1
    77ea:	4606      	mov	r6, r0
    77ec:	f7ff fa9c 	bl	6d28 <__malloc_lock>
    77f0:	68bb      	ldr	r3, [r7, #8]
    77f2:	685d      	ldr	r5, [r3, #4]
    77f4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    77f8:	310f      	adds	r1, #15
    77fa:	f025 0503 	bic.w	r5, r5, #3
    77fe:	194b      	adds	r3, r1, r5
    7800:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    7804:	f023 030f 	bic.w	r3, r3, #15
    7808:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    780c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    7810:	db07      	blt.n	7822 <_malloc_trim_r+0x3e>
    7812:	2100      	movs	r1, #0
    7814:	4630      	mov	r0, r6
    7816:	f7ff fed5 	bl	75c4 <_sbrk_r>
    781a:	68bb      	ldr	r3, [r7, #8]
    781c:	442b      	add	r3, r5
    781e:	4298      	cmp	r0, r3
    7820:	d004      	beq.n	782c <_malloc_trim_r+0x48>
    7822:	4630      	mov	r0, r6
    7824:	f7ff fa86 	bl	6d34 <__malloc_unlock>
    7828:	2000      	movs	r0, #0
    782a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    782c:	4261      	negs	r1, r4
    782e:	4630      	mov	r0, r6
    7830:	f7ff fec8 	bl	75c4 <_sbrk_r>
    7834:	3001      	adds	r0, #1
    7836:	d00d      	beq.n	7854 <_malloc_trim_r+0x70>
    7838:	4a10      	ldr	r2, [pc, #64]	; (787c <_malloc_trim_r+0x98>)
    783a:	68bb      	ldr	r3, [r7, #8]
    783c:	1b2d      	subs	r5, r5, r4
    783e:	f045 0501 	orr.w	r5, r5, #1
    7842:	605d      	str	r5, [r3, #4]
    7844:	6813      	ldr	r3, [r2, #0]
    7846:	4630      	mov	r0, r6
    7848:	1b1b      	subs	r3, r3, r4
    784a:	6013      	str	r3, [r2, #0]
    784c:	f7ff fa72 	bl	6d34 <__malloc_unlock>
    7850:	2001      	movs	r0, #1
    7852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7854:	2100      	movs	r1, #0
    7856:	4630      	mov	r0, r6
    7858:	f7ff feb4 	bl	75c4 <_sbrk_r>
    785c:	68ba      	ldr	r2, [r7, #8]
    785e:	1a83      	subs	r3, r0, r2
    7860:	2b0f      	cmp	r3, #15
    7862:	ddde      	ble.n	7822 <_malloc_trim_r+0x3e>
    7864:	f043 0301 	orr.w	r3, r3, #1
    7868:	6053      	str	r3, [r2, #4]
    786a:	4b05      	ldr	r3, [pc, #20]	; (7880 <_malloc_trim_r+0x9c>)
    786c:	4903      	ldr	r1, [pc, #12]	; (787c <_malloc_trim_r+0x98>)
    786e:	681b      	ldr	r3, [r3, #0]
    7870:	1ac0      	subs	r0, r0, r3
    7872:	6008      	str	r0, [r1, #0]
    7874:	e7d5      	b.n	7822 <_malloc_trim_r+0x3e>
    7876:	bf00      	nop
    7878:	20019490 	.word	0x20019490
    787c:	2001aa0c 	.word	0x2001aa0c
    7880:	20019898 	.word	0x20019898

00007884 <_free_r>:
    7884:	2900      	cmp	r1, #0
    7886:	d061      	beq.n	794c <_free_r+0xc8>
    7888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    788a:	460c      	mov	r4, r1
    788c:	4606      	mov	r6, r0
    788e:	f7ff fa4b 	bl	6d28 <__malloc_lock>
    7892:	f854 2c04 	ldr.w	r2, [r4, #-4]
    7896:	4f7b      	ldr	r7, [pc, #492]	; (7a84 <_free_r+0x200>)
    7898:	f1a4 0508 	sub.w	r5, r4, #8
    789c:	f022 0101 	bic.w	r1, r2, #1
    78a0:	eb05 0c01 	add.w	ip, r5, r1
    78a4:	68b8      	ldr	r0, [r7, #8]
    78a6:	f8dc 3004 	ldr.w	r3, [ip, #4]
    78aa:	4560      	cmp	r0, ip
    78ac:	f023 0303 	bic.w	r3, r3, #3
    78b0:	f000 808b 	beq.w	79ca <_free_r+0x146>
    78b4:	07d2      	lsls	r2, r2, #31
    78b6:	f8cc 3004 	str.w	r3, [ip, #4]
    78ba:	d432      	bmi.n	7922 <_free_r+0x9e>
    78bc:	f854 2c08 	ldr.w	r2, [r4, #-8]
    78c0:	1aad      	subs	r5, r5, r2
    78c2:	4411      	add	r1, r2
    78c4:	68aa      	ldr	r2, [r5, #8]
    78c6:	f107 0008 	add.w	r0, r7, #8
    78ca:	4282      	cmp	r2, r0
    78cc:	d06a      	beq.n	79a4 <_free_r+0x120>
    78ce:	eb0c 0403 	add.w	r4, ip, r3
    78d2:	f8d4 e004 	ldr.w	lr, [r4, #4]
    78d6:	68ec      	ldr	r4, [r5, #12]
    78d8:	60d4      	str	r4, [r2, #12]
    78da:	f01e 0f01 	tst.w	lr, #1
    78de:	60a2      	str	r2, [r4, #8]
    78e0:	f000 8097 	beq.w	7a12 <_free_r+0x18e>
    78e4:	f041 0301 	orr.w	r3, r1, #1
    78e8:	606b      	str	r3, [r5, #4]
    78ea:	f8cc 1000 	str.w	r1, [ip]
    78ee:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    78f2:	d235      	bcs.n	7960 <_free_r+0xdc>
    78f4:	6878      	ldr	r0, [r7, #4]
    78f6:	08cb      	lsrs	r3, r1, #3
    78f8:	2201      	movs	r2, #1
    78fa:	0949      	lsrs	r1, r1, #5
    78fc:	3301      	adds	r3, #1
    78fe:	408a      	lsls	r2, r1
    7900:	4302      	orrs	r2, r0
    7902:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    7906:	607a      	str	r2, [r7, #4]
    7908:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    790c:	3a08      	subs	r2, #8
    790e:	e9c5 1202 	strd	r1, r2, [r5, #8]
    7912:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    7916:	60cd      	str	r5, [r1, #12]
    7918:	4630      	mov	r0, r6
    791a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    791e:	f7ff ba09 	b.w	6d34 <__malloc_unlock>
    7922:	eb0c 0203 	add.w	r2, ip, r3
    7926:	6852      	ldr	r2, [r2, #4]
    7928:	07d0      	lsls	r0, r2, #31
    792a:	d410      	bmi.n	794e <_free_r+0xca>
    792c:	4419      	add	r1, r3
    792e:	f107 0008 	add.w	r0, r7, #8
    7932:	f8dc 3008 	ldr.w	r3, [ip, #8]
    7936:	4283      	cmp	r3, r0
    7938:	d073      	beq.n	7a22 <_free_r+0x19e>
    793a:	f8dc 200c 	ldr.w	r2, [ip, #12]
    793e:	60da      	str	r2, [r3, #12]
    7940:	6093      	str	r3, [r2, #8]
    7942:	f041 0301 	orr.w	r3, r1, #1
    7946:	606b      	str	r3, [r5, #4]
    7948:	5069      	str	r1, [r5, r1]
    794a:	e7d0      	b.n	78ee <_free_r+0x6a>
    794c:	4770      	bx	lr
    794e:	f041 0301 	orr.w	r3, r1, #1
    7952:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    7956:	f844 3c04 	str.w	r3, [r4, #-4]
    795a:	f8cc 1000 	str.w	r1, [ip]
    795e:	d3c9      	bcc.n	78f4 <_free_r+0x70>
    7960:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    7964:	ea4f 2351 	mov.w	r3, r1, lsr #9
    7968:	d248      	bcs.n	79fc <_free_r+0x178>
    796a:	098b      	lsrs	r3, r1, #6
    796c:	f103 0039 	add.w	r0, r3, #57	; 0x39
    7970:	f103 0238 	add.w	r2, r3, #56	; 0x38
    7974:	00c3      	lsls	r3, r0, #3
    7976:	18f8      	adds	r0, r7, r3
    7978:	58fb      	ldr	r3, [r7, r3]
    797a:	3808      	subs	r0, #8
    797c:	4298      	cmp	r0, r3
    797e:	d059      	beq.n	7a34 <_free_r+0x1b0>
    7980:	685a      	ldr	r2, [r3, #4]
    7982:	f022 0203 	bic.w	r2, r2, #3
    7986:	428a      	cmp	r2, r1
    7988:	d902      	bls.n	7990 <_free_r+0x10c>
    798a:	689b      	ldr	r3, [r3, #8]
    798c:	4298      	cmp	r0, r3
    798e:	d1f7      	bne.n	7980 <_free_r+0xfc>
    7990:	68d8      	ldr	r0, [r3, #12]
    7992:	e9c5 3002 	strd	r3, r0, [r5, #8]
    7996:	6085      	str	r5, [r0, #8]
    7998:	60dd      	str	r5, [r3, #12]
    799a:	4630      	mov	r0, r6
    799c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    79a0:	f7ff b9c8 	b.w	6d34 <__malloc_unlock>
    79a4:	eb0c 0203 	add.w	r2, ip, r3
    79a8:	6852      	ldr	r2, [r2, #4]
    79aa:	07d2      	lsls	r2, r2, #31
    79ac:	d463      	bmi.n	7a76 <_free_r+0x1f2>
    79ae:	440b      	add	r3, r1
    79b0:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    79b4:	60ca      	str	r2, [r1, #12]
    79b6:	6091      	str	r1, [r2, #8]
    79b8:	f043 0201 	orr.w	r2, r3, #1
    79bc:	606a      	str	r2, [r5, #4]
    79be:	4630      	mov	r0, r6
    79c0:	50eb      	str	r3, [r5, r3]
    79c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    79c6:	f7ff b9b5 	b.w	6d34 <__malloc_unlock>
    79ca:	440b      	add	r3, r1
    79cc:	07d1      	lsls	r1, r2, #31
    79ce:	d407      	bmi.n	79e0 <_free_r+0x15c>
    79d0:	f854 2c08 	ldr.w	r2, [r4, #-8]
    79d4:	1aad      	subs	r5, r5, r2
    79d6:	4413      	add	r3, r2
    79d8:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    79dc:	60ca      	str	r2, [r1, #12]
    79de:	6091      	str	r1, [r2, #8]
    79e0:	f043 0201 	orr.w	r2, r3, #1
    79e4:	606a      	str	r2, [r5, #4]
    79e6:	4a28      	ldr	r2, [pc, #160]	; (7a88 <_free_r+0x204>)
    79e8:	60bd      	str	r5, [r7, #8]
    79ea:	6812      	ldr	r2, [r2, #0]
    79ec:	429a      	cmp	r2, r3
    79ee:	d893      	bhi.n	7918 <_free_r+0x94>
    79f0:	4b26      	ldr	r3, [pc, #152]	; (7a8c <_free_r+0x208>)
    79f2:	4630      	mov	r0, r6
    79f4:	6819      	ldr	r1, [r3, #0]
    79f6:	f7ff fef5 	bl	77e4 <_malloc_trim_r>
    79fa:	e78d      	b.n	7918 <_free_r+0x94>
    79fc:	2b14      	cmp	r3, #20
    79fe:	d90a      	bls.n	7a16 <_free_r+0x192>
    7a00:	2b54      	cmp	r3, #84	; 0x54
    7a02:	d81f      	bhi.n	7a44 <_free_r+0x1c0>
    7a04:	0b0b      	lsrs	r3, r1, #12
    7a06:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    7a0a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    7a0e:	00c3      	lsls	r3, r0, #3
    7a10:	e7b1      	b.n	7976 <_free_r+0xf2>
    7a12:	4419      	add	r1, r3
    7a14:	e78d      	b.n	7932 <_free_r+0xae>
    7a16:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    7a1a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    7a1e:	00c3      	lsls	r3, r0, #3
    7a20:	e7a9      	b.n	7976 <_free_r+0xf2>
    7a22:	f041 0301 	orr.w	r3, r1, #1
    7a26:	e9c7 5504 	strd	r5, r5, [r7, #16]
    7a2a:	e9c5 0002 	strd	r0, r0, [r5, #8]
    7a2e:	606b      	str	r3, [r5, #4]
    7a30:	5069      	str	r1, [r5, r1]
    7a32:	e771      	b.n	7918 <_free_r+0x94>
    7a34:	6879      	ldr	r1, [r7, #4]
    7a36:	1092      	asrs	r2, r2, #2
    7a38:	2401      	movs	r4, #1
    7a3a:	fa04 f202 	lsl.w	r2, r4, r2
    7a3e:	430a      	orrs	r2, r1
    7a40:	607a      	str	r2, [r7, #4]
    7a42:	e7a6      	b.n	7992 <_free_r+0x10e>
    7a44:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    7a48:	d806      	bhi.n	7a58 <_free_r+0x1d4>
    7a4a:	0bcb      	lsrs	r3, r1, #15
    7a4c:	f103 0078 	add.w	r0, r3, #120	; 0x78
    7a50:	f103 0277 	add.w	r2, r3, #119	; 0x77
    7a54:	00c3      	lsls	r3, r0, #3
    7a56:	e78e      	b.n	7976 <_free_r+0xf2>
    7a58:	f240 5254 	movw	r2, #1364	; 0x554
    7a5c:	4293      	cmp	r3, r2
    7a5e:	d806      	bhi.n	7a6e <_free_r+0x1ea>
    7a60:	0c8b      	lsrs	r3, r1, #18
    7a62:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    7a66:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    7a6a:	00c3      	lsls	r3, r0, #3
    7a6c:	e783      	b.n	7976 <_free_r+0xf2>
    7a6e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    7a72:	227e      	movs	r2, #126	; 0x7e
    7a74:	e77f      	b.n	7976 <_free_r+0xf2>
    7a76:	f041 0301 	orr.w	r3, r1, #1
    7a7a:	606b      	str	r3, [r5, #4]
    7a7c:	f8cc 1000 	str.w	r1, [ip]
    7a80:	e74a      	b.n	7918 <_free_r+0x94>
    7a82:	bf00      	nop
    7a84:	20019490 	.word	0x20019490
    7a88:	2001989c 	.word	0x2001989c
    7a8c:	2001aa3c 	.word	0x2001aa3c

00007a90 <__ascii_mbtowc>:
    7a90:	b082      	sub	sp, #8
    7a92:	b149      	cbz	r1, 7aa8 <__ascii_mbtowc+0x18>
    7a94:	b15a      	cbz	r2, 7aae <__ascii_mbtowc+0x1e>
    7a96:	b16b      	cbz	r3, 7ab4 <__ascii_mbtowc+0x24>
    7a98:	7813      	ldrb	r3, [r2, #0]
    7a9a:	600b      	str	r3, [r1, #0]
    7a9c:	7812      	ldrb	r2, [r2, #0]
    7a9e:	1e10      	subs	r0, r2, #0
    7aa0:	bf18      	it	ne
    7aa2:	2001      	movne	r0, #1
    7aa4:	b002      	add	sp, #8
    7aa6:	4770      	bx	lr
    7aa8:	a901      	add	r1, sp, #4
    7aaa:	2a00      	cmp	r2, #0
    7aac:	d1f3      	bne.n	7a96 <__ascii_mbtowc+0x6>
    7aae:	4610      	mov	r0, r2
    7ab0:	b002      	add	sp, #8
    7ab2:	4770      	bx	lr
    7ab4:	f06f 0001 	mvn.w	r0, #1
    7ab8:	e7f4      	b.n	7aa4 <__ascii_mbtowc+0x14>
    7aba:	bf00      	nop
    7abc:	0000      	movs	r0, r0
	...

00007ac0 <_svfprintf_r>:
    7ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7ac4:	ed2d 8b08 	vpush	{d8-d11}
    7ac8:	b0d1      	sub	sp, #324	; 0x144
    7aca:	460c      	mov	r4, r1
    7acc:	ee0b 1a10 	vmov	s22, r1
    7ad0:	4690      	mov	r8, r2
    7ad2:	9308      	str	r3, [sp, #32]
    7ad4:	4683      	mov	fp, r0
    7ad6:	f002 facb 	bl	a070 <_localeconv_r>
    7ada:	6803      	ldr	r3, [r0, #0]
    7adc:	9312      	str	r3, [sp, #72]	; 0x48
    7ade:	4618      	mov	r0, r3
    7ae0:	f7ff fdce 	bl	7680 <strlen>
    7ae4:	af20      	add	r7, sp, #128	; 0x80
    7ae6:	9010      	str	r0, [sp, #64]	; 0x40
    7ae8:	2208      	movs	r2, #8
    7aea:	2100      	movs	r1, #0
    7aec:	4638      	mov	r0, r7
    7aee:	f7ff fca7 	bl	7440 <memset>
    7af2:	89a3      	ldrh	r3, [r4, #12]
    7af4:	061b      	lsls	r3, r3, #24
    7af6:	d503      	bpl.n	7b00 <_svfprintf_r+0x40>
    7af8:	6923      	ldr	r3, [r4, #16]
    7afa:	2b00      	cmp	r3, #0
    7afc:	f000 8755 	beq.w	89aa <_svfprintf_r+0xeea>
    7b00:	2300      	movs	r3, #0
    7b02:	ed9f 8b83 	vldr	d8, [pc, #524]	; 7d10 <_svfprintf_r+0x250>
    7b06:	ed9f 9b84 	vldr	d9, [pc, #528]	; 7d18 <_svfprintf_r+0x258>
    7b0a:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
    7b0e:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    7b12:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    7b16:	aa27      	add	r2, sp, #156	; 0x9c
    7b18:	930e      	str	r3, [sp, #56]	; 0x38
    7b1a:	9224      	str	r2, [sp, #144]	; 0x90
    7b1c:	4692      	mov	sl, r2
    7b1e:	9311      	str	r3, [sp, #68]	; 0x44
    7b20:	9304      	str	r3, [sp, #16]
    7b22:	4644      	mov	r4, r8
    7b24:	46a1      	mov	r9, r4
    7b26:	4b7e      	ldr	r3, [pc, #504]	; (7d20 <_svfprintf_r+0x260>)
    7b28:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    7b2c:	f7ff fd3e 	bl	75ac <__locale_mb_cur_max>
    7b30:	464a      	mov	r2, r9
    7b32:	4603      	mov	r3, r0
    7b34:	a91c      	add	r1, sp, #112	; 0x70
    7b36:	9700      	str	r7, [sp, #0]
    7b38:	4658      	mov	r0, fp
    7b3a:	47a8      	blx	r5
    7b3c:	2800      	cmp	r0, #0
    7b3e:	f000 80b0 	beq.w	7ca2 <_svfprintf_r+0x1e2>
    7b42:	f2c0 80a6 	blt.w	7c92 <_svfprintf_r+0x1d2>
    7b46:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    7b48:	2a25      	cmp	r2, #37	; 0x25
    7b4a:	4603      	mov	r3, r0
    7b4c:	d001      	beq.n	7b52 <_svfprintf_r+0x92>
    7b4e:	4499      	add	r9, r3
    7b50:	e7e9      	b.n	7b26 <_svfprintf_r+0x66>
    7b52:	ebb9 0504 	subs.w	r5, r9, r4
    7b56:	4606      	mov	r6, r0
    7b58:	f040 80a7 	bne.w	7caa <_svfprintf_r+0x1ea>
    7b5c:	2300      	movs	r3, #0
    7b5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7b62:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    7b66:	4698      	mov	r8, r3
    7b68:	9306      	str	r3, [sp, #24]
    7b6a:	f109 0901 	add.w	r9, r9, #1
    7b6e:	f899 3000 	ldrb.w	r3, [r9]
    7b72:	9203      	str	r2, [sp, #12]
    7b74:	252b      	movs	r5, #43	; 0x2b
    7b76:	2620      	movs	r6, #32
    7b78:	f109 0901 	add.w	r9, r9, #1
    7b7c:	f1a3 0220 	sub.w	r2, r3, #32
    7b80:	2a5a      	cmp	r2, #90	; 0x5a
    7b82:	f200 80cf 	bhi.w	7d24 <_svfprintf_r+0x264>
    7b86:	e8df f012 	tbh	[pc, r2, lsl #1]
    7b8a:	02e8      	.short	0x02e8
    7b8c:	00cd00cd 	.word	0x00cd00cd
    7b90:	00cd02e3 	.word	0x00cd02e3
    7b94:	00cd00cd 	.word	0x00cd00cd
    7b98:	00cd006a 	.word	0x00cd006a
    7b9c:	020500cd 	.word	0x020500cd
    7ba0:	00cd0284 	.word	0x00cd0284
    7ba4:	02c90210 	.word	0x02c90210
    7ba8:	02bd00cd 	.word	0x02bd00cd
    7bac:	005b005b 	.word	0x005b005b
    7bb0:	005b005b 	.word	0x005b005b
    7bb4:	005b005b 	.word	0x005b005b
    7bb8:	005b005b 	.word	0x005b005b
    7bbc:	00cd005b 	.word	0x00cd005b
    7bc0:	00cd00cd 	.word	0x00cd00cd
    7bc4:	00cd00cd 	.word	0x00cd00cd
    7bc8:	00cd00cd 	.word	0x00cd00cd
    7bcc:	00cd0153 	.word	0x00cd0153
    7bd0:	021a0183 	.word	0x021a0183
    7bd4:	01530153 	.word	0x01530153
    7bd8:	00cd0153 	.word	0x00cd0153
    7bdc:	00cd00cd 	.word	0x00cd00cd
    7be0:	021500cd 	.word	0x021500cd
    7be4:	00cd00cd 	.word	0x00cd00cd
    7be8:	00cd0296 	.word	0x00cd0296
    7bec:	00cd00cd 	.word	0x00cd00cd
    7bf0:	00cd01ab 	.word	0x00cd01ab
    7bf4:	00cd02aa 	.word	0x00cd02aa
    7bf8:	06e300cd 	.word	0x06e300cd
    7bfc:	00cd00cd 	.word	0x00cd00cd
    7c00:	00cd00cd 	.word	0x00cd00cd
    7c04:	00cd00cd 	.word	0x00cd00cd
    7c08:	00cd00cd 	.word	0x00cd00cd
    7c0c:	00cd0153 	.word	0x00cd0153
    7c10:	01de0183 	.word	0x01de0183
    7c14:	01530153 	.word	0x01530153
    7c18:	02770153 	.word	0x02770153
    7c1c:	007f01de 	.word	0x007f01de
    7c20:	028900cd 	.word	0x028900cd
    7c24:	025f00cd 	.word	0x025f00cd
    7c28:	022f06e0 	.word	0x022f06e0
    7c2c:	00cd007f 	.word	0x00cd007f
    7c30:	007c01ab 	.word	0x007c01ab
    7c34:	00cd06b8 	.word	0x00cd06b8
    7c38:	06bd00cd 	.word	0x06bd00cd
    7c3c:	007c00cd 	.word	0x007c00cd
    7c40:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    7c44:	2100      	movs	r1, #0
    7c46:	f819 3b01 	ldrb.w	r3, [r9], #1
    7c4a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    7c4e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    7c52:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    7c56:	2a09      	cmp	r2, #9
    7c58:	d9f5      	bls.n	7c46 <_svfprintf_r+0x186>
    7c5a:	9106      	str	r1, [sp, #24]
    7c5c:	e78e      	b.n	7b7c <_svfprintf_r+0xbc>
    7c5e:	4658      	mov	r0, fp
    7c60:	f002 fa06 	bl	a070 <_localeconv_r>
    7c64:	6843      	ldr	r3, [r0, #4]
    7c66:	9315      	str	r3, [sp, #84]	; 0x54
    7c68:	4618      	mov	r0, r3
    7c6a:	f7ff fd09 	bl	7680 <strlen>
    7c6e:	9016      	str	r0, [sp, #88]	; 0x58
    7c70:	4658      	mov	r0, fp
    7c72:	f002 f9fd 	bl	a070 <_localeconv_r>
    7c76:	6883      	ldr	r3, [r0, #8]
    7c78:	9313      	str	r3, [sp, #76]	; 0x4c
    7c7a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7c7c:	2b00      	cmp	r3, #0
    7c7e:	f040 862d 	bne.w	88dc <_svfprintf_r+0xe1c>
    7c82:	f899 3000 	ldrb.w	r3, [r9]
    7c86:	e777      	b.n	7b78 <_svfprintf_r+0xb8>
    7c88:	f899 3000 	ldrb.w	r3, [r9]
    7c8c:	f048 0820 	orr.w	r8, r8, #32
    7c90:	e772      	b.n	7b78 <_svfprintf_r+0xb8>
    7c92:	2208      	movs	r2, #8
    7c94:	2100      	movs	r1, #0
    7c96:	4638      	mov	r0, r7
    7c98:	f7ff fbd2 	bl	7440 <memset>
    7c9c:	2301      	movs	r3, #1
    7c9e:	4499      	add	r9, r3
    7ca0:	e741      	b.n	7b26 <_svfprintf_r+0x66>
    7ca2:	ebb9 0504 	subs.w	r5, r9, r4
    7ca6:	4606      	mov	r6, r0
    7ca8:	d011      	beq.n	7cce <_svfprintf_r+0x20e>
    7caa:	9b26      	ldr	r3, [sp, #152]	; 0x98
    7cac:	442b      	add	r3, r5
    7cae:	9326      	str	r3, [sp, #152]	; 0x98
    7cb0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    7cb2:	3301      	adds	r3, #1
    7cb4:	2b07      	cmp	r3, #7
    7cb6:	e9ca 4500 	strd	r4, r5, [sl]
    7cba:	9325      	str	r3, [sp, #148]	; 0x94
    7cbc:	dc1c      	bgt.n	7cf8 <_svfprintf_r+0x238>
    7cbe:	f10a 0a08 	add.w	sl, sl, #8
    7cc2:	9b04      	ldr	r3, [sp, #16]
    7cc4:	442b      	add	r3, r5
    7cc6:	9304      	str	r3, [sp, #16]
    7cc8:	2e00      	cmp	r6, #0
    7cca:	f47f af47 	bne.w	7b5c <_svfprintf_r+0x9c>
    7cce:	9b26      	ldr	r3, [sp, #152]	; 0x98
    7cd0:	2b00      	cmp	r3, #0
    7cd2:	f041 820b 	bne.w	90ec <_svfprintf_r+0x162c>
    7cd6:	ee1b 3a10 	vmov	r3, s22
    7cda:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    7cde:	f013 0f40 	tst.w	r3, #64	; 0x40
    7ce2:	9b04      	ldr	r3, [sp, #16]
    7ce4:	bf18      	it	ne
    7ce6:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    7cea:	9304      	str	r3, [sp, #16]
    7cec:	9804      	ldr	r0, [sp, #16]
    7cee:	b051      	add	sp, #324	; 0x144
    7cf0:	ecbd 8b08 	vpop	{d8-d11}
    7cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7cf8:	ee1b 1a10 	vmov	r1, s22
    7cfc:	aa24      	add	r2, sp, #144	; 0x90
    7cfe:	4658      	mov	r0, fp
    7d00:	f003 fa38 	bl	b174 <__ssprint_r>
    7d04:	2800      	cmp	r0, #0
    7d06:	d1e6      	bne.n	7cd6 <_svfprintf_r+0x216>
    7d08:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    7d0c:	e7d9      	b.n	7cc2 <_svfprintf_r+0x202>
    7d0e:	bf00      	nop
	...
    7d18:	ffffffff 	.word	0xffffffff
    7d1c:	7fefffff 	.word	0x7fefffff
    7d20:	20019324 	.word	0x20019324
    7d24:	930b      	str	r3, [sp, #44]	; 0x2c
    7d26:	2b00      	cmp	r3, #0
    7d28:	d0d1      	beq.n	7cce <_svfprintf_r+0x20e>
    7d2a:	2100      	movs	r1, #0
    7d2c:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    7d30:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
    7d34:	2301      	movs	r3, #1
    7d36:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    7d3a:	9302      	str	r3, [sp, #8]
    7d3c:	9107      	str	r1, [sp, #28]
    7d3e:	9305      	str	r3, [sp, #20]
    7d40:	9103      	str	r1, [sp, #12]
    7d42:	910f      	str	r1, [sp, #60]	; 0x3c
    7d44:	ac37      	add	r4, sp, #220	; 0xdc
    7d46:	f018 0302 	ands.w	r3, r8, #2
    7d4a:	9309      	str	r3, [sp, #36]	; 0x24
    7d4c:	d002      	beq.n	7d54 <_svfprintf_r+0x294>
    7d4e:	9b02      	ldr	r3, [sp, #8]
    7d50:	3302      	adds	r3, #2
    7d52:	9302      	str	r3, [sp, #8]
    7d54:	f018 0384 	ands.w	r3, r8, #132	; 0x84
    7d58:	930a      	str	r3, [sp, #40]	; 0x28
    7d5a:	d105      	bne.n	7d68 <_svfprintf_r+0x2a8>
    7d5c:	9b06      	ldr	r3, [sp, #24]
    7d5e:	9a02      	ldr	r2, [sp, #8]
    7d60:	1a9d      	subs	r5, r3, r2
    7d62:	2d00      	cmp	r5, #0
    7d64:	f300 8369 	bgt.w	843a <_svfprintf_r+0x97a>
    7d68:	9a26      	ldr	r2, [sp, #152]	; 0x98
    7d6a:	b189      	cbz	r1, 7d90 <_svfprintf_r+0x2d0>
    7d6c:	9925      	ldr	r1, [sp, #148]	; 0x94
    7d6e:	f10d 0067 	add.w	r0, sp, #103	; 0x67
    7d72:	3101      	adds	r1, #1
    7d74:	3201      	adds	r2, #1
    7d76:	f8ca 0000 	str.w	r0, [sl]
    7d7a:	2907      	cmp	r1, #7
    7d7c:	f04f 0001 	mov.w	r0, #1
    7d80:	9226      	str	r2, [sp, #152]	; 0x98
    7d82:	9125      	str	r1, [sp, #148]	; 0x94
    7d84:	f8ca 0004 	str.w	r0, [sl, #4]
    7d88:	f300 83a2 	bgt.w	84d0 <_svfprintf_r+0xa10>
    7d8c:	f10a 0a08 	add.w	sl, sl, #8
    7d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7d92:	b183      	cbz	r3, 7db6 <_svfprintf_r+0x2f6>
    7d94:	9b25      	ldr	r3, [sp, #148]	; 0x94
    7d96:	a91a      	add	r1, sp, #104	; 0x68
    7d98:	3301      	adds	r3, #1
    7d9a:	3202      	adds	r2, #2
    7d9c:	f8ca 1000 	str.w	r1, [sl]
    7da0:	2b07      	cmp	r3, #7
    7da2:	f04f 0102 	mov.w	r1, #2
    7da6:	9226      	str	r2, [sp, #152]	; 0x98
    7da8:	9325      	str	r3, [sp, #148]	; 0x94
    7daa:	f8ca 1004 	str.w	r1, [sl, #4]
    7dae:	f300 83a3 	bgt.w	84f8 <_svfprintf_r+0xa38>
    7db2:	f10a 0a08 	add.w	sl, sl, #8
    7db6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7db8:	2b80      	cmp	r3, #128	; 0x80
    7dba:	f000 826c 	beq.w	8296 <_svfprintf_r+0x7d6>
    7dbe:	9b03      	ldr	r3, [sp, #12]
    7dc0:	9905      	ldr	r1, [sp, #20]
    7dc2:	1a5d      	subs	r5, r3, r1
    7dc4:	2d00      	cmp	r5, #0
    7dc6:	f300 82a5 	bgt.w	8314 <_svfprintf_r+0x854>
    7dca:	f418 7f80 	tst.w	r8, #256	; 0x100
    7dce:	f040 820d 	bne.w	81ec <_svfprintf_r+0x72c>
    7dd2:	9b05      	ldr	r3, [sp, #20]
    7dd4:	f8ca 3004 	str.w	r3, [sl, #4]
    7dd8:	441a      	add	r2, r3
    7dda:	9b25      	ldr	r3, [sp, #148]	; 0x94
    7ddc:	f8ca 4000 	str.w	r4, [sl]
    7de0:	3301      	adds	r3, #1
    7de2:	2b07      	cmp	r3, #7
    7de4:	9226      	str	r2, [sp, #152]	; 0x98
    7de6:	9325      	str	r3, [sp, #148]	; 0x94
    7de8:	f300 831b 	bgt.w	8422 <_svfprintf_r+0x962>
    7dec:	f10a 0a08 	add.w	sl, sl, #8
    7df0:	f018 0f04 	tst.w	r8, #4
    7df4:	d005      	beq.n	7e02 <_svfprintf_r+0x342>
    7df6:	9b06      	ldr	r3, [sp, #24]
    7df8:	9902      	ldr	r1, [sp, #8]
    7dfa:	1a5c      	subs	r4, r3, r1
    7dfc:	2c00      	cmp	r4, #0
    7dfe:	f300 8388 	bgt.w	8512 <_svfprintf_r+0xa52>
    7e02:	9b04      	ldr	r3, [sp, #16]
    7e04:	9906      	ldr	r1, [sp, #24]
    7e06:	9802      	ldr	r0, [sp, #8]
    7e08:	4281      	cmp	r1, r0
    7e0a:	bfac      	ite	ge
    7e0c:	185b      	addge	r3, r3, r1
    7e0e:	181b      	addlt	r3, r3, r0
    7e10:	9304      	str	r3, [sp, #16]
    7e12:	2a00      	cmp	r2, #0
    7e14:	f040 82b0 	bne.w	8378 <_svfprintf_r+0x8b8>
    7e18:	2300      	movs	r3, #0
    7e1a:	9325      	str	r3, [sp, #148]	; 0x94
    7e1c:	9b07      	ldr	r3, [sp, #28]
    7e1e:	b11b      	cbz	r3, 7e28 <_svfprintf_r+0x368>
    7e20:	9907      	ldr	r1, [sp, #28]
    7e22:	4658      	mov	r0, fp
    7e24:	f7ff fd2e 	bl	7884 <_free_r>
    7e28:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    7e2c:	464c      	mov	r4, r9
    7e2e:	e679      	b.n	7b24 <_svfprintf_r+0x64>
    7e30:	930b      	str	r3, [sp, #44]	; 0x2c
    7e32:	9b08      	ldr	r3, [sp, #32]
    7e34:	3307      	adds	r3, #7
    7e36:	f023 0307 	bic.w	r3, r3, #7
    7e3a:	ecb3 8b02 	vldmia	r3!, {d8}
    7e3e:	eeb0 7bc8 	vabs.f64	d7, d8
    7e42:	eeb4 7b49 	vcmp.f64	d7, d9
    7e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7e4a:	9308      	str	r3, [sp, #32]
    7e4c:	f340 84e9 	ble.w	8822 <_svfprintf_r+0xd62>
    7e50:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    7e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7e58:	f101 8059 	bmi.w	8f0e <_svfprintf_r+0x144e>
    7e5c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    7e60:	4cab      	ldr	r4, [pc, #684]	; (8110 <_svfprintf_r+0x650>)
    7e62:	4bac      	ldr	r3, [pc, #688]	; (8114 <_svfprintf_r+0x654>)
    7e64:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    7e68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7e6a:	2a47      	cmp	r2, #71	; 0x47
    7e6c:	bfc8      	it	gt
    7e6e:	461c      	movgt	r4, r3
    7e70:	2300      	movs	r3, #0
    7e72:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    7e76:	2203      	movs	r2, #3
    7e78:	9307      	str	r3, [sp, #28]
    7e7a:	9202      	str	r2, [sp, #8]
    7e7c:	9205      	str	r2, [sp, #20]
    7e7e:	9303      	str	r3, [sp, #12]
    7e80:	930f      	str	r3, [sp, #60]	; 0x3c
    7e82:	2900      	cmp	r1, #0
    7e84:	f43f af5f 	beq.w	7d46 <_svfprintf_r+0x286>
    7e88:	9b02      	ldr	r3, [sp, #8]
    7e8a:	3301      	adds	r3, #1
    7e8c:	9302      	str	r3, [sp, #8]
    7e8e:	e75a      	b.n	7d46 <_svfprintf_r+0x286>
    7e90:	2b43      	cmp	r3, #67	; 0x43
    7e92:	930b      	str	r3, [sp, #44]	; 0x2c
    7e94:	d003      	beq.n	7e9e <_svfprintf_r+0x3de>
    7e96:	f018 0f10 	tst.w	r8, #16
    7e9a:	f000 855d 	beq.w	8958 <_svfprintf_r+0xe98>
    7e9e:	9d08      	ldr	r5, [sp, #32]
    7ea0:	2208      	movs	r2, #8
    7ea2:	2100      	movs	r1, #0
    7ea4:	a822      	add	r0, sp, #136	; 0x88
    7ea6:	ac37      	add	r4, sp, #220	; 0xdc
    7ea8:	f7ff faca 	bl	7440 <memset>
    7eac:	ab22      	add	r3, sp, #136	; 0x88
    7eae:	f855 2b04 	ldr.w	r2, [r5], #4
    7eb2:	4621      	mov	r1, r4
    7eb4:	4658      	mov	r0, fp
    7eb6:	f002 f973 	bl	a1a0 <_wcrtomb_r>
    7eba:	4603      	mov	r3, r0
    7ebc:	3301      	adds	r3, #1
    7ebe:	9005      	str	r0, [sp, #20]
    7ec0:	f001 82ee 	beq.w	94a0 <_svfprintf_r+0x19e0>
    7ec4:	9b05      	ldr	r3, [sp, #20]
    7ec6:	9508      	str	r5, [sp, #32]
    7ec8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    7ecc:	9302      	str	r3, [sp, #8]
    7ece:	2100      	movs	r1, #0
    7ed0:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    7ed4:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    7ed8:	9107      	str	r1, [sp, #28]
    7eda:	9103      	str	r1, [sp, #12]
    7edc:	910f      	str	r1, [sp, #60]	; 0x3c
    7ede:	e732      	b.n	7d46 <_svfprintf_r+0x286>
    7ee0:	930b      	str	r3, [sp, #44]	; 0x2c
    7ee2:	9b08      	ldr	r3, [sp, #32]
    7ee4:	461a      	mov	r2, r3
    7ee6:	2300      	movs	r3, #0
    7ee8:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    7eec:	4613      	mov	r3, r2
    7eee:	f853 4b04 	ldr.w	r4, [r3], #4
    7ef2:	9308      	str	r3, [sp, #32]
    7ef4:	2c00      	cmp	r4, #0
    7ef6:	f000 8548 	beq.w	898a <_svfprintf_r+0xeca>
    7efa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7efc:	2b53      	cmp	r3, #83	; 0x53
    7efe:	f000 86ec 	beq.w	8cda <_svfprintf_r+0x121a>
    7f02:	f018 0310 	ands.w	r3, r8, #16
    7f06:	930c      	str	r3, [sp, #48]	; 0x30
    7f08:	f040 86e7 	bne.w	8cda <_svfprintf_r+0x121a>
    7f0c:	9b03      	ldr	r3, [sp, #12]
    7f0e:	1c5d      	adds	r5, r3, #1
    7f10:	f001 80e5 	beq.w	90de <_svfprintf_r+0x161e>
    7f14:	990c      	ldr	r1, [sp, #48]	; 0x30
    7f16:	461a      	mov	r2, r3
    7f18:	4620      	mov	r0, r4
    7f1a:	f002 f8f1 	bl	a100 <memchr>
    7f1e:	9007      	str	r0, [sp, #28]
    7f20:	2800      	cmp	r0, #0
    7f22:	f001 8328 	beq.w	9576 <_svfprintf_r+0x1ab6>
    7f26:	9b07      	ldr	r3, [sp, #28]
    7f28:	1b1a      	subs	r2, r3, r4
    7f2a:	9205      	str	r2, [sp, #20]
    7f2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7f2e:	9303      	str	r3, [sp, #12]
    7f30:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    7f34:	930f      	str	r3, [sp, #60]	; 0x3c
    7f36:	930d      	str	r3, [sp, #52]	; 0x34
    7f38:	9307      	str	r3, [sp, #28]
    7f3a:	2373      	movs	r3, #115	; 0x73
    7f3c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    7f40:	9202      	str	r2, [sp, #8]
    7f42:	930b      	str	r3, [sp, #44]	; 0x2c
    7f44:	e79d      	b.n	7e82 <_svfprintf_r+0x3c2>
    7f46:	f018 0f20 	tst.w	r8, #32
    7f4a:	930b      	str	r3, [sp, #44]	; 0x2c
    7f4c:	9b08      	ldr	r3, [sp, #32]
    7f4e:	d03d      	beq.n	7fcc <_svfprintf_r+0x50c>
    7f50:	3307      	adds	r3, #7
    7f52:	f023 0307 	bic.w	r3, r3, #7
    7f56:	461a      	mov	r2, r3
    7f58:	4611      	mov	r1, r2
    7f5a:	685b      	ldr	r3, [r3, #4]
    7f5c:	f851 2b08 	ldr.w	r2, [r1], #8
    7f60:	9108      	str	r1, [sp, #32]
    7f62:	4619      	mov	r1, r3
    7f64:	2b00      	cmp	r3, #0
    7f66:	f2c0 840c 	blt.w	8782 <_svfprintf_r+0xcc2>
    7f6a:	9b03      	ldr	r3, [sp, #12]
    7f6c:	3301      	adds	r3, #1
    7f6e:	f000 829e 	beq.w	84ae <_svfprintf_r+0x9ee>
    7f72:	f028 0080 	bic.w	r0, r8, #128	; 0x80
    7f76:	ea52 0301 	orrs.w	r3, r2, r1
    7f7a:	9002      	str	r0, [sp, #8]
    7f7c:	f040 8299 	bne.w	84b2 <_svfprintf_r+0x9f2>
    7f80:	9b03      	ldr	r3, [sp, #12]
    7f82:	2b00      	cmp	r3, #0
    7f84:	f040 829a 	bne.w	84bc <_svfprintf_r+0x9fc>
    7f88:	4680      	mov	r8, r0
    7f8a:	2300      	movs	r3, #0
    7f8c:	9303      	str	r3, [sp, #12]
    7f8e:	9305      	str	r3, [sp, #20]
    7f90:	ac50      	add	r4, sp, #320	; 0x140
    7f92:	e106      	b.n	81a2 <_svfprintf_r+0x6e2>
    7f94:	9b08      	ldr	r3, [sp, #32]
    7f96:	f853 2b04 	ldr.w	r2, [r3], #4
    7f9a:	9206      	str	r2, [sp, #24]
    7f9c:	2a00      	cmp	r2, #0
    7f9e:	f280 8419 	bge.w	87d4 <_svfprintf_r+0xd14>
    7fa2:	9a06      	ldr	r2, [sp, #24]
    7fa4:	9308      	str	r3, [sp, #32]
    7fa6:	4252      	negs	r2, r2
    7fa8:	9206      	str	r2, [sp, #24]
    7faa:	f899 3000 	ldrb.w	r3, [r9]
    7fae:	f048 0804 	orr.w	r8, r8, #4
    7fb2:	e5e1      	b.n	7b78 <_svfprintf_r+0xb8>
    7fb4:	f899 3000 	ldrb.w	r3, [r9]
    7fb8:	f048 0808 	orr.w	r8, r8, #8
    7fbc:	e5dc      	b.n	7b78 <_svfprintf_r+0xb8>
    7fbe:	f048 0810 	orr.w	r8, r8, #16
    7fc2:	f018 0f20 	tst.w	r8, #32
    7fc6:	930b      	str	r3, [sp, #44]	; 0x2c
    7fc8:	9b08      	ldr	r3, [sp, #32]
    7fca:	d1c1      	bne.n	7f50 <_svfprintf_r+0x490>
    7fcc:	f018 0f10 	tst.w	r8, #16
    7fd0:	f040 840b 	bne.w	87ea <_svfprintf_r+0xd2a>
    7fd4:	f018 0f40 	tst.w	r8, #64	; 0x40
    7fd8:	f000 8403 	beq.w	87e2 <_svfprintf_r+0xd22>
    7fdc:	f933 2b04 	ldrsh.w	r2, [r3], #4
    7fe0:	9308      	str	r3, [sp, #32]
    7fe2:	17d1      	asrs	r1, r2, #31
    7fe4:	460b      	mov	r3, r1
    7fe6:	e7bd      	b.n	7f64 <_svfprintf_r+0x4a4>
    7fe8:	9b08      	ldr	r3, [sp, #32]
    7fea:	f048 0202 	orr.w	r2, r8, #2
    7fee:	9202      	str	r2, [sp, #8]
    7ff0:	f853 2b04 	ldr.w	r2, [r3], #4
    7ff4:	9308      	str	r3, [sp, #32]
    7ff6:	f647 0330 	movw	r3, #30768	; 0x7830
    7ffa:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    7ffe:	2078      	movs	r0, #120	; 0x78
    8000:	4b45      	ldr	r3, [pc, #276]	; (8118 <_svfprintf_r+0x658>)
    8002:	9311      	str	r3, [sp, #68]	; 0x44
    8004:	2100      	movs	r1, #0
    8006:	2302      	movs	r3, #2
    8008:	900b      	str	r0, [sp, #44]	; 0x2c
    800a:	2000      	movs	r0, #0
    800c:	9c03      	ldr	r4, [sp, #12]
    800e:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    8012:	1c60      	adds	r0, r4, #1
    8014:	f000 80ad 	beq.w	8172 <_svfprintf_r+0x6b2>
    8018:	9802      	ldr	r0, [sp, #8]
    801a:	f020 0880 	bic.w	r8, r0, #128	; 0x80
    801e:	ea52 0001 	orrs.w	r0, r2, r1
    8022:	f040 80a4 	bne.w	816e <_svfprintf_r+0x6ae>
    8026:	2c00      	cmp	r4, #0
    8028:	f040 86ae 	bne.w	8d88 <_svfprintf_r+0x12c8>
    802c:	2b00      	cmp	r3, #0
    802e:	d1ac      	bne.n	7f8a <_svfprintf_r+0x4ca>
    8030:	9b02      	ldr	r3, [sp, #8]
    8032:	f013 0301 	ands.w	r3, r3, #1
    8036:	9305      	str	r3, [sp, #20]
    8038:	f000 83d1 	beq.w	87de <_svfprintf_r+0xd1e>
    803c:	2330      	movs	r3, #48	; 0x30
    803e:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
    8042:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    8046:	e0ac      	b.n	81a2 <_svfprintf_r+0x6e2>
    8048:	f018 0f20 	tst.w	r8, #32
    804c:	f040 83d4 	bne.w	87f8 <_svfprintf_r+0xd38>
    8050:	f018 0f10 	tst.w	r8, #16
    8054:	f040 869f 	bne.w	8d96 <_svfprintf_r+0x12d6>
    8058:	f018 0f40 	tst.w	r8, #64	; 0x40
    805c:	f040 8797 	bne.w	8f8e <_svfprintf_r+0x14ce>
    8060:	f418 7f00 	tst.w	r8, #512	; 0x200
    8064:	f000 8697 	beq.w	8d96 <_svfprintf_r+0x12d6>
    8068:	9b08      	ldr	r3, [sp, #32]
    806a:	9904      	ldr	r1, [sp, #16]
    806c:	f853 2b04 	ldr.w	r2, [r3], #4
    8070:	9308      	str	r3, [sp, #32]
    8072:	7011      	strb	r1, [r2, #0]
    8074:	464c      	mov	r4, r9
    8076:	e555      	b.n	7b24 <_svfprintf_r+0x64>
    8078:	f899 3000 	ldrb.w	r3, [r9]
    807c:	2b68      	cmp	r3, #104	; 0x68
    807e:	bf03      	ittte	eq
    8080:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    8084:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
    8088:	f109 0901 	addeq.w	r9, r9, #1
    808c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
    8090:	e572      	b.n	7b78 <_svfprintf_r+0xb8>
    8092:	f899 3000 	ldrb.w	r3, [r9]
    8096:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
    809a:	e56d      	b.n	7b78 <_svfprintf_r+0xb8>
    809c:	f899 3000 	ldrb.w	r3, [r9]
    80a0:	2b6c      	cmp	r3, #108	; 0x6c
    80a2:	bf03      	ittte	eq
    80a4:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    80a8:	f048 0820 	orreq.w	r8, r8, #32
    80ac:	f109 0901 	addeq.w	r9, r9, #1
    80b0:	f048 0810 	orrne.w	r8, r8, #16
    80b4:	e560      	b.n	7b78 <_svfprintf_r+0xb8>
    80b6:	930b      	str	r3, [sp, #44]	; 0x2c
    80b8:	f048 0810 	orr.w	r8, r8, #16
    80bc:	f018 0120 	ands.w	r1, r8, #32
    80c0:	f000 8351 	beq.w	8766 <_svfprintf_r+0xca6>
    80c4:	9b08      	ldr	r3, [sp, #32]
    80c6:	3307      	adds	r3, #7
    80c8:	f023 0307 	bic.w	r3, r3, #7
    80cc:	6859      	ldr	r1, [r3, #4]
    80ce:	f853 2b08 	ldr.w	r2, [r3], #8
    80d2:	9308      	str	r3, [sp, #32]
    80d4:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    80d8:	9302      	str	r3, [sp, #8]
    80da:	2300      	movs	r3, #0
    80dc:	e795      	b.n	800a <_svfprintf_r+0x54a>
    80de:	930b      	str	r3, [sp, #44]	; 0x2c
    80e0:	f048 0310 	orr.w	r3, r8, #16
    80e4:	9302      	str	r3, [sp, #8]
    80e6:	9b02      	ldr	r3, [sp, #8]
    80e8:	f013 0120 	ands.w	r1, r3, #32
    80ec:	f000 8329 	beq.w	8742 <_svfprintf_r+0xc82>
    80f0:	9b08      	ldr	r3, [sp, #32]
    80f2:	3307      	adds	r3, #7
    80f4:	f023 0307 	bic.w	r3, r3, #7
    80f8:	6859      	ldr	r1, [r3, #4]
    80fa:	f853 2b08 	ldr.w	r2, [r3], #8
    80fe:	9308      	str	r3, [sp, #32]
    8100:	2301      	movs	r3, #1
    8102:	e782      	b.n	800a <_svfprintf_r+0x54a>
    8104:	f899 3000 	ldrb.w	r3, [r9]
    8108:	f048 0880 	orr.w	r8, r8, #128	; 0x80
    810c:	e534      	b.n	7b78 <_svfprintf_r+0xb8>
    810e:	bf00      	nop
    8110:	20018c28 	.word	0x20018c28
    8114:	20018c2c 	.word	0x20018c2c
    8118:	20018c38 	.word	0x20018c38
    811c:	4649      	mov	r1, r9
    811e:	f811 3b01 	ldrb.w	r3, [r1], #1
    8122:	2b2a      	cmp	r3, #42	; 0x2a
    8124:	f001 8249 	beq.w	95ba <_svfprintf_r+0x1afa>
    8128:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    812c:	2a09      	cmp	r2, #9
    812e:	4689      	mov	r9, r1
    8130:	bf98      	it	ls
    8132:	2100      	movls	r1, #0
    8134:	f201 8144 	bhi.w	93c0 <_svfprintf_r+0x1900>
    8138:	f819 3b01 	ldrb.w	r3, [r9], #1
    813c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    8140:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    8144:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    8148:	2a09      	cmp	r2, #9
    814a:	d9f5      	bls.n	8138 <_svfprintf_r+0x678>
    814c:	9103      	str	r1, [sp, #12]
    814e:	e515      	b.n	7b7c <_svfprintf_r+0xbc>
    8150:	f899 3000 	ldrb.w	r3, [r9]
    8154:	f048 0801 	orr.w	r8, r8, #1
    8158:	e50e      	b.n	7b78 <_svfprintf_r+0xb8>
    815a:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    815e:	2b00      	cmp	r3, #0
    8160:	f47f ad8f 	bne.w	7c82 <_svfprintf_r+0x1c2>
    8164:	f899 3000 	ldrb.w	r3, [r9]
    8168:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
    816c:	e504      	b.n	7b78 <_svfprintf_r+0xb8>
    816e:	f8cd 8008 	str.w	r8, [sp, #8]
    8172:	2b01      	cmp	r3, #1
    8174:	f000 819d 	beq.w	84b2 <_svfprintf_r+0x9f2>
    8178:	2b02      	cmp	r3, #2
    817a:	ac50      	add	r4, sp, #320	; 0x140
    817c:	d120      	bne.n	81c0 <_svfprintf_r+0x700>
    817e:	9811      	ldr	r0, [sp, #68]	; 0x44
    8180:	f002 030f 	and.w	r3, r2, #15
    8184:	0912      	lsrs	r2, r2, #4
    8186:	5cc3      	ldrb	r3, [r0, r3]
    8188:	f804 3d01 	strb.w	r3, [r4, #-1]!
    818c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    8190:	0909      	lsrs	r1, r1, #4
    8192:	ea52 0301 	orrs.w	r3, r2, r1
    8196:	d1f3      	bne.n	8180 <_svfprintf_r+0x6c0>
    8198:	ab50      	add	r3, sp, #320	; 0x140
    819a:	1b1b      	subs	r3, r3, r4
    819c:	f8dd 8008 	ldr.w	r8, [sp, #8]
    81a0:	9305      	str	r3, [sp, #20]
    81a2:	9a05      	ldr	r2, [sp, #20]
    81a4:	9803      	ldr	r0, [sp, #12]
    81a6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    81aa:	4282      	cmp	r2, r0
    81ac:	f04f 0300 	mov.w	r3, #0
    81b0:	bfb8      	it	lt
    81b2:	4602      	movlt	r2, r0
    81b4:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    81b8:	9307      	str	r3, [sp, #28]
    81ba:	9202      	str	r2, [sp, #8]
    81bc:	930f      	str	r3, [sp, #60]	; 0x3c
    81be:	e660      	b.n	7e82 <_svfprintf_r+0x3c2>
    81c0:	f002 0307 	and.w	r3, r2, #7
    81c4:	08d2      	lsrs	r2, r2, #3
    81c6:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    81ca:	08c9      	lsrs	r1, r1, #3
    81cc:	3330      	adds	r3, #48	; 0x30
    81ce:	ea52 0501 	orrs.w	r5, r2, r1
    81d2:	4620      	mov	r0, r4
    81d4:	f804 3d01 	strb.w	r3, [r4, #-1]!
    81d8:	d1f2      	bne.n	81c0 <_svfprintf_r+0x700>
    81da:	9a02      	ldr	r2, [sp, #8]
    81dc:	07d1      	lsls	r1, r2, #31
    81de:	f100 824d 	bmi.w	867c <_svfprintf_r+0xbbc>
    81e2:	ab50      	add	r3, sp, #320	; 0x140
    81e4:	1b1b      	subs	r3, r3, r4
    81e6:	4690      	mov	r8, r2
    81e8:	9305      	str	r3, [sp, #20]
    81ea:	e7da      	b.n	81a2 <_svfprintf_r+0x6e2>
    81ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    81ee:	2b65      	cmp	r3, #101	; 0x65
    81f0:	f340 80d4 	ble.w	839c <_svfprintf_r+0x8dc>
    81f4:	eeb5 8b40 	vcmp.f64	d8, #0.0
    81f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    81fc:	f040 81c1 	bne.w	8582 <_svfprintf_r+0xac2>
    8200:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8202:	49ba      	ldr	r1, [pc, #744]	; (84ec <_svfprintf_r+0xa2c>)
    8204:	f8ca 1000 	str.w	r1, [sl]
    8208:	3301      	adds	r3, #1
    820a:	3201      	adds	r2, #1
    820c:	2101      	movs	r1, #1
    820e:	2b07      	cmp	r3, #7
    8210:	9226      	str	r2, [sp, #152]	; 0x98
    8212:	9325      	str	r3, [sp, #148]	; 0x94
    8214:	f8ca 1004 	str.w	r1, [sl, #4]
    8218:	f300 8551 	bgt.w	8cbe <_svfprintf_r+0x11fe>
    821c:	f10a 0a08 	add.w	sl, sl, #8
    8220:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    8222:	990e      	ldr	r1, [sp, #56]	; 0x38
    8224:	428b      	cmp	r3, r1
    8226:	f280 82d0 	bge.w	87ca <_svfprintf_r+0xd0a>
    822a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    822c:	9912      	ldr	r1, [sp, #72]	; 0x48
    822e:	441a      	add	r2, r3
    8230:	e9ca 1300 	strd	r1, r3, [sl]
    8234:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8236:	9226      	str	r2, [sp, #152]	; 0x98
    8238:	3301      	adds	r3, #1
    823a:	2b07      	cmp	r3, #7
    823c:	9325      	str	r3, [sp, #148]	; 0x94
    823e:	f300 8397 	bgt.w	8970 <_svfprintf_r+0xeb0>
    8242:	f10a 0a08 	add.w	sl, sl, #8
    8246:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8248:	1e5c      	subs	r4, r3, #1
    824a:	2c00      	cmp	r4, #0
    824c:	f77f add0 	ble.w	7df0 <_svfprintf_r+0x330>
    8250:	2c10      	cmp	r4, #16
    8252:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8254:	f340 856e 	ble.w	8d34 <_svfprintf_r+0x1274>
    8258:	ee1b 6a10 	vmov	r6, s22
    825c:	2510      	movs	r5, #16
    825e:	e005      	b.n	826c <_svfprintf_r+0x7ac>
    8260:	f10a 0a08 	add.w	sl, sl, #8
    8264:	3c10      	subs	r4, #16
    8266:	2c10      	cmp	r4, #16
    8268:	f340 8564 	ble.w	8d34 <_svfprintf_r+0x1274>
    826c:	3301      	adds	r3, #1
    826e:	49a0      	ldr	r1, [pc, #640]	; (84f0 <_svfprintf_r+0xa30>)
    8270:	3210      	adds	r2, #16
    8272:	2b07      	cmp	r3, #7
    8274:	e9ca 1500 	strd	r1, r5, [sl]
    8278:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    827c:	ddf0      	ble.n	8260 <_svfprintf_r+0x7a0>
    827e:	aa24      	add	r2, sp, #144	; 0x90
    8280:	4631      	mov	r1, r6
    8282:	4658      	mov	r0, fp
    8284:	f002 ff76 	bl	b174 <__ssprint_r>
    8288:	2800      	cmp	r0, #0
    828a:	d17e      	bne.n	838a <_svfprintf_r+0x8ca>
    828c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    8290:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8294:	e7e6      	b.n	8264 <_svfprintf_r+0x7a4>
    8296:	9b06      	ldr	r3, [sp, #24]
    8298:	9902      	ldr	r1, [sp, #8]
    829a:	1a5d      	subs	r5, r3, r1
    829c:	2d00      	cmp	r5, #0
    829e:	f77f ad8e 	ble.w	7dbe <_svfprintf_r+0x2fe>
    82a2:	2d10      	cmp	r5, #16
    82a4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    82a6:	dd21      	ble.n	82ec <_svfprintf_r+0x82c>
    82a8:	9409      	str	r4, [sp, #36]	; 0x24
    82aa:	2610      	movs	r6, #16
    82ac:	ee1b 4a10 	vmov	r4, s22
    82b0:	e004      	b.n	82bc <_svfprintf_r+0x7fc>
    82b2:	3d10      	subs	r5, #16
    82b4:	2d10      	cmp	r5, #16
    82b6:	f10a 0a08 	add.w	sl, sl, #8
    82ba:	dd16      	ble.n	82ea <_svfprintf_r+0x82a>
    82bc:	3301      	adds	r3, #1
    82be:	498c      	ldr	r1, [pc, #560]	; (84f0 <_svfprintf_r+0xa30>)
    82c0:	3210      	adds	r2, #16
    82c2:	2b07      	cmp	r3, #7
    82c4:	e9ca 1600 	strd	r1, r6, [sl]
    82c8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    82cc:	ddf1      	ble.n	82b2 <_svfprintf_r+0x7f2>
    82ce:	aa24      	add	r2, sp, #144	; 0x90
    82d0:	4621      	mov	r1, r4
    82d2:	4658      	mov	r0, fp
    82d4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    82d8:	f002 ff4c 	bl	b174 <__ssprint_r>
    82dc:	2800      	cmp	r0, #0
    82de:	d154      	bne.n	838a <_svfprintf_r+0x8ca>
    82e0:	3d10      	subs	r5, #16
    82e2:	2d10      	cmp	r5, #16
    82e4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    82e8:	dce8      	bgt.n	82bc <_svfprintf_r+0x7fc>
    82ea:	9c09      	ldr	r4, [sp, #36]	; 0x24
    82ec:	4980      	ldr	r1, [pc, #512]	; (84f0 <_svfprintf_r+0xa30>)
    82ee:	f8ca 5004 	str.w	r5, [sl, #4]
    82f2:	3301      	adds	r3, #1
    82f4:	442a      	add	r2, r5
    82f6:	2b07      	cmp	r3, #7
    82f8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    82fc:	f8ca 1000 	str.w	r1, [sl]
    8300:	f300 8526 	bgt.w	8d50 <_svfprintf_r+0x1290>
    8304:	9b03      	ldr	r3, [sp, #12]
    8306:	9905      	ldr	r1, [sp, #20]
    8308:	1a5d      	subs	r5, r3, r1
    830a:	2d00      	cmp	r5, #0
    830c:	f10a 0a08 	add.w	sl, sl, #8
    8310:	f77f ad5b 	ble.w	7dca <_svfprintf_r+0x30a>
    8314:	2d10      	cmp	r5, #16
    8316:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8318:	dd1f      	ble.n	835a <_svfprintf_r+0x89a>
    831a:	4651      	mov	r1, sl
    831c:	2610      	movs	r6, #16
    831e:	ee1b aa10 	vmov	sl, s22
    8322:	e004      	b.n	832e <_svfprintf_r+0x86e>
    8324:	3d10      	subs	r5, #16
    8326:	2d10      	cmp	r5, #16
    8328:	f101 0108 	add.w	r1, r1, #8
    832c:	dd14      	ble.n	8358 <_svfprintf_r+0x898>
    832e:	3301      	adds	r3, #1
    8330:	486f      	ldr	r0, [pc, #444]	; (84f0 <_svfprintf_r+0xa30>)
    8332:	3210      	adds	r2, #16
    8334:	2b07      	cmp	r3, #7
    8336:	e9c1 0600 	strd	r0, r6, [r1]
    833a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    833e:	ddf1      	ble.n	8324 <_svfprintf_r+0x864>
    8340:	aa24      	add	r2, sp, #144	; 0x90
    8342:	4651      	mov	r1, sl
    8344:	4658      	mov	r0, fp
    8346:	f002 ff15 	bl	b174 <__ssprint_r>
    834a:	b9f0      	cbnz	r0, 838a <_svfprintf_r+0x8ca>
    834c:	3d10      	subs	r5, #16
    834e:	2d10      	cmp	r5, #16
    8350:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    8354:	a927      	add	r1, sp, #156	; 0x9c
    8356:	dcea      	bgt.n	832e <_svfprintf_r+0x86e>
    8358:	468a      	mov	sl, r1
    835a:	3301      	adds	r3, #1
    835c:	4964      	ldr	r1, [pc, #400]	; (84f0 <_svfprintf_r+0xa30>)
    835e:	f8ca 5004 	str.w	r5, [sl, #4]
    8362:	442a      	add	r2, r5
    8364:	2b07      	cmp	r3, #7
    8366:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    836a:	f8ca 1000 	str.w	r1, [sl]
    836e:	f300 81da 	bgt.w	8726 <_svfprintf_r+0xc66>
    8372:	f10a 0a08 	add.w	sl, sl, #8
    8376:	e528      	b.n	7dca <_svfprintf_r+0x30a>
    8378:	ee1b 1a10 	vmov	r1, s22
    837c:	aa24      	add	r2, sp, #144	; 0x90
    837e:	4658      	mov	r0, fp
    8380:	f002 fef8 	bl	b174 <__ssprint_r>
    8384:	2800      	cmp	r0, #0
    8386:	f43f ad47 	beq.w	7e18 <_svfprintf_r+0x358>
    838a:	9b07      	ldr	r3, [sp, #28]
    838c:	2b00      	cmp	r3, #0
    838e:	f43f aca2 	beq.w	7cd6 <_svfprintf_r+0x216>
    8392:	9907      	ldr	r1, [sp, #28]
    8394:	4658      	mov	r0, fp
    8396:	f7ff fa75 	bl	7884 <_free_r>
    839a:	e49c      	b.n	7cd6 <_svfprintf_r+0x216>
    839c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    839e:	2b01      	cmp	r3, #1
    83a0:	f340 817a 	ble.w	8698 <_svfprintf_r+0xbd8>
    83a4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    83a6:	f8ca 4000 	str.w	r4, [sl]
    83aa:	3301      	adds	r3, #1
    83ac:	3201      	adds	r2, #1
    83ae:	2101      	movs	r1, #1
    83b0:	2b07      	cmp	r3, #7
    83b2:	9226      	str	r2, [sp, #152]	; 0x98
    83b4:	9325      	str	r3, [sp, #148]	; 0x94
    83b6:	f8ca 1004 	str.w	r1, [sl, #4]
    83ba:	f300 81f8 	bgt.w	87ae <_svfprintf_r+0xcee>
    83be:	f10a 0a08 	add.w	sl, sl, #8
    83c2:	9910      	ldr	r1, [sp, #64]	; 0x40
    83c4:	9812      	ldr	r0, [sp, #72]	; 0x48
    83c6:	3301      	adds	r3, #1
    83c8:	440a      	add	r2, r1
    83ca:	2b07      	cmp	r3, #7
    83cc:	e9ca 0100 	strd	r0, r1, [sl]
    83d0:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    83d4:	f300 81dd 	bgt.w	8792 <_svfprintf_r+0xcd2>
    83d8:	f10a 0a08 	add.w	sl, sl, #8
    83dc:	eeb5 8b40 	vcmp.f64	d8, #0.0
    83e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    83e4:	f000 8177 	beq.w	86d6 <_svfprintf_r+0xc16>
    83e8:	990e      	ldr	r1, [sp, #56]	; 0x38
    83ea:	3301      	adds	r3, #1
    83ec:	3901      	subs	r1, #1
    83ee:	3401      	adds	r4, #1
    83f0:	440a      	add	r2, r1
    83f2:	2b07      	cmp	r3, #7
    83f4:	f8ca 4000 	str.w	r4, [sl]
    83f8:	9325      	str	r3, [sp, #148]	; 0x94
    83fa:	f8ca 1004 	str.w	r1, [sl, #4]
    83fe:	9226      	str	r2, [sp, #152]	; 0x98
    8400:	f300 815b 	bgt.w	86ba <_svfprintf_r+0xbfa>
    8404:	f10a 0a08 	add.w	sl, sl, #8
    8408:	9914      	ldr	r1, [sp, #80]	; 0x50
    840a:	f8ca 1004 	str.w	r1, [sl, #4]
    840e:	3301      	adds	r3, #1
    8410:	440a      	add	r2, r1
    8412:	2b07      	cmp	r3, #7
    8414:	a91e      	add	r1, sp, #120	; 0x78
    8416:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    841a:	f8ca 1000 	str.w	r1, [sl]
    841e:	f77f ace5 	ble.w	7dec <_svfprintf_r+0x32c>
    8422:	ee1b 1a10 	vmov	r1, s22
    8426:	aa24      	add	r2, sp, #144	; 0x90
    8428:	4658      	mov	r0, fp
    842a:	f002 fea3 	bl	b174 <__ssprint_r>
    842e:	2800      	cmp	r0, #0
    8430:	d1ab      	bne.n	838a <_svfprintf_r+0x8ca>
    8432:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8434:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8438:	e4da      	b.n	7df0 <_svfprintf_r+0x330>
    843a:	2d10      	cmp	r5, #16
    843c:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
    8440:	4e2c      	ldr	r6, [pc, #176]	; (84f4 <_svfprintf_r+0xa34>)
    8442:	dd24      	ble.n	848e <_svfprintf_r+0x9ce>
    8444:	9417      	str	r4, [sp, #92]	; 0x5c
    8446:	2310      	movs	r3, #16
    8448:	ee1b 4a10 	vmov	r4, s22
    844c:	4608      	mov	r0, r1
    844e:	e004      	b.n	845a <_svfprintf_r+0x99a>
    8450:	3d10      	subs	r5, #16
    8452:	2d10      	cmp	r5, #16
    8454:	f10a 0a08 	add.w	sl, sl, #8
    8458:	dd17      	ble.n	848a <_svfprintf_r+0x9ca>
    845a:	3001      	adds	r0, #1
    845c:	3210      	adds	r2, #16
    845e:	2807      	cmp	r0, #7
    8460:	e9ca 6300 	strd	r6, r3, [sl]
    8464:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    8468:	ddf2      	ble.n	8450 <_svfprintf_r+0x990>
    846a:	aa24      	add	r2, sp, #144	; 0x90
    846c:	4621      	mov	r1, r4
    846e:	4658      	mov	r0, fp
    8470:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8474:	f002 fe7e 	bl	b174 <__ssprint_r>
    8478:	2800      	cmp	r0, #0
    847a:	d186      	bne.n	838a <_svfprintf_r+0x8ca>
    847c:	3d10      	subs	r5, #16
    847e:	2d10      	cmp	r5, #16
    8480:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    8484:	f04f 0310 	mov.w	r3, #16
    8488:	dce7      	bgt.n	845a <_svfprintf_r+0x99a>
    848a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    848c:	4601      	mov	r1, r0
    848e:	3101      	adds	r1, #1
    8490:	442a      	add	r2, r5
    8492:	2907      	cmp	r1, #7
    8494:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
    8498:	f8ca 6000 	str.w	r6, [sl]
    849c:	f8ca 5004 	str.w	r5, [sl, #4]
    84a0:	f300 83bd 	bgt.w	8c1e <_svfprintf_r+0x115e>
    84a4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    84a8:	f10a 0a08 	add.w	sl, sl, #8
    84ac:	e45d      	b.n	7d6a <_svfprintf_r+0x2aa>
    84ae:	f8cd 8008 	str.w	r8, [sp, #8]
    84b2:	2a0a      	cmp	r2, #10
    84b4:	f171 0300 	sbcs.w	r3, r1, #0
    84b8:	f080 8345 	bcs.w	8b46 <_svfprintf_r+0x1086>
    84bc:	3230      	adds	r2, #48	; 0x30
    84be:	2301      	movs	r3, #1
    84c0:	f8dd 8008 	ldr.w	r8, [sp, #8]
    84c4:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    84c8:	9305      	str	r3, [sp, #20]
    84ca:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    84ce:	e668      	b.n	81a2 <_svfprintf_r+0x6e2>
    84d0:	ee1b 1a10 	vmov	r1, s22
    84d4:	aa24      	add	r2, sp, #144	; 0x90
    84d6:	4658      	mov	r0, fp
    84d8:	f002 fe4c 	bl	b174 <__ssprint_r>
    84dc:	2800      	cmp	r0, #0
    84de:	f47f af54 	bne.w	838a <_svfprintf_r+0x8ca>
    84e2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    84e4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    84e8:	e452      	b.n	7d90 <_svfprintf_r+0x2d0>
    84ea:	bf00      	nop
    84ec:	20018c68 	.word	0x20018c68
    84f0:	200190a0 	.word	0x200190a0
    84f4:	20018c6c 	.word	0x20018c6c
    84f8:	ee1b 1a10 	vmov	r1, s22
    84fc:	aa24      	add	r2, sp, #144	; 0x90
    84fe:	4658      	mov	r0, fp
    8500:	f002 fe38 	bl	b174 <__ssprint_r>
    8504:	2800      	cmp	r0, #0
    8506:	f47f af40 	bne.w	838a <_svfprintf_r+0x8ca>
    850a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    850c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8510:	e451      	b.n	7db6 <_svfprintf_r+0x2f6>
    8512:	2c10      	cmp	r4, #16
    8514:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8516:	4ebe      	ldr	r6, [pc, #760]	; (8810 <_svfprintf_r+0xd50>)
    8518:	dd1f      	ble.n	855a <_svfprintf_r+0xa9a>
    851a:	ee1b 8a10 	vmov	r8, s22
    851e:	2510      	movs	r5, #16
    8520:	e004      	b.n	852c <_svfprintf_r+0xa6c>
    8522:	3c10      	subs	r4, #16
    8524:	2c10      	cmp	r4, #16
    8526:	f10a 0a08 	add.w	sl, sl, #8
    852a:	dd16      	ble.n	855a <_svfprintf_r+0xa9a>
    852c:	3301      	adds	r3, #1
    852e:	3210      	adds	r2, #16
    8530:	2b07      	cmp	r3, #7
    8532:	e9ca 6500 	strd	r6, r5, [sl]
    8536:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    853a:	ddf2      	ble.n	8522 <_svfprintf_r+0xa62>
    853c:	aa24      	add	r2, sp, #144	; 0x90
    853e:	4641      	mov	r1, r8
    8540:	4658      	mov	r0, fp
    8542:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8546:	f002 fe15 	bl	b174 <__ssprint_r>
    854a:	2800      	cmp	r0, #0
    854c:	f47f af1d 	bne.w	838a <_svfprintf_r+0x8ca>
    8550:	3c10      	subs	r4, #16
    8552:	2c10      	cmp	r4, #16
    8554:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    8558:	dce8      	bgt.n	852c <_svfprintf_r+0xa6c>
    855a:	3301      	adds	r3, #1
    855c:	4422      	add	r2, r4
    855e:	2b07      	cmp	r3, #7
    8560:	e9ca 6400 	strd	r6, r4, [sl]
    8564:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8568:	f77f ac4b 	ble.w	7e02 <_svfprintf_r+0x342>
    856c:	ee1b 1a10 	vmov	r1, s22
    8570:	aa24      	add	r2, sp, #144	; 0x90
    8572:	4658      	mov	r0, fp
    8574:	f002 fdfe 	bl	b174 <__ssprint_r>
    8578:	2800      	cmp	r0, #0
    857a:	f47f af06 	bne.w	838a <_svfprintf_r+0x8ca>
    857e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8580:	e43f      	b.n	7e02 <_svfprintf_r+0x342>
    8582:	991b      	ldr	r1, [sp, #108]	; 0x6c
    8584:	2900      	cmp	r1, #0
    8586:	f340 835a 	ble.w	8c3e <_svfprintf_r+0x117e>
    858a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    858c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    858e:	429e      	cmp	r6, r3
    8590:	bfa8      	it	ge
    8592:	461e      	movge	r6, r3
    8594:	2e00      	cmp	r6, #0
    8596:	dd0b      	ble.n	85b0 <_svfprintf_r+0xaf0>
    8598:	9b25      	ldr	r3, [sp, #148]	; 0x94
    859a:	3301      	adds	r3, #1
    859c:	4432      	add	r2, r6
    859e:	2b07      	cmp	r3, #7
    85a0:	e9ca 4600 	strd	r4, r6, [sl]
    85a4:	9226      	str	r2, [sp, #152]	; 0x98
    85a6:	9325      	str	r3, [sp, #148]	; 0x94
    85a8:	f300 8689 	bgt.w	92be <_svfprintf_r+0x17fe>
    85ac:	f10a 0a08 	add.w	sl, sl, #8
    85b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    85b2:	2e00      	cmp	r6, #0
    85b4:	bfa8      	it	ge
    85b6:	1bad      	subge	r5, r5, r6
    85b8:	2d00      	cmp	r5, #0
    85ba:	f300 8203 	bgt.w	89c4 <_svfprintf_r+0xf04>
    85be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    85c0:	f418 6f80 	tst.w	r8, #1024	; 0x400
    85c4:	4423      	add	r3, r4
    85c6:	9305      	str	r3, [sp, #20]
    85c8:	f040 821f 	bne.w	8a0a <_svfprintf_r+0xf4a>
    85cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    85ce:	990e      	ldr	r1, [sp, #56]	; 0x38
    85d0:	428b      	cmp	r3, r1
    85d2:	db03      	blt.n	85dc <_svfprintf_r+0xb1c>
    85d4:	f018 0f01 	tst.w	r8, #1
    85d8:	f000 84cf 	beq.w	8f7a <_svfprintf_r+0x14ba>
    85dc:	9910      	ldr	r1, [sp, #64]	; 0x40
    85de:	9812      	ldr	r0, [sp, #72]	; 0x48
    85e0:	440a      	add	r2, r1
    85e2:	e9ca 0100 	strd	r0, r1, [sl]
    85e6:	9925      	ldr	r1, [sp, #148]	; 0x94
    85e8:	9226      	str	r2, [sp, #152]	; 0x98
    85ea:	3101      	adds	r1, #1
    85ec:	2907      	cmp	r1, #7
    85ee:	9125      	str	r1, [sp, #148]	; 0x94
    85f0:	f300 86a5 	bgt.w	933e <_svfprintf_r+0x187e>
    85f4:	f10a 0a08 	add.w	sl, sl, #8
    85f8:	990e      	ldr	r1, [sp, #56]	; 0x38
    85fa:	1865      	adds	r5, r4, r1
    85fc:	1acc      	subs	r4, r1, r3
    85fe:	9b05      	ldr	r3, [sp, #20]
    8600:	1aed      	subs	r5, r5, r3
    8602:	42a5      	cmp	r5, r4
    8604:	bfa8      	it	ge
    8606:	4625      	movge	r5, r4
    8608:	2d00      	cmp	r5, #0
    860a:	dd0d      	ble.n	8628 <_svfprintf_r+0xb68>
    860c:	f8ca 3000 	str.w	r3, [sl]
    8610:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8612:	f8ca 5004 	str.w	r5, [sl, #4]
    8616:	3301      	adds	r3, #1
    8618:	442a      	add	r2, r5
    861a:	2b07      	cmp	r3, #7
    861c:	9226      	str	r2, [sp, #152]	; 0x98
    861e:	9325      	str	r3, [sp, #148]	; 0x94
    8620:	f300 86bb 	bgt.w	939a <_svfprintf_r+0x18da>
    8624:	f10a 0a08 	add.w	sl, sl, #8
    8628:	2d00      	cmp	r5, #0
    862a:	bfa8      	it	ge
    862c:	1b64      	subge	r4, r4, r5
    862e:	2c00      	cmp	r4, #0
    8630:	f77f abde 	ble.w	7df0 <_svfprintf_r+0x330>
    8634:	2c10      	cmp	r4, #16
    8636:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8638:	f340 837c 	ble.w	8d34 <_svfprintf_r+0x1274>
    863c:	ee1b 6a10 	vmov	r6, s22
    8640:	2510      	movs	r5, #16
    8642:	e005      	b.n	8650 <_svfprintf_r+0xb90>
    8644:	f10a 0a08 	add.w	sl, sl, #8
    8648:	3c10      	subs	r4, #16
    864a:	2c10      	cmp	r4, #16
    864c:	f340 8372 	ble.w	8d34 <_svfprintf_r+0x1274>
    8650:	3301      	adds	r3, #1
    8652:	4970      	ldr	r1, [pc, #448]	; (8814 <_svfprintf_r+0xd54>)
    8654:	3210      	adds	r2, #16
    8656:	2b07      	cmp	r3, #7
    8658:	e9ca 1500 	strd	r1, r5, [sl]
    865c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8660:	ddf0      	ble.n	8644 <_svfprintf_r+0xb84>
    8662:	aa24      	add	r2, sp, #144	; 0x90
    8664:	4631      	mov	r1, r6
    8666:	4658      	mov	r0, fp
    8668:	f002 fd84 	bl	b174 <__ssprint_r>
    866c:	2800      	cmp	r0, #0
    866e:	f47f ae8c 	bne.w	838a <_svfprintf_r+0x8ca>
    8672:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    8676:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    867a:	e7e5      	b.n	8648 <_svfprintf_r+0xb88>
    867c:	2b30      	cmp	r3, #48	; 0x30
    867e:	f43f ad8b 	beq.w	8198 <_svfprintf_r+0x6d8>
    8682:	2330      	movs	r3, #48	; 0x30
    8684:	3802      	subs	r0, #2
    8686:	f804 3c01 	strb.w	r3, [r4, #-1]
    868a:	ab50      	add	r3, sp, #320	; 0x140
    868c:	1a1b      	subs	r3, r3, r0
    868e:	f8dd 8008 	ldr.w	r8, [sp, #8]
    8692:	9305      	str	r3, [sp, #20]
    8694:	4604      	mov	r4, r0
    8696:	e584      	b.n	81a2 <_svfprintf_r+0x6e2>
    8698:	f018 0f01 	tst.w	r8, #1
    869c:	f47f ae82 	bne.w	83a4 <_svfprintf_r+0x8e4>
    86a0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    86a2:	f8ca 4000 	str.w	r4, [sl]
    86a6:	3301      	adds	r3, #1
    86a8:	3201      	adds	r2, #1
    86aa:	2101      	movs	r1, #1
    86ac:	2b07      	cmp	r3, #7
    86ae:	9226      	str	r2, [sp, #152]	; 0x98
    86b0:	9325      	str	r3, [sp, #148]	; 0x94
    86b2:	f8ca 1004 	str.w	r1, [sl, #4]
    86b6:	f77f aea5 	ble.w	8404 <_svfprintf_r+0x944>
    86ba:	ee1b 1a10 	vmov	r1, s22
    86be:	aa24      	add	r2, sp, #144	; 0x90
    86c0:	4658      	mov	r0, fp
    86c2:	f002 fd57 	bl	b174 <__ssprint_r>
    86c6:	2800      	cmp	r0, #0
    86c8:	f47f ae5f 	bne.w	838a <_svfprintf_r+0x8ca>
    86cc:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    86d0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    86d4:	e698      	b.n	8408 <_svfprintf_r+0x948>
    86d6:	990e      	ldr	r1, [sp, #56]	; 0x38
    86d8:	1e4c      	subs	r4, r1, #1
    86da:	2c00      	cmp	r4, #0
    86dc:	f77f ae94 	ble.w	8408 <_svfprintf_r+0x948>
    86e0:	2c10      	cmp	r4, #16
    86e2:	f340 8361 	ble.w	8da8 <_svfprintf_r+0x12e8>
    86e6:	ee1b 6a10 	vmov	r6, s22
    86ea:	2510      	movs	r5, #16
    86ec:	e005      	b.n	86fa <_svfprintf_r+0xc3a>
    86ee:	f10a 0a08 	add.w	sl, sl, #8
    86f2:	3c10      	subs	r4, #16
    86f4:	2c10      	cmp	r4, #16
    86f6:	f340 8357 	ble.w	8da8 <_svfprintf_r+0x12e8>
    86fa:	3301      	adds	r3, #1
    86fc:	4945      	ldr	r1, [pc, #276]	; (8814 <_svfprintf_r+0xd54>)
    86fe:	3210      	adds	r2, #16
    8700:	2b07      	cmp	r3, #7
    8702:	e9ca 1500 	strd	r1, r5, [sl]
    8706:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    870a:	ddf0      	ble.n	86ee <_svfprintf_r+0xc2e>
    870c:	aa24      	add	r2, sp, #144	; 0x90
    870e:	4631      	mov	r1, r6
    8710:	4658      	mov	r0, fp
    8712:	f002 fd2f 	bl	b174 <__ssprint_r>
    8716:	2800      	cmp	r0, #0
    8718:	f47f ae37 	bne.w	838a <_svfprintf_r+0x8ca>
    871c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    8720:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8724:	e7e5      	b.n	86f2 <_svfprintf_r+0xc32>
    8726:	ee1b 1a10 	vmov	r1, s22
    872a:	aa24      	add	r2, sp, #144	; 0x90
    872c:	4658      	mov	r0, fp
    872e:	f002 fd21 	bl	b174 <__ssprint_r>
    8732:	2800      	cmp	r0, #0
    8734:	f47f ae29 	bne.w	838a <_svfprintf_r+0x8ca>
    8738:	9a26      	ldr	r2, [sp, #152]	; 0x98
    873a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    873e:	f7ff bb44 	b.w	7dca <_svfprintf_r+0x30a>
    8742:	9b02      	ldr	r3, [sp, #8]
    8744:	f013 0310 	ands.w	r3, r3, #16
    8748:	f040 80c1 	bne.w	88ce <_svfprintf_r+0xe0e>
    874c:	9a02      	ldr	r2, [sp, #8]
    874e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    8752:	f000 837a 	beq.w	8e4a <_svfprintf_r+0x138a>
    8756:	9808      	ldr	r0, [sp, #32]
    8758:	f850 2b04 	ldr.w	r2, [r0], #4
    875c:	9008      	str	r0, [sp, #32]
    875e:	4619      	mov	r1, r3
    8760:	b292      	uxth	r2, r2
    8762:	2301      	movs	r3, #1
    8764:	e451      	b.n	800a <_svfprintf_r+0x54a>
    8766:	f018 0310 	ands.w	r3, r8, #16
    876a:	d155      	bne.n	8818 <_svfprintf_r+0xd58>
    876c:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    8770:	f000 835d 	beq.w	8e2e <_svfprintf_r+0x136e>
    8774:	9808      	ldr	r0, [sp, #32]
    8776:	f850 2b04 	ldr.w	r2, [r0], #4
    877a:	9008      	str	r0, [sp, #32]
    877c:	4619      	mov	r1, r3
    877e:	b292      	uxth	r2, r2
    8780:	e4a8      	b.n	80d4 <_svfprintf_r+0x614>
    8782:	4252      	negs	r2, r2
    8784:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8788:	f8cd 8008 	str.w	r8, [sp, #8]
    878c:	202d      	movs	r0, #45	; 0x2d
    878e:	2301      	movs	r3, #1
    8790:	e43c      	b.n	800c <_svfprintf_r+0x54c>
    8792:	ee1b 1a10 	vmov	r1, s22
    8796:	aa24      	add	r2, sp, #144	; 0x90
    8798:	4658      	mov	r0, fp
    879a:	f002 fceb 	bl	b174 <__ssprint_r>
    879e:	2800      	cmp	r0, #0
    87a0:	f47f adf3 	bne.w	838a <_svfprintf_r+0x8ca>
    87a4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    87a8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    87ac:	e616      	b.n	83dc <_svfprintf_r+0x91c>
    87ae:	ee1b 1a10 	vmov	r1, s22
    87b2:	aa24      	add	r2, sp, #144	; 0x90
    87b4:	4658      	mov	r0, fp
    87b6:	f002 fcdd 	bl	b174 <__ssprint_r>
    87ba:	2800      	cmp	r0, #0
    87bc:	f47f ade5 	bne.w	838a <_svfprintf_r+0x8ca>
    87c0:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    87c4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    87c8:	e5fb      	b.n	83c2 <_svfprintf_r+0x902>
    87ca:	f018 0f01 	tst.w	r8, #1
    87ce:	f43f ab0f 	beq.w	7df0 <_svfprintf_r+0x330>
    87d2:	e52a      	b.n	822a <_svfprintf_r+0x76a>
    87d4:	9308      	str	r3, [sp, #32]
    87d6:	f899 3000 	ldrb.w	r3, [r9]
    87da:	f7ff b9cd 	b.w	7b78 <_svfprintf_r+0xb8>
    87de:	ac50      	add	r4, sp, #320	; 0x140
    87e0:	e4df      	b.n	81a2 <_svfprintf_r+0x6e2>
    87e2:	f418 7f00 	tst.w	r8, #512	; 0x200
    87e6:	f040 83db 	bne.w	8fa0 <_svfprintf_r+0x14e0>
    87ea:	f853 2b04 	ldr.w	r2, [r3], #4
    87ee:	9308      	str	r3, [sp, #32]
    87f0:	17d1      	asrs	r1, r2, #31
    87f2:	460b      	mov	r3, r1
    87f4:	f7ff bbb6 	b.w	7f64 <_svfprintf_r+0x4a4>
    87f8:	9b08      	ldr	r3, [sp, #32]
    87fa:	9804      	ldr	r0, [sp, #16]
    87fc:	f853 1b04 	ldr.w	r1, [r3], #4
    8800:	9308      	str	r3, [sp, #32]
    8802:	17c2      	asrs	r2, r0, #31
    8804:	e9c1 0200 	strd	r0, r2, [r1]
    8808:	464c      	mov	r4, r9
    880a:	f7ff b98b 	b.w	7b24 <_svfprintf_r+0x64>
    880e:	bf00      	nop
    8810:	20018c6c 	.word	0x20018c6c
    8814:	200190a0 	.word	0x200190a0
    8818:	9b08      	ldr	r3, [sp, #32]
    881a:	f853 2b04 	ldr.w	r2, [r3], #4
    881e:	9308      	str	r3, [sp, #32]
    8820:	e458      	b.n	80d4 <_svfprintf_r+0x614>
    8822:	eeb4 8b48 	vcmp.f64	d8, d8
    8826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    882a:	f180 8694 	bvs.w	9556 <_svfprintf_r+0x1a96>
    882e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8830:	2b61      	cmp	r3, #97	; 0x61
    8832:	f000 8552 	beq.w	92da <_svfprintf_r+0x181a>
    8836:	2b41      	cmp	r3, #65	; 0x41
    8838:	f000 85c0 	beq.w	93bc <_svfprintf_r+0x18fc>
    883c:	9b03      	ldr	r3, [sp, #12]
    883e:	3301      	adds	r3, #1
    8840:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8842:	f023 0520 	bic.w	r5, r3, #32
    8846:	f000 8480 	beq.w	914a <_svfprintf_r+0x168a>
    884a:	2d47      	cmp	r5, #71	; 0x47
    884c:	d104      	bne.n	8858 <_svfprintf_r+0xd98>
    884e:	9b03      	ldr	r3, [sp, #12]
    8850:	2b00      	cmp	r3, #0
    8852:	bf08      	it	eq
    8854:	2301      	moveq	r3, #1
    8856:	9303      	str	r3, [sp, #12]
    8858:	ee18 3a90 	vmov	r3, s17
    885c:	2b00      	cmp	r3, #0
    885e:	f448 7280 	orr.w	r2, r8, #256	; 0x100
    8862:	4646      	mov	r6, r8
    8864:	f2c0 8618 	blt.w	9498 <_svfprintf_r+0x19d8>
    8868:	eeb0 ab48 	vmov.f64	d10, d8
    886c:	2300      	movs	r3, #0
    886e:	4690      	mov	r8, r2
    8870:	9309      	str	r3, [sp, #36]	; 0x24
    8872:	9307      	str	r3, [sp, #28]
    8874:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8876:	3b41      	subs	r3, #65	; 0x41
    8878:	2b25      	cmp	r3, #37	; 0x25
    887a:	f200 8398 	bhi.w	8fae <_svfprintf_r+0x14ee>
    887e:	e8df f013 	tbh	[pc, r3, lsl #1]
    8882:	046f      	.short	0x046f
    8884:	03960396 	.word	0x03960396
    8888:	04680396 	.word	0x04680396
    888c:	0396046c 	.word	0x0396046c
    8890:	03960396 	.word	0x03960396
    8894:	03960396 	.word	0x03960396
    8898:	03960396 	.word	0x03960396
    889c:	03960396 	.word	0x03960396
    88a0:	03960396 	.word	0x03960396
    88a4:	03960396 	.word	0x03960396
    88a8:	03960396 	.word	0x03960396
    88ac:	03960396 	.word	0x03960396
    88b0:	03960396 	.word	0x03960396
    88b4:	03960396 	.word	0x03960396
    88b8:	03960396 	.word	0x03960396
    88bc:	03960396 	.word	0x03960396
    88c0:	03960396 	.word	0x03960396
    88c4:	03960396 	.word	0x03960396
    88c8:	04680396 	.word	0x04680396
    88cc:	046c      	.short	0x046c
    88ce:	9b08      	ldr	r3, [sp, #32]
    88d0:	f853 2b04 	ldr.w	r2, [r3], #4
    88d4:	9308      	str	r3, [sp, #32]
    88d6:	2301      	movs	r3, #1
    88d8:	f7ff bb97 	b.w	800a <_svfprintf_r+0x54a>
    88dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    88de:	2b00      	cmp	r3, #0
    88e0:	f43f a9cf 	beq.w	7c82 <_svfprintf_r+0x1c2>
    88e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    88e6:	781b      	ldrb	r3, [r3, #0]
    88e8:	2b00      	cmp	r3, #0
    88ea:	f43f a9ca 	beq.w	7c82 <_svfprintf_r+0x1c2>
    88ee:	f899 3000 	ldrb.w	r3, [r9]
    88f2:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
    88f6:	f7ff b93f 	b.w	7b78 <_svfprintf_r+0xb8>
    88fa:	930b      	str	r3, [sp, #44]	; 0x2c
    88fc:	f8cd 8008 	str.w	r8, [sp, #8]
    8900:	f7ff bbf1 	b.w	80e6 <_svfprintf_r+0x626>
    8904:	930b      	str	r3, [sp, #44]	; 0x2c
    8906:	4b9a      	ldr	r3, [pc, #616]	; (8b70 <_svfprintf_r+0x10b0>)
    8908:	9311      	str	r3, [sp, #68]	; 0x44
    890a:	f018 0120 	ands.w	r1, r8, #32
    890e:	f000 8105 	beq.w	8b1c <_svfprintf_r+0x105c>
    8912:	9b08      	ldr	r3, [sp, #32]
    8914:	3307      	adds	r3, #7
    8916:	f023 0307 	bic.w	r3, r3, #7
    891a:	6859      	ldr	r1, [r3, #4]
    891c:	f853 2b08 	ldr.w	r2, [r3], #8
    8920:	9308      	str	r3, [sp, #32]
    8922:	f018 0f01 	tst.w	r8, #1
    8926:	d00a      	beq.n	893e <_svfprintf_r+0xe7e>
    8928:	ea52 0301 	orrs.w	r3, r2, r1
    892c:	d007      	beq.n	893e <_svfprintf_r+0xe7e>
    892e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8930:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    8934:	2330      	movs	r3, #48	; 0x30
    8936:	f048 0802 	orr.w	r8, r8, #2
    893a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    893e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    8942:	9302      	str	r3, [sp, #8]
    8944:	2302      	movs	r3, #2
    8946:	f7ff bb60 	b.w	800a <_svfprintf_r+0x54a>
    894a:	930b      	str	r3, [sp, #44]	; 0x2c
    894c:	f7ff bbb6 	b.w	80bc <_svfprintf_r+0x5fc>
    8950:	930b      	str	r3, [sp, #44]	; 0x2c
    8952:	4b88      	ldr	r3, [pc, #544]	; (8b74 <_svfprintf_r+0x10b4>)
    8954:	9311      	str	r3, [sp, #68]	; 0x44
    8956:	e7d8      	b.n	890a <_svfprintf_r+0xe4a>
    8958:	9b08      	ldr	r3, [sp, #32]
    895a:	2101      	movs	r1, #1
    895c:	f853 2b04 	ldr.w	r2, [r3], #4
    8960:	9102      	str	r1, [sp, #8]
    8962:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
    8966:	9308      	str	r3, [sp, #32]
    8968:	9105      	str	r1, [sp, #20]
    896a:	ac37      	add	r4, sp, #220	; 0xdc
    896c:	f7ff baaf 	b.w	7ece <_svfprintf_r+0x40e>
    8970:	ee1b 1a10 	vmov	r1, s22
    8974:	aa24      	add	r2, sp, #144	; 0x90
    8976:	4658      	mov	r0, fp
    8978:	f002 fbfc 	bl	b174 <__ssprint_r>
    897c:	2800      	cmp	r0, #0
    897e:	f47f ad04 	bne.w	838a <_svfprintf_r+0x8ca>
    8982:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8984:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8988:	e45d      	b.n	8246 <_svfprintf_r+0x786>
    898a:	9b03      	ldr	r3, [sp, #12]
    898c:	9407      	str	r4, [sp, #28]
    898e:	2b06      	cmp	r3, #6
    8990:	4622      	mov	r2, r4
    8992:	bf28      	it	cs
    8994:	2306      	movcs	r3, #6
    8996:	9403      	str	r4, [sp, #12]
    8998:	4621      	mov	r1, r4
    899a:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
    899e:	4c76      	ldr	r4, [pc, #472]	; (8b78 <_svfprintf_r+0x10b8>)
    89a0:	9302      	str	r3, [sp, #8]
    89a2:	9305      	str	r3, [sp, #20]
    89a4:	920f      	str	r2, [sp, #60]	; 0x3c
    89a6:	f7ff ba6c 	b.w	7e82 <_svfprintf_r+0x3c2>
    89aa:	2140      	movs	r1, #64	; 0x40
    89ac:	4658      	mov	r0, fp
    89ae:	f7fd ff0b 	bl	67c8 <_malloc_r>
    89b2:	6020      	str	r0, [r4, #0]
    89b4:	6120      	str	r0, [r4, #16]
    89b6:	2800      	cmp	r0, #0
    89b8:	f000 860f 	beq.w	95da <_svfprintf_r+0x1b1a>
    89bc:	2340      	movs	r3, #64	; 0x40
    89be:	6163      	str	r3, [r4, #20]
    89c0:	f7ff b89e 	b.w	7b00 <_svfprintf_r+0x40>
    89c4:	2d10      	cmp	r5, #16
    89c6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    89c8:	f340 825d 	ble.w	8e86 <_svfprintf_r+0x13c6>
    89cc:	4651      	mov	r1, sl
    89ce:	2610      	movs	r6, #16
    89d0:	ee1b aa10 	vmov	sl, s22
    89d4:	e004      	b.n	89e0 <_svfprintf_r+0xf20>
    89d6:	3108      	adds	r1, #8
    89d8:	3d10      	subs	r5, #16
    89da:	2d10      	cmp	r5, #16
    89dc:	f340 8252 	ble.w	8e84 <_svfprintf_r+0x13c4>
    89e0:	3301      	adds	r3, #1
    89e2:	4866      	ldr	r0, [pc, #408]	; (8b7c <_svfprintf_r+0x10bc>)
    89e4:	3210      	adds	r2, #16
    89e6:	2b07      	cmp	r3, #7
    89e8:	e9c1 0600 	strd	r0, r6, [r1]
    89ec:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    89f0:	ddf1      	ble.n	89d6 <_svfprintf_r+0xf16>
    89f2:	aa24      	add	r2, sp, #144	; 0x90
    89f4:	4651      	mov	r1, sl
    89f6:	4658      	mov	r0, fp
    89f8:	f002 fbbc 	bl	b174 <__ssprint_r>
    89fc:	2800      	cmp	r0, #0
    89fe:	f47f acc4 	bne.w	838a <_svfprintf_r+0x8ca>
    8a02:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    8a06:	a927      	add	r1, sp, #156	; 0x9c
    8a08:	e7e6      	b.n	89d8 <_svfprintf_r+0xf18>
    8a0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8a0c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    8a10:	18e3      	adds	r3, r4, r3
    8a12:	9303      	str	r3, [sp, #12]
    8a14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8a16:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    8a1a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    8a1c:	9d05      	ldr	r5, [sp, #20]
    8a1e:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    8a22:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    8a26:	940b      	str	r4, [sp, #44]	; 0x2c
    8a28:	ee1b 1a10 	vmov	r1, s22
    8a2c:	4650      	mov	r0, sl
    8a2e:	2b00      	cmp	r3, #0
    8a30:	d034      	beq.n	8a9c <_svfprintf_r+0xfdc>
    8a32:	f1b8 0f00 	cmp.w	r8, #0
    8a36:	d135      	bne.n	8aa4 <_svfprintf_r+0xfe4>
    8a38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8a3a:	3b01      	subs	r3, #1
    8a3c:	3e01      	subs	r6, #1
    8a3e:	930d      	str	r3, [sp, #52]	; 0x34
    8a40:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8a42:	e9c0 3900 	strd	r3, r9, [r0]
    8a46:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8a48:	3301      	adds	r3, #1
    8a4a:	444a      	add	r2, r9
    8a4c:	2b07      	cmp	r3, #7
    8a4e:	9226      	str	r2, [sp, #152]	; 0x98
    8a50:	9325      	str	r3, [sp, #148]	; 0x94
    8a52:	dc6c      	bgt.n	8b2e <_svfprintf_r+0x106e>
    8a54:	3008      	adds	r0, #8
    8a56:	9b03      	ldr	r3, [sp, #12]
    8a58:	f896 c000 	ldrb.w	ip, [r6]
    8a5c:	1b5b      	subs	r3, r3, r5
    8a5e:	4563      	cmp	r3, ip
    8a60:	bfa8      	it	ge
    8a62:	4663      	movge	r3, ip
    8a64:	2b00      	cmp	r3, #0
    8a66:	469a      	mov	sl, r3
    8a68:	dd0c      	ble.n	8a84 <_svfprintf_r+0xfc4>
    8a6a:	9c25      	ldr	r4, [sp, #148]	; 0x94
    8a6c:	3401      	adds	r4, #1
    8a6e:	441a      	add	r2, r3
    8a70:	2c07      	cmp	r4, #7
    8a72:	e9c0 5300 	strd	r5, r3, [r0]
    8a76:	9226      	str	r2, [sp, #152]	; 0x98
    8a78:	9425      	str	r4, [sp, #148]	; 0x94
    8a7a:	f300 8177 	bgt.w	8d6c <_svfprintf_r+0x12ac>
    8a7e:	f896 c000 	ldrb.w	ip, [r6]
    8a82:	3008      	adds	r0, #8
    8a84:	f1ba 0f00 	cmp.w	sl, #0
    8a88:	bfac      	ite	ge
    8a8a:	ebac 040a 	subge.w	r4, ip, sl
    8a8e:	4664      	movlt	r4, ip
    8a90:	2c00      	cmp	r4, #0
    8a92:	dc0a      	bgt.n	8aaa <_svfprintf_r+0xfea>
    8a94:	4465      	add	r5, ip
    8a96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8a98:	2b00      	cmp	r3, #0
    8a9a:	d1ca      	bne.n	8a32 <_svfprintf_r+0xf72>
    8a9c:	f1b8 0f00 	cmp.w	r8, #0
    8aa0:	f000 83ac 	beq.w	91fc <_svfprintf_r+0x173c>
    8aa4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    8aa8:	e7ca      	b.n	8a40 <_svfprintf_r+0xf80>
    8aaa:	2c10      	cmp	r4, #16
    8aac:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
    8ab0:	dd24      	ble.n	8afc <_svfprintf_r+0x103c>
    8ab2:	9505      	str	r5, [sp, #20]
    8ab4:	f04f 0a10 	mov.w	sl, #16
    8ab8:	4663      	mov	r3, ip
    8aba:	460d      	mov	r5, r1
    8abc:	e004      	b.n	8ac8 <_svfprintf_r+0x1008>
    8abe:	3c10      	subs	r4, #16
    8ac0:	2c10      	cmp	r4, #16
    8ac2:	f100 0008 	add.w	r0, r0, #8
    8ac6:	dd16      	ble.n	8af6 <_svfprintf_r+0x1036>
    8ac8:	3301      	adds	r3, #1
    8aca:	492c      	ldr	r1, [pc, #176]	; (8b7c <_svfprintf_r+0x10bc>)
    8acc:	3210      	adds	r2, #16
    8ace:	2b07      	cmp	r3, #7
    8ad0:	e9c0 1a00 	strd	r1, sl, [r0]
    8ad4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8ad8:	ddf1      	ble.n	8abe <_svfprintf_r+0xffe>
    8ada:	aa24      	add	r2, sp, #144	; 0x90
    8adc:	4629      	mov	r1, r5
    8ade:	4658      	mov	r0, fp
    8ae0:	f002 fb48 	bl	b174 <__ssprint_r>
    8ae4:	2800      	cmp	r0, #0
    8ae6:	f47f ac50 	bne.w	838a <_svfprintf_r+0x8ca>
    8aea:	3c10      	subs	r4, #16
    8aec:	2c10      	cmp	r4, #16
    8aee:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    8af2:	a827      	add	r0, sp, #156	; 0x9c
    8af4:	dce8      	bgt.n	8ac8 <_svfprintf_r+0x1008>
    8af6:	4629      	mov	r1, r5
    8af8:	9d05      	ldr	r5, [sp, #20]
    8afa:	469c      	mov	ip, r3
    8afc:	f10c 0301 	add.w	r3, ip, #1
    8b00:	4422      	add	r2, r4
    8b02:	6044      	str	r4, [r0, #4]
    8b04:	2b07      	cmp	r3, #7
    8b06:	4c1d      	ldr	r4, [pc, #116]	; (8b7c <_svfprintf_r+0x10bc>)
    8b08:	6004      	str	r4, [r0, #0]
    8b0a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8b0e:	f300 83c6 	bgt.w	929e <_svfprintf_r+0x17de>
    8b12:	f896 c000 	ldrb.w	ip, [r6]
    8b16:	3008      	adds	r0, #8
    8b18:	4465      	add	r5, ip
    8b1a:	e7bc      	b.n	8a96 <_svfprintf_r+0xfd6>
    8b1c:	f018 0310 	ands.w	r3, r8, #16
    8b20:	f000 80c2 	beq.w	8ca8 <_svfprintf_r+0x11e8>
    8b24:	9b08      	ldr	r3, [sp, #32]
    8b26:	f853 2b04 	ldr.w	r2, [r3], #4
    8b2a:	9308      	str	r3, [sp, #32]
    8b2c:	e6f9      	b.n	8922 <_svfprintf_r+0xe62>
    8b2e:	aa24      	add	r2, sp, #144	; 0x90
    8b30:	4658      	mov	r0, fp
    8b32:	9105      	str	r1, [sp, #20]
    8b34:	f002 fb1e 	bl	b174 <__ssprint_r>
    8b38:	2800      	cmp	r0, #0
    8b3a:	f47f ac26 	bne.w	838a <_svfprintf_r+0x8ca>
    8b3e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8b40:	9905      	ldr	r1, [sp, #20]
    8b42:	a827      	add	r0, sp, #156	; 0x9c
    8b44:	e787      	b.n	8a56 <_svfprintf_r+0xf96>
    8b46:	9802      	ldr	r0, [sp, #8]
    8b48:	f8cd a01c 	str.w	sl, [sp, #28]
    8b4c:	ac50      	add	r4, sp, #320	; 0x140
    8b4e:	f400 6080 	and.w	r0, r0, #1024	; 0x400
    8b52:	2500      	movs	r5, #0
    8b54:	ee0a ba10 	vmov	s20, fp
    8b58:	4b09      	ldr	r3, [pc, #36]	; (8b80 <_svfprintf_r+0x10c0>)
    8b5a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    8b5e:	f8cd 9014 	str.w	r9, [sp, #20]
    8b62:	46a3      	mov	fp, r4
    8b64:	f04f 0805 	mov.w	r8, #5
    8b68:	46ac      	mov	ip, r5
    8b6a:	4604      	mov	r4, r0
    8b6c:	e010      	b.n	8b90 <_svfprintf_r+0x10d0>
    8b6e:	bf00      	nop
    8b70:	20018c38 	.word	0x20018c38
    8b74:	20018c4c 	.word	0x20018c4c
    8b78:	20018c60 	.word	0x20018c60
    8b7c:	200190a0 	.word	0x200190a0
    8b80:	cccccccd 	.word	0xcccccccd
    8b84:	2a0a      	cmp	r2, #10
    8b86:	f171 0100 	sbcs.w	r1, r1, #0
    8b8a:	d336      	bcc.n	8bfa <_svfprintf_r+0x113a>
    8b8c:	464a      	mov	r2, r9
    8b8e:	4631      	mov	r1, r6
    8b90:	1850      	adds	r0, r2, r1
    8b92:	f140 0000 	adc.w	r0, r0, #0
    8b96:	fba3 5600 	umull	r5, r6, r3, r0
    8b9a:	f026 0503 	bic.w	r5, r6, #3
    8b9e:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    8ba2:	1b40      	subs	r0, r0, r5
    8ba4:	1a15      	subs	r5, r2, r0
    8ba6:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
    8baa:	f161 0e00 	sbc.w	lr, r1, #0
    8bae:	fb06 f605 	mul.w	r6, r6, r5
    8bb2:	fba5 9503 	umull	r9, r5, r5, r3
    8bb6:	fb03 660e 	mla	r6, r3, lr, r6
    8bba:	f009 0e01 	and.w	lr, r9, #1
    8bbe:	442e      	add	r6, r5
    8bc0:	fbae 5e08 	umull	r5, lr, lr, r8
    8bc4:	182d      	adds	r5, r5, r0
    8bc6:	ea4f 0959 	mov.w	r9, r9, lsr #1
    8bca:	3530      	adds	r5, #48	; 0x30
    8bcc:	f80b 5c01 	strb.w	r5, [fp, #-1]
    8bd0:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
    8bd4:	f10c 0c01 	add.w	ip, ip, #1
    8bd8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    8bdc:	0876      	lsrs	r6, r6, #1
    8bde:	2c00      	cmp	r4, #0
    8be0:	d0d0      	beq.n	8b84 <_svfprintf_r+0x10c4>
    8be2:	f89a 0000 	ldrb.w	r0, [sl]
    8be6:	4584      	cmp	ip, r0
    8be8:	d1cc      	bne.n	8b84 <_svfprintf_r+0x10c4>
    8bea:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    8bee:	d0c9      	beq.n	8b84 <_svfprintf_r+0x10c4>
    8bf0:	2a0a      	cmp	r2, #10
    8bf2:	f171 0100 	sbcs.w	r1, r1, #0
    8bf6:	f080 818f 	bcs.w	8f18 <_svfprintf_r+0x1458>
    8bfa:	465c      	mov	r4, fp
    8bfc:	ab50      	add	r3, sp, #320	; 0x140
    8bfe:	1b1b      	subs	r3, r3, r4
    8c00:	f8dd 9014 	ldr.w	r9, [sp, #20]
    8c04:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    8c08:	ee1a ba10 	vmov	fp, s20
    8c0c:	f8dd a01c 	ldr.w	sl, [sp, #28]
    8c10:	f8dd 8008 	ldr.w	r8, [sp, #8]
    8c14:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    8c18:	9305      	str	r3, [sp, #20]
    8c1a:	f7ff bac2 	b.w	81a2 <_svfprintf_r+0x6e2>
    8c1e:	ee1b 1a10 	vmov	r1, s22
    8c22:	aa24      	add	r2, sp, #144	; 0x90
    8c24:	4658      	mov	r0, fp
    8c26:	f002 faa5 	bl	b174 <__ssprint_r>
    8c2a:	2800      	cmp	r0, #0
    8c2c:	f47f abad 	bne.w	838a <_svfprintf_r+0x8ca>
    8c30:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    8c34:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8c36:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8c3a:	f7ff b896 	b.w	7d6a <_svfprintf_r+0x2aa>
    8c3e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8c40:	48be      	ldr	r0, [pc, #760]	; (8f3c <_svfprintf_r+0x147c>)
    8c42:	f8ca 0000 	str.w	r0, [sl]
    8c46:	3301      	adds	r3, #1
    8c48:	3201      	adds	r2, #1
    8c4a:	2001      	movs	r0, #1
    8c4c:	2b07      	cmp	r3, #7
    8c4e:	9226      	str	r2, [sp, #152]	; 0x98
    8c50:	9325      	str	r3, [sp, #148]	; 0x94
    8c52:	f8ca 0004 	str.w	r0, [sl, #4]
    8c56:	f300 8177 	bgt.w	8f48 <_svfprintf_r+0x1488>
    8c5a:	f10a 0a08 	add.w	sl, sl, #8
    8c5e:	2900      	cmp	r1, #0
    8c60:	f040 80af 	bne.w	8dc2 <_svfprintf_r+0x1302>
    8c64:	990e      	ldr	r1, [sp, #56]	; 0x38
    8c66:	f008 0301 	and.w	r3, r8, #1
    8c6a:	430b      	orrs	r3, r1
    8c6c:	f43f a8c0 	beq.w	7df0 <_svfprintf_r+0x330>
    8c70:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8c72:	9912      	ldr	r1, [sp, #72]	; 0x48
    8c74:	441a      	add	r2, r3
    8c76:	e9ca 1300 	strd	r1, r3, [sl]
    8c7a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8c7c:	9226      	str	r2, [sp, #152]	; 0x98
    8c7e:	3301      	adds	r3, #1
    8c80:	2b07      	cmp	r3, #7
    8c82:	9325      	str	r3, [sp, #148]	; 0x94
    8c84:	f300 8252 	bgt.w	912c <_svfprintf_r+0x166c>
    8c88:	f10a 0a08 	add.w	sl, sl, #8
    8c8c:	990e      	ldr	r1, [sp, #56]	; 0x38
    8c8e:	f8ca 4000 	str.w	r4, [sl]
    8c92:	3301      	adds	r3, #1
    8c94:	440a      	add	r2, r1
    8c96:	2b07      	cmp	r3, #7
    8c98:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8c9c:	f8ca 1004 	str.w	r1, [sl, #4]
    8ca0:	f77f a8a4 	ble.w	7dec <_svfprintf_r+0x32c>
    8ca4:	f7ff bbbd 	b.w	8422 <_svfprintf_r+0x962>
    8ca8:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    8cac:	f000 80dd 	beq.w	8e6a <_svfprintf_r+0x13aa>
    8cb0:	9808      	ldr	r0, [sp, #32]
    8cb2:	f850 2b04 	ldr.w	r2, [r0], #4
    8cb6:	9008      	str	r0, [sp, #32]
    8cb8:	4619      	mov	r1, r3
    8cba:	b292      	uxth	r2, r2
    8cbc:	e631      	b.n	8922 <_svfprintf_r+0xe62>
    8cbe:	ee1b 1a10 	vmov	r1, s22
    8cc2:	aa24      	add	r2, sp, #144	; 0x90
    8cc4:	4658      	mov	r0, fp
    8cc6:	f002 fa55 	bl	b174 <__ssprint_r>
    8cca:	2800      	cmp	r0, #0
    8ccc:	f47f ab5d 	bne.w	838a <_svfprintf_r+0x8ca>
    8cd0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8cd2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8cd6:	f7ff baa3 	b.w	8220 <_svfprintf_r+0x760>
    8cda:	ae22      	add	r6, sp, #136	; 0x88
    8cdc:	2208      	movs	r2, #8
    8cde:	2100      	movs	r1, #0
    8ce0:	4630      	mov	r0, r6
    8ce2:	941d      	str	r4, [sp, #116]	; 0x74
    8ce4:	f7fe fbac 	bl	7440 <memset>
    8ce8:	9b03      	ldr	r3, [sp, #12]
    8cea:	1c5a      	adds	r2, r3, #1
    8cec:	f000 80db 	beq.w	8ea6 <_svfprintf_r+0x13e6>
    8cf0:	2500      	movs	r5, #0
    8cf2:	f8cd 9008 	str.w	r9, [sp, #8]
    8cf6:	f8cd 801c 	str.w	r8, [sp, #28]
    8cfa:	4699      	mov	r9, r3
    8cfc:	46a8      	mov	r8, r5
    8cfe:	e00c      	b.n	8d1a <_svfprintf_r+0x125a>
    8d00:	a937      	add	r1, sp, #220	; 0xdc
    8d02:	4658      	mov	r0, fp
    8d04:	f001 fa4c 	bl	a1a0 <_wcrtomb_r>
    8d08:	1c43      	adds	r3, r0, #1
    8d0a:	4440      	add	r0, r8
    8d0c:	f000 83c8 	beq.w	94a0 <_svfprintf_r+0x19e0>
    8d10:	4548      	cmp	r0, r9
    8d12:	dc08      	bgt.n	8d26 <_svfprintf_r+0x1266>
    8d14:	f000 8418 	beq.w	9548 <_svfprintf_r+0x1a88>
    8d18:	4680      	mov	r8, r0
    8d1a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    8d1c:	5952      	ldr	r2, [r2, r5]
    8d1e:	4633      	mov	r3, r6
    8d20:	3504      	adds	r5, #4
    8d22:	2a00      	cmp	r2, #0
    8d24:	d1ec      	bne.n	8d00 <_svfprintf_r+0x1240>
    8d26:	f8cd 8014 	str.w	r8, [sp, #20]
    8d2a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    8d2e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    8d32:	e0c5      	b.n	8ec0 <_svfprintf_r+0x1400>
    8d34:	3301      	adds	r3, #1
    8d36:	4982      	ldr	r1, [pc, #520]	; (8f40 <_svfprintf_r+0x1480>)
    8d38:	f8ca 4004 	str.w	r4, [sl, #4]
    8d3c:	4422      	add	r2, r4
    8d3e:	2b07      	cmp	r3, #7
    8d40:	f8ca 1000 	str.w	r1, [sl]
    8d44:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8d48:	f77f a850 	ble.w	7dec <_svfprintf_r+0x32c>
    8d4c:	f7ff bb69 	b.w	8422 <_svfprintf_r+0x962>
    8d50:	ee1b 1a10 	vmov	r1, s22
    8d54:	aa24      	add	r2, sp, #144	; 0x90
    8d56:	4658      	mov	r0, fp
    8d58:	f002 fa0c 	bl	b174 <__ssprint_r>
    8d5c:	2800      	cmp	r0, #0
    8d5e:	f47f ab14 	bne.w	838a <_svfprintf_r+0x8ca>
    8d62:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8d64:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8d68:	f7ff b829 	b.w	7dbe <_svfprintf_r+0x2fe>
    8d6c:	aa24      	add	r2, sp, #144	; 0x90
    8d6e:	4658      	mov	r0, fp
    8d70:	9105      	str	r1, [sp, #20]
    8d72:	f002 f9ff 	bl	b174 <__ssprint_r>
    8d76:	2800      	cmp	r0, #0
    8d78:	f47f ab07 	bne.w	838a <_svfprintf_r+0x8ca>
    8d7c:	f896 c000 	ldrb.w	ip, [r6]
    8d80:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8d82:	9905      	ldr	r1, [sp, #20]
    8d84:	a827      	add	r0, sp, #156	; 0x9c
    8d86:	e67d      	b.n	8a84 <_svfprintf_r+0xfc4>
    8d88:	2b01      	cmp	r3, #1
    8d8a:	f8cd 8008 	str.w	r8, [sp, #8]
    8d8e:	f47f a9f3 	bne.w	8178 <_svfprintf_r+0x6b8>
    8d92:	f7ff bb93 	b.w	84bc <_svfprintf_r+0x9fc>
    8d96:	9b08      	ldr	r3, [sp, #32]
    8d98:	9904      	ldr	r1, [sp, #16]
    8d9a:	f853 2b04 	ldr.w	r2, [r3], #4
    8d9e:	464c      	mov	r4, r9
    8da0:	6011      	str	r1, [r2, #0]
    8da2:	9308      	str	r3, [sp, #32]
    8da4:	f7fe bebe 	b.w	7b24 <_svfprintf_r+0x64>
    8da8:	3301      	adds	r3, #1
    8daa:	4965      	ldr	r1, [pc, #404]	; (8f40 <_svfprintf_r+0x1480>)
    8dac:	f8ca 4004 	str.w	r4, [sl, #4]
    8db0:	4422      	add	r2, r4
    8db2:	2b07      	cmp	r3, #7
    8db4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8db8:	f8ca 1000 	str.w	r1, [sl]
    8dbc:	f77f ab22 	ble.w	8404 <_svfprintf_r+0x944>
    8dc0:	e47b      	b.n	86ba <_svfprintf_r+0xbfa>
    8dc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8dc4:	9812      	ldr	r0, [sp, #72]	; 0x48
    8dc6:	441a      	add	r2, r3
    8dc8:	e9ca 0300 	strd	r0, r3, [sl]
    8dcc:	9b25      	ldr	r3, [sp, #148]	; 0x94
    8dce:	9226      	str	r2, [sp, #152]	; 0x98
    8dd0:	3301      	adds	r3, #1
    8dd2:	2b07      	cmp	r3, #7
    8dd4:	9325      	str	r3, [sp, #148]	; 0x94
    8dd6:	f300 81a9 	bgt.w	912c <_svfprintf_r+0x166c>
    8dda:	f10a 0a08 	add.w	sl, sl, #8
    8dde:	2900      	cmp	r1, #0
    8de0:	f6bf af54 	bge.w	8c8c <_svfprintf_r+0x11cc>
    8de4:	424d      	negs	r5, r1
    8de6:	3110      	adds	r1, #16
    8de8:	f280 830f 	bge.w	940a <_svfprintf_r+0x194a>
    8dec:	ee1b 1a10 	vmov	r1, s22
    8df0:	2610      	movs	r6, #16
    8df2:	e005      	b.n	8e00 <_svfprintf_r+0x1340>
    8df4:	f10a 0a08 	add.w	sl, sl, #8
    8df8:	3d10      	subs	r5, #16
    8dfa:	2d10      	cmp	r5, #16
    8dfc:	f340 8305 	ble.w	940a <_svfprintf_r+0x194a>
    8e00:	3301      	adds	r3, #1
    8e02:	484f      	ldr	r0, [pc, #316]	; (8f40 <_svfprintf_r+0x1480>)
    8e04:	3210      	adds	r2, #16
    8e06:	2b07      	cmp	r3, #7
    8e08:	e9ca 0600 	strd	r0, r6, [sl]
    8e0c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8e10:	ddf0      	ble.n	8df4 <_svfprintf_r+0x1334>
    8e12:	aa24      	add	r2, sp, #144	; 0x90
    8e14:	4658      	mov	r0, fp
    8e16:	9103      	str	r1, [sp, #12]
    8e18:	f002 f9ac 	bl	b174 <__ssprint_r>
    8e1c:	2800      	cmp	r0, #0
    8e1e:	f47f aab4 	bne.w	838a <_svfprintf_r+0x8ca>
    8e22:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    8e26:	9903      	ldr	r1, [sp, #12]
    8e28:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8e2c:	e7e4      	b.n	8df8 <_svfprintf_r+0x1338>
    8e2e:	9b08      	ldr	r3, [sp, #32]
    8e30:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    8e34:	bf1a      	itte	ne
    8e36:	4611      	movne	r1, r2
    8e38:	f853 2b04 	ldrne.w	r2, [r3], #4
    8e3c:	f853 2b04 	ldreq.w	r2, [r3], #4
    8e40:	9308      	str	r3, [sp, #32]
    8e42:	bf18      	it	ne
    8e44:	b2d2      	uxtbne	r2, r2
    8e46:	f7ff b945 	b.w	80d4 <_svfprintf_r+0x614>
    8e4a:	9b02      	ldr	r3, [sp, #8]
    8e4c:	f413 7100 	ands.w	r1, r3, #512	; 0x200
    8e50:	9b08      	ldr	r3, [sp, #32]
    8e52:	bf1a      	itte	ne
    8e54:	4611      	movne	r1, r2
    8e56:	f853 2b04 	ldrne.w	r2, [r3], #4
    8e5a:	f853 2b04 	ldreq.w	r2, [r3], #4
    8e5e:	9308      	str	r3, [sp, #32]
    8e60:	bf18      	it	ne
    8e62:	b2d2      	uxtbne	r2, r2
    8e64:	2301      	movs	r3, #1
    8e66:	f7ff b8d0 	b.w	800a <_svfprintf_r+0x54a>
    8e6a:	9b08      	ldr	r3, [sp, #32]
    8e6c:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    8e70:	bf1a      	itte	ne
    8e72:	4611      	movne	r1, r2
    8e74:	f853 2b04 	ldrne.w	r2, [r3], #4
    8e78:	f853 2b04 	ldreq.w	r2, [r3], #4
    8e7c:	9308      	str	r3, [sp, #32]
    8e7e:	bf18      	it	ne
    8e80:	b2d2      	uxtbne	r2, r2
    8e82:	e54e      	b.n	8922 <_svfprintf_r+0xe62>
    8e84:	468a      	mov	sl, r1
    8e86:	3301      	adds	r3, #1
    8e88:	492d      	ldr	r1, [pc, #180]	; (8f40 <_svfprintf_r+0x1480>)
    8e8a:	f8ca 5004 	str.w	r5, [sl, #4]
    8e8e:	442a      	add	r2, r5
    8e90:	2b07      	cmp	r3, #7
    8e92:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    8e96:	f8ca 1000 	str.w	r1, [sl]
    8e9a:	f300 8139 	bgt.w	9110 <_svfprintf_r+0x1650>
    8e9e:	f10a 0a08 	add.w	sl, sl, #8
    8ea2:	f7ff bb8c 	b.w	85be <_svfprintf_r+0xafe>
    8ea6:	2300      	movs	r3, #0
    8ea8:	4619      	mov	r1, r3
    8eaa:	9600      	str	r6, [sp, #0]
    8eac:	aa1d      	add	r2, sp, #116	; 0x74
    8eae:	4658      	mov	r0, fp
    8eb0:	f001 f99c 	bl	a1ec <_wcsrtombs_r>
    8eb4:	4603      	mov	r3, r0
    8eb6:	3301      	adds	r3, #1
    8eb8:	9005      	str	r0, [sp, #20]
    8eba:	f000 82f1 	beq.w	94a0 <_svfprintf_r+0x19e0>
    8ebe:	941d      	str	r4, [sp, #116]	; 0x74
    8ec0:	9b05      	ldr	r3, [sp, #20]
    8ec2:	2b00      	cmp	r3, #0
    8ec4:	d04e      	beq.n	8f64 <_svfprintf_r+0x14a4>
    8ec6:	2b63      	cmp	r3, #99	; 0x63
    8ec8:	f300 8118 	bgt.w	90fc <_svfprintf_r+0x163c>
    8ecc:	2300      	movs	r3, #0
    8ece:	9307      	str	r3, [sp, #28]
    8ed0:	ac37      	add	r4, sp, #220	; 0xdc
    8ed2:	2208      	movs	r2, #8
    8ed4:	2100      	movs	r1, #0
    8ed6:	4630      	mov	r0, r6
    8ed8:	f7fe fab2 	bl	7440 <memset>
    8edc:	9d05      	ldr	r5, [sp, #20]
    8ede:	9600      	str	r6, [sp, #0]
    8ee0:	462b      	mov	r3, r5
    8ee2:	aa1d      	add	r2, sp, #116	; 0x74
    8ee4:	4621      	mov	r1, r4
    8ee6:	4658      	mov	r0, fp
    8ee8:	f001 f980 	bl	a1ec <_wcsrtombs_r>
    8eec:	4285      	cmp	r5, r0
    8eee:	f040 837c 	bne.w	95ea <_svfprintf_r+0x1b2a>
    8ef2:	9a05      	ldr	r2, [sp, #20]
    8ef4:	2300      	movs	r3, #0
    8ef6:	54a3      	strb	r3, [r4, r2]
    8ef8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    8efc:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    8f00:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    8f04:	9303      	str	r3, [sp, #12]
    8f06:	9202      	str	r2, [sp, #8]
    8f08:	930f      	str	r3, [sp, #60]	; 0x3c
    8f0a:	f7fe bfba 	b.w	7e82 <_svfprintf_r+0x3c2>
    8f0e:	212d      	movs	r1, #45	; 0x2d
    8f10:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    8f14:	f7fe bfa4 	b.w	7e60 <_svfprintf_r+0x3a0>
    8f18:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8f1a:	9915      	ldr	r1, [sp, #84]	; 0x54
    8f1c:	ebab 0b03 	sub.w	fp, fp, r3
    8f20:	461a      	mov	r2, r3
    8f22:	4658      	mov	r0, fp
    8f24:	f7fe fade 	bl	74e4 <strncpy>
    8f28:	f89a 2001 	ldrb.w	r2, [sl, #1]
    8f2c:	4b05      	ldr	r3, [pc, #20]	; (8f44 <_svfprintf_r+0x1484>)
    8f2e:	b10a      	cbz	r2, 8f34 <_svfprintf_r+0x1474>
    8f30:	f10a 0a01 	add.w	sl, sl, #1
    8f34:	f04f 0c00 	mov.w	ip, #0
    8f38:	e628      	b.n	8b8c <_svfprintf_r+0x10cc>
    8f3a:	bf00      	nop
    8f3c:	20018c68 	.word	0x20018c68
    8f40:	200190a0 	.word	0x200190a0
    8f44:	cccccccd 	.word	0xcccccccd
    8f48:	ee1b 1a10 	vmov	r1, s22
    8f4c:	aa24      	add	r2, sp, #144	; 0x90
    8f4e:	4658      	mov	r0, fp
    8f50:	f002 f910 	bl	b174 <__ssprint_r>
    8f54:	2800      	cmp	r0, #0
    8f56:	f47f aa18 	bne.w	838a <_svfprintf_r+0x8ca>
    8f5a:	991b      	ldr	r1, [sp, #108]	; 0x6c
    8f5c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8f5e:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    8f62:	e67c      	b.n	8c5e <_svfprintf_r+0x119e>
    8f64:	9b05      	ldr	r3, [sp, #20]
    8f66:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    8f6a:	930f      	str	r3, [sp, #60]	; 0x3c
    8f6c:	e9cd 3302 	strd	r3, r3, [sp, #8]
    8f70:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    8f74:	9307      	str	r3, [sp, #28]
    8f76:	f7fe bf84 	b.w	7e82 <_svfprintf_r+0x3c2>
    8f7a:	990e      	ldr	r1, [sp, #56]	; 0x38
    8f7c:	9805      	ldr	r0, [sp, #20]
    8f7e:	1865      	adds	r5, r4, r1
    8f80:	1a2d      	subs	r5, r5, r0
    8f82:	1acc      	subs	r4, r1, r3
    8f84:	42a5      	cmp	r5, r4
    8f86:	bfa8      	it	ge
    8f88:	4625      	movge	r5, r4
    8f8a:	f7ff bb4d 	b.w	8628 <_svfprintf_r+0xb68>
    8f8e:	9b08      	ldr	r3, [sp, #32]
    8f90:	9904      	ldr	r1, [sp, #16]
    8f92:	f853 2b04 	ldr.w	r2, [r3], #4
    8f96:	9308      	str	r3, [sp, #32]
    8f98:	8011      	strh	r1, [r2, #0]
    8f9a:	464c      	mov	r4, r9
    8f9c:	f7fe bdc2 	b.w	7b24 <_svfprintf_r+0x64>
    8fa0:	f913 2b04 	ldrsb.w	r2, [r3], #4
    8fa4:	9308      	str	r3, [sp, #32]
    8fa6:	17d1      	asrs	r1, r2, #31
    8fa8:	460b      	mov	r3, r1
    8faa:	f7fe bfdb 	b.w	7f64 <_svfprintf_r+0x4a4>
    8fae:	9a03      	ldr	r2, [sp, #12]
    8fb0:	2102      	movs	r1, #2
    8fb2:	ab22      	add	r3, sp, #136	; 0x88
    8fb4:	9301      	str	r3, [sp, #4]
    8fb6:	ab1d      	add	r3, sp, #116	; 0x74
    8fb8:	9300      	str	r3, [sp, #0]
    8fba:	4658      	mov	r0, fp
    8fbc:	ab1b      	add	r3, sp, #108	; 0x6c
    8fbe:	eeb0 0b4a 	vmov.f64	d0, d10
    8fc2:	9202      	str	r2, [sp, #8]
    8fc4:	f001 fa4c 	bl	a460 <_dtoa_r>
    8fc8:	2d47      	cmp	r5, #71	; 0x47
    8fca:	9a02      	ldr	r2, [sp, #8]
    8fcc:	4604      	mov	r4, r0
    8fce:	f000 8161 	beq.w	9294 <_svfprintf_r+0x17d4>
    8fd2:	2d46      	cmp	r5, #70	; 0x46
    8fd4:	4410      	add	r0, r2
    8fd6:	d105      	bne.n	8fe4 <_svfprintf_r+0x1524>
    8fd8:	7823      	ldrb	r3, [r4, #0]
    8fda:	2b30      	cmp	r3, #48	; 0x30
    8fdc:	f000 826f 	beq.w	94be <_svfprintf_r+0x19fe>
    8fe0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    8fe2:	4410      	add	r0, r2
    8fe4:	eeb5 ab40 	vcmp.f64	d10, #0.0
    8fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8fec:	f040 8146 	bne.w	927c <_svfprintf_r+0x17bc>
    8ff0:	4603      	mov	r3, r0
    8ff2:	1b1b      	subs	r3, r3, r4
    8ff4:	930e      	str	r3, [sp, #56]	; 0x38
    8ff6:	2d47      	cmp	r5, #71	; 0x47
    8ff8:	f000 8110 	beq.w	921c <_svfprintf_r+0x175c>
    8ffc:	2d46      	cmp	r5, #70	; 0x46
    8ffe:	f000 81b5 	beq.w	936c <_svfprintf_r+0x18ac>
    9002:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9004:	930c      	str	r3, [sp, #48]	; 0x30
    9006:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9008:	2d41      	cmp	r5, #65	; 0x41
    900a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    900e:	931b      	str	r3, [sp, #108]	; 0x6c
    9010:	f000 81e5 	beq.w	93de <_svfprintf_r+0x191e>
    9014:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    9018:	2100      	movs	r1, #0
    901a:	2b00      	cmp	r3, #0
    901c:	bfb8      	it	lt
    901e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
    9020:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    9024:	bfba      	itte	lt
    9026:	f1c3 0301 	rsblt	r3, r3, #1
    902a:	222d      	movlt	r2, #45	; 0x2d
    902c:	222b      	movge	r2, #43	; 0x2b
    902e:	2b09      	cmp	r3, #9
    9030:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
    9034:	f340 81da 	ble.w	93ec <_svfprintf_r+0x192c>
    9038:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
    903c:	f8df c41c 	ldr.w	ip, [pc, #1052]	; 945c <_svfprintf_r+0x199c>
    9040:	462a      	mov	r2, r5
    9042:	4610      	mov	r0, r2
    9044:	fb8c 2103 	smull	r2, r1, ip, r3
    9048:	17da      	asrs	r2, r3, #31
    904a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    904e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    9052:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    9056:	3130      	adds	r1, #48	; 0x30
    9058:	f800 1c01 	strb.w	r1, [r0, #-1]
    905c:	4619      	mov	r1, r3
    905e:	2963      	cmp	r1, #99	; 0x63
    9060:	4613      	mov	r3, r2
    9062:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    9066:	dcec      	bgt.n	9042 <_svfprintf_r+0x1582>
    9068:	3330      	adds	r3, #48	; 0x30
    906a:	b2d9      	uxtb	r1, r3
    906c:	1e83      	subs	r3, r0, #2
    906e:	429d      	cmp	r5, r3
    9070:	f802 1c01 	strb.w	r1, [r2, #-1]
    9074:	f240 828b 	bls.w	958e <_svfprintf_r+0x1ace>
    9078:	4613      	mov	r3, r2
    907a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    907e:	e001      	b.n	9084 <_svfprintf_r+0x15c4>
    9080:	f813 1b01 	ldrb.w	r1, [r3], #1
    9084:	f802 1b01 	strb.w	r1, [r2], #1
    9088:	429d      	cmp	r5, r3
    908a:	d1f9      	bne.n	9080 <_svfprintf_r+0x15c0>
    908c:	f10d 0391 	add.w	r3, sp, #145	; 0x91
    9090:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    9094:	1a1b      	subs	r3, r3, r0
    9096:	4413      	add	r3, r2
    9098:	aa1e      	add	r2, sp, #120	; 0x78
    909a:	1a9b      	subs	r3, r3, r2
    909c:	9314      	str	r3, [sp, #80]	; 0x50
    909e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    90a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    90a2:	2b01      	cmp	r3, #1
    90a4:	441a      	add	r2, r3
    90a6:	9205      	str	r2, [sp, #20]
    90a8:	f340 8203 	ble.w	94b2 <_svfprintf_r+0x19f2>
    90ac:	9b05      	ldr	r3, [sp, #20]
    90ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
    90b0:	4413      	add	r3, r2
    90b2:	9305      	str	r3, [sp, #20]
    90b4:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
    90b8:	9a05      	ldr	r2, [sp, #20]
    90ba:	f443 7880 	orr.w	r8, r3, #256	; 0x100
    90be:	2300      	movs	r3, #0
    90c0:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    90c4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    90c8:	930f      	str	r3, [sp, #60]	; 0x3c
    90ca:	9202      	str	r2, [sp, #8]
    90cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    90ce:	2b00      	cmp	r3, #0
    90d0:	f040 80b1 	bne.w	9236 <_svfprintf_r+0x1776>
    90d4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    90d8:	9303      	str	r3, [sp, #12]
    90da:	f7fe bed2 	b.w	7e82 <_svfprintf_r+0x3c2>
    90de:	4620      	mov	r0, r4
    90e0:	f7fe face 	bl	7680 <strlen>
    90e4:	4602      	mov	r2, r0
    90e6:	9005      	str	r0, [sp, #20]
    90e8:	f7fe bf20 	b.w	7f2c <_svfprintf_r+0x46c>
    90ec:	ee1b 1a10 	vmov	r1, s22
    90f0:	aa24      	add	r2, sp, #144	; 0x90
    90f2:	4658      	mov	r0, fp
    90f4:	f002 f83e 	bl	b174 <__ssprint_r>
    90f8:	f7fe bded 	b.w	7cd6 <_svfprintf_r+0x216>
    90fc:	1c59      	adds	r1, r3, #1
    90fe:	4658      	mov	r0, fp
    9100:	f7fd fb62 	bl	67c8 <_malloc_r>
    9104:	4604      	mov	r4, r0
    9106:	2800      	cmp	r0, #0
    9108:	f000 81ca 	beq.w	94a0 <_svfprintf_r+0x19e0>
    910c:	9007      	str	r0, [sp, #28]
    910e:	e6e0      	b.n	8ed2 <_svfprintf_r+0x1412>
    9110:	ee1b 1a10 	vmov	r1, s22
    9114:	aa24      	add	r2, sp, #144	; 0x90
    9116:	4658      	mov	r0, fp
    9118:	f002 f82c 	bl	b174 <__ssprint_r>
    911c:	2800      	cmp	r0, #0
    911e:	f47f a934 	bne.w	838a <_svfprintf_r+0x8ca>
    9122:	9a26      	ldr	r2, [sp, #152]	; 0x98
    9124:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    9128:	f7ff ba49 	b.w	85be <_svfprintf_r+0xafe>
    912c:	ee1b 1a10 	vmov	r1, s22
    9130:	aa24      	add	r2, sp, #144	; 0x90
    9132:	4658      	mov	r0, fp
    9134:	f002 f81e 	bl	b174 <__ssprint_r>
    9138:	2800      	cmp	r0, #0
    913a:	f47f a926 	bne.w	838a <_svfprintf_r+0x8ca>
    913e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    9142:	991b      	ldr	r1, [sp, #108]	; 0x6c
    9144:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    9148:	e649      	b.n	8dde <_svfprintf_r+0x131e>
    914a:	2306      	movs	r3, #6
    914c:	9303      	str	r3, [sp, #12]
    914e:	f7ff bb83 	b.w	8858 <_svfprintf_r+0xd98>
    9152:	9b03      	ldr	r3, [sp, #12]
    9154:	2102      	movs	r1, #2
    9156:	1c5a      	adds	r2, r3, #1
    9158:	e72b      	b.n	8fb2 <_svfprintf_r+0x14f2>
    915a:	9a03      	ldr	r2, [sp, #12]
    915c:	2103      	movs	r1, #3
    915e:	e728      	b.n	8fb2 <_svfprintf_r+0x14f2>
    9160:	a81b      	add	r0, sp, #108	; 0x6c
    9162:	eeb0 0b4a 	vmov.f64	d0, d10
    9166:	f001 f84f 	bl	a208 <frexp>
    916a:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    916e:	ee20 0b07 	vmul.f64	d0, d0, d7
    9172:	eeb5 0b40 	vcmp.f64	d0, #0.0
    9176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    917a:	d101      	bne.n	9180 <_svfprintf_r+0x16c0>
    917c:	2301      	movs	r3, #1
    917e:	931b      	str	r3, [sp, #108]	; 0x6c
    9180:	48b3      	ldr	r0, [pc, #716]	; (9450 <_svfprintf_r+0x1990>)
    9182:	9b03      	ldr	r3, [sp, #12]
    9184:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
    9188:	3b01      	subs	r3, #1
    918a:	4622      	mov	r2, r4
    918c:	e004      	b.n	9198 <_svfprintf_r+0x16d8>
    918e:	eeb5 0b40 	vcmp.f64	d0, #0.0
    9192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9196:	d013      	beq.n	91c0 <_svfprintf_r+0x1700>
    9198:	ee20 0b05 	vmul.f64	d0, d0, d5
    919c:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    91a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    91a4:	ee17 1a90 	vmov	r1, s15
    91a8:	5c41      	ldrb	r1, [r0, r1]
    91aa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    91ae:	4694      	mov	ip, r2
    91b0:	ee30 0b46 	vsub.f64	d0, d0, d6
    91b4:	f802 1b01 	strb.w	r1, [r2], #1
    91b8:	4619      	mov	r1, r3
    91ba:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    91be:	d1e6      	bne.n	918e <_svfprintf_r+0x16ce>
    91c0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    91c4:	eeb4 0bc6 	vcmpe.f64	d0, d6
    91c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    91cc:	f300 8148 	bgt.w	9460 <_svfprintf_r+0x19a0>
    91d0:	eeb4 0b46 	vcmp.f64	d0, d6
    91d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    91d8:	d104      	bne.n	91e4 <_svfprintf_r+0x1724>
    91da:	ee17 3a90 	vmov	r3, s15
    91de:	07db      	lsls	r3, r3, #31
    91e0:	f100 813e 	bmi.w	9460 <_svfprintf_r+0x19a0>
    91e4:	2900      	cmp	r1, #0
    91e6:	db06      	blt.n	91f6 <_svfprintf_r+0x1736>
    91e8:	1c4b      	adds	r3, r1, #1
    91ea:	4413      	add	r3, r2
    91ec:	2130      	movs	r1, #48	; 0x30
    91ee:	f802 1b01 	strb.w	r1, [r2], #1
    91f2:	4293      	cmp	r3, r2
    91f4:	d1fb      	bne.n	91ee <_svfprintf_r+0x172e>
    91f6:	1b13      	subs	r3, r2, r4
    91f8:	930e      	str	r3, [sp, #56]	; 0x38
    91fa:	e6fc      	b.n	8ff6 <_svfprintf_r+0x1536>
    91fc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    91fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9200:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    9204:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    9208:	9613      	str	r6, [sp, #76]	; 0x4c
    920a:	18e3      	adds	r3, r4, r3
    920c:	429d      	cmp	r5, r3
    920e:	4629      	mov	r1, r5
    9210:	bf28      	it	cs
    9212:	4619      	movcs	r1, r3
    9214:	4682      	mov	sl, r0
    9216:	9105      	str	r1, [sp, #20]
    9218:	f7ff b9d8 	b.w	85cc <_svfprintf_r+0xb0c>
    921c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    921e:	930c      	str	r3, [sp, #48]	; 0x30
    9220:	1cda      	adds	r2, r3, #3
    9222:	db02      	blt.n	922a <_svfprintf_r+0x176a>
    9224:	9a03      	ldr	r2, [sp, #12]
    9226:	4293      	cmp	r3, r2
    9228:	dd0c      	ble.n	9244 <_svfprintf_r+0x1784>
    922a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    922c:	3b02      	subs	r3, #2
    922e:	930b      	str	r3, [sp, #44]	; 0x2c
    9230:	f023 0520 	bic.w	r5, r3, #32
    9234:	e6e7      	b.n	9006 <_svfprintf_r+0x1546>
    9236:	212d      	movs	r1, #45	; 0x2d
    9238:	2300      	movs	r3, #0
    923a:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    923e:	9303      	str	r3, [sp, #12]
    9240:	f7fe be22 	b.w	7e88 <_svfprintf_r+0x3c8>
    9244:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9246:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9248:	4293      	cmp	r3, r2
    924a:	f2c0 80bd 	blt.w	93c8 <_svfprintf_r+0x1908>
    924e:	07f0      	lsls	r0, r6, #31
    9250:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9252:	f140 8132 	bpl.w	94ba <_svfprintf_r+0x19fa>
    9256:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9258:	4413      	add	r3, r2
    925a:	9305      	str	r3, [sp, #20]
    925c:	0571      	lsls	r1, r6, #21
    925e:	d503      	bpl.n	9268 <_svfprintf_r+0x17a8>
    9260:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9262:	2b00      	cmp	r3, #0
    9264:	f300 8135 	bgt.w	94d2 <_svfprintf_r+0x1a12>
    9268:	9b05      	ldr	r3, [sp, #20]
    926a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    926e:	9302      	str	r3, [sp, #8]
    9270:	2367      	movs	r3, #103	; 0x67
    9272:	930b      	str	r3, [sp, #44]	; 0x2c
    9274:	2300      	movs	r3, #0
    9276:	930f      	str	r3, [sp, #60]	; 0x3c
    9278:	930d      	str	r3, [sp, #52]	; 0x34
    927a:	e727      	b.n	90cc <_svfprintf_r+0x160c>
    927c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    927e:	4283      	cmp	r3, r0
    9280:	f4bf aeb7 	bcs.w	8ff2 <_svfprintf_r+0x1532>
    9284:	2130      	movs	r1, #48	; 0x30
    9286:	1c5a      	adds	r2, r3, #1
    9288:	9222      	str	r2, [sp, #136]	; 0x88
    928a:	7019      	strb	r1, [r3, #0]
    928c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    928e:	4298      	cmp	r0, r3
    9290:	d8f9      	bhi.n	9286 <_svfprintf_r+0x17c6>
    9292:	e6ae      	b.n	8ff2 <_svfprintf_r+0x1532>
    9294:	07f3      	lsls	r3, r6, #31
    9296:	f100 80a7 	bmi.w	93e8 <_svfprintf_r+0x1928>
    929a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    929c:	e6a9      	b.n	8ff2 <_svfprintf_r+0x1532>
    929e:	aa24      	add	r2, sp, #144	; 0x90
    92a0:	4658      	mov	r0, fp
    92a2:	9105      	str	r1, [sp, #20]
    92a4:	f001 ff66 	bl	b174 <__ssprint_r>
    92a8:	2800      	cmp	r0, #0
    92aa:	f47f a86e 	bne.w	838a <_svfprintf_r+0x8ca>
    92ae:	f896 c000 	ldrb.w	ip, [r6]
    92b2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    92b4:	9905      	ldr	r1, [sp, #20]
    92b6:	a827      	add	r0, sp, #156	; 0x9c
    92b8:	4465      	add	r5, ip
    92ba:	f7ff bbec 	b.w	8a96 <_svfprintf_r+0xfd6>
    92be:	ee1b 1a10 	vmov	r1, s22
    92c2:	aa24      	add	r2, sp, #144	; 0x90
    92c4:	4658      	mov	r0, fp
    92c6:	f001 ff55 	bl	b174 <__ssprint_r>
    92ca:	2800      	cmp	r0, #0
    92cc:	f47f a85d 	bne.w	838a <_svfprintf_r+0x8ca>
    92d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    92d2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    92d6:	f7ff b96b 	b.w	85b0 <_svfprintf_r+0xaf0>
    92da:	2378      	movs	r3, #120	; 0x78
    92dc:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    92e0:	2330      	movs	r3, #48	; 0x30
    92e2:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    92e6:	9b03      	ldr	r3, [sp, #12]
    92e8:	2b63      	cmp	r3, #99	; 0x63
    92ea:	f048 0602 	orr.w	r6, r8, #2
    92ee:	f300 80a6 	bgt.w	943e <_svfprintf_r+0x197e>
    92f2:	2300      	movs	r3, #0
    92f4:	9307      	str	r3, [sp, #28]
    92f6:	ac37      	add	r4, sp, #220	; 0xdc
    92f8:	ee18 3a90 	vmov	r3, s17
    92fc:	2b00      	cmp	r3, #0
    92fe:	f448 7881 	orr.w	r8, r8, #258	; 0x102
    9302:	db2b      	blt.n	935c <_svfprintf_r+0x189c>
    9304:	eeb0 ab48 	vmov.f64	d10, d8
    9308:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    930a:	f023 0520 	bic.w	r5, r3, #32
    930e:	2300      	movs	r3, #0
    9310:	9309      	str	r3, [sp, #36]	; 0x24
    9312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9314:	2b61      	cmp	r3, #97	; 0x61
    9316:	f47f aaad 	bne.w	8874 <_svfprintf_r+0xdb4>
    931a:	eeb0 0b4a 	vmov.f64	d0, d10
    931e:	a81b      	add	r0, sp, #108	; 0x6c
    9320:	f000 ff72 	bl	a208 <frexp>
    9324:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    9328:	ee20 0b07 	vmul.f64	d0, d0, d7
    932c:	eeb5 0b40 	vcmp.f64	d0, #0.0
    9330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9334:	d101      	bne.n	933a <_svfprintf_r+0x187a>
    9336:	2301      	movs	r3, #1
    9338:	931b      	str	r3, [sp, #108]	; 0x6c
    933a:	4846      	ldr	r0, [pc, #280]	; (9454 <_svfprintf_r+0x1994>)
    933c:	e721      	b.n	9182 <_svfprintf_r+0x16c2>
    933e:	ee1b 1a10 	vmov	r1, s22
    9342:	aa24      	add	r2, sp, #144	; 0x90
    9344:	4658      	mov	r0, fp
    9346:	f001 ff15 	bl	b174 <__ssprint_r>
    934a:	2800      	cmp	r0, #0
    934c:	f47f a81d 	bne.w	838a <_svfprintf_r+0x8ca>
    9350:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9352:	9a26      	ldr	r2, [sp, #152]	; 0x98
    9354:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    9358:	f7ff b94e 	b.w	85f8 <_svfprintf_r+0xb38>
    935c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    935e:	f023 0520 	bic.w	r5, r3, #32
    9362:	232d      	movs	r3, #45	; 0x2d
    9364:	9309      	str	r3, [sp, #36]	; 0x24
    9366:	eeb1 ab48 	vneg.f64	d10, d8
    936a:	e7d2      	b.n	9312 <_svfprintf_r+0x1852>
    936c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    936e:	920c      	str	r2, [sp, #48]	; 0x30
    9370:	2a00      	cmp	r2, #0
    9372:	f006 0301 	and.w	r3, r6, #1
    9376:	f340 810d 	ble.w	9594 <_svfprintf_r+0x1ad4>
    937a:	9903      	ldr	r1, [sp, #12]
    937c:	430b      	orrs	r3, r1
    937e:	f040 80cf 	bne.w	9520 <_svfprintf_r+0x1a60>
    9382:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9384:	9305      	str	r3, [sp, #20]
    9386:	2366      	movs	r3, #102	; 0x66
    9388:	930b      	str	r3, [sp, #44]	; 0x2c
    938a:	0572      	lsls	r2, r6, #21
    938c:	f100 80a3 	bmi.w	94d6 <_svfprintf_r+0x1a16>
    9390:	9b05      	ldr	r3, [sp, #20]
    9392:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    9396:	9302      	str	r3, [sp, #8]
    9398:	e76c      	b.n	9274 <_svfprintf_r+0x17b4>
    939a:	ee1b 1a10 	vmov	r1, s22
    939e:	aa24      	add	r2, sp, #144	; 0x90
    93a0:	4658      	mov	r0, fp
    93a2:	f001 fee7 	bl	b174 <__ssprint_r>
    93a6:	2800      	cmp	r0, #0
    93a8:	f47e afef 	bne.w	838a <_svfprintf_r+0x8ca>
    93ac:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    93ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    93b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    93b2:	1b1c      	subs	r4, r3, r4
    93b4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    93b8:	f7ff b936 	b.w	8628 <_svfprintf_r+0xb68>
    93bc:	2358      	movs	r3, #88	; 0x58
    93be:	e78d      	b.n	92dc <_svfprintf_r+0x181c>
    93c0:	2200      	movs	r2, #0
    93c2:	9203      	str	r2, [sp, #12]
    93c4:	f7fe bbda 	b.w	7b7c <_svfprintf_r+0xbc>
    93c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    93ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
    93cc:	189a      	adds	r2, r3, r2
    93ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    93d0:	9205      	str	r2, [sp, #20]
    93d2:	2b00      	cmp	r3, #0
    93d4:	f340 80ab 	ble.w	952e <_svfprintf_r+0x1a6e>
    93d8:	2367      	movs	r3, #103	; 0x67
    93da:	930b      	str	r3, [sp, #44]	; 0x2c
    93dc:	e7d5      	b.n	938a <_svfprintf_r+0x18ca>
    93de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    93e0:	320f      	adds	r2, #15
    93e2:	b2d2      	uxtb	r2, r2
    93e4:	2101      	movs	r1, #1
    93e6:	e618      	b.n	901a <_svfprintf_r+0x155a>
    93e8:	18a0      	adds	r0, r4, r2
    93ea:	e5fb      	b.n	8fe4 <_svfprintf_r+0x1524>
    93ec:	2900      	cmp	r1, #0
    93ee:	f040 80a8 	bne.w	9542 <_svfprintf_r+0x1a82>
    93f2:	2230      	movs	r2, #48	; 0x30
    93f4:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
    93f8:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
    93fc:	3330      	adds	r3, #48	; 0x30
    93fe:	f802 3b01 	strb.w	r3, [r2], #1
    9402:	ab1e      	add	r3, sp, #120	; 0x78
    9404:	1ad3      	subs	r3, r2, r3
    9406:	9314      	str	r3, [sp, #80]	; 0x50
    9408:	e649      	b.n	909e <_svfprintf_r+0x15de>
    940a:	3301      	adds	r3, #1
    940c:	4912      	ldr	r1, [pc, #72]	; (9458 <_svfprintf_r+0x1998>)
    940e:	f8ca 5004 	str.w	r5, [sl, #4]
    9412:	442a      	add	r2, r5
    9414:	2b07      	cmp	r3, #7
    9416:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    941a:	f8ca 1000 	str.w	r1, [sl]
    941e:	f77f ac33 	ble.w	8c88 <_svfprintf_r+0x11c8>
    9422:	ee1b 1a10 	vmov	r1, s22
    9426:	aa24      	add	r2, sp, #144	; 0x90
    9428:	4658      	mov	r0, fp
    942a:	f001 fea3 	bl	b174 <__ssprint_r>
    942e:	2800      	cmp	r0, #0
    9430:	f47e afab 	bne.w	838a <_svfprintf_r+0x8ca>
    9434:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    9438:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    943c:	e426      	b.n	8c8c <_svfprintf_r+0x11cc>
    943e:	1c59      	adds	r1, r3, #1
    9440:	4658      	mov	r0, fp
    9442:	f7fd f9c1 	bl	67c8 <_malloc_r>
    9446:	4604      	mov	r4, r0
    9448:	b350      	cbz	r0, 94a0 <_svfprintf_r+0x19e0>
    944a:	9007      	str	r0, [sp, #28]
    944c:	e754      	b.n	92f8 <_svfprintf_r+0x1838>
    944e:	bf00      	nop
    9450:	20018c4c 	.word	0x20018c4c
    9454:	20018c38 	.word	0x20018c38
    9458:	200190a0 	.word	0x200190a0
    945c:	66666667 	.word	0x66666667
    9460:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    9464:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    9468:	f890 c00f 	ldrb.w	ip, [r0, #15]
    946c:	4561      	cmp	r1, ip
    946e:	4613      	mov	r3, r2
    9470:	d10a      	bne.n	9488 <_svfprintf_r+0x19c8>
    9472:	f04f 0e30 	mov.w	lr, #48	; 0x30
    9476:	f803 ec01 	strb.w	lr, [r3, #-1]
    947a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    947c:	1e59      	subs	r1, r3, #1
    947e:	9122      	str	r1, [sp, #136]	; 0x88
    9480:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    9484:	458c      	cmp	ip, r1
    9486:	d0f6      	beq.n	9476 <_svfprintf_r+0x19b6>
    9488:	2939      	cmp	r1, #57	; 0x39
    948a:	bf16      	itet	ne
    948c:	3101      	addne	r1, #1
    948e:	7a81      	ldrbeq	r1, [r0, #10]
    9490:	b2c9      	uxtbne	r1, r1
    9492:	f803 1c01 	strb.w	r1, [r3, #-1]
    9496:	e6ae      	b.n	91f6 <_svfprintf_r+0x1736>
    9498:	2300      	movs	r3, #0
    949a:	4690      	mov	r8, r2
    949c:	9307      	str	r3, [sp, #28]
    949e:	e760      	b.n	9362 <_svfprintf_r+0x18a2>
    94a0:	ee1b 2a10 	vmov	r2, s22
    94a4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    94a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    94ac:	8193      	strh	r3, [r2, #12]
    94ae:	f7fe bc16 	b.w	7cde <_svfprintf_r+0x21e>
    94b2:	07f5      	lsls	r5, r6, #31
    94b4:	f57f adfe 	bpl.w	90b4 <_svfprintf_r+0x15f4>
    94b8:	e5f8      	b.n	90ac <_svfprintf_r+0x15ec>
    94ba:	9305      	str	r3, [sp, #20]
    94bc:	e6ce      	b.n	925c <_svfprintf_r+0x179c>
    94be:	eeb5 ab40 	vcmp.f64	d10, #0.0
    94c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    94c6:	f43f ad8b 	beq.w	8fe0 <_svfprintf_r+0x1520>
    94ca:	f1c2 0201 	rsb	r2, r2, #1
    94ce:	921b      	str	r2, [sp, #108]	; 0x6c
    94d0:	e587      	b.n	8fe2 <_svfprintf_r+0x1522>
    94d2:	2367      	movs	r3, #103	; 0x67
    94d4:	930b      	str	r3, [sp, #44]	; 0x2c
    94d6:	9913      	ldr	r1, [sp, #76]	; 0x4c
    94d8:	780b      	ldrb	r3, [r1, #0]
    94da:	2bff      	cmp	r3, #255	; 0xff
    94dc:	d079      	beq.n	95d2 <_svfprintf_r+0x1b12>
    94de:	2500      	movs	r5, #0
    94e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    94e2:	4628      	mov	r0, r5
    94e4:	e003      	b.n	94ee <_svfprintf_r+0x1a2e>
    94e6:	3001      	adds	r0, #1
    94e8:	3101      	adds	r1, #1
    94ea:	2bff      	cmp	r3, #255	; 0xff
    94ec:	d008      	beq.n	9500 <_svfprintf_r+0x1a40>
    94ee:	4293      	cmp	r3, r2
    94f0:	da06      	bge.n	9500 <_svfprintf_r+0x1a40>
    94f2:	1ad2      	subs	r2, r2, r3
    94f4:	784b      	ldrb	r3, [r1, #1]
    94f6:	2b00      	cmp	r3, #0
    94f8:	d1f5      	bne.n	94e6 <_svfprintf_r+0x1a26>
    94fa:	780b      	ldrb	r3, [r1, #0]
    94fc:	3501      	adds	r5, #1
    94fe:	e7f4      	b.n	94ea <_svfprintf_r+0x1a2a>
    9500:	920c      	str	r2, [sp, #48]	; 0x30
    9502:	9113      	str	r1, [sp, #76]	; 0x4c
    9504:	900d      	str	r0, [sp, #52]	; 0x34
    9506:	950f      	str	r5, [sp, #60]	; 0x3c
    9508:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    950a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    950c:	9916      	ldr	r1, [sp, #88]	; 0x58
    950e:	4413      	add	r3, r2
    9510:	9a05      	ldr	r2, [sp, #20]
    9512:	fb01 2303 	mla	r3, r1, r3, r2
    9516:	9305      	str	r3, [sp, #20]
    9518:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    951c:	9302      	str	r3, [sp, #8]
    951e:	e5d5      	b.n	90cc <_svfprintf_r+0x160c>
    9520:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9522:	18d3      	adds	r3, r2, r3
    9524:	4419      	add	r1, r3
    9526:	2366      	movs	r3, #102	; 0x66
    9528:	9105      	str	r1, [sp, #20]
    952a:	930b      	str	r3, [sp, #44]	; 0x2c
    952c:	e72d      	b.n	938a <_svfprintf_r+0x18ca>
    952e:	f1c3 0301 	rsb	r3, r3, #1
    9532:	441a      	add	r2, r3
    9534:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    9538:	9302      	str	r3, [sp, #8]
    953a:	2367      	movs	r3, #103	; 0x67
    953c:	9205      	str	r2, [sp, #20]
    953e:	930b      	str	r3, [sp, #44]	; 0x2c
    9540:	e698      	b.n	9274 <_svfprintf_r+0x17b4>
    9542:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    9546:	e759      	b.n	93fc <_svfprintf_r+0x193c>
    9548:	9b03      	ldr	r3, [sp, #12]
    954a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    954e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    9552:	9305      	str	r3, [sp, #20]
    9554:	e4b4      	b.n	8ec0 <_svfprintf_r+0x1400>
    9556:	ee18 3a90 	vmov	r3, s17
    955a:	2b00      	cmp	r3, #0
    955c:	bfb4      	ite	lt
    955e:	212d      	movlt	r1, #45	; 0x2d
    9560:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
    9564:	4c25      	ldr	r4, [pc, #148]	; (95fc <_svfprintf_r+0x1b3c>)
    9566:	4b26      	ldr	r3, [pc, #152]	; (9600 <_svfprintf_r+0x1b40>)
    9568:	bfb8      	it	lt
    956a:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
    956e:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    9572:	f7fe bc79 	b.w	7e68 <_svfprintf_r+0x3a8>
    9576:	9b03      	ldr	r3, [sp, #12]
    9578:	9302      	str	r3, [sp, #8]
    957a:	9305      	str	r3, [sp, #20]
    957c:	2373      	movs	r3, #115	; 0x73
    957e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    9582:	9003      	str	r0, [sp, #12]
    9584:	900f      	str	r0, [sp, #60]	; 0x3c
    9586:	900d      	str	r0, [sp, #52]	; 0x34
    9588:	930b      	str	r3, [sp, #44]	; 0x2c
    958a:	f7fe bc7a 	b.w	7e82 <_svfprintf_r+0x3c2>
    958e:	2302      	movs	r3, #2
    9590:	9314      	str	r3, [sp, #80]	; 0x50
    9592:	e584      	b.n	909e <_svfprintf_r+0x15de>
    9594:	9a03      	ldr	r2, [sp, #12]
    9596:	4313      	orrs	r3, r2
    9598:	d105      	bne.n	95a6 <_svfprintf_r+0x1ae6>
    959a:	2301      	movs	r3, #1
    959c:	2266      	movs	r2, #102	; 0x66
    959e:	9302      	str	r3, [sp, #8]
    95a0:	920b      	str	r2, [sp, #44]	; 0x2c
    95a2:	9305      	str	r3, [sp, #20]
    95a4:	e666      	b.n	9274 <_svfprintf_r+0x17b4>
    95a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    95a8:	3301      	adds	r3, #1
    95aa:	441a      	add	r2, r3
    95ac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    95b0:	9302      	str	r3, [sp, #8]
    95b2:	2366      	movs	r3, #102	; 0x66
    95b4:	9205      	str	r2, [sp, #20]
    95b6:	930b      	str	r3, [sp, #44]	; 0x2c
    95b8:	e65c      	b.n	9274 <_svfprintf_r+0x17b4>
    95ba:	9a08      	ldr	r2, [sp, #32]
    95bc:	f899 3001 	ldrb.w	r3, [r9, #1]
    95c0:	4689      	mov	r9, r1
    95c2:	f852 1b04 	ldr.w	r1, [r2], #4
    95c6:	9208      	str	r2, [sp, #32]
    95c8:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
    95cc:	9103      	str	r1, [sp, #12]
    95ce:	f7fe bad3 	b.w	7b78 <_svfprintf_r+0xb8>
    95d2:	2300      	movs	r3, #0
    95d4:	930f      	str	r3, [sp, #60]	; 0x3c
    95d6:	930d      	str	r3, [sp, #52]	; 0x34
    95d8:	e796      	b.n	9508 <_svfprintf_r+0x1a48>
    95da:	230c      	movs	r3, #12
    95dc:	f8cb 3000 	str.w	r3, [fp]
    95e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    95e4:	9304      	str	r3, [sp, #16]
    95e6:	f7fe bb81 	b.w	7cec <_svfprintf_r+0x22c>
    95ea:	ee1b 2a10 	vmov	r2, s22
    95ee:	8993      	ldrh	r3, [r2, #12]
    95f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    95f4:	8193      	strh	r3, [r2, #12]
    95f6:	f7fe bec8 	b.w	838a <_svfprintf_r+0x8ca>
    95fa:	bf00      	nop
    95fc:	20018c30 	.word	0x20018c30
    9600:	20018c34 	.word	0x20018c34

00009604 <_Balloc>:
    9604:	6c43      	ldr	r3, [r0, #68]	; 0x44
    9606:	b570      	push	{r4, r5, r6, lr}
    9608:	4605      	mov	r5, r0
    960a:	460c      	mov	r4, r1
    960c:	b14b      	cbz	r3, 9622 <_Balloc+0x1e>
    960e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    9612:	b180      	cbz	r0, 9636 <_Balloc+0x32>
    9614:	6802      	ldr	r2, [r0, #0]
    9616:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    961a:	2300      	movs	r3, #0
    961c:	e9c0 3303 	strd	r3, r3, [r0, #12]
    9620:	bd70      	pop	{r4, r5, r6, pc}
    9622:	2221      	movs	r2, #33	; 0x21
    9624:	2104      	movs	r1, #4
    9626:	f000 fe4b 	bl	a2c0 <_calloc_r>
    962a:	4603      	mov	r3, r0
    962c:	6468      	str	r0, [r5, #68]	; 0x44
    962e:	2800      	cmp	r0, #0
    9630:	d1ed      	bne.n	960e <_Balloc+0xa>
    9632:	2000      	movs	r0, #0
    9634:	bd70      	pop	{r4, r5, r6, pc}
    9636:	2101      	movs	r1, #1
    9638:	fa01 f604 	lsl.w	r6, r1, r4
    963c:	1d72      	adds	r2, r6, #5
    963e:	0092      	lsls	r2, r2, #2
    9640:	4628      	mov	r0, r5
    9642:	f000 fe3d 	bl	a2c0 <_calloc_r>
    9646:	2800      	cmp	r0, #0
    9648:	d0f3      	beq.n	9632 <_Balloc+0x2e>
    964a:	e9c0 4601 	strd	r4, r6, [r0, #4]
    964e:	e7e4      	b.n	961a <_Balloc+0x16>

00009650 <_Bfree>:
    9650:	b131      	cbz	r1, 9660 <_Bfree+0x10>
    9652:	6c43      	ldr	r3, [r0, #68]	; 0x44
    9654:	684a      	ldr	r2, [r1, #4]
    9656:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    965a:	6008      	str	r0, [r1, #0]
    965c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    9660:	4770      	bx	lr
    9662:	bf00      	nop

00009664 <__multadd>:
    9664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9668:	690e      	ldr	r6, [r1, #16]
    966a:	4680      	mov	r8, r0
    966c:	460f      	mov	r7, r1
    966e:	461d      	mov	r5, r3
    9670:	f101 0e14 	add.w	lr, r1, #20
    9674:	2000      	movs	r0, #0
    9676:	f8de 1000 	ldr.w	r1, [lr]
    967a:	b28c      	uxth	r4, r1
    967c:	fb02 5304 	mla	r3, r2, r4, r5
    9680:	0c09      	lsrs	r1, r1, #16
    9682:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    9686:	fb02 cc01 	mla	ip, r2, r1, ip
    968a:	3001      	adds	r0, #1
    968c:	b29c      	uxth	r4, r3
    968e:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    9692:	4286      	cmp	r6, r0
    9694:	f84e 4b04 	str.w	r4, [lr], #4
    9698:	ea4f 451c 	mov.w	r5, ip, lsr #16
    969c:	dceb      	bgt.n	9676 <__multadd+0x12>
    969e:	b13d      	cbz	r5, 96b0 <__multadd+0x4c>
    96a0:	68bb      	ldr	r3, [r7, #8]
    96a2:	42b3      	cmp	r3, r6
    96a4:	dd07      	ble.n	96b6 <__multadd+0x52>
    96a6:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    96aa:	3601      	adds	r6, #1
    96ac:	615d      	str	r5, [r3, #20]
    96ae:	613e      	str	r6, [r7, #16]
    96b0:	4638      	mov	r0, r7
    96b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    96b6:	6879      	ldr	r1, [r7, #4]
    96b8:	4640      	mov	r0, r8
    96ba:	3101      	adds	r1, #1
    96bc:	f7ff ffa2 	bl	9604 <_Balloc>
    96c0:	4604      	mov	r4, r0
    96c2:	b1b0      	cbz	r0, 96f2 <__multadd+0x8e>
    96c4:	693a      	ldr	r2, [r7, #16]
    96c6:	3202      	adds	r2, #2
    96c8:	f107 010c 	add.w	r1, r7, #12
    96cc:	0092      	lsls	r2, r2, #2
    96ce:	300c      	adds	r0, #12
    96d0:	f7fb fa9e 	bl	4c10 <memcpy>
    96d4:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    96d8:	687a      	ldr	r2, [r7, #4]
    96da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    96de:	6039      	str	r1, [r7, #0]
    96e0:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    96e4:	4627      	mov	r7, r4
    96e6:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    96ea:	3601      	adds	r6, #1
    96ec:	615d      	str	r5, [r3, #20]
    96ee:	613e      	str	r6, [r7, #16]
    96f0:	e7de      	b.n	96b0 <__multadd+0x4c>
    96f2:	4b03      	ldr	r3, [pc, #12]	; (9700 <__multadd+0x9c>)
    96f4:	4803      	ldr	r0, [pc, #12]	; (9704 <__multadd+0xa0>)
    96f6:	4622      	mov	r2, r4
    96f8:	21ba      	movs	r1, #186	; 0xba
    96fa:	f000 fdc1 	bl	a280 <__assert_func>
    96fe:	bf00      	nop
    9700:	20018a38 	.word	0x20018a38
    9704:	20018a4c 	.word	0x20018a4c

00009708 <__hi0bits>:
    9708:	0c03      	lsrs	r3, r0, #16
    970a:	041b      	lsls	r3, r3, #16
    970c:	b9d3      	cbnz	r3, 9744 <__hi0bits+0x3c>
    970e:	0400      	lsls	r0, r0, #16
    9710:	2310      	movs	r3, #16
    9712:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    9716:	bf04      	itt	eq
    9718:	0200      	lsleq	r0, r0, #8
    971a:	3308      	addeq	r3, #8
    971c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    9720:	bf04      	itt	eq
    9722:	0100      	lsleq	r0, r0, #4
    9724:	3304      	addeq	r3, #4
    9726:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    972a:	bf04      	itt	eq
    972c:	0080      	lsleq	r0, r0, #2
    972e:	3302      	addeq	r3, #2
    9730:	2800      	cmp	r0, #0
    9732:	db05      	blt.n	9740 <__hi0bits+0x38>
    9734:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    9738:	f103 0301 	add.w	r3, r3, #1
    973c:	bf08      	it	eq
    973e:	2320      	moveq	r3, #32
    9740:	4618      	mov	r0, r3
    9742:	4770      	bx	lr
    9744:	2300      	movs	r3, #0
    9746:	e7e4      	b.n	9712 <__hi0bits+0xa>

00009748 <__lo0bits>:
    9748:	6803      	ldr	r3, [r0, #0]
    974a:	f013 0207 	ands.w	r2, r3, #7
    974e:	d008      	beq.n	9762 <__lo0bits+0x1a>
    9750:	07d9      	lsls	r1, r3, #31
    9752:	d41f      	bmi.n	9794 <__lo0bits+0x4c>
    9754:	079a      	lsls	r2, r3, #30
    9756:	d522      	bpl.n	979e <__lo0bits+0x56>
    9758:	085b      	lsrs	r3, r3, #1
    975a:	6003      	str	r3, [r0, #0]
    975c:	2201      	movs	r2, #1
    975e:	4610      	mov	r0, r2
    9760:	4770      	bx	lr
    9762:	b299      	uxth	r1, r3
    9764:	b909      	cbnz	r1, 976a <__lo0bits+0x22>
    9766:	0c1b      	lsrs	r3, r3, #16
    9768:	2210      	movs	r2, #16
    976a:	b2d9      	uxtb	r1, r3
    976c:	b909      	cbnz	r1, 9772 <__lo0bits+0x2a>
    976e:	3208      	adds	r2, #8
    9770:	0a1b      	lsrs	r3, r3, #8
    9772:	0719      	lsls	r1, r3, #28
    9774:	bf04      	itt	eq
    9776:	091b      	lsreq	r3, r3, #4
    9778:	3204      	addeq	r2, #4
    977a:	0799      	lsls	r1, r3, #30
    977c:	bf04      	itt	eq
    977e:	089b      	lsreq	r3, r3, #2
    9780:	3202      	addeq	r2, #2
    9782:	07d9      	lsls	r1, r3, #31
    9784:	d403      	bmi.n	978e <__lo0bits+0x46>
    9786:	085b      	lsrs	r3, r3, #1
    9788:	f102 0201 	add.w	r2, r2, #1
    978c:	d005      	beq.n	979a <__lo0bits+0x52>
    978e:	6003      	str	r3, [r0, #0]
    9790:	4610      	mov	r0, r2
    9792:	4770      	bx	lr
    9794:	2200      	movs	r2, #0
    9796:	4610      	mov	r0, r2
    9798:	4770      	bx	lr
    979a:	2220      	movs	r2, #32
    979c:	e7df      	b.n	975e <__lo0bits+0x16>
    979e:	089b      	lsrs	r3, r3, #2
    97a0:	2202      	movs	r2, #2
    97a2:	6003      	str	r3, [r0, #0]
    97a4:	4610      	mov	r0, r2
    97a6:	4770      	bx	lr

000097a8 <__i2b>:
    97a8:	b538      	push	{r3, r4, r5, lr}
    97aa:	6c43      	ldr	r3, [r0, #68]	; 0x44
    97ac:	4604      	mov	r4, r0
    97ae:	460d      	mov	r5, r1
    97b0:	b14b      	cbz	r3, 97c6 <__i2b+0x1e>
    97b2:	6858      	ldr	r0, [r3, #4]
    97b4:	b1b0      	cbz	r0, 97e4 <__i2b+0x3c>
    97b6:	6802      	ldr	r2, [r0, #0]
    97b8:	605a      	str	r2, [r3, #4]
    97ba:	2200      	movs	r2, #0
    97bc:	2301      	movs	r3, #1
    97be:	e9c0 3504 	strd	r3, r5, [r0, #16]
    97c2:	60c2      	str	r2, [r0, #12]
    97c4:	bd38      	pop	{r3, r4, r5, pc}
    97c6:	2221      	movs	r2, #33	; 0x21
    97c8:	2104      	movs	r1, #4
    97ca:	f000 fd79 	bl	a2c0 <_calloc_r>
    97ce:	4603      	mov	r3, r0
    97d0:	6460      	str	r0, [r4, #68]	; 0x44
    97d2:	2800      	cmp	r0, #0
    97d4:	d1ed      	bne.n	97b2 <__i2b+0xa>
    97d6:	4b09      	ldr	r3, [pc, #36]	; (97fc <__i2b+0x54>)
    97d8:	4809      	ldr	r0, [pc, #36]	; (9800 <__i2b+0x58>)
    97da:	2200      	movs	r2, #0
    97dc:	f240 1145 	movw	r1, #325	; 0x145
    97e0:	f000 fd4e 	bl	a280 <__assert_func>
    97e4:	221c      	movs	r2, #28
    97e6:	2101      	movs	r1, #1
    97e8:	4620      	mov	r0, r4
    97ea:	f000 fd69 	bl	a2c0 <_calloc_r>
    97ee:	2800      	cmp	r0, #0
    97f0:	d0f1      	beq.n	97d6 <__i2b+0x2e>
    97f2:	2201      	movs	r2, #1
    97f4:	2302      	movs	r3, #2
    97f6:	e9c0 2301 	strd	r2, r3, [r0, #4]
    97fa:	e7de      	b.n	97ba <__i2b+0x12>
    97fc:	20018a38 	.word	0x20018a38
    9800:	20018a4c 	.word	0x20018a4c

00009804 <__multiply>:
    9804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9808:	690e      	ldr	r6, [r1, #16]
    980a:	6915      	ldr	r5, [r2, #16]
    980c:	42ae      	cmp	r6, r5
    980e:	b085      	sub	sp, #20
    9810:	4688      	mov	r8, r1
    9812:	4614      	mov	r4, r2
    9814:	db05      	blt.n	9822 <__multiply+0x1e>
    9816:	462a      	mov	r2, r5
    9818:	4623      	mov	r3, r4
    981a:	4635      	mov	r5, r6
    981c:	460c      	mov	r4, r1
    981e:	4616      	mov	r6, r2
    9820:	4698      	mov	r8, r3
    9822:	68a3      	ldr	r3, [r4, #8]
    9824:	6861      	ldr	r1, [r4, #4]
    9826:	19af      	adds	r7, r5, r6
    9828:	42bb      	cmp	r3, r7
    982a:	bfb8      	it	lt
    982c:	3101      	addlt	r1, #1
    982e:	f7ff fee9 	bl	9604 <_Balloc>
    9832:	9001      	str	r0, [sp, #4]
    9834:	2800      	cmp	r0, #0
    9836:	f000 8087 	beq.w	9948 <__multiply+0x144>
    983a:	9b01      	ldr	r3, [sp, #4]
    983c:	f103 0914 	add.w	r9, r3, #20
    9840:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    9844:	45d1      	cmp	r9, sl
    9846:	d205      	bcs.n	9854 <__multiply+0x50>
    9848:	464b      	mov	r3, r9
    984a:	2200      	movs	r2, #0
    984c:	f843 2b04 	str.w	r2, [r3], #4
    9850:	459a      	cmp	sl, r3
    9852:	d8fb      	bhi.n	984c <__multiply+0x48>
    9854:	f108 0814 	add.w	r8, r8, #20
    9858:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    985c:	f104 0314 	add.w	r3, r4, #20
    9860:	45d8      	cmp	r8, fp
    9862:	461a      	mov	r2, r3
    9864:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    9868:	d25f      	bcs.n	992a <__multiply+0x126>
    986a:	1b2b      	subs	r3, r5, r4
    986c:	3b15      	subs	r3, #21
    986e:	f023 0303 	bic.w	r3, r3, #3
    9872:	3304      	adds	r3, #4
    9874:	3415      	adds	r4, #21
    9876:	42a5      	cmp	r5, r4
    9878:	bf38      	it	cc
    987a:	2304      	movcc	r3, #4
    987c:	e9cd a702 	strd	sl, r7, [sp, #8]
    9880:	46ac      	mov	ip, r5
    9882:	461f      	mov	r7, r3
    9884:	4692      	mov	sl, r2
    9886:	e005      	b.n	9894 <__multiply+0x90>
    9888:	0c09      	lsrs	r1, r1, #16
    988a:	d129      	bne.n	98e0 <__multiply+0xdc>
    988c:	45c3      	cmp	fp, r8
    988e:	f109 0904 	add.w	r9, r9, #4
    9892:	d948      	bls.n	9926 <__multiply+0x122>
    9894:	f858 1b04 	ldr.w	r1, [r8], #4
    9898:	b28d      	uxth	r5, r1
    989a:	2d00      	cmp	r5, #0
    989c:	d0f4      	beq.n	9888 <__multiply+0x84>
    989e:	4656      	mov	r6, sl
    98a0:	464c      	mov	r4, r9
    98a2:	2300      	movs	r3, #0
    98a4:	f856 1b04 	ldr.w	r1, [r6], #4
    98a8:	6822      	ldr	r2, [r4, #0]
    98aa:	fa1f fe81 	uxth.w	lr, r1
    98ae:	b290      	uxth	r0, r2
    98b0:	0c09      	lsrs	r1, r1, #16
    98b2:	fb05 000e 	mla	r0, r5, lr, r0
    98b6:	0c12      	lsrs	r2, r2, #16
    98b8:	4403      	add	r3, r0
    98ba:	fb05 2201 	mla	r2, r5, r1, r2
    98be:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    98c2:	b29b      	uxth	r3, r3
    98c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    98c8:	45b4      	cmp	ip, r6
    98ca:	f844 3b04 	str.w	r3, [r4], #4
    98ce:	ea4f 4312 	mov.w	r3, r2, lsr #16
    98d2:	d8e7      	bhi.n	98a4 <__multiply+0xa0>
    98d4:	f849 3007 	str.w	r3, [r9, r7]
    98d8:	f858 1c04 	ldr.w	r1, [r8, #-4]
    98dc:	0c09      	lsrs	r1, r1, #16
    98de:	d0d5      	beq.n	988c <__multiply+0x88>
    98e0:	f8d9 3000 	ldr.w	r3, [r9]
    98e4:	4650      	mov	r0, sl
    98e6:	461a      	mov	r2, r3
    98e8:	464c      	mov	r4, r9
    98ea:	2600      	movs	r6, #0
    98ec:	8805      	ldrh	r5, [r0, #0]
    98ee:	0c12      	lsrs	r2, r2, #16
    98f0:	fb01 2205 	mla	r2, r1, r5, r2
    98f4:	4416      	add	r6, r2
    98f6:	b29b      	uxth	r3, r3
    98f8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    98fc:	f844 3b04 	str.w	r3, [r4], #4
    9900:	f850 5b04 	ldr.w	r5, [r0], #4
    9904:	6822      	ldr	r2, [r4, #0]
    9906:	0c2d      	lsrs	r5, r5, #16
    9908:	b293      	uxth	r3, r2
    990a:	fb01 3305 	mla	r3, r1, r5, r3
    990e:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    9912:	4584      	cmp	ip, r0
    9914:	ea4f 4613 	mov.w	r6, r3, lsr #16
    9918:	d8e8      	bhi.n	98ec <__multiply+0xe8>
    991a:	45c3      	cmp	fp, r8
    991c:	f849 3007 	str.w	r3, [r9, r7]
    9920:	f109 0904 	add.w	r9, r9, #4
    9924:	d8b6      	bhi.n	9894 <__multiply+0x90>
    9926:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    992a:	2f00      	cmp	r7, #0
    992c:	dc02      	bgt.n	9934 <__multiply+0x130>
    992e:	e005      	b.n	993c <__multiply+0x138>
    9930:	3f01      	subs	r7, #1
    9932:	d003      	beq.n	993c <__multiply+0x138>
    9934:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    9938:	2b00      	cmp	r3, #0
    993a:	d0f9      	beq.n	9930 <__multiply+0x12c>
    993c:	9b01      	ldr	r3, [sp, #4]
    993e:	4618      	mov	r0, r3
    9940:	611f      	str	r7, [r3, #16]
    9942:	b005      	add	sp, #20
    9944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9948:	4b03      	ldr	r3, [pc, #12]	; (9958 <__multiply+0x154>)
    994a:	4804      	ldr	r0, [pc, #16]	; (995c <__multiply+0x158>)
    994c:	9a01      	ldr	r2, [sp, #4]
    994e:	f44f 71b1 	mov.w	r1, #354	; 0x162
    9952:	f000 fc95 	bl	a280 <__assert_func>
    9956:	bf00      	nop
    9958:	20018a38 	.word	0x20018a38
    995c:	20018a4c 	.word	0x20018a4c

00009960 <__pow5mult>:
    9960:	f012 0303 	ands.w	r3, r2, #3
    9964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9968:	4614      	mov	r4, r2
    996a:	4606      	mov	r6, r0
    996c:	d132      	bne.n	99d4 <__pow5mult+0x74>
    996e:	460d      	mov	r5, r1
    9970:	10a4      	asrs	r4, r4, #2
    9972:	d020      	beq.n	99b6 <__pow5mult+0x56>
    9974:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    9978:	f1b8 0f00 	cmp.w	r8, #0
    997c:	d033      	beq.n	99e6 <__pow5mult+0x86>
    997e:	07e3      	lsls	r3, r4, #31
    9980:	f04f 0700 	mov.w	r7, #0
    9984:	d407      	bmi.n	9996 <__pow5mult+0x36>
    9986:	1064      	asrs	r4, r4, #1
    9988:	d015      	beq.n	99b6 <__pow5mult+0x56>
    998a:	f8d8 0000 	ldr.w	r0, [r8]
    998e:	b1a8      	cbz	r0, 99bc <__pow5mult+0x5c>
    9990:	4680      	mov	r8, r0
    9992:	07e3      	lsls	r3, r4, #31
    9994:	d5f7      	bpl.n	9986 <__pow5mult+0x26>
    9996:	4642      	mov	r2, r8
    9998:	4629      	mov	r1, r5
    999a:	4630      	mov	r0, r6
    999c:	f7ff ff32 	bl	9804 <__multiply>
    99a0:	b1b5      	cbz	r5, 99d0 <__pow5mult+0x70>
    99a2:	6869      	ldr	r1, [r5, #4]
    99a4:	6c73      	ldr	r3, [r6, #68]	; 0x44
    99a6:	1064      	asrs	r4, r4, #1
    99a8:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    99ac:	602a      	str	r2, [r5, #0]
    99ae:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    99b2:	4605      	mov	r5, r0
    99b4:	d1e9      	bne.n	998a <__pow5mult+0x2a>
    99b6:	4628      	mov	r0, r5
    99b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    99bc:	4642      	mov	r2, r8
    99be:	4641      	mov	r1, r8
    99c0:	4630      	mov	r0, r6
    99c2:	f7ff ff1f 	bl	9804 <__multiply>
    99c6:	f8c8 0000 	str.w	r0, [r8]
    99ca:	6007      	str	r7, [r0, #0]
    99cc:	4680      	mov	r8, r0
    99ce:	e7e0      	b.n	9992 <__pow5mult+0x32>
    99d0:	4605      	mov	r5, r0
    99d2:	e7d8      	b.n	9986 <__pow5mult+0x26>
    99d4:	3b01      	subs	r3, #1
    99d6:	4a0f      	ldr	r2, [pc, #60]	; (9a14 <__pow5mult+0xb4>)
    99d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    99dc:	2300      	movs	r3, #0
    99de:	f7ff fe41 	bl	9664 <__multadd>
    99e2:	4605      	mov	r5, r0
    99e4:	e7c4      	b.n	9970 <__pow5mult+0x10>
    99e6:	2101      	movs	r1, #1
    99e8:	4630      	mov	r0, r6
    99ea:	f7ff fe0b 	bl	9604 <_Balloc>
    99ee:	4680      	mov	r8, r0
    99f0:	b140      	cbz	r0, 9a04 <__pow5mult+0xa4>
    99f2:	2301      	movs	r3, #1
    99f4:	f240 2271 	movw	r2, #625	; 0x271
    99f8:	e9c0 3204 	strd	r3, r2, [r0, #16]
    99fc:	2300      	movs	r3, #0
    99fe:	6430      	str	r0, [r6, #64]	; 0x40
    9a00:	6003      	str	r3, [r0, #0]
    9a02:	e7bc      	b.n	997e <__pow5mult+0x1e>
    9a04:	4b04      	ldr	r3, [pc, #16]	; (9a18 <__pow5mult+0xb8>)
    9a06:	4805      	ldr	r0, [pc, #20]	; (9a1c <__pow5mult+0xbc>)
    9a08:	4642      	mov	r2, r8
    9a0a:	f240 1145 	movw	r1, #325	; 0x145
    9a0e:	f000 fc37 	bl	a280 <__assert_func>
    9a12:	bf00      	nop
    9a14:	20018f0c 	.word	0x20018f0c
    9a18:	20018a38 	.word	0x20018a38
    9a1c:	20018a4c 	.word	0x20018a4c

00009a20 <__lshift>:
    9a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9a24:	460d      	mov	r5, r1
    9a26:	4614      	mov	r4, r2
    9a28:	692f      	ldr	r7, [r5, #16]
    9a2a:	68ab      	ldr	r3, [r5, #8]
    9a2c:	6849      	ldr	r1, [r1, #4]
    9a2e:	eb07 1762 	add.w	r7, r7, r2, asr #5
    9a32:	1c7e      	adds	r6, r7, #1
    9a34:	429e      	cmp	r6, r3
    9a36:	4680      	mov	r8, r0
    9a38:	ea4f 1962 	mov.w	r9, r2, asr #5
    9a3c:	dd04      	ble.n	9a48 <__lshift+0x28>
    9a3e:	005b      	lsls	r3, r3, #1
    9a40:	429e      	cmp	r6, r3
    9a42:	f101 0101 	add.w	r1, r1, #1
    9a46:	dcfa      	bgt.n	9a3e <__lshift+0x1e>
    9a48:	4640      	mov	r0, r8
    9a4a:	f7ff fddb 	bl	9604 <_Balloc>
    9a4e:	4684      	mov	ip, r0
    9a50:	2800      	cmp	r0, #0
    9a52:	d052      	beq.n	9afa <__lshift+0xda>
    9a54:	f1b9 0f00 	cmp.w	r9, #0
    9a58:	f100 0214 	add.w	r2, r0, #20
    9a5c:	dd0e      	ble.n	9a7c <__lshift+0x5c>
    9a5e:	f109 0105 	add.w	r1, r9, #5
    9a62:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    9a66:	4613      	mov	r3, r2
    9a68:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    9a6c:	2000      	movs	r0, #0
    9a6e:	f843 0b04 	str.w	r0, [r3], #4
    9a72:	428b      	cmp	r3, r1
    9a74:	d1fb      	bne.n	9a6e <__lshift+0x4e>
    9a76:	f1ae 0314 	sub.w	r3, lr, #20
    9a7a:	441a      	add	r2, r3
    9a7c:	6929      	ldr	r1, [r5, #16]
    9a7e:	f105 0314 	add.w	r3, r5, #20
    9a82:	f014 0e1f 	ands.w	lr, r4, #31
    9a86:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    9a8a:	d02e      	beq.n	9aea <__lshift+0xca>
    9a8c:	f1ce 0920 	rsb	r9, lr, #32
    9a90:	4610      	mov	r0, r2
    9a92:	f04f 0a00 	mov.w	sl, #0
    9a96:	681c      	ldr	r4, [r3, #0]
    9a98:	fa04 f40e 	lsl.w	r4, r4, lr
    9a9c:	ea44 040a 	orr.w	r4, r4, sl
    9aa0:	f840 4b04 	str.w	r4, [r0], #4
    9aa4:	f853 4b04 	ldr.w	r4, [r3], #4
    9aa8:	4299      	cmp	r1, r3
    9aaa:	fa24 fa09 	lsr.w	sl, r4, r9
    9aae:	d8f2      	bhi.n	9a96 <__lshift+0x76>
    9ab0:	1b4b      	subs	r3, r1, r5
    9ab2:	3b15      	subs	r3, #21
    9ab4:	f023 0303 	bic.w	r3, r3, #3
    9ab8:	3304      	adds	r3, #4
    9aba:	f105 0015 	add.w	r0, r5, #21
    9abe:	4281      	cmp	r1, r0
    9ac0:	bf38      	it	cc
    9ac2:	2304      	movcc	r3, #4
    9ac4:	f1ba 0f00 	cmp.w	sl, #0
    9ac8:	bf18      	it	ne
    9aca:	4637      	movne	r7, r6
    9acc:	f842 a003 	str.w	sl, [r2, r3]
    9ad0:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    9ad4:	686a      	ldr	r2, [r5, #4]
    9ad6:	f8cc 7010 	str.w	r7, [ip, #16]
    9ada:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    9ade:	6029      	str	r1, [r5, #0]
    9ae0:	4660      	mov	r0, ip
    9ae2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    9ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9aea:	3a04      	subs	r2, #4
    9aec:	f853 0b04 	ldr.w	r0, [r3], #4
    9af0:	f842 0f04 	str.w	r0, [r2, #4]!
    9af4:	4299      	cmp	r1, r3
    9af6:	d8f9      	bhi.n	9aec <__lshift+0xcc>
    9af8:	e7ea      	b.n	9ad0 <__lshift+0xb0>
    9afa:	4b03      	ldr	r3, [pc, #12]	; (9b08 <__lshift+0xe8>)
    9afc:	4803      	ldr	r0, [pc, #12]	; (9b0c <__lshift+0xec>)
    9afe:	4662      	mov	r2, ip
    9b00:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    9b04:	f000 fbbc 	bl	a280 <__assert_func>
    9b08:	20018a38 	.word	0x20018a38
    9b0c:	20018a4c 	.word	0x20018a4c

00009b10 <__mcmp>:
    9b10:	690b      	ldr	r3, [r1, #16]
    9b12:	4684      	mov	ip, r0
    9b14:	6900      	ldr	r0, [r0, #16]
    9b16:	1ac0      	subs	r0, r0, r3
    9b18:	d116      	bne.n	9b48 <__mcmp+0x38>
    9b1a:	f10c 0c14 	add.w	ip, ip, #20
    9b1e:	3114      	adds	r1, #20
    9b20:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    9b24:	b410      	push	{r4}
    9b26:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    9b2a:	e001      	b.n	9b30 <__mcmp+0x20>
    9b2c:	4594      	cmp	ip, r2
    9b2e:	d208      	bcs.n	9b42 <__mcmp+0x32>
    9b30:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    9b34:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    9b38:	428c      	cmp	r4, r1
    9b3a:	d0f7      	beq.n	9b2c <__mcmp+0x1c>
    9b3c:	d205      	bcs.n	9b4a <__mcmp+0x3a>
    9b3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9b42:	f85d 4b04 	ldr.w	r4, [sp], #4
    9b46:	4770      	bx	lr
    9b48:	4770      	bx	lr
    9b4a:	2001      	movs	r0, #1
    9b4c:	f85d 4b04 	ldr.w	r4, [sp], #4
    9b50:	4770      	bx	lr
    9b52:	bf00      	nop

00009b54 <__mdiff>:
    9b54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b58:	690f      	ldr	r7, [r1, #16]
    9b5a:	6913      	ldr	r3, [r2, #16]
    9b5c:	1aff      	subs	r7, r7, r3
    9b5e:	2f00      	cmp	r7, #0
    9b60:	460e      	mov	r6, r1
    9b62:	4690      	mov	r8, r2
    9b64:	d17f      	bne.n	9c66 <__mdiff+0x112>
    9b66:	f101 0514 	add.w	r5, r1, #20
    9b6a:	3214      	adds	r2, #20
    9b6c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    9b70:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    9b74:	e001      	b.n	9b7a <__mdiff+0x26>
    9b76:	429d      	cmp	r5, r3
    9b78:	d278      	bcs.n	9c6c <__mdiff+0x118>
    9b7a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    9b7e:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    9b82:	42a1      	cmp	r1, r4
    9b84:	d0f7      	beq.n	9b76 <__mdiff+0x22>
    9b86:	d369      	bcc.n	9c5c <__mdiff+0x108>
    9b88:	6871      	ldr	r1, [r6, #4]
    9b8a:	f7ff fd3b 	bl	9604 <_Balloc>
    9b8e:	4681      	mov	r9, r0
    9b90:	2800      	cmp	r0, #0
    9b92:	d077      	beq.n	9c84 <__mdiff+0x130>
    9b94:	6935      	ldr	r5, [r6, #16]
    9b96:	f8d8 2010 	ldr.w	r2, [r8, #16]
    9b9a:	60c7      	str	r7, [r0, #12]
    9b9c:	f108 0e14 	add.w	lr, r8, #20
    9ba0:	f106 0014 	add.w	r0, r6, #20
    9ba4:	f109 0a14 	add.w	sl, r9, #20
    9ba8:	f106 0110 	add.w	r1, r6, #16
    9bac:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    9bb0:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    9bb4:	4656      	mov	r6, sl
    9bb6:	f04f 0c00 	mov.w	ip, #0
    9bba:	f85e 4b04 	ldr.w	r4, [lr], #4
    9bbe:	f851 bf04 	ldr.w	fp, [r1, #4]!
    9bc2:	b2a3      	uxth	r3, r4
    9bc4:	fa1c fc8b 	uxtah	ip, ip, fp
    9bc8:	ebac 0303 	sub.w	r3, ip, r3
    9bcc:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    9bd0:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    9bd4:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    9bd8:	b29b      	uxth	r3, r3
    9bda:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    9bde:	4572      	cmp	r2, lr
    9be0:	f846 3b04 	str.w	r3, [r6], #4
    9be4:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    9be8:	d8e7      	bhi.n	9bba <__mdiff+0x66>
    9bea:	eba2 0108 	sub.w	r1, r2, r8
    9bee:	3915      	subs	r1, #21
    9bf0:	f108 0815 	add.w	r8, r8, #21
    9bf4:	4542      	cmp	r2, r8
    9bf6:	f021 0403 	bic.w	r4, r1, #3
    9bfa:	f104 0404 	add.w	r4, r4, #4
    9bfe:	bf38      	it	cc
    9c00:	2404      	movcc	r4, #4
    9c02:	4420      	add	r0, r4
    9c04:	f021 0203 	bic.w	r2, r1, #3
    9c08:	bf38      	it	cc
    9c0a:	2200      	movcc	r2, #0
    9c0c:	4287      	cmp	r7, r0
    9c0e:	4452      	add	r2, sl
    9c10:	4454      	add	r4, sl
    9c12:	d918      	bls.n	9c46 <__mdiff+0xf2>
    9c14:	4626      	mov	r6, r4
    9c16:	4601      	mov	r1, r0
    9c18:	f851 3b04 	ldr.w	r3, [r1], #4
    9c1c:	fa1c fc83 	uxtah	ip, ip, r3
    9c20:	ea4f 422c 	mov.w	r2, ip, asr #16
    9c24:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    9c28:	fa1f fc8c 	uxth.w	ip, ip
    9c2c:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    9c30:	428f      	cmp	r7, r1
    9c32:	f846 3b04 	str.w	r3, [r6], #4
    9c36:	ea4f 4c22 	mov.w	ip, r2, asr #16
    9c3a:	d8ed      	bhi.n	9c18 <__mdiff+0xc4>
    9c3c:	3f01      	subs	r7, #1
    9c3e:	1a3f      	subs	r7, r7, r0
    9c40:	f027 0703 	bic.w	r7, r7, #3
    9c44:	19e2      	adds	r2, r4, r7
    9c46:	b923      	cbnz	r3, 9c52 <__mdiff+0xfe>
    9c48:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    9c4c:	3d01      	subs	r5, #1
    9c4e:	2b00      	cmp	r3, #0
    9c50:	d0fa      	beq.n	9c48 <__mdiff+0xf4>
    9c52:	f8c9 5010 	str.w	r5, [r9, #16]
    9c56:	4648      	mov	r0, r9
    9c58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9c5c:	4633      	mov	r3, r6
    9c5e:	2701      	movs	r7, #1
    9c60:	4646      	mov	r6, r8
    9c62:	4698      	mov	r8, r3
    9c64:	e790      	b.n	9b88 <__mdiff+0x34>
    9c66:	dbf9      	blt.n	9c5c <__mdiff+0x108>
    9c68:	2700      	movs	r7, #0
    9c6a:	e78d      	b.n	9b88 <__mdiff+0x34>
    9c6c:	2100      	movs	r1, #0
    9c6e:	f7ff fcc9 	bl	9604 <_Balloc>
    9c72:	4681      	mov	r9, r0
    9c74:	b168      	cbz	r0, 9c92 <__mdiff+0x13e>
    9c76:	2201      	movs	r2, #1
    9c78:	2300      	movs	r3, #0
    9c7a:	e9c9 2304 	strd	r2, r3, [r9, #16]
    9c7e:	4648      	mov	r0, r9
    9c80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9c84:	4b06      	ldr	r3, [pc, #24]	; (9ca0 <__mdiff+0x14c>)
    9c86:	4807      	ldr	r0, [pc, #28]	; (9ca4 <__mdiff+0x150>)
    9c88:	464a      	mov	r2, r9
    9c8a:	f240 2145 	movw	r1, #581	; 0x245
    9c8e:	f000 faf7 	bl	a280 <__assert_func>
    9c92:	4b03      	ldr	r3, [pc, #12]	; (9ca0 <__mdiff+0x14c>)
    9c94:	4803      	ldr	r0, [pc, #12]	; (9ca4 <__mdiff+0x150>)
    9c96:	464a      	mov	r2, r9
    9c98:	f240 2137 	movw	r1, #567	; 0x237
    9c9c:	f000 faf0 	bl	a280 <__assert_func>
    9ca0:	20018a38 	.word	0x20018a38
    9ca4:	20018a4c 	.word	0x20018a4c

00009ca8 <__d2b>:
    9ca8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9cac:	4688      	mov	r8, r1
    9cae:	b083      	sub	sp, #12
    9cb0:	2101      	movs	r1, #1
    9cb2:	ec57 6b10 	vmov	r6, r7, d0
    9cb6:	4615      	mov	r5, r2
    9cb8:	f7ff fca4 	bl	9604 <_Balloc>
    9cbc:	4604      	mov	r4, r0
    9cbe:	2800      	cmp	r0, #0
    9cc0:	d051      	beq.n	9d66 <__d2b+0xbe>
    9cc2:	f3c7 590a 	ubfx	r9, r7, #20, #11
    9cc6:	f3c7 0313 	ubfx	r3, r7, #0, #20
    9cca:	f1b9 0f00 	cmp.w	r9, #0
    9cce:	d001      	beq.n	9cd4 <__d2b+0x2c>
    9cd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    9cd4:	2e00      	cmp	r6, #0
    9cd6:	9301      	str	r3, [sp, #4]
    9cd8:	d118      	bne.n	9d0c <__d2b+0x64>
    9cda:	a801      	add	r0, sp, #4
    9cdc:	f7ff fd34 	bl	9748 <__lo0bits>
    9ce0:	9a01      	ldr	r2, [sp, #4]
    9ce2:	6162      	str	r2, [r4, #20]
    9ce4:	2201      	movs	r2, #1
    9ce6:	f100 0320 	add.w	r3, r0, #32
    9cea:	6122      	str	r2, [r4, #16]
    9cec:	f1b9 0f00 	cmp.w	r9, #0
    9cf0:	d025      	beq.n	9d3e <__d2b+0x96>
    9cf2:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    9cf6:	eb09 0203 	add.w	r2, r9, r3
    9cfa:	4620      	mov	r0, r4
    9cfc:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    9d00:	f8c8 2000 	str.w	r2, [r8]
    9d04:	602b      	str	r3, [r5, #0]
    9d06:	b003      	add	sp, #12
    9d08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9d0c:	4668      	mov	r0, sp
    9d0e:	9600      	str	r6, [sp, #0]
    9d10:	f7ff fd1a 	bl	9748 <__lo0bits>
    9d14:	4603      	mov	r3, r0
    9d16:	b310      	cbz	r0, 9d5e <__d2b+0xb6>
    9d18:	e9dd 0200 	ldrd	r0, r2, [sp]
    9d1c:	f1c3 0120 	rsb	r1, r3, #32
    9d20:	fa02 f101 	lsl.w	r1, r2, r1
    9d24:	4301      	orrs	r1, r0
    9d26:	40da      	lsrs	r2, r3
    9d28:	6161      	str	r1, [r4, #20]
    9d2a:	9201      	str	r2, [sp, #4]
    9d2c:	2a00      	cmp	r2, #0
    9d2e:	61a2      	str	r2, [r4, #24]
    9d30:	bf14      	ite	ne
    9d32:	2202      	movne	r2, #2
    9d34:	2201      	moveq	r2, #1
    9d36:	6122      	str	r2, [r4, #16]
    9d38:	f1b9 0f00 	cmp.w	r9, #0
    9d3c:	d1d9      	bne.n	9cf2 <__d2b+0x4a>
    9d3e:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    9d42:	f8c8 3000 	str.w	r3, [r8]
    9d46:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    9d4a:	6918      	ldr	r0, [r3, #16]
    9d4c:	f7ff fcdc 	bl	9708 <__hi0bits>
    9d50:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    9d54:	4620      	mov	r0, r4
    9d56:	602b      	str	r3, [r5, #0]
    9d58:	b003      	add	sp, #12
    9d5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9d5e:	9a00      	ldr	r2, [sp, #0]
    9d60:	6162      	str	r2, [r4, #20]
    9d62:	9a01      	ldr	r2, [sp, #4]
    9d64:	e7e2      	b.n	9d2c <__d2b+0x84>
    9d66:	4b03      	ldr	r3, [pc, #12]	; (9d74 <__d2b+0xcc>)
    9d68:	4803      	ldr	r0, [pc, #12]	; (9d78 <__d2b+0xd0>)
    9d6a:	4622      	mov	r2, r4
    9d6c:	f240 310f 	movw	r1, #783	; 0x30f
    9d70:	f000 fa86 	bl	a280 <__assert_func>
    9d74:	20018a38 	.word	0x20018a38
    9d78:	20018a4c 	.word	0x20018a4c

00009d7c <_fclose_r>:
    9d7c:	b570      	push	{r4, r5, r6, lr}
    9d7e:	2900      	cmp	r1, #0
    9d80:	d04b      	beq.n	9e1a <_fclose_r+0x9e>
    9d82:	4606      	mov	r6, r0
    9d84:	460c      	mov	r4, r1
    9d86:	b110      	cbz	r0, 9d8e <_fclose_r+0x12>
    9d88:	6b43      	ldr	r3, [r0, #52]	; 0x34
    9d8a:	2b00      	cmp	r3, #0
    9d8c:	d048      	beq.n	9e20 <_fclose_r+0xa4>
    9d8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    9d90:	07d8      	lsls	r0, r3, #31
    9d92:	d534      	bpl.n	9dfe <_fclose_r+0x82>
    9d94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9d98:	2b00      	cmp	r3, #0
    9d9a:	d03e      	beq.n	9e1a <_fclose_r+0x9e>
    9d9c:	4621      	mov	r1, r4
    9d9e:	4630      	mov	r0, r6
    9da0:	f000 f850 	bl	9e44 <__sflush_r>
    9da4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    9da6:	4605      	mov	r5, r0
    9da8:	b133      	cbz	r3, 9db8 <_fclose_r+0x3c>
    9daa:	69e1      	ldr	r1, [r4, #28]
    9dac:	4630      	mov	r0, r6
    9dae:	4798      	blx	r3
    9db0:	2800      	cmp	r0, #0
    9db2:	bfb8      	it	lt
    9db4:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
    9db8:	89a3      	ldrh	r3, [r4, #12]
    9dba:	061a      	lsls	r2, r3, #24
    9dbc:	d43c      	bmi.n	9e38 <_fclose_r+0xbc>
    9dbe:	6b21      	ldr	r1, [r4, #48]	; 0x30
    9dc0:	b141      	cbz	r1, 9dd4 <_fclose_r+0x58>
    9dc2:	f104 0340 	add.w	r3, r4, #64	; 0x40
    9dc6:	4299      	cmp	r1, r3
    9dc8:	d002      	beq.n	9dd0 <_fclose_r+0x54>
    9dca:	4630      	mov	r0, r6
    9dcc:	f7fd fd5a 	bl	7884 <_free_r>
    9dd0:	2300      	movs	r3, #0
    9dd2:	6323      	str	r3, [r4, #48]	; 0x30
    9dd4:	6c61      	ldr	r1, [r4, #68]	; 0x44
    9dd6:	b121      	cbz	r1, 9de2 <_fclose_r+0x66>
    9dd8:	4630      	mov	r0, r6
    9dda:	f7fd fd53 	bl	7884 <_free_r>
    9dde:	2300      	movs	r3, #0
    9de0:	6463      	str	r3, [r4, #68]	; 0x44
    9de2:	f7fd fa4d 	bl	7280 <__sfp_lock_acquire>
    9de6:	6e63      	ldr	r3, [r4, #100]	; 0x64
    9de8:	2200      	movs	r2, #0
    9dea:	07db      	lsls	r3, r3, #31
    9dec:	81a2      	strh	r2, [r4, #12]
    9dee:	d51f      	bpl.n	9e30 <_fclose_r+0xb4>
    9df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9df2:	f7fd fc3b 	bl	766c <__retarget_lock_close_recursive>
    9df6:	f7fd fa49 	bl	728c <__sfp_lock_release>
    9dfa:	4628      	mov	r0, r5
    9dfc:	bd70      	pop	{r4, r5, r6, pc}
    9dfe:	89a3      	ldrh	r3, [r4, #12]
    9e00:	0599      	lsls	r1, r3, #22
    9e02:	d4cb      	bmi.n	9d9c <_fclose_r+0x20>
    9e04:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9e06:	f7fd fc33 	bl	7670 <__retarget_lock_acquire_recursive>
    9e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9e0e:	2b00      	cmp	r3, #0
    9e10:	d1c4      	bne.n	9d9c <_fclose_r+0x20>
    9e12:	6e65      	ldr	r5, [r4, #100]	; 0x64
    9e14:	f015 0501 	ands.w	r5, r5, #1
    9e18:	d005      	beq.n	9e26 <_fclose_r+0xaa>
    9e1a:	2500      	movs	r5, #0
    9e1c:	4628      	mov	r0, r5
    9e1e:	bd70      	pop	{r4, r5, r6, pc}
    9e20:	f7fd fa10 	bl	7244 <__sinit>
    9e24:	e7b3      	b.n	9d8e <_fclose_r+0x12>
    9e26:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9e28:	f7fd fc24 	bl	7674 <__retarget_lock_release_recursive>
    9e2c:	4628      	mov	r0, r5
    9e2e:	bd70      	pop	{r4, r5, r6, pc}
    9e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9e32:	f7fd fc1f 	bl	7674 <__retarget_lock_release_recursive>
    9e36:	e7db      	b.n	9df0 <_fclose_r+0x74>
    9e38:	6921      	ldr	r1, [r4, #16]
    9e3a:	4630      	mov	r0, r6
    9e3c:	f7fd fd22 	bl	7884 <_free_r>
    9e40:	e7bd      	b.n	9dbe <_fclose_r+0x42>
    9e42:	bf00      	nop

00009e44 <__sflush_r>:
    9e44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    9e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9e4c:	460c      	mov	r4, r1
    9e4e:	0711      	lsls	r1, r2, #28
    9e50:	4680      	mov	r8, r0
    9e52:	d447      	bmi.n	9ee4 <__sflush_r+0xa0>
    9e54:	6863      	ldr	r3, [r4, #4]
    9e56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    9e5a:	2b00      	cmp	r3, #0
    9e5c:	81a2      	strh	r2, [r4, #12]
    9e5e:	dd5e      	ble.n	9f1e <__sflush_r+0xda>
    9e60:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    9e62:	2d00      	cmp	r5, #0
    9e64:	d058      	beq.n	9f18 <__sflush_r+0xd4>
    9e66:	2300      	movs	r3, #0
    9e68:	f8d8 6000 	ldr.w	r6, [r8]
    9e6c:	f8c8 3000 	str.w	r3, [r8]
    9e70:	b293      	uxth	r3, r2
    9e72:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    9e76:	d156      	bne.n	9f26 <__sflush_r+0xe2>
    9e78:	2301      	movs	r3, #1
    9e7a:	69e1      	ldr	r1, [r4, #28]
    9e7c:	4640      	mov	r0, r8
    9e7e:	47a8      	blx	r5
    9e80:	1c43      	adds	r3, r0, #1
    9e82:	d067      	beq.n	9f54 <__sflush_r+0x110>
    9e84:	89a3      	ldrh	r3, [r4, #12]
    9e86:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    9e88:	075f      	lsls	r7, r3, #29
    9e8a:	d505      	bpl.n	9e98 <__sflush_r+0x54>
    9e8c:	6863      	ldr	r3, [r4, #4]
    9e8e:	1ac0      	subs	r0, r0, r3
    9e90:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9e92:	b10b      	cbz	r3, 9e98 <__sflush_r+0x54>
    9e94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    9e96:	1ac0      	subs	r0, r0, r3
    9e98:	69e1      	ldr	r1, [r4, #28]
    9e9a:	4602      	mov	r2, r0
    9e9c:	2300      	movs	r3, #0
    9e9e:	4640      	mov	r0, r8
    9ea0:	47a8      	blx	r5
    9ea2:	1c41      	adds	r1, r0, #1
    9ea4:	d141      	bne.n	9f2a <__sflush_r+0xe6>
    9ea6:	f8d8 3000 	ldr.w	r3, [r8]
    9eaa:	2b00      	cmp	r3, #0
    9eac:	d03d      	beq.n	9f2a <__sflush_r+0xe6>
    9eae:	2b1d      	cmp	r3, #29
    9eb0:	d001      	beq.n	9eb6 <__sflush_r+0x72>
    9eb2:	2b16      	cmp	r3, #22
    9eb4:	d156      	bne.n	9f64 <__sflush_r+0x120>
    9eb6:	89a3      	ldrh	r3, [r4, #12]
    9eb8:	6922      	ldr	r2, [r4, #16]
    9eba:	6022      	str	r2, [r4, #0]
    9ebc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    9ec0:	2100      	movs	r1, #0
    9ec2:	6061      	str	r1, [r4, #4]
    9ec4:	81a3      	strh	r3, [r4, #12]
    9ec6:	6b21      	ldr	r1, [r4, #48]	; 0x30
    9ec8:	f8c8 6000 	str.w	r6, [r8]
    9ecc:	b321      	cbz	r1, 9f18 <__sflush_r+0xd4>
    9ece:	f104 0340 	add.w	r3, r4, #64	; 0x40
    9ed2:	4299      	cmp	r1, r3
    9ed4:	d002      	beq.n	9edc <__sflush_r+0x98>
    9ed6:	4640      	mov	r0, r8
    9ed8:	f7fd fcd4 	bl	7884 <_free_r>
    9edc:	2000      	movs	r0, #0
    9ede:	6320      	str	r0, [r4, #48]	; 0x30
    9ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9ee4:	6926      	ldr	r6, [r4, #16]
    9ee6:	b1be      	cbz	r6, 9f18 <__sflush_r+0xd4>
    9ee8:	b293      	uxth	r3, r2
    9eea:	6825      	ldr	r5, [r4, #0]
    9eec:	6026      	str	r6, [r4, #0]
    9eee:	079a      	lsls	r2, r3, #30
    9ef0:	bf0c      	ite	eq
    9ef2:	6963      	ldreq	r3, [r4, #20]
    9ef4:	2300      	movne	r3, #0
    9ef6:	1bad      	subs	r5, r5, r6
    9ef8:	60a3      	str	r3, [r4, #8]
    9efa:	e00b      	b.n	9f14 <__sflush_r+0xd0>
    9efc:	462b      	mov	r3, r5
    9efe:	4632      	mov	r2, r6
    9f00:	69e1      	ldr	r1, [r4, #28]
    9f02:	6a67      	ldr	r7, [r4, #36]	; 0x24
    9f04:	4640      	mov	r0, r8
    9f06:	47b8      	blx	r7
    9f08:	f1b0 0c00 	subs.w	ip, r0, #0
    9f0c:	eba5 050c 	sub.w	r5, r5, ip
    9f10:	4466      	add	r6, ip
    9f12:	dd17      	ble.n	9f44 <__sflush_r+0x100>
    9f14:	2d00      	cmp	r5, #0
    9f16:	dcf1      	bgt.n	9efc <__sflush_r+0xb8>
    9f18:	2000      	movs	r0, #0
    9f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9f1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    9f20:	2b00      	cmp	r3, #0
    9f22:	dc9d      	bgt.n	9e60 <__sflush_r+0x1c>
    9f24:	e7f8      	b.n	9f18 <__sflush_r+0xd4>
    9f26:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9f28:	e7ae      	b.n	9e88 <__sflush_r+0x44>
    9f2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9f2e:	6922      	ldr	r2, [r4, #16]
    9f30:	6022      	str	r2, [r4, #0]
    9f32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    9f36:	81a3      	strh	r3, [r4, #12]
    9f38:	2200      	movs	r2, #0
    9f3a:	04db      	lsls	r3, r3, #19
    9f3c:	6062      	str	r2, [r4, #4]
    9f3e:	d5c2      	bpl.n	9ec6 <__sflush_r+0x82>
    9f40:	6520      	str	r0, [r4, #80]	; 0x50
    9f42:	e7c0      	b.n	9ec6 <__sflush_r+0x82>
    9f44:	89a3      	ldrh	r3, [r4, #12]
    9f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9f4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9f4e:	81a3      	strh	r3, [r4, #12]
    9f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9f54:	f8d8 3000 	ldr.w	r3, [r8]
    9f58:	2b00      	cmp	r3, #0
    9f5a:	d093      	beq.n	9e84 <__sflush_r+0x40>
    9f5c:	2b1d      	cmp	r3, #29
    9f5e:	d006      	beq.n	9f6e <__sflush_r+0x12a>
    9f60:	2b16      	cmp	r3, #22
    9f62:	d004      	beq.n	9f6e <__sflush_r+0x12a>
    9f64:	89a3      	ldrh	r3, [r4, #12]
    9f66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9f6a:	81a3      	strh	r3, [r4, #12]
    9f6c:	e7d5      	b.n	9f1a <__sflush_r+0xd6>
    9f6e:	f8c8 6000 	str.w	r6, [r8]
    9f72:	e7d1      	b.n	9f18 <__sflush_r+0xd4>

00009f74 <_fflush_r>:
    9f74:	b538      	push	{r3, r4, r5, lr}
    9f76:	460c      	mov	r4, r1
    9f78:	4605      	mov	r5, r0
    9f7a:	b108      	cbz	r0, 9f80 <_fflush_r+0xc>
    9f7c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    9f7e:	b303      	cbz	r3, 9fc2 <_fflush_r+0x4e>
    9f80:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    9f84:	b188      	cbz	r0, 9faa <_fflush_r+0x36>
    9f86:	6e63      	ldr	r3, [r4, #100]	; 0x64
    9f88:	07db      	lsls	r3, r3, #31
    9f8a:	d401      	bmi.n	9f90 <_fflush_r+0x1c>
    9f8c:	0581      	lsls	r1, r0, #22
    9f8e:	d50f      	bpl.n	9fb0 <_fflush_r+0x3c>
    9f90:	4628      	mov	r0, r5
    9f92:	4621      	mov	r1, r4
    9f94:	f7ff ff56 	bl	9e44 <__sflush_r>
    9f98:	6e63      	ldr	r3, [r4, #100]	; 0x64
    9f9a:	07da      	lsls	r2, r3, #31
    9f9c:	4605      	mov	r5, r0
    9f9e:	d402      	bmi.n	9fa6 <_fflush_r+0x32>
    9fa0:	89a3      	ldrh	r3, [r4, #12]
    9fa2:	059b      	lsls	r3, r3, #22
    9fa4:	d508      	bpl.n	9fb8 <_fflush_r+0x44>
    9fa6:	4628      	mov	r0, r5
    9fa8:	bd38      	pop	{r3, r4, r5, pc}
    9faa:	4605      	mov	r5, r0
    9fac:	4628      	mov	r0, r5
    9fae:	bd38      	pop	{r3, r4, r5, pc}
    9fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9fb2:	f7fd fb5d 	bl	7670 <__retarget_lock_acquire_recursive>
    9fb6:	e7eb      	b.n	9f90 <_fflush_r+0x1c>
    9fb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9fba:	f7fd fb5b 	bl	7674 <__retarget_lock_release_recursive>
    9fbe:	4628      	mov	r0, r5
    9fc0:	bd38      	pop	{r3, r4, r5, pc}
    9fc2:	f7fd f93f 	bl	7244 <__sinit>
    9fc6:	e7db      	b.n	9f80 <_fflush_r+0xc>

00009fc8 <__sread>:
    9fc8:	b510      	push	{r4, lr}
    9fca:	460c      	mov	r4, r1
    9fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    9fd0:	f000 f87a 	bl	a0c8 <_read_r>
    9fd4:	2800      	cmp	r0, #0
    9fd6:	db03      	blt.n	9fe0 <__sread+0x18>
    9fd8:	6d23      	ldr	r3, [r4, #80]	; 0x50
    9fda:	4403      	add	r3, r0
    9fdc:	6523      	str	r3, [r4, #80]	; 0x50
    9fde:	bd10      	pop	{r4, pc}
    9fe0:	89a3      	ldrh	r3, [r4, #12]
    9fe2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    9fe6:	81a3      	strh	r3, [r4, #12]
    9fe8:	bd10      	pop	{r4, pc}
    9fea:	bf00      	nop

00009fec <__swrite>:
    9fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9ff0:	460c      	mov	r4, r1
    9ff2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    9ff6:	461f      	mov	r7, r3
    9ff8:	05cb      	lsls	r3, r1, #23
    9ffa:	4605      	mov	r5, r0
    9ffc:	4616      	mov	r6, r2
    9ffe:	d40b      	bmi.n	a018 <__swrite+0x2c>
    a000:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    a004:	81a1      	strh	r1, [r4, #12]
    a006:	463b      	mov	r3, r7
    a008:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    a00c:	4632      	mov	r2, r6
    a00e:	4628      	mov	r0, r5
    a010:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a014:	f7fd bae8 	b.w	75e8 <_write_r>
    a018:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    a01c:	2302      	movs	r3, #2
    a01e:	2200      	movs	r2, #0
    a020:	f000 f83c 	bl	a09c <_lseek_r>
    a024:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    a028:	e7ea      	b.n	a000 <__swrite+0x14>
    a02a:	bf00      	nop

0000a02c <__sseek>:
    a02c:	b510      	push	{r4, lr}
    a02e:	460c      	mov	r4, r1
    a030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    a034:	f000 f832 	bl	a09c <_lseek_r>
    a038:	89a3      	ldrh	r3, [r4, #12]
    a03a:	1c42      	adds	r2, r0, #1
    a03c:	bf0e      	itee	eq
    a03e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    a042:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    a046:	6520      	strne	r0, [r4, #80]	; 0x50
    a048:	81a3      	strh	r3, [r4, #12]
    a04a:	bd10      	pop	{r4, pc}

0000a04c <__sclose>:
    a04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    a050:	f000 b812 	b.w	a078 <_close_r>

0000a054 <__ascii_wctomb>:
    a054:	b149      	cbz	r1, a06a <__ascii_wctomb+0x16>
    a056:	2aff      	cmp	r2, #255	; 0xff
    a058:	d802      	bhi.n	a060 <__ascii_wctomb+0xc>
    a05a:	700a      	strb	r2, [r1, #0]
    a05c:	2001      	movs	r0, #1
    a05e:	4770      	bx	lr
    a060:	238a      	movs	r3, #138	; 0x8a
    a062:	6003      	str	r3, [r0, #0]
    a064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a068:	4770      	bx	lr
    a06a:	4608      	mov	r0, r1
    a06c:	4770      	bx	lr
    a06e:	bf00      	nop

0000a070 <_localeconv_r>:
    a070:	4800      	ldr	r0, [pc, #0]	; (a074 <_localeconv_r+0x4>)
    a072:	4770      	bx	lr
    a074:	20019414 	.word	0x20019414

0000a078 <_close_r>:
    a078:	b538      	push	{r3, r4, r5, lr}
    a07a:	4d07      	ldr	r5, [pc, #28]	; (a098 <_close_r+0x20>)
    a07c:	2200      	movs	r2, #0
    a07e:	4604      	mov	r4, r0
    a080:	4608      	mov	r0, r1
    a082:	602a      	str	r2, [r5, #0]
    a084:	f7fb f8ee 	bl	5264 <_close>
    a088:	1c43      	adds	r3, r0, #1
    a08a:	d000      	beq.n	a08e <_close_r+0x16>
    a08c:	bd38      	pop	{r3, r4, r5, pc}
    a08e:	682b      	ldr	r3, [r5, #0]
    a090:	2b00      	cmp	r3, #0
    a092:	d0fb      	beq.n	a08c <_close_r+0x14>
    a094:	6023      	str	r3, [r4, #0]
    a096:	bd38      	pop	{r3, r4, r5, pc}
    a098:	2001aba8 	.word	0x2001aba8

0000a09c <_lseek_r>:
    a09c:	b538      	push	{r3, r4, r5, lr}
    a09e:	460c      	mov	r4, r1
    a0a0:	4d08      	ldr	r5, [pc, #32]	; (a0c4 <_lseek_r+0x28>)
    a0a2:	4684      	mov	ip, r0
    a0a4:	4611      	mov	r1, r2
    a0a6:	4620      	mov	r0, r4
    a0a8:	461a      	mov	r2, r3
    a0aa:	2300      	movs	r3, #0
    a0ac:	602b      	str	r3, [r5, #0]
    a0ae:	4664      	mov	r4, ip
    a0b0:	f7fb f8e4 	bl	527c <_lseek>
    a0b4:	1c43      	adds	r3, r0, #1
    a0b6:	d000      	beq.n	a0ba <_lseek_r+0x1e>
    a0b8:	bd38      	pop	{r3, r4, r5, pc}
    a0ba:	682b      	ldr	r3, [r5, #0]
    a0bc:	2b00      	cmp	r3, #0
    a0be:	d0fb      	beq.n	a0b8 <_lseek_r+0x1c>
    a0c0:	6023      	str	r3, [r4, #0]
    a0c2:	bd38      	pop	{r3, r4, r5, pc}
    a0c4:	2001aba8 	.word	0x2001aba8

0000a0c8 <_read_r>:
    a0c8:	b538      	push	{r3, r4, r5, lr}
    a0ca:	460c      	mov	r4, r1
    a0cc:	4d08      	ldr	r5, [pc, #32]	; (a0f0 <_read_r+0x28>)
    a0ce:	4684      	mov	ip, r0
    a0d0:	4611      	mov	r1, r2
    a0d2:	4620      	mov	r0, r4
    a0d4:	461a      	mov	r2, r3
    a0d6:	2300      	movs	r3, #0
    a0d8:	602b      	str	r3, [r5, #0]
    a0da:	4664      	mov	r4, ip
    a0dc:	f7fb f8c0 	bl	5260 <_read>
    a0e0:	1c43      	adds	r3, r0, #1
    a0e2:	d000      	beq.n	a0e6 <_read_r+0x1e>
    a0e4:	bd38      	pop	{r3, r4, r5, pc}
    a0e6:	682b      	ldr	r3, [r5, #0]
    a0e8:	2b00      	cmp	r3, #0
    a0ea:	d0fb      	beq.n	a0e4 <_read_r+0x1c>
    a0ec:	6023      	str	r3, [r4, #0]
    a0ee:	bd38      	pop	{r3, r4, r5, pc}
    a0f0:	2001aba8 	.word	0x2001aba8
	...

0000a100 <memchr>:
    a100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    a104:	2a10      	cmp	r2, #16
    a106:	db2b      	blt.n	a160 <memchr+0x60>
    a108:	f010 0f07 	tst.w	r0, #7
    a10c:	d008      	beq.n	a120 <memchr+0x20>
    a10e:	f810 3b01 	ldrb.w	r3, [r0], #1
    a112:	3a01      	subs	r2, #1
    a114:	428b      	cmp	r3, r1
    a116:	d02d      	beq.n	a174 <memchr+0x74>
    a118:	f010 0f07 	tst.w	r0, #7
    a11c:	b342      	cbz	r2, a170 <memchr+0x70>
    a11e:	d1f6      	bne.n	a10e <memchr+0xe>
    a120:	b4f0      	push	{r4, r5, r6, r7}
    a122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    a126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    a12a:	f022 0407 	bic.w	r4, r2, #7
    a12e:	f07f 0700 	mvns.w	r7, #0
    a132:	2300      	movs	r3, #0
    a134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    a138:	3c08      	subs	r4, #8
    a13a:	ea85 0501 	eor.w	r5, r5, r1
    a13e:	ea86 0601 	eor.w	r6, r6, r1
    a142:	fa85 f547 	uadd8	r5, r5, r7
    a146:	faa3 f587 	sel	r5, r3, r7
    a14a:	fa86 f647 	uadd8	r6, r6, r7
    a14e:	faa5 f687 	sel	r6, r5, r7
    a152:	b98e      	cbnz	r6, a178 <memchr+0x78>
    a154:	d1ee      	bne.n	a134 <memchr+0x34>
    a156:	bcf0      	pop	{r4, r5, r6, r7}
    a158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    a15c:	f002 0207 	and.w	r2, r2, #7
    a160:	b132      	cbz	r2, a170 <memchr+0x70>
    a162:	f810 3b01 	ldrb.w	r3, [r0], #1
    a166:	3a01      	subs	r2, #1
    a168:	ea83 0301 	eor.w	r3, r3, r1
    a16c:	b113      	cbz	r3, a174 <memchr+0x74>
    a16e:	d1f8      	bne.n	a162 <memchr+0x62>
    a170:	2000      	movs	r0, #0
    a172:	4770      	bx	lr
    a174:	3801      	subs	r0, #1
    a176:	4770      	bx	lr
    a178:	2d00      	cmp	r5, #0
    a17a:	bf06      	itte	eq
    a17c:	4635      	moveq	r5, r6
    a17e:	3803      	subeq	r0, #3
    a180:	3807      	subne	r0, #7
    a182:	f015 0f01 	tst.w	r5, #1
    a186:	d107      	bne.n	a198 <memchr+0x98>
    a188:	3001      	adds	r0, #1
    a18a:	f415 7f80 	tst.w	r5, #256	; 0x100
    a18e:	bf02      	ittt	eq
    a190:	3001      	addeq	r0, #1
    a192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    a196:	3001      	addeq	r0, #1
    a198:	bcf0      	pop	{r4, r5, r6, r7}
    a19a:	3801      	subs	r0, #1
    a19c:	4770      	bx	lr
    a19e:	bf00      	nop

0000a1a0 <_wcrtomb_r>:
    a1a0:	b570      	push	{r4, r5, r6, lr}
    a1a2:	4605      	mov	r5, r0
    a1a4:	b084      	sub	sp, #16
    a1a6:	b15b      	cbz	r3, a1c0 <_wcrtomb_r+0x20>
    a1a8:	461c      	mov	r4, r3
    a1aa:	b169      	cbz	r1, a1c8 <_wcrtomb_r+0x28>
    a1ac:	4b0e      	ldr	r3, [pc, #56]	; (a1e8 <_wcrtomb_r+0x48>)
    a1ae:	4628      	mov	r0, r5
    a1b0:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
    a1b4:	4623      	mov	r3, r4
    a1b6:	47b0      	blx	r6
    a1b8:	1c43      	adds	r3, r0, #1
    a1ba:	d00f      	beq.n	a1dc <_wcrtomb_r+0x3c>
    a1bc:	b004      	add	sp, #16
    a1be:	bd70      	pop	{r4, r5, r6, pc}
    a1c0:	f500 7482 	add.w	r4, r0, #260	; 0x104
    a1c4:	2900      	cmp	r1, #0
    a1c6:	d1f1      	bne.n	a1ac <_wcrtomb_r+0xc>
    a1c8:	4a07      	ldr	r2, [pc, #28]	; (a1e8 <_wcrtomb_r+0x48>)
    a1ca:	4623      	mov	r3, r4
    a1cc:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
    a1d0:	4628      	mov	r0, r5
    a1d2:	460a      	mov	r2, r1
    a1d4:	a901      	add	r1, sp, #4
    a1d6:	47b0      	blx	r6
    a1d8:	1c43      	adds	r3, r0, #1
    a1da:	d1ef      	bne.n	a1bc <_wcrtomb_r+0x1c>
    a1dc:	2200      	movs	r2, #0
    a1de:	238a      	movs	r3, #138	; 0x8a
    a1e0:	6022      	str	r2, [r4, #0]
    a1e2:	602b      	str	r3, [r5, #0]
    a1e4:	b004      	add	sp, #16
    a1e6:	bd70      	pop	{r4, r5, r6, pc}
    a1e8:	20019324 	.word	0x20019324

0000a1ec <_wcsrtombs_r>:
    a1ec:	b510      	push	{r4, lr}
    a1ee:	b082      	sub	sp, #8
    a1f0:	9c04      	ldr	r4, [sp, #16]
    a1f2:	e9cd 3400 	strd	r3, r4, [sp]
    a1f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a1fa:	f002 fb6b 	bl	c8d4 <_wcsnrtombs_r>
    a1fe:	b002      	add	sp, #8
    a200:	bd10      	pop	{r4, pc}
    a202:	bf00      	nop
    a204:	0000      	movs	r0, r0
	...

0000a208 <frexp>:
    a208:	b430      	push	{r4, r5}
    a20a:	b082      	sub	sp, #8
    a20c:	ed8d 0b00 	vstr	d0, [sp]
    a210:	9a01      	ldr	r2, [sp, #4]
    a212:	4c19      	ldr	r4, [pc, #100]	; (a278 <frexp+0x70>)
    a214:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    a218:	2100      	movs	r1, #0
    a21a:	42a3      	cmp	r3, r4
    a21c:	6001      	str	r1, [r0, #0]
    a21e:	dc21      	bgt.n	a264 <frexp+0x5c>
    a220:	9c00      	ldr	r4, [sp, #0]
    a222:	431c      	orrs	r4, r3
    a224:	d01e      	beq.n	a264 <frexp+0x5c>
    a226:	4c15      	ldr	r4, [pc, #84]	; (a27c <frexp+0x74>)
    a228:	4014      	ands	r4, r2
    a22a:	b954      	cbnz	r4, a242 <frexp+0x3a>
    a22c:	ed9f 7b10 	vldr	d7, [pc, #64]	; a270 <frexp+0x68>
    a230:	ee20 7b07 	vmul.f64	d7, d0, d7
    a234:	ed8d 7b00 	vstr	d7, [sp]
    a238:	9a01      	ldr	r2, [sp, #4]
    a23a:	f06f 0135 	mvn.w	r1, #53	; 0x35
    a23e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    a242:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
    a246:	e9dd 4500 	ldrd	r4, r5, [sp]
    a24a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
    a24e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
    a252:	151b      	asrs	r3, r3, #20
    a254:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
    a258:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    a25c:	e9cd 4500 	strd	r4, r5, [sp]
    a260:	440b      	add	r3, r1
    a262:	6003      	str	r3, [r0, #0]
    a264:	ed9d 0b00 	vldr	d0, [sp]
    a268:	b002      	add	sp, #8
    a26a:	bc30      	pop	{r4, r5}
    a26c:	4770      	bx	lr
    a26e:	bf00      	nop
    a270:	00000000 	.word	0x00000000
    a274:	43500000 	.word	0x43500000
    a278:	7fefffff 	.word	0x7fefffff
    a27c:	7ff00000 	.word	0x7ff00000

0000a280 <__assert_func>:
    a280:	b500      	push	{lr}
    a282:	4c0b      	ldr	r4, [pc, #44]	; (a2b0 <__assert_func+0x30>)
    a284:	6825      	ldr	r5, [r4, #0]
    a286:	4614      	mov	r4, r2
    a288:	68ee      	ldr	r6, [r5, #12]
    a28a:	461a      	mov	r2, r3
    a28c:	b085      	sub	sp, #20
    a28e:	4603      	mov	r3, r0
    a290:	460d      	mov	r5, r1
    a292:	b14c      	cbz	r4, a2a8 <__assert_func+0x28>
    a294:	4907      	ldr	r1, [pc, #28]	; (a2b4 <__assert_func+0x34>)
    a296:	9500      	str	r5, [sp, #0]
    a298:	e9cd 1401 	strd	r1, r4, [sp, #4]
    a29c:	4630      	mov	r0, r6
    a29e:	4906      	ldr	r1, [pc, #24]	; (a2b8 <__assert_func+0x38>)
    a2a0:	f000 ff54 	bl	b14c <fiprintf>
    a2a4:	f7fa fff0 	bl	5288 <abort>
    a2a8:	4904      	ldr	r1, [pc, #16]	; (a2bc <__assert_func+0x3c>)
    a2aa:	460c      	mov	r4, r1
    a2ac:	e7f3      	b.n	a296 <__assert_func+0x16>
    a2ae:	bf00      	nop
    a2b0:	200198ac 	.word	0x200198ac
    a2b4:	200189f8 	.word	0x200189f8
    a2b8:	20018a08 	.word	0x20018a08
    a2bc:	2001039c 	.word	0x2001039c

0000a2c0 <_calloc_r>:
    a2c0:	b538      	push	{r3, r4, r5, lr}
    a2c2:	fba1 1402 	umull	r1, r4, r1, r2
    a2c6:	bb8c      	cbnz	r4, a32c <_calloc_r+0x6c>
    a2c8:	f7fc fa7e 	bl	67c8 <_malloc_r>
    a2cc:	4605      	mov	r5, r0
    a2ce:	b1e0      	cbz	r0, a30a <_calloc_r+0x4a>
    a2d0:	f850 2c04 	ldr.w	r2, [r0, #-4]
    a2d4:	f022 0203 	bic.w	r2, r2, #3
    a2d8:	3a04      	subs	r2, #4
    a2da:	2a24      	cmp	r2, #36	; 0x24
    a2dc:	d817      	bhi.n	a30e <_calloc_r+0x4e>
    a2de:	2a13      	cmp	r2, #19
    a2e0:	d91a      	bls.n	a318 <_calloc_r+0x58>
    a2e2:	2a1b      	cmp	r2, #27
    a2e4:	e9c0 4400 	strd	r4, r4, [r0]
    a2e8:	d91d      	bls.n	a326 <_calloc_r+0x66>
    a2ea:	2a24      	cmp	r2, #36	; 0x24
    a2ec:	bf14      	ite	ne
    a2ee:	f100 0210 	addne.w	r2, r0, #16
    a2f2:	f100 0218 	addeq.w	r2, r0, #24
    a2f6:	f04f 0300 	mov.w	r3, #0
    a2fa:	e9c0 4402 	strd	r4, r4, [r0, #8]
    a2fe:	bf04      	itt	eq
    a300:	6104      	streq	r4, [r0, #16]
    a302:	6144      	streq	r4, [r0, #20]
    a304:	e9c2 3300 	strd	r3, r3, [r2]
    a308:	6093      	str	r3, [r2, #8]
    a30a:	4628      	mov	r0, r5
    a30c:	bd38      	pop	{r3, r4, r5, pc}
    a30e:	4621      	mov	r1, r4
    a310:	f7fd f896 	bl	7440 <memset>
    a314:	4628      	mov	r0, r5
    a316:	bd38      	pop	{r3, r4, r5, pc}
    a318:	4602      	mov	r2, r0
    a31a:	2300      	movs	r3, #0
    a31c:	e9c2 3300 	strd	r3, r3, [r2]
    a320:	6093      	str	r3, [r2, #8]
    a322:	4628      	mov	r0, r5
    a324:	bd38      	pop	{r3, r4, r5, pc}
    a326:	f100 0208 	add.w	r2, r0, #8
    a32a:	e7f6      	b.n	a31a <_calloc_r+0x5a>
    a32c:	f7fd f972 	bl	7614 <__errno>
    a330:	230c      	movs	r3, #12
    a332:	2500      	movs	r5, #0
    a334:	6003      	str	r3, [r0, #0]
    a336:	e7e8      	b.n	a30a <_calloc_r+0x4a>

0000a338 <quorem>:
    a338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a33c:	6903      	ldr	r3, [r0, #16]
    a33e:	690c      	ldr	r4, [r1, #16]
    a340:	42a3      	cmp	r3, r4
    a342:	b083      	sub	sp, #12
    a344:	f2c0 8087 	blt.w	a456 <quorem+0x11e>
    a348:	3c01      	subs	r4, #1
    a34a:	f101 0514 	add.w	r5, r1, #20
    a34e:	00a3      	lsls	r3, r4, #2
    a350:	f100 0814 	add.w	r8, r0, #20
    a354:	9300      	str	r3, [sp, #0]
    a356:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    a35a:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    a35e:	3301      	adds	r3, #1
    a360:	4681      	mov	r9, r0
    a362:	429a      	cmp	r2, r3
    a364:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    a368:	eb05 0784 	add.w	r7, r5, r4, lsl #2
    a36c:	9001      	str	r0, [sp, #4]
    a36e:	fbb2 f6f3 	udiv	r6, r2, r3
    a372:	d33b      	bcc.n	a3ec <quorem+0xb4>
    a374:	f04f 0c00 	mov.w	ip, #0
    a378:	46ae      	mov	lr, r5
    a37a:	4640      	mov	r0, r8
    a37c:	46e2      	mov	sl, ip
    a37e:	4663      	mov	r3, ip
    a380:	f85e bb04 	ldr.w	fp, [lr], #4
    a384:	6802      	ldr	r2, [r0, #0]
    a386:	fa1f fc8b 	uxth.w	ip, fp
    a38a:	fb06 330c 	mla	r3, r6, ip, r3
    a38e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    a392:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
    a396:	fb06 cc0b 	mla	ip, r6, fp, ip
    a39a:	b29b      	uxth	r3, r3
    a39c:	ebaa 0303 	sub.w	r3, sl, r3
    a3a0:	fa1f fa8c 	uxth.w	sl, ip
    a3a4:	fa13 f382 	uxtah	r3, r3, r2
    a3a8:	ebca 4212 	rsb	r2, sl, r2, lsr #16
    a3ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
    a3b0:	b29b      	uxth	r3, r3
    a3b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    a3b6:	4577      	cmp	r7, lr
    a3b8:	f840 3b04 	str.w	r3, [r0], #4
    a3bc:	ea4f 4a22 	mov.w	sl, r2, asr #16
    a3c0:	ea4f 431c 	mov.w	r3, ip, lsr #16
    a3c4:	d2dc      	bcs.n	a380 <quorem+0x48>
    a3c6:	9b00      	ldr	r3, [sp, #0]
    a3c8:	f858 3003 	ldr.w	r3, [r8, r3]
    a3cc:	b973      	cbnz	r3, a3ec <quorem+0xb4>
    a3ce:	9b01      	ldr	r3, [sp, #4]
    a3d0:	3b04      	subs	r3, #4
    a3d2:	4598      	cmp	r8, r3
    a3d4:	d304      	bcc.n	a3e0 <quorem+0xa8>
    a3d6:	e007      	b.n	a3e8 <quorem+0xb0>
    a3d8:	4598      	cmp	r8, r3
    a3da:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
    a3de:	d203      	bcs.n	a3e8 <quorem+0xb0>
    a3e0:	f853 2904 	ldr.w	r2, [r3], #-4
    a3e4:	2a00      	cmp	r2, #0
    a3e6:	d0f7      	beq.n	a3d8 <quorem+0xa0>
    a3e8:	f8c9 4010 	str.w	r4, [r9, #16]
    a3ec:	4648      	mov	r0, r9
    a3ee:	f7ff fb8f 	bl	9b10 <__mcmp>
    a3f2:	2800      	cmp	r0, #0
    a3f4:	db2b      	blt.n	a44e <quorem+0x116>
    a3f6:	3601      	adds	r6, #1
    a3f8:	4641      	mov	r1, r8
    a3fa:	2300      	movs	r3, #0
    a3fc:	f855 0b04 	ldr.w	r0, [r5], #4
    a400:	f8d1 c000 	ldr.w	ip, [r1]
    a404:	b282      	uxth	r2, r0
    a406:	1a9a      	subs	r2, r3, r2
    a408:	0c03      	lsrs	r3, r0, #16
    a40a:	fa12 f28c 	uxtah	r2, r2, ip
    a40e:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
    a412:	eb03 4322 	add.w	r3, r3, r2, asr #16
    a416:	b292      	uxth	r2, r2
    a418:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    a41c:	42af      	cmp	r7, r5
    a41e:	f841 2b04 	str.w	r2, [r1], #4
    a422:	ea4f 4323 	mov.w	r3, r3, asr #16
    a426:	d2e9      	bcs.n	a3fc <quorem+0xc4>
    a428:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    a42c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    a430:	b96a      	cbnz	r2, a44e <quorem+0x116>
    a432:	3b04      	subs	r3, #4
    a434:	4598      	cmp	r8, r3
    a436:	d304      	bcc.n	a442 <quorem+0x10a>
    a438:	e007      	b.n	a44a <quorem+0x112>
    a43a:	4598      	cmp	r8, r3
    a43c:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
    a440:	d203      	bcs.n	a44a <quorem+0x112>
    a442:	f853 2904 	ldr.w	r2, [r3], #-4
    a446:	2a00      	cmp	r2, #0
    a448:	d0f7      	beq.n	a43a <quorem+0x102>
    a44a:	f8c9 4010 	str.w	r4, [r9, #16]
    a44e:	4630      	mov	r0, r6
    a450:	b003      	add	sp, #12
    a452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a456:	2000      	movs	r0, #0
    a458:	b003      	add	sp, #12
    a45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a45e:	bf00      	nop

0000a460 <_dtoa_r>:
    a460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a464:	ed2d 8b02 	vpush	{d8}
    a468:	b08f      	sub	sp, #60	; 0x3c
    a46a:	ed8d 0b02 	vstr	d0, [sp, #8]
    a46e:	9101      	str	r1, [sp, #4]
    a470:	6b81      	ldr	r1, [r0, #56]	; 0x38
    a472:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    a474:	9305      	str	r3, [sp, #20]
    a476:	ec57 6b10 	vmov	r6, r7, d0
    a47a:	4604      	mov	r4, r0
    a47c:	4693      	mov	fp, r2
    a47e:	b141      	cbz	r1, a492 <_dtoa_r+0x32>
    a480:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    a482:	604a      	str	r2, [r1, #4]
    a484:	2301      	movs	r3, #1
    a486:	4093      	lsls	r3, r2
    a488:	608b      	str	r3, [r1, #8]
    a48a:	f7ff f8e1 	bl	9650 <_Bfree>
    a48e:	2300      	movs	r3, #0
    a490:	63a3      	str	r3, [r4, #56]	; 0x38
    a492:	f1b7 0800 	subs.w	r8, r7, #0
    a496:	bfb4      	ite	lt
    a498:	2301      	movlt	r3, #1
    a49a:	2300      	movge	r3, #0
    a49c:	602b      	str	r3, [r5, #0]
    a49e:	4bbe      	ldr	r3, [pc, #760]	; (a798 <_dtoa_r+0x338>)
    a4a0:	bfbc      	itt	lt
    a4a2:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
    a4a6:	f8cd 800c 	strlt.w	r8, [sp, #12]
    a4aa:	ea33 0308 	bics.w	r3, r3, r8
    a4ae:	f000 809f 	beq.w	a5f0 <_dtoa_r+0x190>
    a4b2:	ed9d 8b02 	vldr	d8, [sp, #8]
    a4b6:	eeb5 8b40 	vcmp.f64	d8, #0.0
    a4ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a4be:	d111      	bne.n	a4e4 <_dtoa_r+0x84>
    a4c0:	9a05      	ldr	r2, [sp, #20]
    a4c2:	2301      	movs	r3, #1
    a4c4:	6013      	str	r3, [r2, #0]
    a4c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a4c8:	2b00      	cmp	r3, #0
    a4ca:	f000 823f 	beq.w	a94c <_dtoa_r+0x4ec>
    a4ce:	4bb3      	ldr	r3, [pc, #716]	; (a79c <_dtoa_r+0x33c>)
    a4d0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    a4d2:	6013      	str	r3, [r2, #0]
    a4d4:	3b01      	subs	r3, #1
    a4d6:	9300      	str	r3, [sp, #0]
    a4d8:	9800      	ldr	r0, [sp, #0]
    a4da:	b00f      	add	sp, #60	; 0x3c
    a4dc:	ecbd 8b02 	vpop	{d8}
    a4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a4e4:	aa0c      	add	r2, sp, #48	; 0x30
    a4e6:	a90d      	add	r1, sp, #52	; 0x34
    a4e8:	4620      	mov	r0, r4
    a4ea:	eeb0 0b48 	vmov.f64	d0, d8
    a4ee:	f7ff fbdb 	bl	9ca8 <__d2b>
    a4f2:	ea5f 5318 	movs.w	r3, r8, lsr #20
    a4f6:	4605      	mov	r5, r0
    a4f8:	f040 8092 	bne.w	a620 <_dtoa_r+0x1c0>
    a4fc:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
    a500:	440b      	add	r3, r1
    a502:	f203 4232 	addw	r2, r3, #1074	; 0x432
    a506:	2a20      	cmp	r2, #32
    a508:	f340 82fa 	ble.w	ab00 <_dtoa_r+0x6a0>
    a50c:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    a510:	fa08 f802 	lsl.w	r8, r8, r2
    a514:	f203 4212 	addw	r2, r3, #1042	; 0x412
    a518:	40d6      	lsrs	r6, r2
    a51a:	ea48 0206 	orr.w	r2, r8, r6
    a51e:	ee07 2a10 	vmov	s14, r2
    a522:	eeb8 7b47 	vcvt.f64.u32	d7, s14
    a526:	1e58      	subs	r0, r3, #1
    a528:	ee17 6a90 	vmov	r6, s15
    a52c:	ec53 2b17 	vmov	r2, r3, d7
    a530:	f04f 0a01 	mov.w	sl, #1
    a534:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
    a538:	ed9f 3b91 	vldr	d3, [pc, #580]	; a780 <_dtoa_r+0x320>
    a53c:	ed9f 7b92 	vldr	d7, [pc, #584]	; a788 <_dtoa_r+0x328>
    a540:	ed9f 5b93 	vldr	d5, [pc, #588]	; a790 <_dtoa_r+0x330>
    a544:	ee06 0a90 	vmov	s13, r0
    a548:	ec43 2b12 	vmov	d2, r2, r3
    a54c:	eeb8 4be6 	vcvt.f64.s32	d4, s13
    a550:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    a554:	ee32 6b46 	vsub.f64	d6, d2, d6
    a558:	eea6 7b03 	vfma.f64	d7, d6, d3
    a55c:	eea4 7b05 	vfma.f64	d7, d4, d5
    a560:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    a564:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    a568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a56c:	ee16 7a90 	vmov	r7, s13
    a570:	d508      	bpl.n	a584 <_dtoa_r+0x124>
    a572:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    a576:	eeb4 6b47 	vcmp.f64	d6, d7
    a57a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a57e:	bf18      	it	ne
    a580:	f107 37ff 	addne.w	r7, r7, #4294967295	; 0xffffffff
    a584:	2f16      	cmp	r7, #22
    a586:	f200 8145 	bhi.w	a814 <_dtoa_r+0x3b4>
    a58a:	4b85      	ldr	r3, [pc, #532]	; (a7a0 <_dtoa_r+0x340>)
    a58c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    a590:	ed93 7b00 	vldr	d7, [r3]
    a594:	eeb4 8bc7 	vcmpe.f64	d8, d7
    a598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a59c:	d557      	bpl.n	a64e <_dtoa_r+0x1ee>
    a59e:	1a09      	subs	r1, r1, r0
    a5a0:	2300      	movs	r3, #0
    a5a2:	f1b1 0801 	subs.w	r8, r1, #1
    a5a6:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    a5aa:	930a      	str	r3, [sp, #40]	; 0x28
    a5ac:	f100 8139 	bmi.w	a822 <_dtoa_r+0x3c2>
    a5b0:	2300      	movs	r3, #0
    a5b2:	9306      	str	r3, [sp, #24]
    a5b4:	2f00      	cmp	r7, #0
    a5b6:	da52      	bge.n	a65e <_dtoa_r+0x1fe>
    a5b8:	9b06      	ldr	r3, [sp, #24]
    a5ba:	9704      	str	r7, [sp, #16]
    a5bc:	1bdb      	subs	r3, r3, r7
    a5be:	9306      	str	r3, [sp, #24]
    a5c0:	427b      	negs	r3, r7
    a5c2:	9308      	str	r3, [sp, #32]
    a5c4:	9b01      	ldr	r3, [sp, #4]
    a5c6:	2b09      	cmp	r3, #9
    a5c8:	f04f 0700 	mov.w	r7, #0
    a5cc:	d84e      	bhi.n	a66c <_dtoa_r+0x20c>
    a5ce:	2b05      	cmp	r3, #5
    a5d0:	f340 829d 	ble.w	ab0e <_dtoa_r+0x6ae>
    a5d4:	3b04      	subs	r3, #4
    a5d6:	9301      	str	r3, [sp, #4]
    a5d8:	2600      	movs	r6, #0
    a5da:	9b01      	ldr	r3, [sp, #4]
    a5dc:	1e9a      	subs	r2, r3, #2
    a5de:	2a03      	cmp	r2, #3
    a5e0:	f200 8125 	bhi.w	a82e <_dtoa_r+0x3ce>
    a5e4:	e8df f012 	tbh	[pc, r2, lsl #1]
    a5e8:	03a703aa 	.word	0x03a703aa
    a5ec:	037e039d 	.word	0x037e039d
    a5f0:	9a05      	ldr	r2, [sp, #20]
    a5f2:	f3c8 0813 	ubfx	r8, r8, #0, #20
    a5f6:	f242 730f 	movw	r3, #9999	; 0x270f
    a5fa:	ea58 0806 	orrs.w	r8, r8, r6
    a5fe:	6013      	str	r3, [r2, #0]
    a600:	d11e      	bne.n	a640 <_dtoa_r+0x1e0>
    a602:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a604:	2b00      	cmp	r3, #0
    a606:	f000 8591 	beq.w	b12c <_dtoa_r+0xccc>
    a60a:	4b66      	ldr	r3, [pc, #408]	; (a7a4 <_dtoa_r+0x344>)
    a60c:	9300      	str	r3, [sp, #0]
    a60e:	3308      	adds	r3, #8
    a610:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    a612:	9800      	ldr	r0, [sp, #0]
    a614:	6013      	str	r3, [r2, #0]
    a616:	b00f      	add	sp, #60	; 0x3c
    a618:	ecbd 8b02 	vpop	{d8}
    a61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a620:	ee18 6a90 	vmov	r6, s17
    a624:	f3c6 0613 	ubfx	r6, r6, #0, #20
    a628:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
    a62c:	ec53 2b18 	vmov	r2, r3, d8
    a630:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
    a634:	990c      	ldr	r1, [sp, #48]	; 0x30
    a636:	f04f 0a00 	mov.w	sl, #0
    a63a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    a63e:	e77b      	b.n	a538 <_dtoa_r+0xd8>
    a640:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a642:	2b00      	cmp	r3, #0
    a644:	f040 833b 	bne.w	acbe <_dtoa_r+0x85e>
    a648:	4b57      	ldr	r3, [pc, #348]	; (a7a8 <_dtoa_r+0x348>)
    a64a:	9300      	str	r3, [sp, #0]
    a64c:	e744      	b.n	a4d8 <_dtoa_r+0x78>
    a64e:	1a09      	subs	r1, r1, r0
    a650:	2300      	movs	r3, #0
    a652:	f1b1 0801 	subs.w	r8, r1, #1
    a656:	930a      	str	r3, [sp, #40]	; 0x28
    a658:	f100 80e3 	bmi.w	a822 <_dtoa_r+0x3c2>
    a65c:	9306      	str	r3, [sp, #24]
    a65e:	2300      	movs	r3, #0
    a660:	9308      	str	r3, [sp, #32]
    a662:	9b01      	ldr	r3, [sp, #4]
    a664:	9704      	str	r7, [sp, #16]
    a666:	2b09      	cmp	r3, #9
    a668:	44b8      	add	r8, r7
    a66a:	d9b0      	bls.n	a5ce <_dtoa_r+0x16e>
    a66c:	2300      	movs	r3, #0
    a66e:	2601      	movs	r6, #1
    a670:	9301      	str	r3, [sp, #4]
    a672:	9607      	str	r6, [sp, #28]
    a674:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    a678:	469b      	mov	fp, r3
    a67a:	2100      	movs	r1, #0
    a67c:	63e1      	str	r1, [r4, #60]	; 0x3c
    a67e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    a682:	4620      	mov	r0, r4
    a684:	f7fe ffbe 	bl	9604 <_Balloc>
    a688:	9000      	str	r0, [sp, #0]
    a68a:	2800      	cmp	r0, #0
    a68c:	f000 8540 	beq.w	b110 <_dtoa_r+0xcb0>
    a690:	9b00      	ldr	r3, [sp, #0]
    a692:	63a3      	str	r3, [r4, #56]	; 0x38
    a694:	f1b9 0f0e 	cmp.w	r9, #14
    a698:	f200 80dc 	bhi.w	a854 <_dtoa_r+0x3f4>
    a69c:	2e00      	cmp	r6, #0
    a69e:	f000 80d9 	beq.w	a854 <_dtoa_r+0x3f4>
    a6a2:	9b04      	ldr	r3, [sp, #16]
    a6a4:	2b00      	cmp	r3, #0
    a6a6:	f340 83de 	ble.w	ae66 <_dtoa_r+0xa06>
    a6aa:	4a3d      	ldr	r2, [pc, #244]	; (a7a0 <_dtoa_r+0x340>)
    a6ac:	f003 010f 	and.w	r1, r3, #15
    a6b0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    a6b4:	ed92 7b00 	vldr	d7, [r2]
    a6b8:	111a      	asrs	r2, r3, #4
    a6ba:	05db      	lsls	r3, r3, #23
    a6bc:	f140 8382 	bpl.w	adc4 <_dtoa_r+0x964>
    a6c0:	493a      	ldr	r1, [pc, #232]	; (a7ac <_dtoa_r+0x34c>)
    a6c2:	ed91 6b08 	vldr	d6, [r1, #32]
    a6c6:	f002 020f 	and.w	r2, r2, #15
    a6ca:	2003      	movs	r0, #3
    a6cc:	ee88 5b06 	vdiv.f64	d5, d8, d6
    a6d0:	b15a      	cbz	r2, a6ea <_dtoa_r+0x28a>
    a6d2:	4936      	ldr	r1, [pc, #216]	; (a7ac <_dtoa_r+0x34c>)
    a6d4:	07d6      	lsls	r6, r2, #31
    a6d6:	d504      	bpl.n	a6e2 <_dtoa_r+0x282>
    a6d8:	ed91 6b00 	vldr	d6, [r1]
    a6dc:	3001      	adds	r0, #1
    a6de:	ee27 7b06 	vmul.f64	d7, d7, d6
    a6e2:	1052      	asrs	r2, r2, #1
    a6e4:	f101 0108 	add.w	r1, r1, #8
    a6e8:	d1f4      	bne.n	a6d4 <_dtoa_r+0x274>
    a6ea:	ee85 6b07 	vdiv.f64	d6, d5, d7
    a6ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a6f0:	b13b      	cbz	r3, a702 <_dtoa_r+0x2a2>
    a6f2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    a6f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
    a6fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a6fe:	f100 84ae 	bmi.w	b05e <_dtoa_r+0xbfe>
    a702:	ee07 0a90 	vmov	s15, r0
    a706:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    a70a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    a70e:	eea5 7b06 	vfma.f64	d7, d5, d6
    a712:	ee17 2a90 	vmov	r2, s15
    a716:	ec51 0b17 	vmov	r0, r1, d7
    a71a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    a71e:	f1b9 0f00 	cmp.w	r9, #0
    a722:	f000 8388 	beq.w	ae36 <_dtoa_r+0x9d6>
    a726:	9e04      	ldr	r6, [sp, #16]
    a728:	464a      	mov	r2, r9
    a72a:	9b07      	ldr	r3, [sp, #28]
    a72c:	2b00      	cmp	r3, #0
    a72e:	f000 8447 	beq.w	afc0 <_dtoa_r+0xb60>
    a732:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    a736:	4b1a      	ldr	r3, [pc, #104]	; (a7a0 <_dtoa_r+0x340>)
    a738:	eefd 4bc6 	vcvt.s32.f64	s9, d6
    a73c:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    a740:	eeb8 7be4 	vcvt.f64.s32	d7, s9
    a744:	ee36 7b47 	vsub.f64	d7, d6, d7
    a748:	ed1c 6b02 	vldr	d6, [ip, #-8]
    a74c:	ee83 5b06 	vdiv.f64	d5, d3, d6
    a750:	ec41 0b16 	vmov	d6, r0, r1
    a754:	ee14 0a90 	vmov	r0, s9
    a758:	ee35 5b46 	vsub.f64	d5, d5, d6
    a75c:	9900      	ldr	r1, [sp, #0]
    a75e:	eeb4 5bc7 	vcmpe.f64	d5, d7
    a762:	3030      	adds	r0, #48	; 0x30
    a764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a768:	f801 0b01 	strb.w	r0, [r1], #1
    a76c:	f300 84ac 	bgt.w	b0c8 <_dtoa_r+0xc68>
    a770:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
    a774:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    a778:	f04f 0c00 	mov.w	ip, #0
    a77c:	e031      	b.n	a7e2 <_dtoa_r+0x382>
    a77e:	bf00      	nop
    a780:	636f4361 	.word	0x636f4361
    a784:	3fd287a7 	.word	0x3fd287a7
    a788:	8b60c8b3 	.word	0x8b60c8b3
    a78c:	3fc68a28 	.word	0x3fc68a28
    a790:	509f79fb 	.word	0x509f79fb
    a794:	3fd34413 	.word	0x3fd34413
    a798:	7ff00000 	.word	0x7ff00000
    a79c:	20018c69 	.word	0x20018c69
    a7a0:	200002a8 	.word	0x200002a8
    a7a4:	20018bb4 	.word	0x20018bb4
    a7a8:	20018bc0 	.word	0x20018bc0
    a7ac:	20000280 	.word	0x20000280
    a7b0:	f10c 0c01 	add.w	ip, ip, #1
    a7b4:	4594      	cmp	ip, r2
    a7b6:	da4d      	bge.n	a854 <_dtoa_r+0x3f4>
    a7b8:	ee27 7b04 	vmul.f64	d7, d7, d4
    a7bc:	ee25 5b04 	vmul.f64	d5, d5, d4
    a7c0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    a7c4:	ee16 3a90 	vmov	r3, s13
    a7c8:	eeb8 3be6 	vcvt.f64.s32	d3, s13
    a7cc:	3330      	adds	r3, #48	; 0x30
    a7ce:	ee37 7b43 	vsub.f64	d7, d7, d3
    a7d2:	eeb4 7bc5 	vcmpe.f64	d7, d5
    a7d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a7da:	f801 3b01 	strb.w	r3, [r1], #1
    a7de:	f100 8473 	bmi.w	b0c8 <_dtoa_r+0xc68>
    a7e2:	ee32 6b47 	vsub.f64	d6, d2, d7
    a7e6:	eeb4 6bc5 	vcmpe.f64	d6, d5
    a7ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a7ee:	d5df      	bpl.n	a7b0 <_dtoa_r+0x350>
    a7f0:	9a00      	ldr	r2, [sp, #0]
    a7f2:	9604      	str	r6, [sp, #16]
    a7f4:	e002      	b.n	a7fc <_dtoa_r+0x39c>
    a7f6:	428a      	cmp	r2, r1
    a7f8:	f000 8450 	beq.w	b09c <_dtoa_r+0xc3c>
    a7fc:	4689      	mov	r9, r1
    a7fe:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    a802:	2b39      	cmp	r3, #57	; 0x39
    a804:	d0f7      	beq.n	a7f6 <_dtoa_r+0x396>
    a806:	3301      	adds	r3, #1
    a808:	b2db      	uxtb	r3, r3
    a80a:	700b      	strb	r3, [r1, #0]
    a80c:	9b04      	ldr	r3, [sp, #16]
    a80e:	3301      	adds	r3, #1
    a810:	9304      	str	r3, [sp, #16]
    a812:	e155      	b.n	aac0 <_dtoa_r+0x660>
    a814:	1a09      	subs	r1, r1, r0
    a816:	2301      	movs	r3, #1
    a818:	f1b1 0801 	subs.w	r8, r1, #1
    a81c:	930a      	str	r3, [sp, #40]	; 0x28
    a81e:	f57f aec7 	bpl.w	a5b0 <_dtoa_r+0x150>
    a822:	f1c1 0301 	rsb	r3, r1, #1
    a826:	9306      	str	r3, [sp, #24]
    a828:	f04f 0800 	mov.w	r8, #0
    a82c:	e6c2      	b.n	a5b4 <_dtoa_r+0x154>
    a82e:	2600      	movs	r6, #0
    a830:	63e6      	str	r6, [r4, #60]	; 0x3c
    a832:	4631      	mov	r1, r6
    a834:	4620      	mov	r0, r4
    a836:	f7fe fee5 	bl	9604 <_Balloc>
    a83a:	9000      	str	r0, [sp, #0]
    a83c:	2800      	cmp	r0, #0
    a83e:	f000 8467 	beq.w	b110 <_dtoa_r+0xcb0>
    a842:	9b00      	ldr	r3, [sp, #0]
    a844:	63a3      	str	r3, [r4, #56]	; 0x38
    a846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a84a:	930b      	str	r3, [sp, #44]	; 0x2c
    a84c:	4699      	mov	r9, r3
    a84e:	2301      	movs	r3, #1
    a850:	46b3      	mov	fp, r6
    a852:	9307      	str	r3, [sp, #28]
    a854:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    a856:	2a00      	cmp	r2, #0
    a858:	db55      	blt.n	a906 <_dtoa_r+0x4a6>
    a85a:	9904      	ldr	r1, [sp, #16]
    a85c:	290e      	cmp	r1, #14
    a85e:	dc52      	bgt.n	a906 <_dtoa_r+0x4a6>
    a860:	4bb7      	ldr	r3, [pc, #732]	; (ab40 <_dtoa_r+0x6e0>)
    a862:	f1bb 0f00 	cmp.w	fp, #0
    a866:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    a86a:	ed93 6b00 	vldr	d6, [r3]
    a86e:	da15      	bge.n	a89c <_dtoa_r+0x43c>
    a870:	f1b9 0f00 	cmp.w	r9, #0
    a874:	dc12      	bgt.n	a89c <_dtoa_r+0x43c>
    a876:	f040 82f2 	bne.w	ae5e <_dtoa_r+0x9fe>
    a87a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    a87e:	ee26 7b07 	vmul.f64	d7, d6, d7
    a882:	eeb4 8bc7 	vcmpe.f64	d8, d7
    a886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a88a:	46ca      	mov	sl, r9
    a88c:	464e      	mov	r6, r9
    a88e:	f200 826d 	bhi.w	ad6c <_dtoa_r+0x90c>
    a892:	f8dd 8000 	ldr.w	r8, [sp]
    a896:	ea6f 0b0b 	mvn.w	fp, fp
    a89a:	e270      	b.n	ad7e <_dtoa_r+0x91e>
    a89c:	ee88 7b06 	vdiv.f64	d7, d8, d6
    a8a0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    a8a4:	9900      	ldr	r1, [sp, #0]
    a8a6:	ee17 3a10 	vmov	r3, s14
    a8aa:	f1b9 0f01 	cmp.w	r9, #1
    a8ae:	f103 0330 	add.w	r3, r3, #48	; 0x30
    a8b2:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    a8b6:	f801 3b01 	strb.w	r3, [r1], #1
    a8ba:	eea5 8b46 	vfms.f64	d8, d5, d6
    a8be:	f000 8334 	beq.w	af2a <_dtoa_r+0xaca>
    a8c2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    a8c6:	2301      	movs	r3, #1
    a8c8:	e011      	b.n	a8ee <_dtoa_r+0x48e>
    a8ca:	ee88 7b06 	vdiv.f64	d7, d8, d6
    a8ce:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    a8d2:	3301      	adds	r3, #1
    a8d4:	ee17 2a10 	vmov	r2, s14
    a8d8:	454b      	cmp	r3, r9
    a8da:	f102 0230 	add.w	r2, r2, #48	; 0x30
    a8de:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    a8e2:	f801 2b01 	strb.w	r2, [r1], #1
    a8e6:	eea5 8b46 	vfms.f64	d8, d5, d6
    a8ea:	f000 831e 	beq.w	af2a <_dtoa_r+0xaca>
    a8ee:	ee28 8b04 	vmul.f64	d8, d8, d4
    a8f2:	eeb5 8b40 	vcmp.f64	d8, #0.0
    a8f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a8fa:	d1e6      	bne.n	a8ca <_dtoa_r+0x46a>
    a8fc:	9b04      	ldr	r3, [sp, #16]
    a8fe:	3301      	adds	r3, #1
    a900:	9304      	str	r3, [sp, #16]
    a902:	4689      	mov	r9, r1
    a904:	e0dc      	b.n	aac0 <_dtoa_r+0x660>
    a906:	9b07      	ldr	r3, [sp, #28]
    a908:	b343      	cbz	r3, a95c <_dtoa_r+0x4fc>
    a90a:	9b01      	ldr	r3, [sp, #4]
    a90c:	2b01      	cmp	r3, #1
    a90e:	f340 8276 	ble.w	adfe <_dtoa_r+0x99e>
    a912:	9b08      	ldr	r3, [sp, #32]
    a914:	f109 3aff 	add.w	sl, r9, #4294967295	; 0xffffffff
    a918:	4553      	cmp	r3, sl
    a91a:	f280 823f 	bge.w	ad9c <_dtoa_r+0x93c>
    a91e:	9b08      	ldr	r3, [sp, #32]
    a920:	f8cd a020 	str.w	sl, [sp, #32]
    a924:	ebaa 0203 	sub.w	r2, sl, r3
    a928:	4417      	add	r7, r2
    a92a:	f04f 0a00 	mov.w	sl, #0
    a92e:	f1b9 0f00 	cmp.w	r9, #0
    a932:	f2c0 8325 	blt.w	af80 <_dtoa_r+0xb20>
    a936:	9b06      	ldr	r3, [sp, #24]
    a938:	9309      	str	r3, [sp, #36]	; 0x24
    a93a:	444b      	add	r3, r9
    a93c:	44c8      	add	r8, r9
    a93e:	9306      	str	r3, [sp, #24]
    a940:	2101      	movs	r1, #1
    a942:	4620      	mov	r0, r4
    a944:	f7fe ff30 	bl	97a8 <__i2b>
    a948:	4606      	mov	r6, r0
    a94a:	e00c      	b.n	a966 <_dtoa_r+0x506>
    a94c:	4b7d      	ldr	r3, [pc, #500]	; (ab44 <_dtoa_r+0x6e4>)
    a94e:	9300      	str	r3, [sp, #0]
    a950:	9800      	ldr	r0, [sp, #0]
    a952:	b00f      	add	sp, #60	; 0x3c
    a954:	ecbd 8b02 	vpop	{d8}
    a958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a95c:	9b06      	ldr	r3, [sp, #24]
    a95e:	f8dd a020 	ldr.w	sl, [sp, #32]
    a962:	9e07      	ldr	r6, [sp, #28]
    a964:	9309      	str	r3, [sp, #36]	; 0x24
    a966:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a968:	b16b      	cbz	r3, a986 <_dtoa_r+0x526>
    a96a:	f1b8 0f00 	cmp.w	r8, #0
    a96e:	dd0a      	ble.n	a986 <_dtoa_r+0x526>
    a970:	4543      	cmp	r3, r8
    a972:	9906      	ldr	r1, [sp, #24]
    a974:	461a      	mov	r2, r3
    a976:	bfa8      	it	ge
    a978:	4642      	movge	r2, r8
    a97a:	1a89      	subs	r1, r1, r2
    a97c:	1a9b      	subs	r3, r3, r2
    a97e:	9106      	str	r1, [sp, #24]
    a980:	9309      	str	r3, [sp, #36]	; 0x24
    a982:	eba8 0802 	sub.w	r8, r8, r2
    a986:	9b08      	ldr	r3, [sp, #32]
    a988:	b163      	cbz	r3, a9a4 <_dtoa_r+0x544>
    a98a:	9b07      	ldr	r3, [sp, #28]
    a98c:	2b00      	cmp	r3, #0
    a98e:	f000 82a7 	beq.w	aee0 <_dtoa_r+0xa80>
    a992:	f1ba 0f00 	cmp.w	sl, #0
    a996:	f300 8204 	bgt.w	ada2 <_dtoa_r+0x942>
    a99a:	9b08      	ldr	r3, [sp, #32]
    a99c:	ebb3 020a 	subs.w	r2, r3, sl
    a9a0:	f040 82ff 	bne.w	afa2 <_dtoa_r+0xb42>
    a9a4:	2101      	movs	r1, #1
    a9a6:	4620      	mov	r0, r4
    a9a8:	f7fe fefe 	bl	97a8 <__i2b>
    a9ac:	2f00      	cmp	r7, #0
    a9ae:	4682      	mov	sl, r0
    a9b0:	f300 80af 	bgt.w	ab12 <_dtoa_r+0x6b2>
    a9b4:	9b01      	ldr	r3, [sp, #4]
    a9b6:	2b01      	cmp	r3, #1
    a9b8:	f340 8187 	ble.w	acca <_dtoa_r+0x86a>
    a9bc:	2300      	movs	r3, #0
    a9be:	9308      	str	r3, [sp, #32]
    a9c0:	2001      	movs	r0, #1
    a9c2:	2f00      	cmp	r7, #0
    a9c4:	f040 80b1 	bne.w	ab2a <_dtoa_r+0x6ca>
    a9c8:	4440      	add	r0, r8
    a9ca:	f010 001f 	ands.w	r0, r0, #31
    a9ce:	f000 817a 	beq.w	acc6 <_dtoa_r+0x866>
    a9d2:	f1c0 0220 	rsb	r2, r0, #32
    a9d6:	2a04      	cmp	r2, #4
    a9d8:	f300 8088 	bgt.w	aaec <_dtoa_r+0x68c>
    a9dc:	f040 81f6 	bne.w	adcc <_dtoa_r+0x96c>
    a9e0:	9b06      	ldr	r3, [sp, #24]
    a9e2:	2b00      	cmp	r3, #0
    a9e4:	dd05      	ble.n	a9f2 <_dtoa_r+0x592>
    a9e6:	4629      	mov	r1, r5
    a9e8:	461a      	mov	r2, r3
    a9ea:	4620      	mov	r0, r4
    a9ec:	f7ff f818 	bl	9a20 <__lshift>
    a9f0:	4605      	mov	r5, r0
    a9f2:	f1b8 0f00 	cmp.w	r8, #0
    a9f6:	dd05      	ble.n	aa04 <_dtoa_r+0x5a4>
    a9f8:	4651      	mov	r1, sl
    a9fa:	4642      	mov	r2, r8
    a9fc:	4620      	mov	r0, r4
    a9fe:	f7ff f80f 	bl	9a20 <__lshift>
    aa02:	4682      	mov	sl, r0
    aa04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    aa06:	2b00      	cmp	r3, #0
    aa08:	f040 813f 	bne.w	ac8a <_dtoa_r+0x82a>
    aa0c:	f1b9 0f00 	cmp.w	r9, #0
    aa10:	f340 8125 	ble.w	ac5e <_dtoa_r+0x7fe>
    aa14:	9b07      	ldr	r3, [sp, #28]
    aa16:	2b00      	cmp	r3, #0
    aa18:	f040 80a3 	bne.w	ab62 <_dtoa_r+0x702>
    aa1c:	9b04      	ldr	r3, [sp, #16]
    aa1e:	3301      	adds	r3, #1
    aa20:	9304      	str	r3, [sp, #16]
    aa22:	f8dd 8000 	ldr.w	r8, [sp]
    aa26:	2701      	movs	r7, #1
    aa28:	e007      	b.n	aa3a <_dtoa_r+0x5da>
    aa2a:	4629      	mov	r1, r5
    aa2c:	2300      	movs	r3, #0
    aa2e:	220a      	movs	r2, #10
    aa30:	4620      	mov	r0, r4
    aa32:	f7fe fe17 	bl	9664 <__multadd>
    aa36:	3701      	adds	r7, #1
    aa38:	4605      	mov	r5, r0
    aa3a:	4651      	mov	r1, sl
    aa3c:	4628      	mov	r0, r5
    aa3e:	f7ff fc7b 	bl	a338 <quorem>
    aa42:	45b9      	cmp	r9, r7
    aa44:	f100 0030 	add.w	r0, r0, #48	; 0x30
    aa48:	f808 0b01 	strb.w	r0, [r8], #1
    aa4c:	dced      	bgt.n	aa2a <_dtoa_r+0x5ca>
    aa4e:	f1b9 0f00 	cmp.w	r9, #0
    aa52:	9a00      	ldr	r2, [sp, #0]
    aa54:	bfcc      	ite	gt
    aa56:	46cb      	movgt	fp, r9
    aa58:	f04f 0b01 	movle.w	fp, #1
    aa5c:	4603      	mov	r3, r0
    aa5e:	4493      	add	fp, r2
    aa60:	2700      	movs	r7, #0
    aa62:	4629      	mov	r1, r5
    aa64:	2201      	movs	r2, #1
    aa66:	4620      	mov	r0, r4
    aa68:	9301      	str	r3, [sp, #4]
    aa6a:	f7fe ffd9 	bl	9a20 <__lshift>
    aa6e:	4651      	mov	r1, sl
    aa70:	4605      	mov	r5, r0
    aa72:	f7ff f84d 	bl	9b10 <__mcmp>
    aa76:	2800      	cmp	r0, #0
    aa78:	f340 81af 	ble.w	adda <_dtoa_r+0x97a>
    aa7c:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    aa80:	9a00      	ldr	r2, [sp, #0]
    aa82:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    aa86:	e004      	b.n	aa92 <_dtoa_r+0x632>
    aa88:	455a      	cmp	r2, fp
    aa8a:	f000 81b1 	beq.w	adf0 <_dtoa_r+0x990>
    aa8e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    aa92:	2b39      	cmp	r3, #57	; 0x39
    aa94:	f10b 0901 	add.w	r9, fp, #1
    aa98:	d0f6      	beq.n	aa88 <_dtoa_r+0x628>
    aa9a:	3301      	adds	r3, #1
    aa9c:	f88b 3000 	strb.w	r3, [fp]
    aaa0:	4651      	mov	r1, sl
    aaa2:	4620      	mov	r0, r4
    aaa4:	f7fe fdd4 	bl	9650 <_Bfree>
    aaa8:	b156      	cbz	r6, aac0 <_dtoa_r+0x660>
    aaaa:	b12f      	cbz	r7, aab8 <_dtoa_r+0x658>
    aaac:	42b7      	cmp	r7, r6
    aaae:	d003      	beq.n	aab8 <_dtoa_r+0x658>
    aab0:	4639      	mov	r1, r7
    aab2:	4620      	mov	r0, r4
    aab4:	f7fe fdcc 	bl	9650 <_Bfree>
    aab8:	4631      	mov	r1, r6
    aaba:	4620      	mov	r0, r4
    aabc:	f7fe fdc8 	bl	9650 <_Bfree>
    aac0:	4629      	mov	r1, r5
    aac2:	4620      	mov	r0, r4
    aac4:	f7fe fdc4 	bl	9650 <_Bfree>
    aac8:	2300      	movs	r3, #0
    aaca:	f889 3000 	strb.w	r3, [r9]
    aace:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    aad2:	601a      	str	r2, [r3, #0]
    aad4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    aad6:	2b00      	cmp	r3, #0
    aad8:	f43f acfe 	beq.w	a4d8 <_dtoa_r+0x78>
    aadc:	9800      	ldr	r0, [sp, #0]
    aade:	f8c3 9000 	str.w	r9, [r3]
    aae2:	b00f      	add	sp, #60	; 0x3c
    aae4:	ecbd 8b02 	vpop	{d8}
    aae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aaec:	f1c0 001c 	rsb	r0, r0, #28
    aaf0:	9b06      	ldr	r3, [sp, #24]
    aaf2:	4403      	add	r3, r0
    aaf4:	9306      	str	r3, [sp, #24]
    aaf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    aaf8:	4403      	add	r3, r0
    aafa:	9309      	str	r3, [sp, #36]	; 0x24
    aafc:	4480      	add	r8, r0
    aafe:	e76f      	b.n	a9e0 <_dtoa_r+0x580>
    ab00:	f1c2 0220 	rsb	r2, r2, #32
    ab04:	fa06 f202 	lsl.w	r2, r6, r2
    ab08:	ee07 2a10 	vmov	s14, r2
    ab0c:	e509      	b.n	a522 <_dtoa_r+0xc2>
    ab0e:	2601      	movs	r6, #1
    ab10:	e563      	b.n	a5da <_dtoa_r+0x17a>
    ab12:	4601      	mov	r1, r0
    ab14:	463a      	mov	r2, r7
    ab16:	4620      	mov	r0, r4
    ab18:	f7fe ff22 	bl	9960 <__pow5mult>
    ab1c:	9b01      	ldr	r3, [sp, #4]
    ab1e:	2b01      	cmp	r3, #1
    ab20:	4682      	mov	sl, r0
    ab22:	f340 81c5 	ble.w	aeb0 <_dtoa_r+0xa50>
    ab26:	2300      	movs	r3, #0
    ab28:	9308      	str	r3, [sp, #32]
    ab2a:	f8da 2010 	ldr.w	r2, [sl, #16]
    ab2e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
    ab32:	6910      	ldr	r0, [r2, #16]
    ab34:	f7fe fde8 	bl	9708 <__hi0bits>
    ab38:	f1c0 0020 	rsb	r0, r0, #32
    ab3c:	e744      	b.n	a9c8 <_dtoa_r+0x568>
    ab3e:	bf00      	nop
    ab40:	200002a8 	.word	0x200002a8
    ab44:	20018c68 	.word	0x20018c68
    ab48:	4631      	mov	r1, r6
    ab4a:	2300      	movs	r3, #0
    ab4c:	220a      	movs	r2, #10
    ab4e:	4620      	mov	r0, r4
    ab50:	f7fe fd88 	bl	9664 <__multadd>
    ab54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ab56:	2b00      	cmp	r3, #0
    ab58:	4606      	mov	r6, r0
    ab5a:	f340 82ce 	ble.w	b0fa <_dtoa_r+0xc9a>
    ab5e:	9704      	str	r7, [sp, #16]
    ab60:	4699      	mov	r9, r3
    ab62:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ab64:	2b00      	cmp	r3, #0
    ab66:	dd05      	ble.n	ab74 <_dtoa_r+0x714>
    ab68:	4631      	mov	r1, r6
    ab6a:	461a      	mov	r2, r3
    ab6c:	4620      	mov	r0, r4
    ab6e:	f7fe ff57 	bl	9a20 <__lshift>
    ab72:	4606      	mov	r6, r0
    ab74:	9b08      	ldr	r3, [sp, #32]
    ab76:	2b00      	cmp	r3, #0
    ab78:	f040 81eb 	bne.w	af52 <_dtoa_r+0xaf2>
    ab7c:	46b0      	mov	r8, r6
    ab7e:	9b02      	ldr	r3, [sp, #8]
    ab80:	9f00      	ldr	r7, [sp, #0]
    ab82:	f003 0201 	and.w	r2, r3, #1
    ab86:	1e7b      	subs	r3, r7, #1
    ab88:	444b      	add	r3, r9
    ab8a:	9308      	str	r3, [sp, #32]
    ab8c:	9b01      	ldr	r3, [sp, #4]
    ab8e:	920a      	str	r2, [sp, #40]	; 0x28
    ab90:	4313      	orrs	r3, r2
    ab92:	9309      	str	r3, [sp, #36]	; 0x24
    ab94:	4651      	mov	r1, sl
    ab96:	4628      	mov	r0, r5
    ab98:	f7ff fbce 	bl	a338 <quorem>
    ab9c:	4631      	mov	r1, r6
    ab9e:	4683      	mov	fp, r0
    aba0:	4628      	mov	r0, r5
    aba2:	f7fe ffb5 	bl	9b10 <__mcmp>
    aba6:	4642      	mov	r2, r8
    aba8:	4651      	mov	r1, sl
    abaa:	4681      	mov	r9, r0
    abac:	4620      	mov	r0, r4
    abae:	f7fe ffd1 	bl	9b54 <__mdiff>
    abb2:	68c2      	ldr	r2, [r0, #12]
    abb4:	4601      	mov	r1, r0
    abb6:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    abba:	2a00      	cmp	r2, #0
    abbc:	d142      	bne.n	ac44 <_dtoa_r+0x7e4>
    abbe:	e9cd 0306 	strd	r0, r3, [sp, #24]
    abc2:	4628      	mov	r0, r5
    abc4:	f7fe ffa4 	bl	9b10 <__mcmp>
    abc8:	9906      	ldr	r1, [sp, #24]
    abca:	9002      	str	r0, [sp, #8]
    abcc:	4620      	mov	r0, r4
    abce:	f7fe fd3f 	bl	9650 <_Bfree>
    abd2:	9a02      	ldr	r2, [sp, #8]
    abd4:	9b07      	ldr	r3, [sp, #28]
    abd6:	b91a      	cbnz	r2, abe0 <_dtoa_r+0x780>
    abd8:	9909      	ldr	r1, [sp, #36]	; 0x24
    abda:	2900      	cmp	r1, #0
    abdc:	f000 827e 	beq.w	b0dc <_dtoa_r+0xc7c>
    abe0:	f1b9 0f00 	cmp.w	r9, #0
    abe4:	f2c0 8183 	blt.w	aeee <_dtoa_r+0xa8e>
    abe8:	9901      	ldr	r1, [sp, #4]
    abea:	ea49 0901 	orr.w	r9, r9, r1
    abee:	990a      	ldr	r1, [sp, #40]	; 0x28
    abf0:	ea51 0909 	orrs.w	r9, r1, r9
    abf4:	f000 817b 	beq.w	aeee <_dtoa_r+0xa8e>
    abf8:	2a00      	cmp	r2, #0
    abfa:	f300 81c6 	bgt.w	af8a <_dtoa_r+0xb2a>
    abfe:	9a08      	ldr	r2, [sp, #32]
    ac00:	703b      	strb	r3, [r7, #0]
    ac02:	f107 0901 	add.w	r9, r7, #1
    ac06:	4297      	cmp	r7, r2
    ac08:	46cb      	mov	fp, r9
    ac0a:	f000 81c4 	beq.w	af96 <_dtoa_r+0xb36>
    ac0e:	4629      	mov	r1, r5
    ac10:	2300      	movs	r3, #0
    ac12:	220a      	movs	r2, #10
    ac14:	4620      	mov	r0, r4
    ac16:	f7fe fd25 	bl	9664 <__multadd>
    ac1a:	4546      	cmp	r6, r8
    ac1c:	4605      	mov	r5, r0
    ac1e:	4631      	mov	r1, r6
    ac20:	f04f 0300 	mov.w	r3, #0
    ac24:	f04f 020a 	mov.w	r2, #10
    ac28:	4620      	mov	r0, r4
    ac2a:	d012      	beq.n	ac52 <_dtoa_r+0x7f2>
    ac2c:	f7fe fd1a 	bl	9664 <__multadd>
    ac30:	4641      	mov	r1, r8
    ac32:	4606      	mov	r6, r0
    ac34:	2300      	movs	r3, #0
    ac36:	220a      	movs	r2, #10
    ac38:	4620      	mov	r0, r4
    ac3a:	f7fe fd13 	bl	9664 <__multadd>
    ac3e:	464f      	mov	r7, r9
    ac40:	4680      	mov	r8, r0
    ac42:	e7a7      	b.n	ab94 <_dtoa_r+0x734>
    ac44:	4620      	mov	r0, r4
    ac46:	9302      	str	r3, [sp, #8]
    ac48:	f7fe fd02 	bl	9650 <_Bfree>
    ac4c:	9b02      	ldr	r3, [sp, #8]
    ac4e:	2201      	movs	r2, #1
    ac50:	e7c6      	b.n	abe0 <_dtoa_r+0x780>
    ac52:	f7fe fd07 	bl	9664 <__multadd>
    ac56:	464f      	mov	r7, r9
    ac58:	4606      	mov	r6, r0
    ac5a:	4680      	mov	r8, r0
    ac5c:	e79a      	b.n	ab94 <_dtoa_r+0x734>
    ac5e:	9b01      	ldr	r3, [sp, #4]
    ac60:	2b02      	cmp	r3, #2
    ac62:	dc71      	bgt.n	ad48 <_dtoa_r+0x8e8>
    ac64:	9b07      	ldr	r3, [sp, #28]
    ac66:	2b00      	cmp	r3, #0
    ac68:	f47f af7b 	bne.w	ab62 <_dtoa_r+0x702>
    ac6c:	9b04      	ldr	r3, [sp, #16]
    ac6e:	4651      	mov	r1, sl
    ac70:	3301      	adds	r3, #1
    ac72:	4628      	mov	r0, r5
    ac74:	9304      	str	r3, [sp, #16]
    ac76:	f7ff fb5f 	bl	a338 <quorem>
    ac7a:	f8dd b000 	ldr.w	fp, [sp]
    ac7e:	f100 0330 	add.w	r3, r0, #48	; 0x30
    ac82:	f80b 3b01 	strb.w	r3, [fp], #1
    ac86:	2700      	movs	r7, #0
    ac88:	e6eb      	b.n	aa62 <_dtoa_r+0x602>
    ac8a:	4651      	mov	r1, sl
    ac8c:	4628      	mov	r0, r5
    ac8e:	f7fe ff3f 	bl	9b10 <__mcmp>
    ac92:	2800      	cmp	r0, #0
    ac94:	f6bf aeba 	bge.w	aa0c <_dtoa_r+0x5ac>
    ac98:	4629      	mov	r1, r5
    ac9a:	2300      	movs	r3, #0
    ac9c:	220a      	movs	r2, #10
    ac9e:	4620      	mov	r0, r4
    aca0:	f7fe fce0 	bl	9664 <__multadd>
    aca4:	9b04      	ldr	r3, [sp, #16]
    aca6:	1e5f      	subs	r7, r3, #1
    aca8:	9b07      	ldr	r3, [sp, #28]
    acaa:	4605      	mov	r5, r0
    acac:	2b00      	cmp	r3, #0
    acae:	f47f af4b 	bne.w	ab48 <_dtoa_r+0x6e8>
    acb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    acb4:	2b00      	cmp	r3, #0
    acb6:	f340 8218 	ble.w	b0ea <_dtoa_r+0xc8a>
    acba:	4699      	mov	r9, r3
    acbc:	e6b1      	b.n	aa22 <_dtoa_r+0x5c2>
    acbe:	4bbc      	ldr	r3, [pc, #752]	; (afb0 <_dtoa_r+0xb50>)
    acc0:	9300      	str	r3, [sp, #0]
    acc2:	3303      	adds	r3, #3
    acc4:	e4a4      	b.n	a610 <_dtoa_r+0x1b0>
    acc6:	201c      	movs	r0, #28
    acc8:	e712      	b.n	aaf0 <_dtoa_r+0x690>
    acca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    acce:	2800      	cmp	r0, #0
    acd0:	f47f ae74 	bne.w	a9bc <_dtoa_r+0x55c>
    acd4:	f3c1 0213 	ubfx	r2, r1, #0, #20
    acd8:	2a00      	cmp	r2, #0
    acda:	f000 80f4 	beq.w	aec6 <_dtoa_r+0xa66>
    acde:	9b02      	ldr	r3, [sp, #8]
    ace0:	9308      	str	r3, [sp, #32]
    ace2:	e66d      	b.n	a9c0 <_dtoa_r+0x560>
    ace4:	2301      	movs	r3, #1
    ace6:	9307      	str	r3, [sp, #28]
    ace8:	9b04      	ldr	r3, [sp, #16]
    acea:	445b      	add	r3, fp
    acec:	f103 0901 	add.w	r9, r3, #1
    acf0:	f1b9 0f01 	cmp.w	r9, #1
    acf4:	46cc      	mov	ip, r9
    acf6:	930b      	str	r3, [sp, #44]	; 0x2c
    acf8:	bfb8      	it	lt
    acfa:	f04f 0c01 	movlt.w	ip, #1
    acfe:	2100      	movs	r1, #0
    ad00:	f1bc 0f17 	cmp.w	ip, #23
    ad04:	63e1      	str	r1, [r4, #60]	; 0x3c
    ad06:	f77f acbc 	ble.w	a682 <_dtoa_r+0x222>
    ad0a:	2001      	movs	r0, #1
    ad0c:	2204      	movs	r2, #4
    ad0e:	0052      	lsls	r2, r2, #1
    ad10:	f102 0314 	add.w	r3, r2, #20
    ad14:	4563      	cmp	r3, ip
    ad16:	4601      	mov	r1, r0
    ad18:	f100 0001 	add.w	r0, r0, #1
    ad1c:	d9f7      	bls.n	ad0e <_dtoa_r+0x8ae>
    ad1e:	63e1      	str	r1, [r4, #60]	; 0x3c
    ad20:	e4af      	b.n	a682 <_dtoa_r+0x222>
    ad22:	2301      	movs	r3, #1
    ad24:	9307      	str	r3, [sp, #28]
    ad26:	f1bb 0f00 	cmp.w	fp, #0
    ad2a:	dd52      	ble.n	add2 <_dtoa_r+0x972>
    ad2c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    ad30:	46d9      	mov	r9, fp
    ad32:	46dc      	mov	ip, fp
    ad34:	e7e3      	b.n	acfe <_dtoa_r+0x89e>
    ad36:	2300      	movs	r3, #0
    ad38:	9307      	str	r3, [sp, #28]
    ad3a:	e7d5      	b.n	ace8 <_dtoa_r+0x888>
    ad3c:	2300      	movs	r3, #0
    ad3e:	9307      	str	r3, [sp, #28]
    ad40:	e7f1      	b.n	ad26 <_dtoa_r+0x8c6>
    ad42:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    ad46:	9704      	str	r7, [sp, #16]
    ad48:	f1b9 0f00 	cmp.w	r9, #0
    ad4c:	f47f ada1 	bne.w	a892 <_dtoa_r+0x432>
    ad50:	4651      	mov	r1, sl
    ad52:	464b      	mov	r3, r9
    ad54:	2205      	movs	r2, #5
    ad56:	4620      	mov	r0, r4
    ad58:	f7fe fc84 	bl	9664 <__multadd>
    ad5c:	4601      	mov	r1, r0
    ad5e:	4682      	mov	sl, r0
    ad60:	4628      	mov	r0, r5
    ad62:	f7fe fed5 	bl	9b10 <__mcmp>
    ad66:	2800      	cmp	r0, #0
    ad68:	f77f ad93 	ble.w	a892 <_dtoa_r+0x432>
    ad6c:	9b04      	ldr	r3, [sp, #16]
    ad6e:	f103 0b01 	add.w	fp, r3, #1
    ad72:	9b00      	ldr	r3, [sp, #0]
    ad74:	2231      	movs	r2, #49	; 0x31
    ad76:	4698      	mov	r8, r3
    ad78:	f803 2b01 	strb.w	r2, [r3], #1
    ad7c:	9300      	str	r3, [sp, #0]
    ad7e:	4651      	mov	r1, sl
    ad80:	4620      	mov	r0, r4
    ad82:	f7fe fc65 	bl	9650 <_Bfree>
    ad86:	f10b 0301 	add.w	r3, fp, #1
    ad8a:	f8dd 9000 	ldr.w	r9, [sp]
    ad8e:	9304      	str	r3, [sp, #16]
    ad90:	f8cd 8000 	str.w	r8, [sp]
    ad94:	2e00      	cmp	r6, #0
    ad96:	f47f ae8f 	bne.w	aab8 <_dtoa_r+0x658>
    ad9a:	e691      	b.n	aac0 <_dtoa_r+0x660>
    ad9c:	eba3 0a0a 	sub.w	sl, r3, sl
    ada0:	e5c5      	b.n	a92e <_dtoa_r+0x4ce>
    ada2:	4631      	mov	r1, r6
    ada4:	4652      	mov	r2, sl
    ada6:	4620      	mov	r0, r4
    ada8:	f7fe fdda 	bl	9960 <__pow5mult>
    adac:	462a      	mov	r2, r5
    adae:	4601      	mov	r1, r0
    adb0:	4606      	mov	r6, r0
    adb2:	4620      	mov	r0, r4
    adb4:	f7fe fd26 	bl	9804 <__multiply>
    adb8:	4629      	mov	r1, r5
    adba:	4605      	mov	r5, r0
    adbc:	4620      	mov	r0, r4
    adbe:	f7fe fc47 	bl	9650 <_Bfree>
    adc2:	e5ea      	b.n	a99a <_dtoa_r+0x53a>
    adc4:	2002      	movs	r0, #2
    adc6:	eeb0 5b48 	vmov.f64	d5, d8
    adca:	e481      	b.n	a6d0 <_dtoa_r+0x270>
    adcc:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    add0:	e68e      	b.n	aaf0 <_dtoa_r+0x690>
    add2:	f04f 0b01 	mov.w	fp, #1
    add6:	46d9      	mov	r9, fp
    add8:	e44f      	b.n	a67a <_dtoa_r+0x21a>
    adda:	d103      	bne.n	ade4 <_dtoa_r+0x984>
    addc:	9b01      	ldr	r3, [sp, #4]
    adde:	07db      	lsls	r3, r3, #31
    ade0:	f53f ae4c 	bmi.w	aa7c <_dtoa_r+0x61c>
    ade4:	46d9      	mov	r9, fp
    ade6:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    adea:	2b30      	cmp	r3, #48	; 0x30
    adec:	d0fa      	beq.n	ade4 <_dtoa_r+0x984>
    adee:	e657      	b.n	aaa0 <_dtoa_r+0x640>
    adf0:	9b04      	ldr	r3, [sp, #16]
    adf2:	9a00      	ldr	r2, [sp, #0]
    adf4:	3301      	adds	r3, #1
    adf6:	9304      	str	r3, [sp, #16]
    adf8:	2331      	movs	r3, #49	; 0x31
    adfa:	7013      	strb	r3, [r2, #0]
    adfc:	e650      	b.n	aaa0 <_dtoa_r+0x640>
    adfe:	f1ba 0f00 	cmp.w	sl, #0
    ae02:	f000 8123 	beq.w	b04c <_dtoa_r+0xbec>
    ae06:	f202 4233 	addw	r2, r2, #1075	; 0x433
    ae0a:	9b06      	ldr	r3, [sp, #24]
    ae0c:	9309      	str	r3, [sp, #36]	; 0x24
    ae0e:	4413      	add	r3, r2
    ae10:	f8dd a020 	ldr.w	sl, [sp, #32]
    ae14:	9306      	str	r3, [sp, #24]
    ae16:	4490      	add	r8, r2
    ae18:	e592      	b.n	a940 <_dtoa_r+0x4e0>
    ae1a:	ee07 0a90 	vmov	s15, r0
    ae1e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
    ae22:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    ae26:	eea6 5b07 	vfma.f64	d5, d6, d7
    ae2a:	ee15 2a90 	vmov	r2, s11
    ae2e:	ec51 0b15 	vmov	r0, r1, d5
    ae32:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    ae36:	ec41 0b15 	vmov	d5, r0, r1
    ae3a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    ae3e:	ee36 7b47 	vsub.f64	d7, d6, d7
    ae42:	eeb4 7bc5 	vcmpe.f64	d7, d5
    ae46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ae4a:	f300 8137 	bgt.w	b0bc <_dtoa_r+0xc5c>
    ae4e:	eeb1 5b45 	vneg.f64	d5, d5
    ae52:	eeb4 7bc5 	vcmpe.f64	d7, d5
    ae56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ae5a:	f57f acfb 	bpl.w	a854 <_dtoa_r+0x3f4>
    ae5e:	f04f 0a00 	mov.w	sl, #0
    ae62:	4656      	mov	r6, sl
    ae64:	e515      	b.n	a892 <_dtoa_r+0x432>
    ae66:	f000 80f5 	beq.w	b054 <_dtoa_r+0xbf4>
    ae6a:	9b04      	ldr	r3, [sp, #16]
    ae6c:	4951      	ldr	r1, [pc, #324]	; (afb4 <_dtoa_r+0xb54>)
    ae6e:	425a      	negs	r2, r3
    ae70:	f002 000f 	and.w	r0, r2, #15
    ae74:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    ae78:	ed91 6b00 	vldr	d6, [r1]
    ae7c:	1112      	asrs	r2, r2, #4
    ae7e:	ee28 6b06 	vmul.f64	d6, d8, d6
    ae82:	f000 8142 	beq.w	b10a <_dtoa_r+0xcaa>
    ae86:	eeb0 7b46 	vmov.f64	d7, d6
    ae8a:	494b      	ldr	r1, [pc, #300]	; (afb8 <_dtoa_r+0xb58>)
    ae8c:	2600      	movs	r6, #0
    ae8e:	2002      	movs	r0, #2
    ae90:	07d3      	lsls	r3, r2, #31
    ae92:	d505      	bpl.n	aea0 <_dtoa_r+0xa40>
    ae94:	ed91 5b00 	vldr	d5, [r1]
    ae98:	3001      	adds	r0, #1
    ae9a:	2601      	movs	r6, #1
    ae9c:	ee27 7b05 	vmul.f64	d7, d7, d5
    aea0:	1052      	asrs	r2, r2, #1
    aea2:	f101 0108 	add.w	r1, r1, #8
    aea6:	d1f3      	bne.n	ae90 <_dtoa_r+0xa30>
    aea8:	2e00      	cmp	r6, #0
    aeaa:	fe06 6b07 	vseleq.f64	d6, d6, d7
    aeae:	e41e      	b.n	a6ee <_dtoa_r+0x28e>
    aeb0:	9b02      	ldr	r3, [sp, #8]
    aeb2:	2b00      	cmp	r3, #0
    aeb4:	f47f ae37 	bne.w	ab26 <_dtoa_r+0x6c6>
    aeb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    aebc:	f3c1 0213 	ubfx	r2, r1, #0, #20
    aec0:	2a00      	cmp	r2, #0
    aec2:	f040 8137 	bne.w	b134 <_dtoa_r+0xcd4>
    aec6:	4a3d      	ldr	r2, [pc, #244]	; (afbc <_dtoa_r+0xb5c>)
    aec8:	400a      	ands	r2, r1
    aeca:	2a00      	cmp	r2, #0
    aecc:	f000 80fa 	beq.w	b0c4 <_dtoa_r+0xc64>
    aed0:	9b06      	ldr	r3, [sp, #24]
    aed2:	3301      	adds	r3, #1
    aed4:	9306      	str	r3, [sp, #24]
    aed6:	2301      	movs	r3, #1
    aed8:	f108 0801 	add.w	r8, r8, #1
    aedc:	9308      	str	r3, [sp, #32]
    aede:	e56f      	b.n	a9c0 <_dtoa_r+0x560>
    aee0:	4629      	mov	r1, r5
    aee2:	9a08      	ldr	r2, [sp, #32]
    aee4:	4620      	mov	r0, r4
    aee6:	f7fe fd3b 	bl	9960 <__pow5mult>
    aeea:	4605      	mov	r5, r0
    aeec:	e55a      	b.n	a9a4 <_dtoa_r+0x544>
    aeee:	2a00      	cmp	r2, #0
    aef0:	dd12      	ble.n	af18 <_dtoa_r+0xab8>
    aef2:	4629      	mov	r1, r5
    aef4:	2201      	movs	r2, #1
    aef6:	4620      	mov	r0, r4
    aef8:	9301      	str	r3, [sp, #4]
    aefa:	f7fe fd91 	bl	9a20 <__lshift>
    aefe:	4651      	mov	r1, sl
    af00:	4605      	mov	r5, r0
    af02:	f7fe fe05 	bl	9b10 <__mcmp>
    af06:	2800      	cmp	r0, #0
    af08:	9b01      	ldr	r3, [sp, #4]
    af0a:	f340 80e1 	ble.w	b0d0 <_dtoa_r+0xc70>
    af0e:	2b39      	cmp	r3, #57	; 0x39
    af10:	f000 80ca 	beq.w	b0a8 <_dtoa_r+0xc48>
    af14:	f10b 0331 	add.w	r3, fp, #49	; 0x31
    af18:	46b9      	mov	r9, r7
    af1a:	f809 3b01 	strb.w	r3, [r9], #1
    af1e:	9b04      	ldr	r3, [sp, #16]
    af20:	3301      	adds	r3, #1
    af22:	4637      	mov	r7, r6
    af24:	9304      	str	r3, [sp, #16]
    af26:	4646      	mov	r6, r8
    af28:	e5ba      	b.n	aaa0 <_dtoa_r+0x640>
    af2a:	ee38 8b08 	vadd.f64	d8, d8, d8
    af2e:	eeb4 8bc6 	vcmpe.f64	d8, d6
    af32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    af36:	dc0a      	bgt.n	af4e <_dtoa_r+0xaee>
    af38:	eeb4 8b46 	vcmp.f64	d8, d6
    af3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    af40:	f47f acdc 	bne.w	a8fc <_dtoa_r+0x49c>
    af44:	ee17 3a10 	vmov	r3, s14
    af48:	07d8      	lsls	r0, r3, #31
    af4a:	f57f acd7 	bpl.w	a8fc <_dtoa_r+0x49c>
    af4e:	9a00      	ldr	r2, [sp, #0]
    af50:	e454      	b.n	a7fc <_dtoa_r+0x39c>
    af52:	6871      	ldr	r1, [r6, #4]
    af54:	4620      	mov	r0, r4
    af56:	f7fe fb55 	bl	9604 <_Balloc>
    af5a:	4607      	mov	r7, r0
    af5c:	2800      	cmp	r0, #0
    af5e:	f000 80de 	beq.w	b11e <_dtoa_r+0xcbe>
    af62:	6933      	ldr	r3, [r6, #16]
    af64:	3302      	adds	r3, #2
    af66:	009a      	lsls	r2, r3, #2
    af68:	f106 010c 	add.w	r1, r6, #12
    af6c:	300c      	adds	r0, #12
    af6e:	f7f9 fe4f 	bl	4c10 <memcpy>
    af72:	4639      	mov	r1, r7
    af74:	2201      	movs	r2, #1
    af76:	4620      	mov	r0, r4
    af78:	f7fe fd52 	bl	9a20 <__lshift>
    af7c:	4680      	mov	r8, r0
    af7e:	e5fe      	b.n	ab7e <_dtoa_r+0x71e>
    af80:	9b06      	ldr	r3, [sp, #24]
    af82:	eba3 0309 	sub.w	r3, r3, r9
    af86:	9309      	str	r3, [sp, #36]	; 0x24
    af88:	e4da      	b.n	a940 <_dtoa_r+0x4e0>
    af8a:	2b39      	cmp	r3, #57	; 0x39
    af8c:	f000 808c 	beq.w	b0a8 <_dtoa_r+0xc48>
    af90:	46b9      	mov	r9, r7
    af92:	3301      	adds	r3, #1
    af94:	e7c1      	b.n	af1a <_dtoa_r+0xaba>
    af96:	9a04      	ldr	r2, [sp, #16]
    af98:	3201      	adds	r2, #1
    af9a:	4637      	mov	r7, r6
    af9c:	9204      	str	r2, [sp, #16]
    af9e:	4646      	mov	r6, r8
    afa0:	e55f      	b.n	aa62 <_dtoa_r+0x602>
    afa2:	4629      	mov	r1, r5
    afa4:	4620      	mov	r0, r4
    afa6:	f7fe fcdb 	bl	9960 <__pow5mult>
    afaa:	4605      	mov	r5, r0
    afac:	e4fa      	b.n	a9a4 <_dtoa_r+0x544>
    afae:	bf00      	nop
    afb0:	20018bc0 	.word	0x20018bc0
    afb4:	200002a8 	.word	0x200002a8
    afb8:	20000280 	.word	0x20000280
    afbc:	7ff00000 	.word	0x7ff00000
    afc0:	4b5e      	ldr	r3, [pc, #376]	; (b13c <_dtoa_r+0xcdc>)
    afc2:	eefd 5bc6 	vcvt.s32.f64	s11, d6
    afc6:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    afca:	ed1c 3b02 	vldr	d3, [ip, #-8]
    afce:	eeb8 7be5 	vcvt.f64.s32	d7, s11
    afd2:	ee36 7b47 	vsub.f64	d7, d6, d7
    afd6:	ec41 0b16 	vmov	d6, r0, r1
    afda:	ee15 1a90 	vmov	r1, s11
    afde:	ee23 3b06 	vmul.f64	d3, d3, d6
    afe2:	9800      	ldr	r0, [sp, #0]
    afe4:	3130      	adds	r1, #48	; 0x30
    afe6:	2a01      	cmp	r2, #1
    afe8:	f800 1b01 	strb.w	r1, [r0], #1
    afec:	f000 8083 	beq.w	b0f6 <_dtoa_r+0xc96>
    aff0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    aff4:	9b00      	ldr	r3, [sp, #0]
    aff6:	1899      	adds	r1, r3, r2
    aff8:	ee27 7b04 	vmul.f64	d7, d7, d4
    affc:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    b000:	ee16 3a90 	vmov	r3, s13
    b004:	3330      	adds	r3, #48	; 0x30
    b006:	f800 3b01 	strb.w	r3, [r0], #1
    b00a:	4281      	cmp	r1, r0
    b00c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
    b010:	ee37 7b45 	vsub.f64	d7, d7, d5
    b014:	d1f0      	bne.n	aff8 <_dtoa_r+0xb98>
    b016:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    b01a:	ee33 5b06 	vadd.f64	d5, d3, d6
    b01e:	eeb4 5bc7 	vcmpe.f64	d5, d7
    b022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b026:	f53f abe3 	bmi.w	a7f0 <_dtoa_r+0x390>
    b02a:	ee36 6b43 	vsub.f64	d6, d6, d3
    b02e:	eeb4 6bc7 	vcmpe.f64	d6, d7
    b032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b036:	f77f ac0d 	ble.w	a854 <_dtoa_r+0x3f4>
    b03a:	4689      	mov	r9, r1
    b03c:	3901      	subs	r1, #1
    b03e:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    b042:	2b30      	cmp	r3, #48	; 0x30
    b044:	d0f9      	beq.n	b03a <_dtoa_r+0xbda>
    b046:	1c73      	adds	r3, r6, #1
    b048:	9304      	str	r3, [sp, #16]
    b04a:	e539      	b.n	aac0 <_dtoa_r+0x660>
    b04c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b04e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    b052:	e6da      	b.n	ae0a <_dtoa_r+0x9aa>
    b054:	2002      	movs	r0, #2
    b056:	eeb0 6b48 	vmov.f64	d6, d8
    b05a:	f7ff bb48 	b.w	a6ee <_dtoa_r+0x28e>
    b05e:	f1b9 0f00 	cmp.w	r9, #0
    b062:	f43f aeda 	beq.w	ae1a <_dtoa_r+0x9ba>
    b066:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b068:	2a00      	cmp	r2, #0
    b06a:	f77f abf3 	ble.w	a854 <_dtoa_r+0x3f4>
    b06e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    b072:	ee26 6b04 	vmul.f64	d6, d6, d4
    b076:	3001      	adds	r0, #1
    b078:	ee07 0a90 	vmov	s15, r0
    b07c:	9b04      	ldr	r3, [sp, #16]
    b07e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    b082:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    b086:	eea6 7b05 	vfma.f64	d7, d6, d5
    b08a:	ee17 ca90 	vmov	ip, s15
    b08e:	ec51 0b17 	vmov	r0, r1, d7
    b092:	1e5e      	subs	r6, r3, #1
    b094:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
    b098:	f7ff bb47 	b.w	a72a <_dtoa_r+0x2ca>
    b09c:	9b04      	ldr	r3, [sp, #16]
    b09e:	3301      	adds	r3, #1
    b0a0:	9304      	str	r3, [sp, #16]
    b0a2:	2331      	movs	r3, #49	; 0x31
    b0a4:	f7ff bbb1 	b.w	a80a <_dtoa_r+0x3aa>
    b0a8:	9b04      	ldr	r3, [sp, #16]
    b0aa:	46bb      	mov	fp, r7
    b0ac:	3301      	adds	r3, #1
    b0ae:	9304      	str	r3, [sp, #16]
    b0b0:	2339      	movs	r3, #57	; 0x39
    b0b2:	4637      	mov	r7, r6
    b0b4:	f80b 3b01 	strb.w	r3, [fp], #1
    b0b8:	4646      	mov	r6, r8
    b0ba:	e4e1      	b.n	aa80 <_dtoa_r+0x620>
    b0bc:	f04f 0a00 	mov.w	sl, #0
    b0c0:	4656      	mov	r6, sl
    b0c2:	e653      	b.n	ad6c <_dtoa_r+0x90c>
    b0c4:	9208      	str	r2, [sp, #32]
    b0c6:	e47b      	b.n	a9c0 <_dtoa_r+0x560>
    b0c8:	1c73      	adds	r3, r6, #1
    b0ca:	9304      	str	r3, [sp, #16]
    b0cc:	4689      	mov	r9, r1
    b0ce:	e4f7      	b.n	aac0 <_dtoa_r+0x660>
    b0d0:	f47f af22 	bne.w	af18 <_dtoa_r+0xab8>
    b0d4:	07da      	lsls	r2, r3, #31
    b0d6:	f57f af1f 	bpl.w	af18 <_dtoa_r+0xab8>
    b0da:	e718      	b.n	af0e <_dtoa_r+0xaae>
    b0dc:	2b39      	cmp	r3, #57	; 0x39
    b0de:	d0e3      	beq.n	b0a8 <_dtoa_r+0xc48>
    b0e0:	f1b9 0f00 	cmp.w	r9, #0
    b0e4:	f73f af16 	bgt.w	af14 <_dtoa_r+0xab4>
    b0e8:	e716      	b.n	af18 <_dtoa_r+0xab8>
    b0ea:	9b01      	ldr	r3, [sp, #4]
    b0ec:	2b02      	cmp	r3, #2
    b0ee:	f73f ae28 	bgt.w	ad42 <_dtoa_r+0x8e2>
    b0f2:	9704      	str	r7, [sp, #16]
    b0f4:	e5ba      	b.n	ac6c <_dtoa_r+0x80c>
    b0f6:	4601      	mov	r1, r0
    b0f8:	e78d      	b.n	b016 <_dtoa_r+0xbb6>
    b0fa:	9b01      	ldr	r3, [sp, #4]
    b0fc:	2b02      	cmp	r3, #2
    b0fe:	f73f ae20 	bgt.w	ad42 <_dtoa_r+0x8e2>
    b102:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    b106:	9704      	str	r7, [sp, #16]
    b108:	e52b      	b.n	ab62 <_dtoa_r+0x702>
    b10a:	2002      	movs	r0, #2
    b10c:	f7ff baef 	b.w	a6ee <_dtoa_r+0x28e>
    b110:	4b0b      	ldr	r3, [pc, #44]	; (b140 <_dtoa_r+0xce0>)
    b112:	480c      	ldr	r0, [pc, #48]	; (b144 <_dtoa_r+0xce4>)
    b114:	2200      	movs	r2, #0
    b116:	f240 11af 	movw	r1, #431	; 0x1af
    b11a:	f7ff f8b1 	bl	a280 <__assert_func>
    b11e:	4b08      	ldr	r3, [pc, #32]	; (b140 <_dtoa_r+0xce0>)
    b120:	4808      	ldr	r0, [pc, #32]	; (b144 <_dtoa_r+0xce4>)
    b122:	463a      	mov	r2, r7
    b124:	f240 21ef 	movw	r1, #751	; 0x2ef
    b128:	f7ff f8aa 	bl	a280 <__assert_func>
    b12c:	4b06      	ldr	r3, [pc, #24]	; (b148 <_dtoa_r+0xce8>)
    b12e:	9300      	str	r3, [sp, #0]
    b130:	f7ff b9d2 	b.w	a4d8 <_dtoa_r+0x78>
    b134:	9b02      	ldr	r3, [sp, #8]
    b136:	9308      	str	r3, [sp, #32]
    b138:	e4f7      	b.n	ab2a <_dtoa_r+0x6ca>
    b13a:	bf00      	nop
    b13c:	200002a8 	.word	0x200002a8
    b140:	20018a38 	.word	0x20018a38
    b144:	20018bc4 	.word	0x20018bc4
    b148:	20018bb4 	.word	0x20018bb4

0000b14c <fiprintf>:
    b14c:	b40e      	push	{r1, r2, r3}
    b14e:	b510      	push	{r4, lr}
    b150:	b083      	sub	sp, #12
    b152:	ab05      	add	r3, sp, #20
    b154:	4c06      	ldr	r4, [pc, #24]	; (b170 <fiprintf+0x24>)
    b156:	f853 2b04 	ldr.w	r2, [r3], #4
    b15a:	9301      	str	r3, [sp, #4]
    b15c:	4601      	mov	r1, r0
    b15e:	6820      	ldr	r0, [r4, #0]
    b160:	f000 f8c4 	bl	b2ec <_vfiprintf_r>
    b164:	b003      	add	sp, #12
    b166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b16a:	b003      	add	sp, #12
    b16c:	4770      	bx	lr
    b16e:	bf00      	nop
    b170:	200198ac 	.word	0x200198ac

0000b174 <__ssprint_r>:
    b174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b178:	6893      	ldr	r3, [r2, #8]
    b17a:	6817      	ldr	r7, [r2, #0]
    b17c:	b083      	sub	sp, #12
    b17e:	4692      	mov	sl, r2
    b180:	2b00      	cmp	r3, #0
    b182:	d070      	beq.n	b266 <__ssprint_r+0xf2>
    b184:	4681      	mov	r9, r0
    b186:	688a      	ldr	r2, [r1, #8]
    b188:	6808      	ldr	r0, [r1, #0]
    b18a:	460c      	mov	r4, r1
    b18c:	3708      	adds	r7, #8
    b18e:	e043      	b.n	b218 <__ssprint_r+0xa4>
    b190:	89a3      	ldrh	r3, [r4, #12]
    b192:	f413 6f90 	tst.w	r3, #1152	; 0x480
    b196:	d02e      	beq.n	b1f6 <__ssprint_r+0x82>
    b198:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
    b19c:	eba0 0801 	sub.w	r8, r0, r1
    b1a0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    b1a4:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
    b1a8:	f108 0001 	add.w	r0, r8, #1
    b1ac:	1076      	asrs	r6, r6, #1
    b1ae:	4428      	add	r0, r5
    b1b0:	42b0      	cmp	r0, r6
    b1b2:	4632      	mov	r2, r6
    b1b4:	bf84      	itt	hi
    b1b6:	4606      	movhi	r6, r0
    b1b8:	4632      	movhi	r2, r6
    b1ba:	055b      	lsls	r3, r3, #21
    b1bc:	d537      	bpl.n	b22e <__ssprint_r+0xba>
    b1be:	4611      	mov	r1, r2
    b1c0:	4648      	mov	r0, r9
    b1c2:	f7fb fb01 	bl	67c8 <_malloc_r>
    b1c6:	9001      	str	r0, [sp, #4]
    b1c8:	2800      	cmp	r0, #0
    b1ca:	d03a      	beq.n	b242 <__ssprint_r+0xce>
    b1cc:	4642      	mov	r2, r8
    b1ce:	6921      	ldr	r1, [r4, #16]
    b1d0:	f7f9 fd1e 	bl	4c10 <memcpy>
    b1d4:	89a2      	ldrh	r2, [r4, #12]
    b1d6:	9b01      	ldr	r3, [sp, #4]
    b1d8:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    b1dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    b1e0:	81a2      	strh	r2, [r4, #12]
    b1e2:	eba6 0208 	sub.w	r2, r6, r8
    b1e6:	eb03 0008 	add.w	r0, r3, r8
    b1ea:	6166      	str	r6, [r4, #20]
    b1ec:	60a2      	str	r2, [r4, #8]
    b1ee:	6123      	str	r3, [r4, #16]
    b1f0:	6020      	str	r0, [r4, #0]
    b1f2:	462e      	mov	r6, r5
    b1f4:	46a8      	mov	r8, r5
    b1f6:	4642      	mov	r2, r8
    b1f8:	4659      	mov	r1, fp
    b1fa:	f7fc f8a5 	bl	7348 <memmove>
    b1fe:	f8da 3008 	ldr.w	r3, [sl, #8]
    b202:	68a2      	ldr	r2, [r4, #8]
    b204:	6820      	ldr	r0, [r4, #0]
    b206:	1b92      	subs	r2, r2, r6
    b208:	4440      	add	r0, r8
    b20a:	1b5b      	subs	r3, r3, r5
    b20c:	60a2      	str	r2, [r4, #8]
    b20e:	6020      	str	r0, [r4, #0]
    b210:	f8ca 3008 	str.w	r3, [sl, #8]
    b214:	b33b      	cbz	r3, b266 <__ssprint_r+0xf2>
    b216:	3708      	adds	r7, #8
    b218:	e957 b502 	ldrd	fp, r5, [r7, #-8]
    b21c:	2d00      	cmp	r5, #0
    b21e:	d0fa      	beq.n	b216 <__ssprint_r+0xa2>
    b220:	42aa      	cmp	r2, r5
    b222:	4616      	mov	r6, r2
    b224:	4690      	mov	r8, r2
    b226:	d9b3      	bls.n	b190 <__ssprint_r+0x1c>
    b228:	462e      	mov	r6, r5
    b22a:	46a8      	mov	r8, r5
    b22c:	e7e3      	b.n	b1f6 <__ssprint_r+0x82>
    b22e:	4648      	mov	r0, r9
    b230:	f7fb fd86 	bl	6d40 <_realloc_r>
    b234:	4603      	mov	r3, r0
    b236:	2800      	cmp	r0, #0
    b238:	d1d3      	bne.n	b1e2 <__ssprint_r+0x6e>
    b23a:	6921      	ldr	r1, [r4, #16]
    b23c:	4648      	mov	r0, r9
    b23e:	f7fc fb21 	bl	7884 <_free_r>
    b242:	89a3      	ldrh	r3, [r4, #12]
    b244:	220c      	movs	r2, #12
    b246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b24a:	f8c9 2000 	str.w	r2, [r9]
    b24e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b252:	81a3      	strh	r3, [r4, #12]
    b254:	2200      	movs	r2, #0
    b256:	2300      	movs	r3, #0
    b258:	f8ca 2008 	str.w	r2, [sl, #8]
    b25c:	f8ca 3004 	str.w	r3, [sl, #4]
    b260:	b003      	add	sp, #12
    b262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b266:	2000      	movs	r0, #0
    b268:	2300      	movs	r3, #0
    b26a:	f8ca 3004 	str.w	r3, [sl, #4]
    b26e:	b003      	add	sp, #12
    b270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000b274 <__sprint_r.part.0>:
    b274:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b278:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    b27a:	049c      	lsls	r4, r3, #18
    b27c:	4690      	mov	r8, r2
    b27e:	d52d      	bpl.n	b2dc <__sprint_r.part.0+0x68>
    b280:	6893      	ldr	r3, [r2, #8]
    b282:	6812      	ldr	r2, [r2, #0]
    b284:	b343      	cbz	r3, b2d8 <__sprint_r.part.0+0x64>
    b286:	468b      	mov	fp, r1
    b288:	4606      	mov	r6, r0
    b28a:	f102 0908 	add.w	r9, r2, #8
    b28e:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
    b292:	ea5f 079a 	movs.w	r7, sl, lsr #2
    b296:	d015      	beq.n	b2c4 <__sprint_r.part.0+0x50>
    b298:	3d04      	subs	r5, #4
    b29a:	2400      	movs	r4, #0
    b29c:	e001      	b.n	b2a2 <__sprint_r.part.0+0x2e>
    b29e:	42a7      	cmp	r7, r4
    b2a0:	d00e      	beq.n	b2c0 <__sprint_r.part.0+0x4c>
    b2a2:	f855 1f04 	ldr.w	r1, [r5, #4]!
    b2a6:	465a      	mov	r2, fp
    b2a8:	4630      	mov	r0, r6
    b2aa:	f001 fa5b 	bl	c764 <_fputwc_r>
    b2ae:	1c43      	adds	r3, r0, #1
    b2b0:	f104 0401 	add.w	r4, r4, #1
    b2b4:	d1f3      	bne.n	b29e <__sprint_r.part.0+0x2a>
    b2b6:	2300      	movs	r3, #0
    b2b8:	e9c8 3301 	strd	r3, r3, [r8, #4]
    b2bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b2c0:	f8d8 3008 	ldr.w	r3, [r8, #8]
    b2c4:	f02a 0a03 	bic.w	sl, sl, #3
    b2c8:	eba3 030a 	sub.w	r3, r3, sl
    b2cc:	f8c8 3008 	str.w	r3, [r8, #8]
    b2d0:	f109 0908 	add.w	r9, r9, #8
    b2d4:	2b00      	cmp	r3, #0
    b2d6:	d1da      	bne.n	b28e <__sprint_r.part.0+0x1a>
    b2d8:	2000      	movs	r0, #0
    b2da:	e7ec      	b.n	b2b6 <__sprint_r.part.0+0x42>
    b2dc:	f001 f80c 	bl	c2f8 <__sfvwrite_r>
    b2e0:	2300      	movs	r3, #0
    b2e2:	e9c8 3301 	strd	r3, r3, [r8, #4]
    b2e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b2ea:	bf00      	nop

0000b2ec <_vfiprintf_r>:
    b2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b2f0:	ed2d 8b02 	vpush	{d8}
    b2f4:	b0c5      	sub	sp, #276	; 0x114
    b2f6:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
    b2fa:	4683      	mov	fp, r0
    b2fc:	ee08 1a10 	vmov	s16, r1
    b300:	4616      	mov	r6, r2
    b302:	2100      	movs	r1, #0
    b304:	2208      	movs	r2, #8
    b306:	4650      	mov	r0, sl
    b308:	461c      	mov	r4, r3
    b30a:	9307      	str	r3, [sp, #28]
    b30c:	f7fc f898 	bl	7440 <memset>
    b310:	f1bb 0f00 	cmp.w	fp, #0
    b314:	d004      	beq.n	b320 <_vfiprintf_r+0x34>
    b316:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
    b31a:	2b00      	cmp	r3, #0
    b31c:	f000 86a0 	beq.w	c060 <_vfiprintf_r+0xd74>
    b320:	ee18 2a10 	vmov	r2, s16
    b324:	6e53      	ldr	r3, [r2, #100]	; 0x64
    b326:	07db      	lsls	r3, r3, #31
    b328:	f140 8513 	bpl.w	bd52 <_vfiprintf_r+0xa66>
    b32c:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    b330:	b28a      	uxth	r2, r1
    b332:	0495      	lsls	r5, r2, #18
    b334:	d40b      	bmi.n	b34e <_vfiprintf_r+0x62>
    b336:	ee18 3a10 	vmov	r3, s16
    b33a:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    b33e:	8199      	strh	r1, [r3, #12]
    b340:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    b342:	b28a      	uxth	r2, r1
    b344:	ee18 1a10 	vmov	r1, s16
    b348:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    b34c:	664b      	str	r3, [r1, #100]	; 0x64
    b34e:	0710      	lsls	r0, r2, #28
    b350:	f140 8105 	bpl.w	b55e <_vfiprintf_r+0x272>
    b354:	ee18 3a10 	vmov	r3, s16
    b358:	691b      	ldr	r3, [r3, #16]
    b35a:	2b00      	cmp	r3, #0
    b35c:	f000 80ff 	beq.w	b55e <_vfiprintf_r+0x272>
    b360:	f002 031a 	and.w	r3, r2, #26
    b364:	2b0a      	cmp	r3, #10
    b366:	f000 810a 	beq.w	b57e <_vfiprintf_r+0x292>
    b36a:	2300      	movs	r3, #0
    b36c:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
    b370:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    b374:	aa1b      	add	r2, sp, #108	; 0x6c
    b376:	930c      	str	r3, [sp, #48]	; 0x30
    b378:	9218      	str	r2, [sp, #96]	; 0x60
    b37a:	4691      	mov	r9, r2
    b37c:	930b      	str	r3, [sp, #44]	; 0x2c
    b37e:	9305      	str	r3, [sp, #20]
    b380:	46b0      	mov	r8, r6
    b382:	4644      	mov	r4, r8
    b384:	4ba8      	ldr	r3, [pc, #672]	; (b628 <_vfiprintf_r+0x33c>)
    b386:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    b38a:	f7fc f90f 	bl	75ac <__locale_mb_cur_max>
    b38e:	4622      	mov	r2, r4
    b390:	4603      	mov	r3, r0
    b392:	a912      	add	r1, sp, #72	; 0x48
    b394:	f8cd a000 	str.w	sl, [sp]
    b398:	4658      	mov	r0, fp
    b39a:	47a8      	blx	r5
    b39c:	2800      	cmp	r0, #0
    b39e:	f000 8145 	beq.w	b62c <_vfiprintf_r+0x340>
    b3a2:	f2c0 8139 	blt.w	b618 <_vfiprintf_r+0x32c>
    b3a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b3a8:	2a25      	cmp	r2, #37	; 0x25
    b3aa:	4603      	mov	r3, r0
    b3ac:	d001      	beq.n	b3b2 <_vfiprintf_r+0xc6>
    b3ae:	441c      	add	r4, r3
    b3b0:	e7e8      	b.n	b384 <_vfiprintf_r+0x98>
    b3b2:	ebb4 0608 	subs.w	r6, r4, r8
    b3b6:	4605      	mov	r5, r0
    b3b8:	f040 813c 	bne.w	b634 <_vfiprintf_r+0x348>
    b3bc:	2300      	movs	r3, #0
    b3be:	7861      	ldrb	r1, [r4, #1]
    b3c0:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    b3c4:	f104 0801 	add.w	r8, r4, #1
    b3c8:	9306      	str	r3, [sp, #24]
    b3ca:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    b3ce:	461e      	mov	r6, r3
    b3d0:	242b      	movs	r4, #43	; 0x2b
    b3d2:	f108 0801 	add.w	r8, r8, #1
    b3d6:	f1a1 0320 	sub.w	r3, r1, #32
    b3da:	2b5a      	cmp	r3, #90	; 0x5a
    b3dc:	f200 8178 	bhi.w	b6d0 <_vfiprintf_r+0x3e4>
    b3e0:	e8df f013 	tbh	[pc, r3, lsl #1]
    b3e4:	017602b5 	.word	0x017602b5
    b3e8:	02b00176 	.word	0x02b00176
    b3ec:	01760176 	.word	0x01760176
    b3f0:	006a0176 	.word	0x006a0176
    b3f4:	01760176 	.word	0x01760176
    b3f8:	028d027d 	.word	0x028d027d
    b3fc:	02880176 	.word	0x02880176
    b400:	01760297 	.word	0x01760297
    b404:	005b0292 	.word	0x005b0292
    b408:	005b005b 	.word	0x005b005b
    b40c:	005b005b 	.word	0x005b005b
    b410:	005b005b 	.word	0x005b005b
    b414:	005b005b 	.word	0x005b005b
    b418:	01760176 	.word	0x01760176
    b41c:	01760176 	.word	0x01760176
    b420:	01760176 	.word	0x01760176
    b424:	01760176 	.word	0x01760176
    b428:	025c0176 	.word	0x025c0176
    b42c:	01760084 	.word	0x01760084
    b430:	01760176 	.word	0x01760176
    b434:	01760176 	.word	0x01760176
    b438:	01760176 	.word	0x01760176
    b43c:	01760176 	.word	0x01760176
    b440:	00e80176 	.word	0x00e80176
    b444:	01760176 	.word	0x01760176
    b448:	02330176 	.word	0x02330176
    b44c:	02da0176 	.word	0x02da0176
    b450:	01760176 	.word	0x01760176
    b454:	0176058b 	.word	0x0176058b
    b458:	01760176 	.word	0x01760176
    b45c:	01760176 	.word	0x01760176
    b460:	01760176 	.word	0x01760176
    b464:	01760176 	.word	0x01760176
    b468:	025c0176 	.word	0x025c0176
    b46c:	01760086 	.word	0x01760086
    b470:	01760176 	.word	0x01760176
    b474:	008602cd 	.word	0x008602cd
    b478:	0176007f 	.word	0x0176007f
    b47c:	017602c0 	.word	0x017602c0
    b480:	00ea02fd 	.word	0x00ea02fd
    b484:	007f02ed 	.word	0x007f02ed
    b488:	02330176 	.word	0x02330176
    b48c:	0569007c 	.word	0x0569007c
    b490:	01760176 	.word	0x01760176
    b494:	0176056b 	.word	0x0176056b
    b498:	007c      	.short	0x007c
    b49a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    b49e:	2200      	movs	r2, #0
    b4a0:	f818 1b01 	ldrb.w	r1, [r8], #1
    b4a4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    b4a8:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    b4ac:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    b4b0:	2b09      	cmp	r3, #9
    b4b2:	d9f5      	bls.n	b4a0 <_vfiprintf_r+0x1b4>
    b4b4:	9206      	str	r2, [sp, #24]
    b4b6:	e78e      	b.n	b3d6 <_vfiprintf_r+0xea>
    b4b8:	4658      	mov	r0, fp
    b4ba:	f7fe fdd9 	bl	a070 <_localeconv_r>
    b4be:	6843      	ldr	r3, [r0, #4]
    b4c0:	930d      	str	r3, [sp, #52]	; 0x34
    b4c2:	4618      	mov	r0, r3
    b4c4:	f7fc f8dc 	bl	7680 <strlen>
    b4c8:	900e      	str	r0, [sp, #56]	; 0x38
    b4ca:	4605      	mov	r5, r0
    b4cc:	4658      	mov	r0, fp
    b4ce:	f7fe fdcf 	bl	a070 <_localeconv_r>
    b4d2:	6883      	ldr	r3, [r0, #8]
    b4d4:	930b      	str	r3, [sp, #44]	; 0x2c
    b4d6:	2d00      	cmp	r5, #0
    b4d8:	f040 84d6 	bne.w	be88 <_vfiprintf_r+0xb9c>
    b4dc:	f898 1000 	ldrb.w	r1, [r8]
    b4e0:	e777      	b.n	b3d2 <_vfiprintf_r+0xe6>
    b4e2:	f898 1000 	ldrb.w	r1, [r8]
    b4e6:	f046 0620 	orr.w	r6, r6, #32
    b4ea:	e772      	b.n	b3d2 <_vfiprintf_r+0xe6>
    b4ec:	f046 0610 	orr.w	r6, r6, #16
    b4f0:	06b4      	lsls	r4, r6, #26
    b4f2:	f140 818e 	bpl.w	b812 <_vfiprintf_r+0x526>
    b4f6:	9b07      	ldr	r3, [sp, #28]
    b4f8:	3307      	adds	r3, #7
    b4fa:	f023 0307 	bic.w	r3, r3, #7
    b4fe:	461a      	mov	r2, r3
    b500:	6859      	ldr	r1, [r3, #4]
    b502:	f852 3b08 	ldr.w	r3, [r2], #8
    b506:	9207      	str	r2, [sp, #28]
    b508:	460a      	mov	r2, r1
    b50a:	2900      	cmp	r1, #0
    b50c:	f2c0 8470 	blt.w	bdf0 <_vfiprintf_r+0xb04>
    b510:	1c79      	adds	r1, r7, #1
    b512:	f000 85a2 	beq.w	c05a <_vfiprintf_r+0xd6e>
    b516:	f026 0180 	bic.w	r1, r6, #128	; 0x80
    b51a:	9103      	str	r1, [sp, #12]
    b51c:	ea53 0102 	orrs.w	r1, r3, r2
    b520:	f000 843f 	beq.w	bda2 <_vfiprintf_r+0xab6>
    b524:	2b0a      	cmp	r3, #10
    b526:	f172 0100 	sbcs.w	r1, r2, #0
    b52a:	f080 8541 	bcs.w	bfb0 <_vfiprintf_r+0xcc4>
    b52e:	3330      	adds	r3, #48	; 0x30
    b530:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    b534:	9e03      	ldr	r6, [sp, #12]
    b536:	2301      	movs	r3, #1
    b538:	9304      	str	r3, [sp, #16]
    b53a:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    b53e:	9b04      	ldr	r3, [sp, #16]
    b540:	42bb      	cmp	r3, r7
    b542:	bfb8      	it	lt
    b544:	463b      	movlt	r3, r7
    b546:	9303      	str	r3, [sp, #12]
    b548:	2300      	movs	r3, #0
    b54a:	9308      	str	r3, [sp, #32]
    b54c:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    b550:	2b00      	cmp	r3, #0
    b552:	f000 80cb 	beq.w	b6ec <_vfiprintf_r+0x400>
    b556:	9b03      	ldr	r3, [sp, #12]
    b558:	3301      	adds	r3, #1
    b55a:	9303      	str	r3, [sp, #12]
    b55c:	e0c6      	b.n	b6ec <_vfiprintf_r+0x400>
    b55e:	ee18 1a10 	vmov	r1, s16
    b562:	4658      	mov	r0, fp
    b564:	ee18 5a10 	vmov	r5, s16
    b568:	f001 f840 	bl	c5ec <__swsetup_r>
    b56c:	2800      	cmp	r0, #0
    b56e:	f040 8652 	bne.w	c216 <_vfiprintf_r+0xf2a>
    b572:	89aa      	ldrh	r2, [r5, #12]
    b574:	f002 031a 	and.w	r3, r2, #26
    b578:	2b0a      	cmp	r3, #10
    b57a:	f47f aef6 	bne.w	b36a <_vfiprintf_r+0x7e>
    b57e:	ee18 1a10 	vmov	r1, s16
    b582:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
    b586:	2b00      	cmp	r3, #0
    b588:	f6ff aeef 	blt.w	b36a <_vfiprintf_r+0x7e>
    b58c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    b58e:	07db      	lsls	r3, r3, #31
    b590:	d402      	bmi.n	b598 <_vfiprintf_r+0x2ac>
    b592:	0597      	lsls	r7, r2, #22
    b594:	f140 8612 	bpl.w	c1bc <_vfiprintf_r+0xed0>
    b598:	ee18 1a10 	vmov	r1, s16
    b59c:	4623      	mov	r3, r4
    b59e:	4632      	mov	r2, r6
    b5a0:	4658      	mov	r0, fp
    b5a2:	f000 fe69 	bl	c278 <__sbprintf>
    b5a6:	9005      	str	r0, [sp, #20]
    b5a8:	9805      	ldr	r0, [sp, #20]
    b5aa:	b045      	add	sp, #276	; 0x114
    b5ac:	ecbd 8b02 	vpop	{d8}
    b5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b5b4:	f046 0610 	orr.w	r6, r6, #16
    b5b8:	f016 0220 	ands.w	r2, r6, #32
    b5bc:	f000 8136 	beq.w	b82c <_vfiprintf_r+0x540>
    b5c0:	9b07      	ldr	r3, [sp, #28]
    b5c2:	3307      	adds	r3, #7
    b5c4:	f023 0307 	bic.w	r3, r3, #7
    b5c8:	4619      	mov	r1, r3
    b5ca:	685a      	ldr	r2, [r3, #4]
    b5cc:	f851 3b08 	ldr.w	r3, [r1], #8
    b5d0:	9107      	str	r1, [sp, #28]
    b5d2:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    b5d6:	9103      	str	r1, [sp, #12]
    b5d8:	2100      	movs	r1, #0
    b5da:	2000      	movs	r0, #0
    b5dc:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
    b5e0:	1c78      	adds	r0, r7, #1
    b5e2:	f000 8210 	beq.w	ba06 <_vfiprintf_r+0x71a>
    b5e6:	9803      	ldr	r0, [sp, #12]
    b5e8:	f020 0680 	bic.w	r6, r0, #128	; 0x80
    b5ec:	ea53 0002 	orrs.w	r0, r3, r2
    b5f0:	f040 8208 	bne.w	ba04 <_vfiprintf_r+0x718>
    b5f4:	2f00      	cmp	r7, #0
    b5f6:	f040 8538 	bne.w	c06a <_vfiprintf_r+0xd7e>
    b5fa:	2900      	cmp	r1, #0
    b5fc:	f040 83d5 	bne.w	bdaa <_vfiprintf_r+0xabe>
    b600:	9b03      	ldr	r3, [sp, #12]
    b602:	f013 0301 	ands.w	r3, r3, #1
    b606:	9304      	str	r3, [sp, #16]
    b608:	f000 8411 	beq.w	be2e <_vfiprintf_r+0xb42>
    b60c:	2330      	movs	r3, #48	; 0x30
    b60e:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    b612:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    b616:	e792      	b.n	b53e <_vfiprintf_r+0x252>
    b618:	2208      	movs	r2, #8
    b61a:	2100      	movs	r1, #0
    b61c:	4650      	mov	r0, sl
    b61e:	f7fb ff0f 	bl	7440 <memset>
    b622:	2301      	movs	r3, #1
    b624:	441c      	add	r4, r3
    b626:	e6ad      	b.n	b384 <_vfiprintf_r+0x98>
    b628:	20019324 	.word	0x20019324
    b62c:	ebb4 0608 	subs.w	r6, r4, r8
    b630:	4605      	mov	r5, r0
    b632:	d01b      	beq.n	b66c <_vfiprintf_r+0x380>
    b634:	9b19      	ldr	r3, [sp, #100]	; 0x64
    b636:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    b638:	3301      	adds	r3, #1
    b63a:	4432      	add	r2, r6
    b63c:	2b07      	cmp	r3, #7
    b63e:	e9c9 8600 	strd	r8, r6, [r9]
    b642:	921a      	str	r2, [sp, #104]	; 0x68
    b644:	9319      	str	r3, [sp, #100]	; 0x64
    b646:	dd1c      	ble.n	b682 <_vfiprintf_r+0x396>
    b648:	2a00      	cmp	r2, #0
    b64a:	f000 83a6 	beq.w	bd9a <_vfiprintf_r+0xaae>
    b64e:	ee18 1a10 	vmov	r1, s16
    b652:	aa18      	add	r2, sp, #96	; 0x60
    b654:	4658      	mov	r0, fp
    b656:	f7ff fe0d 	bl	b274 <__sprint_r.part.0>
    b65a:	bb20      	cbnz	r0, b6a6 <_vfiprintf_r+0x3ba>
    b65c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b660:	9b05      	ldr	r3, [sp, #20]
    b662:	4433      	add	r3, r6
    b664:	9305      	str	r3, [sp, #20]
    b666:	2d00      	cmp	r5, #0
    b668:	f47f aea8 	bne.w	b3bc <_vfiprintf_r+0xd0>
    b66c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    b66e:	2b00      	cmp	r3, #0
    b670:	f040 85c1 	bne.w	c1f6 <_vfiprintf_r+0xf0a>
    b674:	ee18 3a10 	vmov	r3, s16
    b678:	2200      	movs	r2, #0
    b67a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    b67e:	9219      	str	r2, [sp, #100]	; 0x64
    b680:	e015      	b.n	b6ae <_vfiprintf_r+0x3c2>
    b682:	f109 0908 	add.w	r9, r9, #8
    b686:	e7eb      	b.n	b660 <_vfiprintf_r+0x374>
    b688:	ee18 1a10 	vmov	r1, s16
    b68c:	aa18      	add	r2, sp, #96	; 0x60
    b68e:	4658      	mov	r0, fp
    b690:	f7ff fdf0 	bl	b274 <__sprint_r.part.0>
    b694:	2800      	cmp	r0, #0
    b696:	f000 80a6 	beq.w	b7e6 <_vfiprintf_r+0x4fa>
    b69a:	9b08      	ldr	r3, [sp, #32]
    b69c:	b11b      	cbz	r3, b6a6 <_vfiprintf_r+0x3ba>
    b69e:	9908      	ldr	r1, [sp, #32]
    b6a0:	4658      	mov	r0, fp
    b6a2:	f7fc f8ef 	bl	7884 <_free_r>
    b6a6:	ee18 3a10 	vmov	r3, s16
    b6aa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    b6ae:	ee18 2a10 	vmov	r2, s16
    b6b2:	6e52      	ldr	r2, [r2, #100]	; 0x64
    b6b4:	f012 0f01 	tst.w	r2, #1
    b6b8:	b29a      	uxth	r2, r3
    b6ba:	f000 80a0 	beq.w	b7fe <_vfiprintf_r+0x512>
    b6be:	0650      	lsls	r0, r2, #25
    b6c0:	f100 85b2 	bmi.w	c228 <_vfiprintf_r+0xf3c>
    b6c4:	9805      	ldr	r0, [sp, #20]
    b6c6:	b045      	add	sp, #276	; 0x114
    b6c8:	ecbd 8b02 	vpop	{d8}
    b6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b6d0:	2900      	cmp	r1, #0
    b6d2:	d0cb      	beq.n	b66c <_vfiprintf_r+0x380>
    b6d4:	2300      	movs	r3, #0
    b6d6:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    b6da:	2301      	movs	r3, #1
    b6dc:	e9cd 3303 	strd	r3, r3, [sp, #12]
    b6e0:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
    b6e4:	ac2b      	add	r4, sp, #172	; 0xac
    b6e6:	2300      	movs	r3, #0
    b6e8:	9308      	str	r3, [sp, #32]
    b6ea:	461f      	mov	r7, r3
    b6ec:	f016 0302 	ands.w	r3, r6, #2
    b6f0:	9309      	str	r3, [sp, #36]	; 0x24
    b6f2:	d002      	beq.n	b6fa <_vfiprintf_r+0x40e>
    b6f4:	9b03      	ldr	r3, [sp, #12]
    b6f6:	3302      	adds	r3, #2
    b6f8:	9303      	str	r3, [sp, #12]
    b6fa:	f016 0384 	ands.w	r3, r6, #132	; 0x84
    b6fe:	930a      	str	r3, [sp, #40]	; 0x28
    b700:	d105      	bne.n	b70e <_vfiprintf_r+0x422>
    b702:	9b06      	ldr	r3, [sp, #24]
    b704:	9a03      	ldr	r2, [sp, #12]
    b706:	1a9d      	subs	r5, r3, r2
    b708:	2d00      	cmp	r5, #0
    b70a:	f300 827b 	bgt.w	bc04 <_vfiprintf_r+0x918>
    b70e:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    b712:	1c41      	adds	r1, r0, #1
    b714:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    b718:	b182      	cbz	r2, b73c <_vfiprintf_r+0x450>
    b71a:	2201      	movs	r2, #1
    b71c:	3301      	adds	r3, #1
    b71e:	f8c9 2004 	str.w	r2, [r9, #4]
    b722:	2907      	cmp	r1, #7
    b724:	f10d 0243 	add.w	r2, sp, #67	; 0x43
    b728:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    b72c:	f8c9 2000 	str.w	r2, [r9]
    b730:	f300 824a 	bgt.w	bbc8 <_vfiprintf_r+0x8dc>
    b734:	4608      	mov	r0, r1
    b736:	f109 0908 	add.w	r9, r9, #8
    b73a:	3101      	adds	r1, #1
    b73c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b73e:	b1e2      	cbz	r2, b77a <_vfiprintf_r+0x48e>
    b740:	aa11      	add	r2, sp, #68	; 0x44
    b742:	3302      	adds	r3, #2
    b744:	f8c9 2000 	str.w	r2, [r9]
    b748:	2907      	cmp	r1, #7
    b74a:	f04f 0202 	mov.w	r2, #2
    b74e:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    b752:	f8c9 2004 	str.w	r2, [r9, #4]
    b756:	f340 8250 	ble.w	bbfa <_vfiprintf_r+0x90e>
    b75a:	2b00      	cmp	r3, #0
    b75c:	f000 8343 	beq.w	bde6 <_vfiprintf_r+0xafa>
    b760:	ee18 1a10 	vmov	r1, s16
    b764:	aa18      	add	r2, sp, #96	; 0x60
    b766:	4658      	mov	r0, fp
    b768:	f7ff fd84 	bl	b274 <__sprint_r.part.0>
    b76c:	2800      	cmp	r0, #0
    b76e:	d194      	bne.n	b69a <_vfiprintf_r+0x3ae>
    b770:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    b774:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b778:	1c41      	adds	r1, r0, #1
    b77a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b77c:	2a80      	cmp	r2, #128	; 0x80
    b77e:	f000 8184 	beq.w	ba8a <_vfiprintf_r+0x79e>
    b782:	9a04      	ldr	r2, [sp, #16]
    b784:	1abd      	subs	r5, r7, r2
    b786:	2d00      	cmp	r5, #0
    b788:	f300 81d7 	bgt.w	bb3a <_vfiprintf_r+0x84e>
    b78c:	9a04      	ldr	r2, [sp, #16]
    b78e:	f8c9 4000 	str.w	r4, [r9]
    b792:	4413      	add	r3, r2
    b794:	2907      	cmp	r1, #7
    b796:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    b79a:	f8c9 2004 	str.w	r2, [r9, #4]
    b79e:	f340 816e 	ble.w	ba7e <_vfiprintf_r+0x792>
    b7a2:	2b00      	cmp	r3, #0
    b7a4:	f000 8275 	beq.w	bc92 <_vfiprintf_r+0x9a6>
    b7a8:	ee18 1a10 	vmov	r1, s16
    b7ac:	aa18      	add	r2, sp, #96	; 0x60
    b7ae:	4658      	mov	r0, fp
    b7b0:	f7ff fd60 	bl	b274 <__sprint_r.part.0>
    b7b4:	2800      	cmp	r0, #0
    b7b6:	f47f af70 	bne.w	b69a <_vfiprintf_r+0x3ae>
    b7ba:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    b7bc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b7c0:	0775      	lsls	r5, r6, #29
    b7c2:	d505      	bpl.n	b7d0 <_vfiprintf_r+0x4e4>
    b7c4:	9a06      	ldr	r2, [sp, #24]
    b7c6:	9903      	ldr	r1, [sp, #12]
    b7c8:	1a54      	subs	r4, r2, r1
    b7ca:	2c00      	cmp	r4, #0
    b7cc:	f300 826b 	bgt.w	bca6 <_vfiprintf_r+0x9ba>
    b7d0:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
    b7d4:	9803      	ldr	r0, [sp, #12]
    b7d6:	4281      	cmp	r1, r0
    b7d8:	bfac      	ite	ge
    b7da:	1852      	addge	r2, r2, r1
    b7dc:	1812      	addlt	r2, r2, r0
    b7de:	9205      	str	r2, [sp, #20]
    b7e0:	2b00      	cmp	r3, #0
    b7e2:	f47f af51 	bne.w	b688 <_vfiprintf_r+0x39c>
    b7e6:	9908      	ldr	r1, [sp, #32]
    b7e8:	2300      	movs	r3, #0
    b7ea:	9319      	str	r3, [sp, #100]	; 0x64
    b7ec:	2900      	cmp	r1, #0
    b7ee:	f000 8149 	beq.w	ba84 <_vfiprintf_r+0x798>
    b7f2:	4658      	mov	r0, fp
    b7f4:	f7fc f846 	bl	7884 <_free_r>
    b7f8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b7fc:	e5c1      	b.n	b382 <_vfiprintf_r+0x96>
    b7fe:	059c      	lsls	r4, r3, #22
    b800:	f53f af5d 	bmi.w	b6be <_vfiprintf_r+0x3d2>
    b804:	ee18 4a10 	vmov	r4, s16
    b808:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b80a:	f7fb ff33 	bl	7674 <__retarget_lock_release_recursive>
    b80e:	89a2      	ldrh	r2, [r4, #12]
    b810:	e755      	b.n	b6be <_vfiprintf_r+0x3d2>
    b812:	06f0      	lsls	r0, r6, #27
    b814:	9a07      	ldr	r2, [sp, #28]
    b816:	f100 831f 	bmi.w	be58 <_vfiprintf_r+0xb6c>
    b81a:	0671      	lsls	r1, r6, #25
    b81c:	f140 8319 	bpl.w	be52 <_vfiprintf_r+0xb66>
    b820:	f932 3b04 	ldrsh.w	r3, [r2], #4
    b824:	9207      	str	r2, [sp, #28]
    b826:	17da      	asrs	r2, r3, #31
    b828:	4611      	mov	r1, r2
    b82a:	e66e      	b.n	b50a <_vfiprintf_r+0x21e>
    b82c:	f016 0310 	ands.w	r3, r6, #16
    b830:	9907      	ldr	r1, [sp, #28]
    b832:	f040 8309 	bne.w	be48 <_vfiprintf_r+0xb5c>
    b836:	f016 0040 	ands.w	r0, r6, #64	; 0x40
    b83a:	f000 8301 	beq.w	be40 <_vfiprintf_r+0xb54>
    b83e:	461a      	mov	r2, r3
    b840:	f851 3b04 	ldr.w	r3, [r1], #4
    b844:	9107      	str	r1, [sp, #28]
    b846:	b29b      	uxth	r3, r3
    b848:	e6c3      	b.n	b5d2 <_vfiprintf_r+0x2e6>
    b84a:	9b07      	ldr	r3, [sp, #28]
    b84c:	461a      	mov	r2, r3
    b84e:	2300      	movs	r3, #0
    b850:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    b854:	4613      	mov	r3, r2
    b856:	f853 4b04 	ldr.w	r4, [r3], #4
    b85a:	9303      	str	r3, [sp, #12]
    b85c:	2c00      	cmp	r4, #0
    b85e:	f000 8412 	beq.w	c086 <_vfiprintf_r+0xd9a>
    b862:	2953      	cmp	r1, #83	; 0x53
    b864:	f000 8365 	beq.w	bf32 <_vfiprintf_r+0xc46>
    b868:	f016 0510 	ands.w	r5, r6, #16
    b86c:	f040 8361 	bne.w	bf32 <_vfiprintf_r+0xc46>
    b870:	1c7b      	adds	r3, r7, #1
    b872:	f000 84b3 	beq.w	c1dc <_vfiprintf_r+0xef0>
    b876:	463a      	mov	r2, r7
    b878:	4629      	mov	r1, r5
    b87a:	4620      	mov	r0, r4
    b87c:	f7fe fc40 	bl	a100 <memchr>
    b880:	9008      	str	r0, [sp, #32]
    b882:	2800      	cmp	r0, #0
    b884:	f000 849f 	beq.w	c1c6 <_vfiprintf_r+0xeda>
    b888:	1b03      	subs	r3, r0, r4
    b88a:	9a03      	ldr	r2, [sp, #12]
    b88c:	9304      	str	r3, [sp, #16]
    b88e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b892:	462f      	mov	r7, r5
    b894:	9207      	str	r2, [sp, #28]
    b896:	9303      	str	r3, [sp, #12]
    b898:	9508      	str	r5, [sp, #32]
    b89a:	e657      	b.n	b54c <_vfiprintf_r+0x260>
    b89c:	2943      	cmp	r1, #67	; 0x43
    b89e:	d002      	beq.n	b8a6 <_vfiprintf_r+0x5ba>
    b8a0:	06f5      	lsls	r5, r6, #27
    b8a2:	f140 832d 	bpl.w	bf00 <_vfiprintf_r+0xc14>
    b8a6:	9d07      	ldr	r5, [sp, #28]
    b8a8:	2208      	movs	r2, #8
    b8aa:	2100      	movs	r1, #0
    b8ac:	a816      	add	r0, sp, #88	; 0x58
    b8ae:	ac2b      	add	r4, sp, #172	; 0xac
    b8b0:	f7fb fdc6 	bl	7440 <memset>
    b8b4:	ab16      	add	r3, sp, #88	; 0x58
    b8b6:	f855 2b04 	ldr.w	r2, [r5], #4
    b8ba:	4621      	mov	r1, r4
    b8bc:	4658      	mov	r0, fp
    b8be:	f7fe fc6f 	bl	a1a0 <_wcrtomb_r>
    b8c2:	4603      	mov	r3, r0
    b8c4:	3301      	adds	r3, #1
    b8c6:	9004      	str	r0, [sp, #16]
    b8c8:	f000 84b3 	beq.w	c232 <_vfiprintf_r+0xf46>
    b8cc:	9b04      	ldr	r3, [sp, #16]
    b8ce:	9507      	str	r5, [sp, #28]
    b8d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b8d4:	9303      	str	r3, [sp, #12]
    b8d6:	2300      	movs	r3, #0
    b8d8:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    b8dc:	e703      	b.n	b6e6 <_vfiprintf_r+0x3fa>
    b8de:	9b07      	ldr	r3, [sp, #28]
    b8e0:	f853 2b04 	ldr.w	r2, [r3], #4
    b8e4:	9206      	str	r2, [sp, #24]
    b8e6:	2a00      	cmp	r2, #0
    b8e8:	f280 829c 	bge.w	be24 <_vfiprintf_r+0xb38>
    b8ec:	9a06      	ldr	r2, [sp, #24]
    b8ee:	4252      	negs	r2, r2
    b8f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    b8f4:	f898 1000 	ldrb.w	r1, [r8]
    b8f8:	f046 0604 	orr.w	r6, r6, #4
    b8fc:	e569      	b.n	b3d2 <_vfiprintf_r+0xe6>
    b8fe:	f898 1000 	ldrb.w	r1, [r8]
    b902:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
    b906:	e564      	b.n	b3d2 <_vfiprintf_r+0xe6>
    b908:	f898 1000 	ldrb.w	r1, [r8]
    b90c:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    b910:	e55f      	b.n	b3d2 <_vfiprintf_r+0xe6>
    b912:	4642      	mov	r2, r8
    b914:	f812 1b01 	ldrb.w	r1, [r2], #1
    b918:	292a      	cmp	r1, #42	; 0x2a
    b91a:	f000 8496 	beq.w	c24a <_vfiprintf_r+0xf5e>
    b91e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    b922:	2b09      	cmp	r3, #9
    b924:	4690      	mov	r8, r2
    b926:	f04f 0700 	mov.w	r7, #0
    b92a:	f63f ad54 	bhi.w	b3d6 <_vfiprintf_r+0xea>
    b92e:	f818 1b01 	ldrb.w	r1, [r8], #1
    b932:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    b936:	eb03 0747 	add.w	r7, r3, r7, lsl #1
    b93a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    b93e:	2b09      	cmp	r3, #9
    b940:	d9f5      	bls.n	b92e <_vfiprintf_r+0x642>
    b942:	e548      	b.n	b3d6 <_vfiprintf_r+0xea>
    b944:	f898 1000 	ldrb.w	r1, [r8]
    b948:	f046 0601 	orr.w	r6, r6, #1
    b94c:	e541      	b.n	b3d2 <_vfiprintf_r+0xe6>
    b94e:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    b952:	2b00      	cmp	r3, #0
    b954:	f47f adc2 	bne.w	b4dc <_vfiprintf_r+0x1f0>
    b958:	2320      	movs	r3, #32
    b95a:	f898 1000 	ldrb.w	r1, [r8]
    b95e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    b962:	e536      	b.n	b3d2 <_vfiprintf_r+0xe6>
    b964:	f898 1000 	ldrb.w	r1, [r8]
    b968:	296c      	cmp	r1, #108	; 0x6c
    b96a:	bf03      	ittte	eq
    b96c:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    b970:	f046 0620 	orreq.w	r6, r6, #32
    b974:	f108 0801 	addeq.w	r8, r8, #1
    b978:	f046 0610 	orrne.w	r6, r6, #16
    b97c:	e529      	b.n	b3d2 <_vfiprintf_r+0xe6>
    b97e:	f898 1000 	ldrb.w	r1, [r8]
    b982:	2968      	cmp	r1, #104	; 0x68
    b984:	bf03      	ittte	eq
    b986:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    b98a:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
    b98e:	f108 0801 	addeq.w	r8, r8, #1
    b992:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
    b996:	e51c      	b.n	b3d2 <_vfiprintf_r+0xe6>
    b998:	f046 0310 	orr.w	r3, r6, #16
    b99c:	9303      	str	r3, [sp, #12]
    b99e:	9b03      	ldr	r3, [sp, #12]
    b9a0:	f013 0220 	ands.w	r2, r3, #32
    b9a4:	f000 8206 	beq.w	bdb4 <_vfiprintf_r+0xac8>
    b9a8:	9b07      	ldr	r3, [sp, #28]
    b9aa:	3307      	adds	r3, #7
    b9ac:	f023 0307 	bic.w	r3, r3, #7
    b9b0:	4619      	mov	r1, r3
    b9b2:	685a      	ldr	r2, [r3, #4]
    b9b4:	f851 3b08 	ldr.w	r3, [r1], #8
    b9b8:	9107      	str	r1, [sp, #28]
    b9ba:	2101      	movs	r1, #1
    b9bc:	e60d      	b.n	b5da <_vfiprintf_r+0x2ee>
    b9be:	9a07      	ldr	r2, [sp, #28]
    b9c0:	f046 0302 	orr.w	r3, r6, #2
    b9c4:	9303      	str	r3, [sp, #12]
    b9c6:	f852 3b04 	ldr.w	r3, [r2], #4
    b9ca:	9207      	str	r2, [sp, #28]
    b9cc:	f647 0230 	movw	r2, #30768	; 0x7830
    b9d0:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
    b9d4:	4ab8      	ldr	r2, [pc, #736]	; (bcb8 <_vfiprintf_r+0x9cc>)
    b9d6:	920c      	str	r2, [sp, #48]	; 0x30
    b9d8:	2102      	movs	r1, #2
    b9da:	2200      	movs	r2, #0
    b9dc:	e5fd      	b.n	b5da <_vfiprintf_r+0x2ee>
    b9de:	06b7      	lsls	r7, r6, #26
    b9e0:	f100 8248 	bmi.w	be74 <_vfiprintf_r+0xb88>
    b9e4:	06f5      	lsls	r5, r6, #27
    b9e6:	f100 8346 	bmi.w	c076 <_vfiprintf_r+0xd8a>
    b9ea:	0674      	lsls	r4, r6, #25
    b9ec:	f100 83d5 	bmi.w	c19a <_vfiprintf_r+0xeae>
    b9f0:	05b0      	lsls	r0, r6, #22
    b9f2:	f140 8340 	bpl.w	c076 <_vfiprintf_r+0xd8a>
    b9f6:	9b07      	ldr	r3, [sp, #28]
    b9f8:	9905      	ldr	r1, [sp, #20]
    b9fa:	f853 2b04 	ldr.w	r2, [r3], #4
    b9fe:	9307      	str	r3, [sp, #28]
    ba00:	7011      	strb	r1, [r2, #0]
    ba02:	e4be      	b.n	b382 <_vfiprintf_r+0x96>
    ba04:	9603      	str	r6, [sp, #12]
    ba06:	2901      	cmp	r1, #1
    ba08:	f43f ad8c 	beq.w	b524 <_vfiprintf_r+0x238>
    ba0c:	2902      	cmp	r1, #2
    ba0e:	ac44      	add	r4, sp, #272	; 0x110
    ba10:	d111      	bne.n	ba36 <_vfiprintf_r+0x74a>
    ba12:	980c      	ldr	r0, [sp, #48]	; 0x30
    ba14:	f003 010f 	and.w	r1, r3, #15
    ba18:	091b      	lsrs	r3, r3, #4
    ba1a:	5c41      	ldrb	r1, [r0, r1]
    ba1c:	f804 1d01 	strb.w	r1, [r4, #-1]!
    ba20:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    ba24:	0912      	lsrs	r2, r2, #4
    ba26:	ea53 0102 	orrs.w	r1, r3, r2
    ba2a:	d1f3      	bne.n	ba14 <_vfiprintf_r+0x728>
    ba2c:	9e03      	ldr	r6, [sp, #12]
    ba2e:	ab44      	add	r3, sp, #272	; 0x110
    ba30:	1b1b      	subs	r3, r3, r4
    ba32:	9304      	str	r3, [sp, #16]
    ba34:	e583      	b.n	b53e <_vfiprintf_r+0x252>
    ba36:	f003 0107 	and.w	r1, r3, #7
    ba3a:	08db      	lsrs	r3, r3, #3
    ba3c:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    ba40:	08d2      	lsrs	r2, r2, #3
    ba42:	3130      	adds	r1, #48	; 0x30
    ba44:	ea53 0502 	orrs.w	r5, r3, r2
    ba48:	4620      	mov	r0, r4
    ba4a:	f804 1d01 	strb.w	r1, [r4, #-1]!
    ba4e:	d1f2      	bne.n	ba36 <_vfiprintf_r+0x74a>
    ba50:	9e03      	ldr	r6, [sp, #12]
    ba52:	07f3      	lsls	r3, r6, #31
    ba54:	d5eb      	bpl.n	ba2e <_vfiprintf_r+0x742>
    ba56:	2930      	cmp	r1, #48	; 0x30
    ba58:	d0e8      	beq.n	ba2c <_vfiprintf_r+0x740>
    ba5a:	2330      	movs	r3, #48	; 0x30
    ba5c:	3802      	subs	r0, #2
    ba5e:	f804 3c01 	strb.w	r3, [r4, #-1]
    ba62:	ab44      	add	r3, sp, #272	; 0x110
    ba64:	1a1b      	subs	r3, r3, r0
    ba66:	9e03      	ldr	r6, [sp, #12]
    ba68:	9304      	str	r3, [sp, #16]
    ba6a:	4604      	mov	r4, r0
    ba6c:	e567      	b.n	b53e <_vfiprintf_r+0x252>
    ba6e:	9b04      	ldr	r3, [sp, #16]
    ba70:	941b      	str	r4, [sp, #108]	; 0x6c
    ba72:	2201      	movs	r2, #1
    ba74:	931c      	str	r3, [sp, #112]	; 0x70
    ba76:	931a      	str	r3, [sp, #104]	; 0x68
    ba78:	9219      	str	r2, [sp, #100]	; 0x64
    ba7a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    ba7e:	f109 0908 	add.w	r9, r9, #8
    ba82:	e69d      	b.n	b7c0 <_vfiprintf_r+0x4d4>
    ba84:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    ba88:	e47b      	b.n	b382 <_vfiprintf_r+0x96>
    ba8a:	9a06      	ldr	r2, [sp, #24]
    ba8c:	9d03      	ldr	r5, [sp, #12]
    ba8e:	1b55      	subs	r5, r2, r5
    ba90:	2d00      	cmp	r5, #0
    ba92:	f77f ae76 	ble.w	b782 <_vfiprintf_r+0x496>
    ba96:	2d10      	cmp	r5, #16
    ba98:	f340 83bb 	ble.w	c212 <_vfiprintf_r+0xf26>
    ba9c:	9409      	str	r4, [sp, #36]	; 0x24
    ba9e:	ee18 4a10 	vmov	r4, s16
    baa2:	e007      	b.n	bab4 <_vfiprintf_r+0x7c8>
    baa4:	f100 0c02 	add.w	ip, r0, #2
    baa8:	f109 0908 	add.w	r9, r9, #8
    baac:	4610      	mov	r0, r2
    baae:	3d10      	subs	r5, #16
    bab0:	2d10      	cmp	r5, #16
    bab2:	dd1e      	ble.n	baf2 <_vfiprintf_r+0x806>
    bab4:	4981      	ldr	r1, [pc, #516]	; (bcbc <_vfiprintf_r+0x9d0>)
    bab6:	f8c9 1000 	str.w	r1, [r9]
    baba:	1c42      	adds	r2, r0, #1
    babc:	3310      	adds	r3, #16
    babe:	2110      	movs	r1, #16
    bac0:	2a07      	cmp	r2, #7
    bac2:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    bac6:	f8c9 1004 	str.w	r1, [r9, #4]
    baca:	ddeb      	ble.n	baa4 <_vfiprintf_r+0x7b8>
    bacc:	aa18      	add	r2, sp, #96	; 0x60
    bace:	2b00      	cmp	r3, #0
    bad0:	d074      	beq.n	bbbc <_vfiprintf_r+0x8d0>
    bad2:	4621      	mov	r1, r4
    bad4:	4658      	mov	r0, fp
    bad6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bada:	f7ff fbcb 	bl	b274 <__sprint_r.part.0>
    bade:	2800      	cmp	r0, #0
    bae0:	f47f addb 	bne.w	b69a <_vfiprintf_r+0x3ae>
    bae4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    bae8:	3d10      	subs	r5, #16
    baea:	2d10      	cmp	r5, #16
    baec:	f100 0c01 	add.w	ip, r0, #1
    baf0:	dce0      	bgt.n	bab4 <_vfiprintf_r+0x7c8>
    baf2:	9c09      	ldr	r4, [sp, #36]	; 0x24
    baf4:	4a71      	ldr	r2, [pc, #452]	; (bcbc <_vfiprintf_r+0x9d0>)
    baf6:	f8c9 5004 	str.w	r5, [r9, #4]
    bafa:	442b      	add	r3, r5
    bafc:	f1bc 0f07 	cmp.w	ip, #7
    bb00:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
    bb04:	f8c9 2000 	str.w	r2, [r9]
    bb08:	f340 8194 	ble.w	be34 <_vfiprintf_r+0xb48>
    bb0c:	2b00      	cmp	r3, #0
    bb0e:	f000 831f 	beq.w	c150 <_vfiprintf_r+0xe64>
    bb12:	ee18 1a10 	vmov	r1, s16
    bb16:	aa18      	add	r2, sp, #96	; 0x60
    bb18:	4658      	mov	r0, fp
    bb1a:	f7ff fbab 	bl	b274 <__sprint_r.part.0>
    bb1e:	2800      	cmp	r0, #0
    bb20:	f47f adbb 	bne.w	b69a <_vfiprintf_r+0x3ae>
    bb24:	9a04      	ldr	r2, [sp, #16]
    bb26:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    bb2a:	1abd      	subs	r5, r7, r2
    bb2c:	2d00      	cmp	r5, #0
    bb2e:	f100 0101 	add.w	r1, r0, #1
    bb32:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bb36:	f77f ae29 	ble.w	b78c <_vfiprintf_r+0x4a0>
    bb3a:	2d10      	cmp	r5, #16
    bb3c:	dd29      	ble.n	bb92 <_vfiprintf_r+0x8a6>
    bb3e:	9409      	str	r4, [sp, #36]	; 0x24
    bb40:	2710      	movs	r7, #16
    bb42:	ee18 4a10 	vmov	r4, s16
    bb46:	e007      	b.n	bb58 <_vfiprintf_r+0x86c>
    bb48:	f100 0c02 	add.w	ip, r0, #2
    bb4c:	f109 0908 	add.w	r9, r9, #8
    bb50:	4610      	mov	r0, r2
    bb52:	3d10      	subs	r5, #16
    bb54:	2d10      	cmp	r5, #16
    bb56:	dd1a      	ble.n	bb8e <_vfiprintf_r+0x8a2>
    bb58:	1c42      	adds	r2, r0, #1
    bb5a:	4958      	ldr	r1, [pc, #352]	; (bcbc <_vfiprintf_r+0x9d0>)
    bb5c:	3310      	adds	r3, #16
    bb5e:	2a07      	cmp	r2, #7
    bb60:	e9c9 1700 	strd	r1, r7, [r9]
    bb64:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    bb68:	ddee      	ble.n	bb48 <_vfiprintf_r+0x85c>
    bb6a:	aa18      	add	r2, sp, #96	; 0x60
    bb6c:	b303      	cbz	r3, bbb0 <_vfiprintf_r+0x8c4>
    bb6e:	4621      	mov	r1, r4
    bb70:	4658      	mov	r0, fp
    bb72:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bb76:	f7ff fb7d 	bl	b274 <__sprint_r.part.0>
    bb7a:	2800      	cmp	r0, #0
    bb7c:	f47f ad8d 	bne.w	b69a <_vfiprintf_r+0x3ae>
    bb80:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    bb84:	3d10      	subs	r5, #16
    bb86:	2d10      	cmp	r5, #16
    bb88:	f100 0c01 	add.w	ip, r0, #1
    bb8c:	dce4      	bgt.n	bb58 <_vfiprintf_r+0x86c>
    bb8e:	9c09      	ldr	r4, [sp, #36]	; 0x24
    bb90:	4661      	mov	r1, ip
    bb92:	4a4a      	ldr	r2, [pc, #296]	; (bcbc <_vfiprintf_r+0x9d0>)
    bb94:	f8c9 5004 	str.w	r5, [r9, #4]
    bb98:	442b      	add	r3, r5
    bb9a:	2907      	cmp	r1, #7
    bb9c:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    bba0:	f8c9 2000 	str.w	r2, [r9]
    bba4:	f300 80e7 	bgt.w	bd76 <_vfiprintf_r+0xa8a>
    bba8:	f109 0908 	add.w	r9, r9, #8
    bbac:	3101      	adds	r1, #1
    bbae:	e5ed      	b.n	b78c <_vfiprintf_r+0x4a0>
    bbb0:	f04f 0c01 	mov.w	ip, #1
    bbb4:	4618      	mov	r0, r3
    bbb6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bbba:	e7ca      	b.n	bb52 <_vfiprintf_r+0x866>
    bbbc:	f04f 0c01 	mov.w	ip, #1
    bbc0:	4618      	mov	r0, r3
    bbc2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bbc6:	e772      	b.n	baae <_vfiprintf_r+0x7c2>
    bbc8:	2b00      	cmp	r3, #0
    bbca:	f000 8104 	beq.w	bdd6 <_vfiprintf_r+0xaea>
    bbce:	ee18 1a10 	vmov	r1, s16
    bbd2:	aa18      	add	r2, sp, #96	; 0x60
    bbd4:	4658      	mov	r0, fp
    bbd6:	f7ff fb4d 	bl	b274 <__sprint_r.part.0>
    bbda:	2800      	cmp	r0, #0
    bbdc:	f47f ad5d 	bne.w	b69a <_vfiprintf_r+0x3ae>
    bbe0:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    bbe4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bbe8:	1c41      	adds	r1, r0, #1
    bbea:	e5a7      	b.n	b73c <_vfiprintf_r+0x450>
    bbec:	2302      	movs	r3, #2
    bbee:	aa11      	add	r2, sp, #68	; 0x44
    bbf0:	931c      	str	r3, [sp, #112]	; 0x70
    bbf2:	921b      	str	r2, [sp, #108]	; 0x6c
    bbf4:	2101      	movs	r1, #1
    bbf6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bbfa:	4608      	mov	r0, r1
    bbfc:	f109 0908 	add.w	r9, r9, #8
    bc00:	1c41      	adds	r1, r0, #1
    bc02:	e5ba      	b.n	b77a <_vfiprintf_r+0x48e>
    bc04:	2d10      	cmp	r5, #16
    bc06:	f340 82e5 	ble.w	c1d4 <_vfiprintf_r+0xee8>
    bc0a:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    bc0e:	940f      	str	r4, [sp, #60]	; 0x3c
    bc10:	4608      	mov	r0, r1
    bc12:	ee18 4a10 	vmov	r4, s16
    bc16:	e007      	b.n	bc28 <_vfiprintf_r+0x93c>
    bc18:	f100 0c02 	add.w	ip, r0, #2
    bc1c:	f109 0908 	add.w	r9, r9, #8
    bc20:	4610      	mov	r0, r2
    bc22:	3d10      	subs	r5, #16
    bc24:	2d10      	cmp	r5, #16
    bc26:	dd1d      	ble.n	bc64 <_vfiprintf_r+0x978>
    bc28:	4925      	ldr	r1, [pc, #148]	; (bcc0 <_vfiprintf_r+0x9d4>)
    bc2a:	f8c9 1000 	str.w	r1, [r9]
    bc2e:	1c42      	adds	r2, r0, #1
    bc30:	3310      	adds	r3, #16
    bc32:	2110      	movs	r1, #16
    bc34:	2a07      	cmp	r2, #7
    bc36:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    bc3a:	f8c9 1004 	str.w	r1, [r9, #4]
    bc3e:	ddeb      	ble.n	bc18 <_vfiprintf_r+0x92c>
    bc40:	aa18      	add	r2, sp, #96	; 0x60
    bc42:	b303      	cbz	r3, bc86 <_vfiprintf_r+0x99a>
    bc44:	4621      	mov	r1, r4
    bc46:	4658      	mov	r0, fp
    bc48:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bc4c:	f7ff fb12 	bl	b274 <__sprint_r.part.0>
    bc50:	2800      	cmp	r0, #0
    bc52:	f47f ad22 	bne.w	b69a <_vfiprintf_r+0x3ae>
    bc56:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    bc5a:	3d10      	subs	r5, #16
    bc5c:	2d10      	cmp	r5, #16
    bc5e:	f100 0c01 	add.w	ip, r0, #1
    bc62:	dce1      	bgt.n	bc28 <_vfiprintf_r+0x93c>
    bc64:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    bc66:	4660      	mov	r0, ip
    bc68:	4a15      	ldr	r2, [pc, #84]	; (bcc0 <_vfiprintf_r+0x9d4>)
    bc6a:	f8c9 5004 	str.w	r5, [r9, #4]
    bc6e:	442b      	add	r3, r5
    bc70:	2807      	cmp	r0, #7
    bc72:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    bc76:	f8c9 2000 	str.w	r2, [r9]
    bc7a:	f300 80c1 	bgt.w	be00 <_vfiprintf_r+0xb14>
    bc7e:	f109 0908 	add.w	r9, r9, #8
    bc82:	1c41      	adds	r1, r0, #1
    bc84:	e546      	b.n	b714 <_vfiprintf_r+0x428>
    bc86:	4618      	mov	r0, r3
    bc88:	f04f 0c01 	mov.w	ip, #1
    bc8c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bc90:	e7c7      	b.n	bc22 <_vfiprintf_r+0x936>
    bc92:	0776      	lsls	r6, r6, #29
    bc94:	9319      	str	r3, [sp, #100]	; 0x64
    bc96:	d553      	bpl.n	bd40 <_vfiprintf_r+0xa54>
    bc98:	9a06      	ldr	r2, [sp, #24]
    bc9a:	9903      	ldr	r1, [sp, #12]
    bc9c:	1a54      	subs	r4, r2, r1
    bc9e:	2c00      	cmp	r4, #0
    bca0:	dd4e      	ble.n	bd40 <_vfiprintf_r+0xa54>
    bca2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bca6:	2c10      	cmp	r4, #16
    bca8:	f340 82b0 	ble.w	c20c <_vfiprintf_r+0xf20>
    bcac:	9919      	ldr	r1, [sp, #100]	; 0x64
    bcae:	ee18 6a10 	vmov	r6, s16
    bcb2:	2510      	movs	r5, #16
    bcb4:	e00d      	b.n	bcd2 <_vfiprintf_r+0x9e6>
    bcb6:	bf00      	nop
    bcb8:	20018c38 	.word	0x20018c38
    bcbc:	200190b0 	.word	0x200190b0
    bcc0:	20018c7c 	.word	0x20018c7c
    bcc4:	1c88      	adds	r0, r1, #2
    bcc6:	f109 0908 	add.w	r9, r9, #8
    bcca:	4611      	mov	r1, r2
    bccc:	3c10      	subs	r4, #16
    bcce:	2c10      	cmp	r4, #16
    bcd0:	dd1a      	ble.n	bd08 <_vfiprintf_r+0xa1c>
    bcd2:	1c4a      	adds	r2, r1, #1
    bcd4:	48b3      	ldr	r0, [pc, #716]	; (bfa4 <_vfiprintf_r+0xcb8>)
    bcd6:	3310      	adds	r3, #16
    bcd8:	2a07      	cmp	r2, #7
    bcda:	e9c9 0500 	strd	r0, r5, [r9]
    bcde:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    bce2:	ddef      	ble.n	bcc4 <_vfiprintf_r+0x9d8>
    bce4:	aa18      	add	r2, sp, #96	; 0x60
    bce6:	b333      	cbz	r3, bd36 <_vfiprintf_r+0xa4a>
    bce8:	4631      	mov	r1, r6
    bcea:	4658      	mov	r0, fp
    bcec:	f7ff fac2 	bl	b274 <__sprint_r.part.0>
    bcf0:	2800      	cmp	r0, #0
    bcf2:	f47f acd2 	bne.w	b69a <_vfiprintf_r+0x3ae>
    bcf6:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    bcfa:	3c10      	subs	r4, #16
    bcfc:	2c10      	cmp	r4, #16
    bcfe:	f101 0001 	add.w	r0, r1, #1
    bd02:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bd06:	dce4      	bgt.n	bcd2 <_vfiprintf_r+0x9e6>
    bd08:	4aa6      	ldr	r2, [pc, #664]	; (bfa4 <_vfiprintf_r+0xcb8>)
    bd0a:	f8c9 4004 	str.w	r4, [r9, #4]
    bd0e:	4423      	add	r3, r4
    bd10:	2807      	cmp	r0, #7
    bd12:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    bd16:	f8c9 2000 	str.w	r2, [r9]
    bd1a:	f77f ad59 	ble.w	b7d0 <_vfiprintf_r+0x4e4>
    bd1e:	b17b      	cbz	r3, bd40 <_vfiprintf_r+0xa54>
    bd20:	ee18 1a10 	vmov	r1, s16
    bd24:	aa18      	add	r2, sp, #96	; 0x60
    bd26:	4658      	mov	r0, fp
    bd28:	f7ff faa4 	bl	b274 <__sprint_r.part.0>
    bd2c:	2800      	cmp	r0, #0
    bd2e:	f47f acb4 	bne.w	b69a <_vfiprintf_r+0x3ae>
    bd32:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    bd34:	e54c      	b.n	b7d0 <_vfiprintf_r+0x4e4>
    bd36:	2001      	movs	r0, #1
    bd38:	4619      	mov	r1, r3
    bd3a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bd3e:	e7c5      	b.n	bccc <_vfiprintf_r+0x9e0>
    bd40:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    bd44:	9903      	ldr	r1, [sp, #12]
    bd46:	428a      	cmp	r2, r1
    bd48:	bfac      	ite	ge
    bd4a:	189b      	addge	r3, r3, r2
    bd4c:	185b      	addlt	r3, r3, r1
    bd4e:	9305      	str	r3, [sp, #20]
    bd50:	e549      	b.n	b7e6 <_vfiprintf_r+0x4fa>
    bd52:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    bd56:	058f      	lsls	r7, r1, #22
    bd58:	ee18 3a10 	vmov	r3, s16
    bd5c:	b28a      	uxth	r2, r1
    bd5e:	f53f aae8 	bmi.w	b332 <_vfiprintf_r+0x46>
    bd62:	ee18 5a10 	vmov	r5, s16
    bd66:	6d98      	ldr	r0, [r3, #88]	; 0x58
    bd68:	f7fb fc82 	bl	7670 <__retarget_lock_acquire_recursive>
    bd6c:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
    bd70:	b28a      	uxth	r2, r1
    bd72:	f7ff bade 	b.w	b332 <_vfiprintf_r+0x46>
    bd76:	2b00      	cmp	r3, #0
    bd78:	f43f ae79 	beq.w	ba6e <_vfiprintf_r+0x782>
    bd7c:	ee18 1a10 	vmov	r1, s16
    bd80:	aa18      	add	r2, sp, #96	; 0x60
    bd82:	4658      	mov	r0, fp
    bd84:	f7ff fa76 	bl	b274 <__sprint_r.part.0>
    bd88:	2800      	cmp	r0, #0
    bd8a:	f47f ac86 	bne.w	b69a <_vfiprintf_r+0x3ae>
    bd8e:	9919      	ldr	r1, [sp, #100]	; 0x64
    bd90:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    bd92:	3101      	adds	r1, #1
    bd94:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bd98:	e4f8      	b.n	b78c <_vfiprintf_r+0x4a0>
    bd9a:	9219      	str	r2, [sp, #100]	; 0x64
    bd9c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bda0:	e45e      	b.n	b660 <_vfiprintf_r+0x374>
    bda2:	2f00      	cmp	r7, #0
    bda4:	f47f abc3 	bne.w	b52e <_vfiprintf_r+0x242>
    bda8:	9e03      	ldr	r6, [sp, #12]
    bdaa:	2700      	movs	r7, #0
    bdac:	9704      	str	r7, [sp, #16]
    bdae:	ac44      	add	r4, sp, #272	; 0x110
    bdb0:	f7ff bbc5 	b.w	b53e <_vfiprintf_r+0x252>
    bdb4:	9b03      	ldr	r3, [sp, #12]
    bdb6:	f013 0310 	ands.w	r3, r3, #16
    bdba:	d154      	bne.n	be66 <_vfiprintf_r+0xb7a>
    bdbc:	9a03      	ldr	r2, [sp, #12]
    bdbe:	f012 0040 	ands.w	r0, r2, #64	; 0x40
    bdc2:	f000 816b 	beq.w	c09c <_vfiprintf_r+0xdb0>
    bdc6:	9907      	ldr	r1, [sp, #28]
    bdc8:	461a      	mov	r2, r3
    bdca:	f851 3b04 	ldr.w	r3, [r1], #4
    bdce:	9107      	str	r1, [sp, #28]
    bdd0:	b29b      	uxth	r3, r3
    bdd2:	2101      	movs	r1, #1
    bdd4:	e401      	b.n	b5da <_vfiprintf_r+0x2ee>
    bdd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bdd8:	2a00      	cmp	r2, #0
    bdda:	d164      	bne.n	bea6 <_vfiprintf_r+0xbba>
    bddc:	4618      	mov	r0, r3
    bdde:	2101      	movs	r1, #1
    bde0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bde4:	e4c9      	b.n	b77a <_vfiprintf_r+0x48e>
    bde6:	2101      	movs	r1, #1
    bde8:	4618      	mov	r0, r3
    bdea:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bdee:	e4c4      	b.n	b77a <_vfiprintf_r+0x48e>
    bdf0:	425b      	negs	r3, r3
    bdf2:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
    bdf6:	9603      	str	r6, [sp, #12]
    bdf8:	202d      	movs	r0, #45	; 0x2d
    bdfa:	2101      	movs	r1, #1
    bdfc:	f7ff bbee 	b.w	b5dc <_vfiprintf_r+0x2f0>
    be00:	2b00      	cmp	r3, #0
    be02:	f000 8088 	beq.w	bf16 <_vfiprintf_r+0xc2a>
    be06:	ee18 1a10 	vmov	r1, s16
    be0a:	aa18      	add	r2, sp, #96	; 0x60
    be0c:	4658      	mov	r0, fp
    be0e:	f7ff fa31 	bl	b274 <__sprint_r.part.0>
    be12:	2800      	cmp	r0, #0
    be14:	f47f ac41 	bne.w	b69a <_vfiprintf_r+0x3ae>
    be18:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    be1c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    be20:	1c41      	adds	r1, r0, #1
    be22:	e477      	b.n	b714 <_vfiprintf_r+0x428>
    be24:	f898 1000 	ldrb.w	r1, [r8]
    be28:	9307      	str	r3, [sp, #28]
    be2a:	f7ff bad2 	b.w	b3d2 <_vfiprintf_r+0xe6>
    be2e:	ac44      	add	r4, sp, #272	; 0x110
    be30:	f7ff bb85 	b.w	b53e <_vfiprintf_r+0x252>
    be34:	f109 0908 	add.w	r9, r9, #8
    be38:	f10c 0101 	add.w	r1, ip, #1
    be3c:	4660      	mov	r0, ip
    be3e:	e4a0      	b.n	b782 <_vfiprintf_r+0x496>
    be40:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    be44:	f040 8197 	bne.w	c176 <_vfiprintf_r+0xe8a>
    be48:	f851 3b04 	ldr.w	r3, [r1], #4
    be4c:	9107      	str	r1, [sp, #28]
    be4e:	f7ff bbc0 	b.w	b5d2 <_vfiprintf_r+0x2e6>
    be52:	05b3      	lsls	r3, r6, #22
    be54:	f100 8188 	bmi.w	c168 <_vfiprintf_r+0xe7c>
    be58:	f852 3b04 	ldr.w	r3, [r2], #4
    be5c:	9207      	str	r2, [sp, #28]
    be5e:	17da      	asrs	r2, r3, #31
    be60:	4611      	mov	r1, r2
    be62:	f7ff bb52 	b.w	b50a <_vfiprintf_r+0x21e>
    be66:	9907      	ldr	r1, [sp, #28]
    be68:	f851 3b04 	ldr.w	r3, [r1], #4
    be6c:	9107      	str	r1, [sp, #28]
    be6e:	2101      	movs	r1, #1
    be70:	f7ff bbb3 	b.w	b5da <_vfiprintf_r+0x2ee>
    be74:	9b07      	ldr	r3, [sp, #28]
    be76:	9805      	ldr	r0, [sp, #20]
    be78:	f853 1b04 	ldr.w	r1, [r3], #4
    be7c:	9307      	str	r3, [sp, #28]
    be7e:	17c2      	asrs	r2, r0, #31
    be80:	e9c1 0200 	strd	r0, r2, [r1]
    be84:	f7ff ba7d 	b.w	b382 <_vfiprintf_r+0x96>
    be88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    be8a:	2b00      	cmp	r3, #0
    be8c:	f43f ab26 	beq.w	b4dc <_vfiprintf_r+0x1f0>
    be90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    be92:	781b      	ldrb	r3, [r3, #0]
    be94:	2b00      	cmp	r3, #0
    be96:	f43f ab21 	beq.w	b4dc <_vfiprintf_r+0x1f0>
    be9a:	f898 1000 	ldrb.w	r1, [r8]
    be9e:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
    bea2:	f7ff ba96 	b.w	b3d2 <_vfiprintf_r+0xe6>
    bea6:	2302      	movs	r3, #2
    bea8:	aa11      	add	r2, sp, #68	; 0x44
    beaa:	931c      	str	r3, [sp, #112]	; 0x70
    beac:	921b      	str	r2, [sp, #108]	; 0x6c
    beae:	2001      	movs	r0, #1
    beb0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    beb4:	e6a2      	b.n	bbfc <_vfiprintf_r+0x910>
    beb6:	9603      	str	r6, [sp, #12]
    beb8:	e571      	b.n	b99e <_vfiprintf_r+0x6b2>
    beba:	4b3b      	ldr	r3, [pc, #236]	; (bfa8 <_vfiprintf_r+0xcbc>)
    bebc:	930c      	str	r3, [sp, #48]	; 0x30
    bebe:	f016 0220 	ands.w	r2, r6, #32
    bec2:	d059      	beq.n	bf78 <_vfiprintf_r+0xc8c>
    bec4:	9b07      	ldr	r3, [sp, #28]
    bec6:	3307      	adds	r3, #7
    bec8:	f023 0307 	bic.w	r3, r3, #7
    becc:	4618      	mov	r0, r3
    bece:	685a      	ldr	r2, [r3, #4]
    bed0:	f850 3b08 	ldr.w	r3, [r0], #8
    bed4:	9007      	str	r0, [sp, #28]
    bed6:	07f4      	lsls	r4, r6, #31
    bed8:	d509      	bpl.n	beee <_vfiprintf_r+0xc02>
    beda:	ea53 0002 	orrs.w	r0, r3, r2
    bede:	d006      	beq.n	beee <_vfiprintf_r+0xc02>
    bee0:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    bee4:	2130      	movs	r1, #48	; 0x30
    bee6:	f046 0602 	orr.w	r6, r6, #2
    beea:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
    beee:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    bef2:	9103      	str	r1, [sp, #12]
    bef4:	2102      	movs	r1, #2
    bef6:	f7ff bb70 	b.w	b5da <_vfiprintf_r+0x2ee>
    befa:	4b2c      	ldr	r3, [pc, #176]	; (bfac <_vfiprintf_r+0xcc0>)
    befc:	930c      	str	r3, [sp, #48]	; 0x30
    befe:	e7de      	b.n	bebe <_vfiprintf_r+0xbd2>
    bf00:	9b07      	ldr	r3, [sp, #28]
    bf02:	2101      	movs	r1, #1
    bf04:	f853 2b04 	ldr.w	r2, [r3], #4
    bf08:	9103      	str	r1, [sp, #12]
    bf0a:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
    bf0e:	9307      	str	r3, [sp, #28]
    bf10:	9104      	str	r1, [sp, #16]
    bf12:	ac2b      	add	r4, sp, #172	; 0xac
    bf14:	e4df      	b.n	b8d6 <_vfiprintf_r+0x5ea>
    bf16:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    bf1a:	2a00      	cmp	r2, #0
    bf1c:	f040 8132 	bne.w	c184 <_vfiprintf_r+0xe98>
    bf20:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bf22:	2a00      	cmp	r2, #0
    bf24:	f47f ae62 	bne.w	bbec <_vfiprintf_r+0x900>
    bf28:	4618      	mov	r0, r3
    bf2a:	2101      	movs	r1, #1
    bf2c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bf30:	e427      	b.n	b782 <_vfiprintf_r+0x496>
    bf32:	2100      	movs	r1, #0
    bf34:	2208      	movs	r2, #8
    bf36:	a816      	add	r0, sp, #88	; 0x58
    bf38:	9413      	str	r4, [sp, #76]	; 0x4c
    bf3a:	f7fb fa81 	bl	7440 <memset>
    bf3e:	1c79      	adds	r1, r7, #1
    bf40:	f000 80bc 	beq.w	c0bc <_vfiprintf_r+0xdd0>
    bf44:	2500      	movs	r5, #0
    bf46:	9407      	str	r4, [sp, #28]
    bf48:	462c      	mov	r4, r5
    bf4a:	e00c      	b.n	bf66 <_vfiprintf_r+0xc7a>
    bf4c:	a92b      	add	r1, sp, #172	; 0xac
    bf4e:	4658      	mov	r0, fp
    bf50:	f7fe f926 	bl	a1a0 <_wcrtomb_r>
    bf54:	1c42      	adds	r2, r0, #1
    bf56:	4420      	add	r0, r4
    bf58:	f000 816b 	beq.w	c232 <_vfiprintf_r+0xf46>
    bf5c:	42b8      	cmp	r0, r7
    bf5e:	dc08      	bgt.n	bf72 <_vfiprintf_r+0xc86>
    bf60:	f000 8170 	beq.w	c244 <_vfiprintf_r+0xf58>
    bf64:	4604      	mov	r4, r0
    bf66:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    bf68:	5952      	ldr	r2, [r2, r5]
    bf6a:	ab16      	add	r3, sp, #88	; 0x58
    bf6c:	3504      	adds	r5, #4
    bf6e:	2a00      	cmp	r2, #0
    bf70:	d1ec      	bne.n	bf4c <_vfiprintf_r+0xc60>
    bf72:	9404      	str	r4, [sp, #16]
    bf74:	9c07      	ldr	r4, [sp, #28]
    bf76:	e0af      	b.n	c0d8 <_vfiprintf_r+0xdec>
    bf78:	f016 0310 	ands.w	r3, r6, #16
    bf7c:	9807      	ldr	r0, [sp, #28]
    bf7e:	d10c      	bne.n	bf9a <_vfiprintf_r+0xcae>
    bf80:	f016 0440 	ands.w	r4, r6, #64	; 0x40
    bf84:	d005      	beq.n	bf92 <_vfiprintf_r+0xca6>
    bf86:	461a      	mov	r2, r3
    bf88:	f850 3b04 	ldr.w	r3, [r0], #4
    bf8c:	9007      	str	r0, [sp, #28]
    bf8e:	b29b      	uxth	r3, r3
    bf90:	e7a1      	b.n	bed6 <_vfiprintf_r+0xbea>
    bf92:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    bf96:	f040 80e1 	bne.w	c15c <_vfiprintf_r+0xe70>
    bf9a:	f850 3b04 	ldr.w	r3, [r0], #4
    bf9e:	9007      	str	r0, [sp, #28]
    bfa0:	e799      	b.n	bed6 <_vfiprintf_r+0xbea>
    bfa2:	bf00      	nop
    bfa4:	20018c7c 	.word	0x20018c7c
    bfa8:	20018c38 	.word	0x20018c38
    bfac:	20018c4c 	.word	0x20018c4c
    bfb0:	9903      	ldr	r1, [sp, #12]
    bfb2:	9704      	str	r7, [sp, #16]
    bfb4:	ac44      	add	r4, sp, #272	; 0x110
    bfb6:	469e      	mov	lr, r3
    bfb8:	ee08 ba90 	vmov	s17, fp
    bfbc:	f401 6680 	and.w	r6, r1, #1024	; 0x400
    bfc0:	f04f 0c00 	mov.w	ip, #0
    bfc4:	4623      	mov	r3, r4
    bfc6:	e006      	b.n	bfd6 <_vfiprintf_r+0xcea>
    bfc8:	f1be 0f0a 	cmp.w	lr, #10
    bfcc:	f172 0200 	sbcs.w	r2, r2, #0
    bfd0:	d339      	bcc.n	c046 <_vfiprintf_r+0xd5a>
    bfd2:	46a6      	mov	lr, r4
    bfd4:	462a      	mov	r2, r5
    bfd6:	49a6      	ldr	r1, [pc, #664]	; (c270 <_vfiprintf_r+0xf84>)
    bfd8:	eb1e 0002 	adds.w	r0, lr, r2
    bfdc:	f140 0000 	adc.w	r0, r0, #0
    bfe0:	460f      	mov	r7, r1
    bfe2:	fba1 1400 	umull	r1, r4, r1, r0
    bfe6:	f024 0103 	bic.w	r1, r4, #3
    bfea:	eb01 0194 	add.w	r1, r1, r4, lsr #2
    bfee:	1a40      	subs	r0, r0, r1
    bff0:	ebbe 0100 	subs.w	r1, lr, r0
    bff4:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
    bff8:	f162 0400 	sbc.w	r4, r2, #0
    bffc:	fb05 f501 	mul.w	r5, r5, r1
    c000:	fb07 5504 	mla	r5, r7, r4, r5
    c004:	fba1 4107 	umull	r4, r1, r1, r7
    c008:	440d      	add	r5, r1
    c00a:	2705      	movs	r7, #5
    c00c:	f004 0101 	and.w	r1, r4, #1
    c010:	fba1 1b07 	umull	r1, fp, r1, r7
    c014:	1809      	adds	r1, r1, r0
    c016:	0864      	lsrs	r4, r4, #1
    c018:	3130      	adds	r1, #48	; 0x30
    c01a:	f803 1c01 	strb.w	r1, [r3, #-1]
    c01e:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
    c022:	f10c 0c01 	add.w	ip, ip, #1
    c026:	3b01      	subs	r3, #1
    c028:	086d      	lsrs	r5, r5, #1
    c02a:	2e00      	cmp	r6, #0
    c02c:	d0cc      	beq.n	bfc8 <_vfiprintf_r+0xcdc>
    c02e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c030:	7809      	ldrb	r1, [r1, #0]
    c032:	4561      	cmp	r1, ip
    c034:	d1c8      	bne.n	bfc8 <_vfiprintf_r+0xcdc>
    c036:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    c03a:	d0c5      	beq.n	bfc8 <_vfiprintf_r+0xcdc>
    c03c:	f1be 0f0a 	cmp.w	lr, #10
    c040:	f172 0200 	sbcs.w	r2, r2, #0
    c044:	d26c      	bcs.n	c120 <_vfiprintf_r+0xe34>
    c046:	461c      	mov	r4, r3
    c048:	ab44      	add	r3, sp, #272	; 0x110
    c04a:	1b1b      	subs	r3, r3, r4
    c04c:	9f04      	ldr	r7, [sp, #16]
    c04e:	9e03      	ldr	r6, [sp, #12]
    c050:	9304      	str	r3, [sp, #16]
    c052:	ee18 ba90 	vmov	fp, s17
    c056:	f7ff ba72 	b.w	b53e <_vfiprintf_r+0x252>
    c05a:	9603      	str	r6, [sp, #12]
    c05c:	f7ff ba62 	b.w	b524 <_vfiprintf_r+0x238>
    c060:	4658      	mov	r0, fp
    c062:	f7fb f8ef 	bl	7244 <__sinit>
    c066:	f7ff b95b 	b.w	b320 <_vfiprintf_r+0x34>
    c06a:	2901      	cmp	r1, #1
    c06c:	9603      	str	r6, [sp, #12]
    c06e:	f47f accd 	bne.w	ba0c <_vfiprintf_r+0x720>
    c072:	f7ff ba5c 	b.w	b52e <_vfiprintf_r+0x242>
    c076:	9b07      	ldr	r3, [sp, #28]
    c078:	9905      	ldr	r1, [sp, #20]
    c07a:	f853 2b04 	ldr.w	r2, [r3], #4
    c07e:	6011      	str	r1, [r2, #0]
    c080:	9307      	str	r3, [sp, #28]
    c082:	f7ff b97e 	b.w	b382 <_vfiprintf_r+0x96>
    c086:	2f06      	cmp	r7, #6
    c088:	463b      	mov	r3, r7
    c08a:	9a03      	ldr	r2, [sp, #12]
    c08c:	4c79      	ldr	r4, [pc, #484]	; (c274 <_vfiprintf_r+0xf88>)
    c08e:	9207      	str	r2, [sp, #28]
    c090:	bf28      	it	cs
    c092:	2306      	movcs	r3, #6
    c094:	9304      	str	r3, [sp, #16]
    c096:	9303      	str	r3, [sp, #12]
    c098:	f7ff bb25 	b.w	b6e6 <_vfiprintf_r+0x3fa>
    c09c:	9b03      	ldr	r3, [sp, #12]
    c09e:	9907      	ldr	r1, [sp, #28]
    c0a0:	f413 7200 	ands.w	r2, r3, #512	; 0x200
    c0a4:	bf14      	ite	ne
    c0a6:	f851 3b04 	ldrne.w	r3, [r1], #4
    c0aa:	f851 3b04 	ldreq.w	r3, [r1], #4
    c0ae:	9107      	str	r1, [sp, #28]
    c0b0:	bf1c      	itt	ne
    c0b2:	4602      	movne	r2, r0
    c0b4:	b2db      	uxtbne	r3, r3
    c0b6:	2101      	movs	r1, #1
    c0b8:	f7ff ba8f 	b.w	b5da <_vfiprintf_r+0x2ee>
    c0bc:	ab16      	add	r3, sp, #88	; 0x58
    c0be:	9300      	str	r3, [sp, #0]
    c0c0:	2300      	movs	r3, #0
    c0c2:	4619      	mov	r1, r3
    c0c4:	aa13      	add	r2, sp, #76	; 0x4c
    c0c6:	4658      	mov	r0, fp
    c0c8:	f7fe f890 	bl	a1ec <_wcsrtombs_r>
    c0cc:	4603      	mov	r3, r0
    c0ce:	3301      	adds	r3, #1
    c0d0:	9004      	str	r0, [sp, #16]
    c0d2:	f000 80ae 	beq.w	c232 <_vfiprintf_r+0xf46>
    c0d6:	9413      	str	r4, [sp, #76]	; 0x4c
    c0d8:	9b04      	ldr	r3, [sp, #16]
    c0da:	2b00      	cmp	r3, #0
    c0dc:	d030      	beq.n	c140 <_vfiprintf_r+0xe54>
    c0de:	2b63      	cmp	r3, #99	; 0x63
    c0e0:	dc63      	bgt.n	c1aa <_vfiprintf_r+0xebe>
    c0e2:	2300      	movs	r3, #0
    c0e4:	9308      	str	r3, [sp, #32]
    c0e6:	ac2b      	add	r4, sp, #172	; 0xac
    c0e8:	2208      	movs	r2, #8
    c0ea:	2100      	movs	r1, #0
    c0ec:	a816      	add	r0, sp, #88	; 0x58
    c0ee:	f7fb f9a7 	bl	7440 <memset>
    c0f2:	9d04      	ldr	r5, [sp, #16]
    c0f4:	ab16      	add	r3, sp, #88	; 0x58
    c0f6:	9300      	str	r3, [sp, #0]
    c0f8:	aa13      	add	r2, sp, #76	; 0x4c
    c0fa:	462b      	mov	r3, r5
    c0fc:	4621      	mov	r1, r4
    c0fe:	4658      	mov	r0, fp
    c100:	f7fe f874 	bl	a1ec <_wcsrtombs_r>
    c104:	4285      	cmp	r5, r0
    c106:	f040 80ab 	bne.w	c260 <_vfiprintf_r+0xf74>
    c10a:	9b03      	ldr	r3, [sp, #12]
    c10c:	9a04      	ldr	r2, [sp, #16]
    c10e:	9307      	str	r3, [sp, #28]
    c110:	2300      	movs	r3, #0
    c112:	54a3      	strb	r3, [r4, r2]
    c114:	461f      	mov	r7, r3
    c116:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    c11a:	9303      	str	r3, [sp, #12]
    c11c:	f7ff ba16 	b.w	b54c <_vfiprintf_r+0x260>
    c120:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c122:	990d      	ldr	r1, [sp, #52]	; 0x34
    c124:	1a9b      	subs	r3, r3, r2
    c126:	4618      	mov	r0, r3
    c128:	9308      	str	r3, [sp, #32]
    c12a:	f7fb f9db 	bl	74e4 <strncpy>
    c12e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c130:	9b08      	ldr	r3, [sp, #32]
    c132:	784a      	ldrb	r2, [r1, #1]
    c134:	b10a      	cbz	r2, c13a <_vfiprintf_r+0xe4e>
    c136:	3101      	adds	r1, #1
    c138:	910b      	str	r1, [sp, #44]	; 0x2c
    c13a:	f04f 0c00 	mov.w	ip, #0
    c13e:	e748      	b.n	bfd2 <_vfiprintf_r+0xce6>
    c140:	9b03      	ldr	r3, [sp, #12]
    c142:	9307      	str	r3, [sp, #28]
    c144:	9b04      	ldr	r3, [sp, #16]
    c146:	9303      	str	r3, [sp, #12]
    c148:	461f      	mov	r7, r3
    c14a:	9308      	str	r3, [sp, #32]
    c14c:	f7ff b9fe 	b.w	b54c <_vfiprintf_r+0x260>
    c150:	2101      	movs	r1, #1
    c152:	4618      	mov	r0, r3
    c154:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c158:	f7ff bb13 	b.w	b782 <_vfiprintf_r+0x496>
    c15c:	f850 3b04 	ldr.w	r3, [r0], #4
    c160:	9007      	str	r0, [sp, #28]
    c162:	4622      	mov	r2, r4
    c164:	b2db      	uxtb	r3, r3
    c166:	e6b6      	b.n	bed6 <_vfiprintf_r+0xbea>
    c168:	f912 3b04 	ldrsb.w	r3, [r2], #4
    c16c:	9207      	str	r2, [sp, #28]
    c16e:	17da      	asrs	r2, r3, #31
    c170:	4611      	mov	r1, r2
    c172:	f7ff b9ca 	b.w	b50a <_vfiprintf_r+0x21e>
    c176:	f851 3b04 	ldr.w	r3, [r1], #4
    c17a:	9107      	str	r1, [sp, #28]
    c17c:	4602      	mov	r2, r0
    c17e:	b2db      	uxtb	r3, r3
    c180:	f7ff ba27 	b.w	b5d2 <_vfiprintf_r+0x2e6>
    c184:	2301      	movs	r3, #1
    c186:	931c      	str	r3, [sp, #112]	; 0x70
    c188:	2101      	movs	r1, #1
    c18a:	f10d 0343 	add.w	r3, sp, #67	; 0x43
    c18e:	931b      	str	r3, [sp, #108]	; 0x6c
    c190:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    c194:	460b      	mov	r3, r1
    c196:	f7ff bacd 	b.w	b734 <_vfiprintf_r+0x448>
    c19a:	9b07      	ldr	r3, [sp, #28]
    c19c:	9905      	ldr	r1, [sp, #20]
    c19e:	f853 2b04 	ldr.w	r2, [r3], #4
    c1a2:	9307      	str	r3, [sp, #28]
    c1a4:	8011      	strh	r1, [r2, #0]
    c1a6:	f7ff b8ec 	b.w	b382 <_vfiprintf_r+0x96>
    c1aa:	1c59      	adds	r1, r3, #1
    c1ac:	4658      	mov	r0, fp
    c1ae:	f7fa fb0b 	bl	67c8 <_malloc_r>
    c1b2:	4604      	mov	r4, r0
    c1b4:	2800      	cmp	r0, #0
    c1b6:	d03c      	beq.n	c232 <_vfiprintf_r+0xf46>
    c1b8:	9008      	str	r0, [sp, #32]
    c1ba:	e795      	b.n	c0e8 <_vfiprintf_r+0xdfc>
    c1bc:	6d88      	ldr	r0, [r1, #88]	; 0x58
    c1be:	f7fb fa59 	bl	7674 <__retarget_lock_release_recursive>
    c1c2:	f7ff b9e9 	b.w	b598 <_vfiprintf_r+0x2ac>
    c1c6:	9b03      	ldr	r3, [sp, #12]
    c1c8:	9307      	str	r3, [sp, #28]
    c1ca:	e9cd 7703 	strd	r7, r7, [sp, #12]
    c1ce:	9f08      	ldr	r7, [sp, #32]
    c1d0:	f7ff b9bc 	b.w	b54c <_vfiprintf_r+0x260>
    c1d4:	9819      	ldr	r0, [sp, #100]	; 0x64
    c1d6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    c1d8:	3001      	adds	r0, #1
    c1da:	e545      	b.n	bc68 <_vfiprintf_r+0x97c>
    c1dc:	9b03      	ldr	r3, [sp, #12]
    c1de:	9307      	str	r3, [sp, #28]
    c1e0:	4620      	mov	r0, r4
    c1e2:	f7fb fa4d 	bl	7680 <strlen>
    c1e6:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
    c1ea:	462f      	mov	r7, r5
    c1ec:	9004      	str	r0, [sp, #16]
    c1ee:	9303      	str	r3, [sp, #12]
    c1f0:	9508      	str	r5, [sp, #32]
    c1f2:	f7ff b9ab 	b.w	b54c <_vfiprintf_r+0x260>
    c1f6:	ee18 1a10 	vmov	r1, s16
    c1fa:	aa18      	add	r2, sp, #96	; 0x60
    c1fc:	4658      	mov	r0, fp
    c1fe:	f7ff f839 	bl	b274 <__sprint_r.part.0>
    c202:	2800      	cmp	r0, #0
    c204:	f43f aa36 	beq.w	b674 <_vfiprintf_r+0x388>
    c208:	f7ff ba4d 	b.w	b6a6 <_vfiprintf_r+0x3ba>
    c20c:	9819      	ldr	r0, [sp, #100]	; 0x64
    c20e:	3001      	adds	r0, #1
    c210:	e57a      	b.n	bd08 <_vfiprintf_r+0xa1c>
    c212:	468c      	mov	ip, r1
    c214:	e46e      	b.n	baf4 <_vfiprintf_r+0x808>
    c216:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    c218:	07d9      	lsls	r1, r3, #31
    c21a:	d405      	bmi.n	c228 <_vfiprintf_r+0xf3c>
    c21c:	89ab      	ldrh	r3, [r5, #12]
    c21e:	059a      	lsls	r2, r3, #22
    c220:	d402      	bmi.n	c228 <_vfiprintf_r+0xf3c>
    c222:	6da8      	ldr	r0, [r5, #88]	; 0x58
    c224:	f7fb fa26 	bl	7674 <__retarget_lock_release_recursive>
    c228:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c22c:	9305      	str	r3, [sp, #20]
    c22e:	f7ff ba49 	b.w	b6c4 <_vfiprintf_r+0x3d8>
    c232:	ee18 2a10 	vmov	r2, s16
    c236:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    c23a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c23e:	8193      	strh	r3, [r2, #12]
    c240:	f7ff ba35 	b.w	b6ae <_vfiprintf_r+0x3c2>
    c244:	9c07      	ldr	r4, [sp, #28]
    c246:	9704      	str	r7, [sp, #16]
    c248:	e746      	b.n	c0d8 <_vfiprintf_r+0xdec>
    c24a:	9b07      	ldr	r3, [sp, #28]
    c24c:	f898 1001 	ldrb.w	r1, [r8, #1]
    c250:	f853 7b04 	ldr.w	r7, [r3], #4
    c254:	9307      	str	r3, [sp, #28]
    c256:	4690      	mov	r8, r2
    c258:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
    c25c:	f7ff b8b9 	b.w	b3d2 <_vfiprintf_r+0xe6>
    c260:	ee18 2a10 	vmov	r2, s16
    c264:	8993      	ldrh	r3, [r2, #12]
    c266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c26a:	8193      	strh	r3, [r2, #12]
    c26c:	f7ff ba15 	b.w	b69a <_vfiprintf_r+0x3ae>
    c270:	cccccccd 	.word	0xcccccccd
    c274:	20018c60 	.word	0x20018c60

0000c278 <__sbprintf>:
    c278:	b570      	push	{r4, r5, r6, lr}
    c27a:	460c      	mov	r4, r1
    c27c:	8989      	ldrh	r1, [r1, #12]
    c27e:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
    c282:	f021 0102 	bic.w	r1, r1, #2
    c286:	f8ad 1014 	strh.w	r1, [sp, #20]
    c28a:	6e61      	ldr	r1, [r4, #100]	; 0x64
    c28c:	911b      	str	r1, [sp, #108]	; 0x6c
    c28e:	89e1      	ldrh	r1, [r4, #14]
    c290:	f8ad 1016 	strh.w	r1, [sp, #22]
    c294:	69e1      	ldr	r1, [r4, #28]
    c296:	9109      	str	r1, [sp, #36]	; 0x24
    c298:	6a61      	ldr	r1, [r4, #36]	; 0x24
    c29a:	910b      	str	r1, [sp, #44]	; 0x2c
    c29c:	a91c      	add	r1, sp, #112	; 0x70
    c29e:	9102      	str	r1, [sp, #8]
    c2a0:	9106      	str	r1, [sp, #24]
    c2a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
    c2a6:	4606      	mov	r6, r0
    c2a8:	9104      	str	r1, [sp, #16]
    c2aa:	9107      	str	r1, [sp, #28]
    c2ac:	a818      	add	r0, sp, #96	; 0x60
    c2ae:	2100      	movs	r1, #0
    c2b0:	e9cd 3200 	strd	r3, r2, [sp]
    c2b4:	9108      	str	r1, [sp, #32]
    c2b6:	f7fb f9d7 	bl	7668 <__retarget_lock_init_recursive>
    c2ba:	e9dd 3200 	ldrd	r3, r2, [sp]
    c2be:	a902      	add	r1, sp, #8
    c2c0:	4630      	mov	r0, r6
    c2c2:	f7ff f813 	bl	b2ec <_vfiprintf_r>
    c2c6:	1e05      	subs	r5, r0, #0
    c2c8:	db07      	blt.n	c2da <__sbprintf+0x62>
    c2ca:	a902      	add	r1, sp, #8
    c2cc:	4630      	mov	r0, r6
    c2ce:	f7fd fe51 	bl	9f74 <_fflush_r>
    c2d2:	2800      	cmp	r0, #0
    c2d4:	bf18      	it	ne
    c2d6:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
    c2da:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    c2de:	065b      	lsls	r3, r3, #25
    c2e0:	d503      	bpl.n	c2ea <__sbprintf+0x72>
    c2e2:	89a3      	ldrh	r3, [r4, #12]
    c2e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c2e8:	81a3      	strh	r3, [r4, #12]
    c2ea:	9818      	ldr	r0, [sp, #96]	; 0x60
    c2ec:	f7fb f9be 	bl	766c <__retarget_lock_close_recursive>
    c2f0:	4628      	mov	r0, r5
    c2f2:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
    c2f6:	bd70      	pop	{r4, r5, r6, pc}

0000c2f8 <__sfvwrite_r>:
    c2f8:	6893      	ldr	r3, [r2, #8]
    c2fa:	2b00      	cmp	r3, #0
    c2fc:	f000 8085 	beq.w	c40a <__sfvwrite_r+0x112>
    c300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c304:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
    c308:	460c      	mov	r4, r1
    c30a:	0719      	lsls	r1, r3, #28
    c30c:	4680      	mov	r8, r0
    c30e:	b083      	sub	sp, #12
    c310:	4617      	mov	r7, r2
    c312:	b298      	uxth	r0, r3
    c314:	d525      	bpl.n	c362 <__sfvwrite_r+0x6a>
    c316:	6923      	ldr	r3, [r4, #16]
    c318:	b31b      	cbz	r3, c362 <__sfvwrite_r+0x6a>
    c31a:	f010 0302 	ands.w	r3, r0, #2
    c31e:	683d      	ldr	r5, [r7, #0]
    c320:	d02d      	beq.n	c37e <__sfvwrite_r+0x86>
    c322:	f04f 0a00 	mov.w	sl, #0
    c326:	f8df b2c0 	ldr.w	fp, [pc, #704]	; c5e8 <__sfvwrite_r+0x2f0>
    c32a:	4656      	mov	r6, sl
    c32c:	46b9      	mov	r9, r7
    c32e:	455e      	cmp	r6, fp
    c330:	4633      	mov	r3, r6
    c332:	4652      	mov	r2, sl
    c334:	bf28      	it	cs
    c336:	465b      	movcs	r3, fp
    c338:	4640      	mov	r0, r8
    c33a:	2e00      	cmp	r6, #0
    c33c:	d052      	beq.n	c3e4 <__sfvwrite_r+0xec>
    c33e:	69e1      	ldr	r1, [r4, #28]
    c340:	6a67      	ldr	r7, [r4, #36]	; 0x24
    c342:	47b8      	blx	r7
    c344:	2800      	cmp	r0, #0
    c346:	dd56      	ble.n	c3f6 <__sfvwrite_r+0xfe>
    c348:	f8d9 3008 	ldr.w	r3, [r9, #8]
    c34c:	1a1b      	subs	r3, r3, r0
    c34e:	4482      	add	sl, r0
    c350:	1a36      	subs	r6, r6, r0
    c352:	f8c9 3008 	str.w	r3, [r9, #8]
    c356:	2b00      	cmp	r3, #0
    c358:	d1e9      	bne.n	c32e <__sfvwrite_r+0x36>
    c35a:	2000      	movs	r0, #0
    c35c:	b003      	add	sp, #12
    c35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c362:	4621      	mov	r1, r4
    c364:	4640      	mov	r0, r8
    c366:	f000 f941 	bl	c5ec <__swsetup_r>
    c36a:	2800      	cmp	r0, #0
    c36c:	f040 8138 	bne.w	c5e0 <__sfvwrite_r+0x2e8>
    c370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c374:	683d      	ldr	r5, [r7, #0]
    c376:	b298      	uxth	r0, r3
    c378:	f010 0302 	ands.w	r3, r0, #2
    c37c:	d1d1      	bne.n	c322 <__sfvwrite_r+0x2a>
    c37e:	f010 0901 	ands.w	r9, r0, #1
    c382:	d144      	bne.n	c40e <__sfvwrite_r+0x116>
    c384:	464e      	mov	r6, r9
    c386:	9700      	str	r7, [sp, #0]
    c388:	b346      	cbz	r6, c3dc <__sfvwrite_r+0xe4>
    c38a:	0582      	lsls	r2, r0, #22
    c38c:	f8d4 b008 	ldr.w	fp, [r4, #8]
    c390:	f140 8085 	bpl.w	c49e <__sfvwrite_r+0x1a6>
    c394:	45b3      	cmp	fp, r6
    c396:	465a      	mov	r2, fp
    c398:	f200 80b4 	bhi.w	c504 <__sfvwrite_r+0x20c>
    c39c:	f410 6f90 	tst.w	r0, #1152	; 0x480
    c3a0:	f040 80c1 	bne.w	c526 <__sfvwrite_r+0x22e>
    c3a4:	6820      	ldr	r0, [r4, #0]
    c3a6:	9201      	str	r2, [sp, #4]
    c3a8:	4649      	mov	r1, r9
    c3aa:	f7fa ffcd 	bl	7348 <memmove>
    c3ae:	68a3      	ldr	r3, [r4, #8]
    c3b0:	9a01      	ldr	r2, [sp, #4]
    c3b2:	eba3 010b 	sub.w	r1, r3, fp
    c3b6:	6823      	ldr	r3, [r4, #0]
    c3b8:	60a1      	str	r1, [r4, #8]
    c3ba:	4413      	add	r3, r2
    c3bc:	46b2      	mov	sl, r6
    c3be:	6023      	str	r3, [r4, #0]
    c3c0:	2600      	movs	r6, #0
    c3c2:	9a00      	ldr	r2, [sp, #0]
    c3c4:	6893      	ldr	r3, [r2, #8]
    c3c6:	eba3 030a 	sub.w	r3, r3, sl
    c3ca:	44d1      	add	r9, sl
    c3cc:	6093      	str	r3, [r2, #8]
    c3ce:	2b00      	cmp	r3, #0
    c3d0:	d0c3      	beq.n	c35a <__sfvwrite_r+0x62>
    c3d2:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    c3d6:	b280      	uxth	r0, r0
    c3d8:	2e00      	cmp	r6, #0
    c3da:	d1d6      	bne.n	c38a <__sfvwrite_r+0x92>
    c3dc:	e9d5 9600 	ldrd	r9, r6, [r5]
    c3e0:	3508      	adds	r5, #8
    c3e2:	e7d1      	b.n	c388 <__sfvwrite_r+0x90>
    c3e4:	e9d5 a600 	ldrd	sl, r6, [r5]
    c3e8:	3508      	adds	r5, #8
    c3ea:	e7a0      	b.n	c32e <__sfvwrite_r+0x36>
    c3ec:	4621      	mov	r1, r4
    c3ee:	4640      	mov	r0, r8
    c3f0:	f7fd fdc0 	bl	9f74 <_fflush_r>
    c3f4:	b388      	cbz	r0, c45a <__sfvwrite_r+0x162>
    c3f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c3fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c3fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c402:	81a3      	strh	r3, [r4, #12]
    c404:	b003      	add	sp, #12
    c406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c40a:	2000      	movs	r0, #0
    c40c:	4770      	bx	lr
    c40e:	461e      	mov	r6, r3
    c410:	46ba      	mov	sl, r7
    c412:	4699      	mov	r9, r3
    c414:	4618      	mov	r0, r3
    c416:	9500      	str	r5, [sp, #0]
    c418:	461f      	mov	r7, r3
    c41a:	b366      	cbz	r6, c476 <__sfvwrite_r+0x17e>
    c41c:	2800      	cmp	r0, #0
    c41e:	d032      	beq.n	c486 <__sfvwrite_r+0x18e>
    c420:	464a      	mov	r2, r9
    c422:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
    c426:	6820      	ldr	r0, [r4, #0]
    c428:	68a5      	ldr	r5, [r4, #8]
    c42a:	42b2      	cmp	r2, r6
    c42c:	bf28      	it	cs
    c42e:	4632      	movcs	r2, r6
    c430:	4288      	cmp	r0, r1
    c432:	d904      	bls.n	c43e <__sfvwrite_r+0x146>
    c434:	eb05 0b03 	add.w	fp, r5, r3
    c438:	455a      	cmp	r2, fp
    c43a:	f300 80a7 	bgt.w	c58c <__sfvwrite_r+0x294>
    c43e:	4293      	cmp	r3, r2
    c440:	dc64      	bgt.n	c50c <__sfvwrite_r+0x214>
    c442:	69e1      	ldr	r1, [r4, #28]
    c444:	6a65      	ldr	r5, [r4, #36]	; 0x24
    c446:	463a      	mov	r2, r7
    c448:	4640      	mov	r0, r8
    c44a:	47a8      	blx	r5
    c44c:	f1b0 0b00 	subs.w	fp, r0, #0
    c450:	ddd1      	ble.n	c3f6 <__sfvwrite_r+0xfe>
    c452:	ebb9 090b 	subs.w	r9, r9, fp
    c456:	d0c9      	beq.n	c3ec <__sfvwrite_r+0xf4>
    c458:	2001      	movs	r0, #1
    c45a:	f8da 3008 	ldr.w	r3, [sl, #8]
    c45e:	eba3 030b 	sub.w	r3, r3, fp
    c462:	445f      	add	r7, fp
    c464:	eba6 060b 	sub.w	r6, r6, fp
    c468:	f8ca 3008 	str.w	r3, [sl, #8]
    c46c:	2b00      	cmp	r3, #0
    c46e:	f43f af74 	beq.w	c35a <__sfvwrite_r+0x62>
    c472:	2e00      	cmp	r6, #0
    c474:	d1d2      	bne.n	c41c <__sfvwrite_r+0x124>
    c476:	9a00      	ldr	r2, [sp, #0]
    c478:	6856      	ldr	r6, [r2, #4]
    c47a:	4613      	mov	r3, r2
    c47c:	3208      	adds	r2, #8
    c47e:	9200      	str	r2, [sp, #0]
    c480:	2e00      	cmp	r6, #0
    c482:	d0f8      	beq.n	c476 <__sfvwrite_r+0x17e>
    c484:	681f      	ldr	r7, [r3, #0]
    c486:	4632      	mov	r2, r6
    c488:	210a      	movs	r1, #10
    c48a:	4638      	mov	r0, r7
    c48c:	f7fd fe38 	bl	a100 <memchr>
    c490:	2800      	cmp	r0, #0
    c492:	f000 809c 	beq.w	c5ce <__sfvwrite_r+0x2d6>
    c496:	3001      	adds	r0, #1
    c498:	eba0 0907 	sub.w	r9, r0, r7
    c49c:	e7c0      	b.n	c420 <__sfvwrite_r+0x128>
    c49e:	6820      	ldr	r0, [r4, #0]
    c4a0:	6923      	ldr	r3, [r4, #16]
    c4a2:	4298      	cmp	r0, r3
    c4a4:	d816      	bhi.n	c4d4 <__sfvwrite_r+0x1dc>
    c4a6:	6962      	ldr	r2, [r4, #20]
    c4a8:	42b2      	cmp	r2, r6
    c4aa:	d813      	bhi.n	c4d4 <__sfvwrite_r+0x1dc>
    c4ac:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    c4b0:	42b3      	cmp	r3, r6
    c4b2:	bf28      	it	cs
    c4b4:	4633      	movcs	r3, r6
    c4b6:	69e1      	ldr	r1, [r4, #28]
    c4b8:	fb93 f3f2 	sdiv	r3, r3, r2
    c4bc:	6a67      	ldr	r7, [r4, #36]	; 0x24
    c4be:	fb02 f303 	mul.w	r3, r2, r3
    c4c2:	4640      	mov	r0, r8
    c4c4:	464a      	mov	r2, r9
    c4c6:	47b8      	blx	r7
    c4c8:	f1b0 0a00 	subs.w	sl, r0, #0
    c4cc:	dd93      	ble.n	c3f6 <__sfvwrite_r+0xfe>
    c4ce:	eba6 060a 	sub.w	r6, r6, sl
    c4d2:	e776      	b.n	c3c2 <__sfvwrite_r+0xca>
    c4d4:	45b3      	cmp	fp, r6
    c4d6:	46da      	mov	sl, fp
    c4d8:	bf28      	it	cs
    c4da:	46b2      	movcs	sl, r6
    c4dc:	4652      	mov	r2, sl
    c4de:	4649      	mov	r1, r9
    c4e0:	f7fa ff32 	bl	7348 <memmove>
    c4e4:	68a3      	ldr	r3, [r4, #8]
    c4e6:	6822      	ldr	r2, [r4, #0]
    c4e8:	eba3 030a 	sub.w	r3, r3, sl
    c4ec:	4452      	add	r2, sl
    c4ee:	60a3      	str	r3, [r4, #8]
    c4f0:	6022      	str	r2, [r4, #0]
    c4f2:	2b00      	cmp	r3, #0
    c4f4:	d1eb      	bne.n	c4ce <__sfvwrite_r+0x1d6>
    c4f6:	4621      	mov	r1, r4
    c4f8:	4640      	mov	r0, r8
    c4fa:	f7fd fd3b 	bl	9f74 <_fflush_r>
    c4fe:	2800      	cmp	r0, #0
    c500:	d0e5      	beq.n	c4ce <__sfvwrite_r+0x1d6>
    c502:	e778      	b.n	c3f6 <__sfvwrite_r+0xfe>
    c504:	6820      	ldr	r0, [r4, #0]
    c506:	46b3      	mov	fp, r6
    c508:	4632      	mov	r2, r6
    c50a:	e74c      	b.n	c3a6 <__sfvwrite_r+0xae>
    c50c:	4639      	mov	r1, r7
    c50e:	9201      	str	r2, [sp, #4]
    c510:	f7fa ff1a 	bl	7348 <memmove>
    c514:	9a01      	ldr	r2, [sp, #4]
    c516:	68a3      	ldr	r3, [r4, #8]
    c518:	1a9b      	subs	r3, r3, r2
    c51a:	60a3      	str	r3, [r4, #8]
    c51c:	6823      	ldr	r3, [r4, #0]
    c51e:	4413      	add	r3, r2
    c520:	6023      	str	r3, [r4, #0]
    c522:	4693      	mov	fp, r2
    c524:	e795      	b.n	c452 <__sfvwrite_r+0x15a>
    c526:	6823      	ldr	r3, [r4, #0]
    c528:	6921      	ldr	r1, [r4, #16]
    c52a:	eba3 0b01 	sub.w	fp, r3, r1
    c52e:	6963      	ldr	r3, [r4, #20]
    c530:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
    c534:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
    c538:	f10b 0301 	add.w	r3, fp, #1
    c53c:	ea4f 0a6a 	mov.w	sl, sl, asr #1
    c540:	4433      	add	r3, r6
    c542:	4553      	cmp	r3, sl
    c544:	4652      	mov	r2, sl
    c546:	bf84      	itt	hi
    c548:	469a      	movhi	sl, r3
    c54a:	4652      	movhi	r2, sl
    c54c:	0543      	lsls	r3, r0, #21
    c54e:	d52c      	bpl.n	c5aa <__sfvwrite_r+0x2b2>
    c550:	4611      	mov	r1, r2
    c552:	4640      	mov	r0, r8
    c554:	f7fa f938 	bl	67c8 <_malloc_r>
    c558:	2800      	cmp	r0, #0
    c55a:	d03b      	beq.n	c5d4 <__sfvwrite_r+0x2dc>
    c55c:	465a      	mov	r2, fp
    c55e:	6921      	ldr	r1, [r4, #16]
    c560:	9001      	str	r0, [sp, #4]
    c562:	f7f8 fb55 	bl	4c10 <memcpy>
    c566:	89a2      	ldrh	r2, [r4, #12]
    c568:	9b01      	ldr	r3, [sp, #4]
    c56a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    c56e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    c572:	81a2      	strh	r2, [r4, #12]
    c574:	eb03 000b 	add.w	r0, r3, fp
    c578:	6123      	str	r3, [r4, #16]
    c57a:	ebaa 030b 	sub.w	r3, sl, fp
    c57e:	f8c4 a014 	str.w	sl, [r4, #20]
    c582:	60a3      	str	r3, [r4, #8]
    c584:	6020      	str	r0, [r4, #0]
    c586:	46b3      	mov	fp, r6
    c588:	4632      	mov	r2, r6
    c58a:	e70c      	b.n	c3a6 <__sfvwrite_r+0xae>
    c58c:	4639      	mov	r1, r7
    c58e:	465a      	mov	r2, fp
    c590:	f7fa feda 	bl	7348 <memmove>
    c594:	6823      	ldr	r3, [r4, #0]
    c596:	445b      	add	r3, fp
    c598:	6023      	str	r3, [r4, #0]
    c59a:	4621      	mov	r1, r4
    c59c:	4640      	mov	r0, r8
    c59e:	f7fd fce9 	bl	9f74 <_fflush_r>
    c5a2:	2800      	cmp	r0, #0
    c5a4:	f43f af55 	beq.w	c452 <__sfvwrite_r+0x15a>
    c5a8:	e725      	b.n	c3f6 <__sfvwrite_r+0xfe>
    c5aa:	4640      	mov	r0, r8
    c5ac:	f7fa fbc8 	bl	6d40 <_realloc_r>
    c5b0:	4603      	mov	r3, r0
    c5b2:	2800      	cmp	r0, #0
    c5b4:	d1de      	bne.n	c574 <__sfvwrite_r+0x27c>
    c5b6:	6921      	ldr	r1, [r4, #16]
    c5b8:	4640      	mov	r0, r8
    c5ba:	f7fb f963 	bl	7884 <_free_r>
    c5be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c5c2:	220c      	movs	r2, #12
    c5c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    c5c8:	f8c8 2000 	str.w	r2, [r8]
    c5cc:	e715      	b.n	c3fa <__sfvwrite_r+0x102>
    c5ce:	1c72      	adds	r2, r6, #1
    c5d0:	4691      	mov	r9, r2
    c5d2:	e726      	b.n	c422 <__sfvwrite_r+0x12a>
    c5d4:	220c      	movs	r2, #12
    c5d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c5da:	f8c8 2000 	str.w	r2, [r8]
    c5de:	e70c      	b.n	c3fa <__sfvwrite_r+0x102>
    c5e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c5e4:	e6ba      	b.n	c35c <__sfvwrite_r+0x64>
    c5e6:	bf00      	nop
    c5e8:	7ffffc00 	.word	0x7ffffc00

0000c5ec <__swsetup_r>:
    c5ec:	b538      	push	{r3, r4, r5, lr}
    c5ee:	4b31      	ldr	r3, [pc, #196]	; (c6b4 <__swsetup_r+0xc8>)
    c5f0:	681b      	ldr	r3, [r3, #0]
    c5f2:	4605      	mov	r5, r0
    c5f4:	460c      	mov	r4, r1
    c5f6:	b113      	cbz	r3, c5fe <__swsetup_r+0x12>
    c5f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    c5fa:	2a00      	cmp	r2, #0
    c5fc:	d04e      	beq.n	c69c <__swsetup_r+0xb0>
    c5fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c602:	0718      	lsls	r0, r3, #28
    c604:	b29a      	uxth	r2, r3
    c606:	d51c      	bpl.n	c642 <__swsetup_r+0x56>
    c608:	6921      	ldr	r1, [r4, #16]
    c60a:	b329      	cbz	r1, c658 <__swsetup_r+0x6c>
    c60c:	f012 0001 	ands.w	r0, r2, #1
    c610:	d007      	beq.n	c622 <__swsetup_r+0x36>
    c612:	2000      	movs	r0, #0
    c614:	60a0      	str	r0, [r4, #8]
    c616:	6960      	ldr	r0, [r4, #20]
    c618:	4240      	negs	r0, r0
    c61a:	61a0      	str	r0, [r4, #24]
    c61c:	b139      	cbz	r1, c62e <__swsetup_r+0x42>
    c61e:	2000      	movs	r0, #0
    c620:	bd38      	pop	{r3, r4, r5, pc}
    c622:	0795      	lsls	r5, r2, #30
    c624:	bf58      	it	pl
    c626:	6960      	ldrpl	r0, [r4, #20]
    c628:	60a0      	str	r0, [r4, #8]
    c62a:	2900      	cmp	r1, #0
    c62c:	d1f7      	bne.n	c61e <__swsetup_r+0x32>
    c62e:	0612      	lsls	r2, r2, #24
    c630:	bf58      	it	pl
    c632:	4608      	movpl	r0, r1
    c634:	d5f4      	bpl.n	c620 <__swsetup_r+0x34>
    c636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c63a:	81a3      	strh	r3, [r4, #12]
    c63c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c640:	bd38      	pop	{r3, r4, r5, pc}
    c642:	06d1      	lsls	r1, r2, #27
    c644:	d52e      	bpl.n	c6a4 <__swsetup_r+0xb8>
    c646:	0752      	lsls	r2, r2, #29
    c648:	d414      	bmi.n	c674 <__swsetup_r+0x88>
    c64a:	6921      	ldr	r1, [r4, #16]
    c64c:	f043 0308 	orr.w	r3, r3, #8
    c650:	81a3      	strh	r3, [r4, #12]
    c652:	b29a      	uxth	r2, r3
    c654:	2900      	cmp	r1, #0
    c656:	d1d9      	bne.n	c60c <__swsetup_r+0x20>
    c658:	f402 7020 	and.w	r0, r2, #640	; 0x280
    c65c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    c660:	d0d4      	beq.n	c60c <__swsetup_r+0x20>
    c662:	4621      	mov	r1, r4
    c664:	4628      	mov	r0, r5
    c666:	f000 f947 	bl	c8f8 <__smakebuf_r>
    c66a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c66e:	6921      	ldr	r1, [r4, #16]
    c670:	b29a      	uxth	r2, r3
    c672:	e7cb      	b.n	c60c <__swsetup_r+0x20>
    c674:	6b21      	ldr	r1, [r4, #48]	; 0x30
    c676:	b151      	cbz	r1, c68e <__swsetup_r+0xa2>
    c678:	f104 0240 	add.w	r2, r4, #64	; 0x40
    c67c:	4291      	cmp	r1, r2
    c67e:	d004      	beq.n	c68a <__swsetup_r+0x9e>
    c680:	4628      	mov	r0, r5
    c682:	f7fb f8ff 	bl	7884 <_free_r>
    c686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c68a:	2200      	movs	r2, #0
    c68c:	6322      	str	r2, [r4, #48]	; 0x30
    c68e:	6921      	ldr	r1, [r4, #16]
    c690:	2200      	movs	r2, #0
    c692:	e9c4 1200 	strd	r1, r2, [r4]
    c696:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    c69a:	e7d7      	b.n	c64c <__swsetup_r+0x60>
    c69c:	4618      	mov	r0, r3
    c69e:	f7fa fdd1 	bl	7244 <__sinit>
    c6a2:	e7ac      	b.n	c5fe <__swsetup_r+0x12>
    c6a4:	2209      	movs	r2, #9
    c6a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c6aa:	602a      	str	r2, [r5, #0]
    c6ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c6b0:	81a3      	strh	r3, [r4, #12]
    c6b2:	bd38      	pop	{r3, r4, r5, pc}
    c6b4:	200198ac 	.word	0x200198ac

0000c6b8 <__fputwc>:
    c6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c6bc:	b082      	sub	sp, #8
    c6be:	4682      	mov	sl, r0
    c6c0:	4688      	mov	r8, r1
    c6c2:	4614      	mov	r4, r2
    c6c4:	f7fa ff72 	bl	75ac <__locale_mb_cur_max>
    c6c8:	2801      	cmp	r0, #1
    c6ca:	d103      	bne.n	c6d4 <__fputwc+0x1c>
    c6cc:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    c6d0:	2bfe      	cmp	r3, #254	; 0xfe
    c6d2:	d936      	bls.n	c742 <__fputwc+0x8a>
    c6d4:	f10d 0904 	add.w	r9, sp, #4
    c6d8:	4642      	mov	r2, r8
    c6da:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    c6de:	4649      	mov	r1, r9
    c6e0:	4650      	mov	r0, sl
    c6e2:	f7fd fd5d 	bl	a1a0 <_wcrtomb_r>
    c6e6:	1c42      	adds	r2, r0, #1
    c6e8:	4606      	mov	r6, r0
    c6ea:	d032      	beq.n	c752 <__fputwc+0x9a>
    c6ec:	b320      	cbz	r0, c738 <__fputwc+0x80>
    c6ee:	f89d c004 	ldrb.w	ip, [sp, #4]
    c6f2:	2500      	movs	r5, #0
    c6f4:	e009      	b.n	c70a <__fputwc+0x52>
    c6f6:	6823      	ldr	r3, [r4, #0]
    c6f8:	1c5a      	adds	r2, r3, #1
    c6fa:	6022      	str	r2, [r4, #0]
    c6fc:	f883 c000 	strb.w	ip, [r3]
    c700:	3501      	adds	r5, #1
    c702:	42b5      	cmp	r5, r6
    c704:	d218      	bcs.n	c738 <__fputwc+0x80>
    c706:	f819 cf01 	ldrb.w	ip, [r9, #1]!
    c70a:	68a3      	ldr	r3, [r4, #8]
    c70c:	3b01      	subs	r3, #1
    c70e:	2b00      	cmp	r3, #0
    c710:	60a3      	str	r3, [r4, #8]
    c712:	daf0      	bge.n	c6f6 <__fputwc+0x3e>
    c714:	69a7      	ldr	r7, [r4, #24]
    c716:	42bb      	cmp	r3, r7
    c718:	4661      	mov	r1, ip
    c71a:	4622      	mov	r2, r4
    c71c:	4650      	mov	r0, sl
    c71e:	db02      	blt.n	c726 <__fputwc+0x6e>
    c720:	f1bc 0f0a 	cmp.w	ip, #10
    c724:	d1e7      	bne.n	c6f6 <__fputwc+0x3e>
    c726:	f000 f953 	bl	c9d0 <__swbuf_r>
    c72a:	1c43      	adds	r3, r0, #1
    c72c:	d1e8      	bne.n	c700 <__fputwc+0x48>
    c72e:	4606      	mov	r6, r0
    c730:	4630      	mov	r0, r6
    c732:	b002      	add	sp, #8
    c734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c738:	4646      	mov	r6, r8
    c73a:	4630      	mov	r0, r6
    c73c:	b002      	add	sp, #8
    c73e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c742:	fa5f fc88 	uxtb.w	ip, r8
    c746:	f88d c004 	strb.w	ip, [sp, #4]
    c74a:	4606      	mov	r6, r0
    c74c:	f10d 0904 	add.w	r9, sp, #4
    c750:	e7cf      	b.n	c6f2 <__fputwc+0x3a>
    c752:	89a3      	ldrh	r3, [r4, #12]
    c754:	4630      	mov	r0, r6
    c756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c75a:	81a3      	strh	r3, [r4, #12]
    c75c:	b002      	add	sp, #8
    c75e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c762:	bf00      	nop

0000c764 <_fputwc_r>:
    c764:	b530      	push	{r4, r5, lr}
    c766:	6e53      	ldr	r3, [r2, #100]	; 0x64
    c768:	f013 0f01 	tst.w	r3, #1
    c76c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    c770:	4614      	mov	r4, r2
    c772:	b083      	sub	sp, #12
    c774:	4605      	mov	r5, r0
    c776:	b29a      	uxth	r2, r3
    c778:	d101      	bne.n	c77e <_fputwc_r+0x1a>
    c77a:	0598      	lsls	r0, r3, #22
    c77c:	d51c      	bpl.n	c7b8 <_fputwc_r+0x54>
    c77e:	0490      	lsls	r0, r2, #18
    c780:	d406      	bmi.n	c790 <_fputwc_r+0x2c>
    c782:	6e62      	ldr	r2, [r4, #100]	; 0x64
    c784:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    c788:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    c78c:	81a3      	strh	r3, [r4, #12]
    c78e:	6662      	str	r2, [r4, #100]	; 0x64
    c790:	4622      	mov	r2, r4
    c792:	4628      	mov	r0, r5
    c794:	f7ff ff90 	bl	c6b8 <__fputwc>
    c798:	6e63      	ldr	r3, [r4, #100]	; 0x64
    c79a:	07da      	lsls	r2, r3, #31
    c79c:	4605      	mov	r5, r0
    c79e:	d402      	bmi.n	c7a6 <_fputwc_r+0x42>
    c7a0:	89a3      	ldrh	r3, [r4, #12]
    c7a2:	059b      	lsls	r3, r3, #22
    c7a4:	d502      	bpl.n	c7ac <_fputwc_r+0x48>
    c7a6:	4628      	mov	r0, r5
    c7a8:	b003      	add	sp, #12
    c7aa:	bd30      	pop	{r4, r5, pc}
    c7ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c7ae:	f7fa ff61 	bl	7674 <__retarget_lock_release_recursive>
    c7b2:	4628      	mov	r0, r5
    c7b4:	b003      	add	sp, #12
    c7b6:	bd30      	pop	{r4, r5, pc}
    c7b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c7ba:	9101      	str	r1, [sp, #4]
    c7bc:	f7fa ff58 	bl	7670 <__retarget_lock_acquire_recursive>
    c7c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c7c4:	9901      	ldr	r1, [sp, #4]
    c7c6:	b29a      	uxth	r2, r3
    c7c8:	e7d9      	b.n	c77e <_fputwc_r+0x1a>
    c7ca:	bf00      	nop

0000c7cc <_wcsnrtombs_l>:
    c7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c7d0:	b08b      	sub	sp, #44	; 0x2c
    c7d2:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
    c7d6:	9f14      	ldr	r7, [sp, #80]	; 0x50
    c7d8:	9103      	str	r1, [sp, #12]
    c7da:	4681      	mov	r9, r0
    c7dc:	9205      	str	r2, [sp, #20]
    c7de:	461e      	mov	r6, r3
    c7e0:	f1b8 0f00 	cmp.w	r8, #0
    c7e4:	d05c      	beq.n	c8a0 <_wcsnrtombs_l+0xd4>
    c7e6:	9b03      	ldr	r3, [sp, #12]
    c7e8:	2b00      	cmp	r3, #0
    c7ea:	d05e      	beq.n	c8aa <_wcsnrtombs_l+0xde>
    c7ec:	9b05      	ldr	r3, [sp, #20]
    c7ee:	681d      	ldr	r5, [r3, #0]
    c7f0:	2f00      	cmp	r7, #0
    c7f2:	d06a      	beq.n	c8ca <_wcsnrtombs_l+0xfe>
    c7f4:	1e74      	subs	r4, r6, #1
    c7f6:	b34e      	cbz	r6, c84c <_wcsnrtombs_l+0x80>
    c7f8:	9b03      	ldr	r3, [sp, #12]
    c7fa:	9304      	str	r3, [sp, #16]
    c7fc:	3d04      	subs	r5, #4
    c7fe:	2600      	movs	r6, #0
    c800:	9501      	str	r5, [sp, #4]
    c802:	e00b      	b.n	c81c <_wcsnrtombs_l+0x50>
    c804:	9b03      	ldr	r3, [sp, #12]
    c806:	bb2b      	cbnz	r3, c854 <_wcsnrtombs_l+0x88>
    c808:	9b01      	ldr	r3, [sp, #4]
    c80a:	681a      	ldr	r2, [r3, #0]
    c80c:	2a00      	cmp	r2, #0
    c80e:	d03a      	beq.n	c886 <_wcsnrtombs_l+0xba>
    c810:	45bc      	cmp	ip, r7
    c812:	d25c      	bcs.n	c8ce <_wcsnrtombs_l+0x102>
    c814:	3c01      	subs	r4, #1
    c816:	1c63      	adds	r3, r4, #1
    c818:	4666      	mov	r6, ip
    c81a:	d017      	beq.n	c84c <_wcsnrtombs_l+0x80>
    c81c:	f8d8 3000 	ldr.w	r3, [r8]
    c820:	9302      	str	r3, [sp, #8]
    c822:	9b01      	ldr	r3, [sp, #4]
    c824:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
    c828:	f853 2f04 	ldr.w	r2, [r3, #4]!
    c82c:	9301      	str	r3, [sp, #4]
    c82e:	a907      	add	r1, sp, #28
    c830:	4643      	mov	r3, r8
    c832:	4648      	mov	r0, r9
    c834:	f8d8 b004 	ldr.w	fp, [r8, #4]
    c838:	47a8      	blx	r5
    c83a:	1c42      	adds	r2, r0, #1
    c83c:	d03a      	beq.n	c8b4 <_wcsnrtombs_l+0xe8>
    c83e:	eb00 0c06 	add.w	ip, r0, r6
    c842:	45bc      	cmp	ip, r7
    c844:	d9de      	bls.n	c804 <_wcsnrtombs_l+0x38>
    c846:	9b02      	ldr	r3, [sp, #8]
    c848:	e9c8 3b00 	strd	r3, fp, [r8]
    c84c:	4630      	mov	r0, r6
    c84e:	b00b      	add	sp, #44	; 0x2c
    c850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c854:	2800      	cmp	r0, #0
    c856:	dd0e      	ble.n	c876 <_wcsnrtombs_l+0xaa>
    c858:	9b04      	ldr	r3, [sp, #16]
    c85a:	9d01      	ldr	r5, [sp, #4]
    c85c:	4418      	add	r0, r3
    c85e:	1e5a      	subs	r2, r3, #1
    c860:	a907      	add	r1, sp, #28
    c862:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
    c866:	f811 3b01 	ldrb.w	r3, [r1], #1
    c86a:	f802 3f01 	strb.w	r3, [r2, #1]!
    c86e:	4572      	cmp	r2, lr
    c870:	d1f9      	bne.n	c866 <_wcsnrtombs_l+0x9a>
    c872:	9501      	str	r5, [sp, #4]
    c874:	9004      	str	r0, [sp, #16]
    c876:	9b05      	ldr	r3, [sp, #20]
    c878:	681a      	ldr	r2, [r3, #0]
    c87a:	3204      	adds	r2, #4
    c87c:	601a      	str	r2, [r3, #0]
    c87e:	9b01      	ldr	r3, [sp, #4]
    c880:	681a      	ldr	r2, [r3, #0]
    c882:	2a00      	cmp	r2, #0
    c884:	d1c4      	bne.n	c810 <_wcsnrtombs_l+0x44>
    c886:	9b03      	ldr	r3, [sp, #12]
    c888:	b10b      	cbz	r3, c88e <_wcsnrtombs_l+0xc2>
    c88a:	9b05      	ldr	r3, [sp, #20]
    c88c:	601a      	str	r2, [r3, #0]
    c88e:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
    c892:	2200      	movs	r2, #0
    c894:	4630      	mov	r0, r6
    c896:	f8c8 2000 	str.w	r2, [r8]
    c89a:	b00b      	add	sp, #44	; 0x2c
    c89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c8a0:	9b03      	ldr	r3, [sp, #12]
    c8a2:	f500 7886 	add.w	r8, r0, #268	; 0x10c
    c8a6:	2b00      	cmp	r3, #0
    c8a8:	d1a0      	bne.n	c7ec <_wcsnrtombs_l+0x20>
    c8aa:	9b05      	ldr	r3, [sp, #20]
    c8ac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    c8b0:	681d      	ldr	r5, [r3, #0]
    c8b2:	e79f      	b.n	c7f4 <_wcsnrtombs_l+0x28>
    c8b4:	4606      	mov	r6, r0
    c8b6:	218a      	movs	r1, #138	; 0x8a
    c8b8:	2200      	movs	r2, #0
    c8ba:	4630      	mov	r0, r6
    c8bc:	f8c9 1000 	str.w	r1, [r9]
    c8c0:	f8c8 2000 	str.w	r2, [r8]
    c8c4:	b00b      	add	sp, #44	; 0x2c
    c8c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c8ca:	463e      	mov	r6, r7
    c8cc:	e7be      	b.n	c84c <_wcsnrtombs_l+0x80>
    c8ce:	4666      	mov	r6, ip
    c8d0:	e7bc      	b.n	c84c <_wcsnrtombs_l+0x80>
    c8d2:	bf00      	nop

0000c8d4 <_wcsnrtombs_r>:
    c8d4:	b510      	push	{r4, lr}
    c8d6:	b084      	sub	sp, #16
    c8d8:	4c05      	ldr	r4, [pc, #20]	; (c8f0 <_wcsnrtombs_r+0x1c>)
    c8da:	9806      	ldr	r0, [sp, #24]
    c8dc:	9000      	str	r0, [sp, #0]
    c8de:	9807      	ldr	r0, [sp, #28]
    c8e0:	9001      	str	r0, [sp, #4]
    c8e2:	4804      	ldr	r0, [pc, #16]	; (c8f4 <_wcsnrtombs_r+0x20>)
    c8e4:	6800      	ldr	r0, [r0, #0]
    c8e6:	9402      	str	r4, [sp, #8]
    c8e8:	f7ff ff70 	bl	c7cc <_wcsnrtombs_l>
    c8ec:	b004      	add	sp, #16
    c8ee:	bd10      	pop	{r4, pc}
    c8f0:	20019324 	.word	0x20019324
    c8f4:	200198ac 	.word	0x200198ac

0000c8f8 <__smakebuf_r>:
    c8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c8fc:	898b      	ldrh	r3, [r1, #12]
    c8fe:	460c      	mov	r4, r1
    c900:	0799      	lsls	r1, r3, #30
    c902:	b096      	sub	sp, #88	; 0x58
    c904:	d508      	bpl.n	c918 <__smakebuf_r+0x20>
    c906:	f104 0343 	add.w	r3, r4, #67	; 0x43
    c90a:	2201      	movs	r2, #1
    c90c:	e9c4 3204 	strd	r3, r2, [r4, #16]
    c910:	6023      	str	r3, [r4, #0]
    c912:	b016      	add	sp, #88	; 0x58
    c914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c918:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    c91c:	2900      	cmp	r1, #0
    c91e:	4606      	mov	r6, r0
    c920:	db25      	blt.n	c96e <__smakebuf_r+0x76>
    c922:	466a      	mov	r2, sp
    c924:	f000 f8ac 	bl	ca80 <_fstat_r>
    c928:	2800      	cmp	r0, #0
    c92a:	db1f      	blt.n	c96c <__smakebuf_r+0x74>
    c92c:	9d01      	ldr	r5, [sp, #4]
    c92e:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
    c932:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
    c936:	fab5 f585 	clz	r5, r5
    c93a:	f44f 6880 	mov.w	r8, #1024	; 0x400
    c93e:	096d      	lsrs	r5, r5, #5
    c940:	f44f 6700 	mov.w	r7, #2048	; 0x800
    c944:	4641      	mov	r1, r8
    c946:	4630      	mov	r0, r6
    c948:	f7f9 ff3e 	bl	67c8 <_malloc_r>
    c94c:	b1e0      	cbz	r0, c988 <__smakebuf_r+0x90>
    c94e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c952:	f8c4 8014 	str.w	r8, [r4, #20]
    c956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c95a:	6020      	str	r0, [r4, #0]
    c95c:	6120      	str	r0, [r4, #16]
    c95e:	81a3      	strh	r3, [r4, #12]
    c960:	bb35      	cbnz	r5, c9b0 <__smakebuf_r+0xb8>
    c962:	433b      	orrs	r3, r7
    c964:	81a3      	strh	r3, [r4, #12]
    c966:	b016      	add	sp, #88	; 0x58
    c968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c96c:	89a3      	ldrh	r3, [r4, #12]
    c96e:	f013 0580 	ands.w	r5, r3, #128	; 0x80
    c972:	d019      	beq.n	c9a8 <__smakebuf_r+0xb0>
    c974:	f04f 0840 	mov.w	r8, #64	; 0x40
    c978:	2500      	movs	r5, #0
    c97a:	4641      	mov	r1, r8
    c97c:	4630      	mov	r0, r6
    c97e:	462f      	mov	r7, r5
    c980:	f7f9 ff22 	bl	67c8 <_malloc_r>
    c984:	2800      	cmp	r0, #0
    c986:	d1e2      	bne.n	c94e <__smakebuf_r+0x56>
    c988:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c98c:	059a      	lsls	r2, r3, #22
    c98e:	d4c0      	bmi.n	c912 <__smakebuf_r+0x1a>
    c990:	f023 0303 	bic.w	r3, r3, #3
    c994:	f104 0243 	add.w	r2, r4, #67	; 0x43
    c998:	f043 0302 	orr.w	r3, r3, #2
    c99c:	2101      	movs	r1, #1
    c99e:	e9c4 2104 	strd	r2, r1, [r4, #16]
    c9a2:	81a3      	strh	r3, [r4, #12]
    c9a4:	6022      	str	r2, [r4, #0]
    c9a6:	e7b4      	b.n	c912 <__smakebuf_r+0x1a>
    c9a8:	f44f 6880 	mov.w	r8, #1024	; 0x400
    c9ac:	462f      	mov	r7, r5
    c9ae:	e7c9      	b.n	c944 <__smakebuf_r+0x4c>
    c9b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    c9b4:	4630      	mov	r0, r6
    c9b6:	f000 f879 	bl	caac <_isatty_r>
    c9ba:	b910      	cbnz	r0, c9c2 <__smakebuf_r+0xca>
    c9bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c9c0:	e7cf      	b.n	c962 <__smakebuf_r+0x6a>
    c9c2:	89a3      	ldrh	r3, [r4, #12]
    c9c4:	f023 0303 	bic.w	r3, r3, #3
    c9c8:	f043 0301 	orr.w	r3, r3, #1
    c9cc:	b21b      	sxth	r3, r3
    c9ce:	e7c8      	b.n	c962 <__smakebuf_r+0x6a>

0000c9d0 <__swbuf_r>:
    c9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c9d2:	460d      	mov	r5, r1
    c9d4:	4614      	mov	r4, r2
    c9d6:	4606      	mov	r6, r0
    c9d8:	b110      	cbz	r0, c9e0 <__swbuf_r+0x10>
    c9da:	6b43      	ldr	r3, [r0, #52]	; 0x34
    c9dc:	2b00      	cmp	r3, #0
    c9de:	d04c      	beq.n	ca7a <__swbuf_r+0xaa>
    c9e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    c9e4:	69a3      	ldr	r3, [r4, #24]
    c9e6:	60a3      	str	r3, [r4, #8]
    c9e8:	0717      	lsls	r7, r2, #28
    c9ea:	b290      	uxth	r0, r2
    c9ec:	d51b      	bpl.n	ca26 <__swbuf_r+0x56>
    c9ee:	6923      	ldr	r3, [r4, #16]
    c9f0:	b1cb      	cbz	r3, ca26 <__swbuf_r+0x56>
    c9f2:	b2ed      	uxtb	r5, r5
    c9f4:	0481      	lsls	r1, r0, #18
    c9f6:	462f      	mov	r7, r5
    c9f8:	d522      	bpl.n	ca40 <__swbuf_r+0x70>
    c9fa:	6822      	ldr	r2, [r4, #0]
    c9fc:	6961      	ldr	r1, [r4, #20]
    c9fe:	1ad3      	subs	r3, r2, r3
    ca00:	4299      	cmp	r1, r3
    ca02:	dd29      	ble.n	ca58 <__swbuf_r+0x88>
    ca04:	3301      	adds	r3, #1
    ca06:	68a1      	ldr	r1, [r4, #8]
    ca08:	3901      	subs	r1, #1
    ca0a:	60a1      	str	r1, [r4, #8]
    ca0c:	1c51      	adds	r1, r2, #1
    ca0e:	6021      	str	r1, [r4, #0]
    ca10:	7015      	strb	r5, [r2, #0]
    ca12:	6962      	ldr	r2, [r4, #20]
    ca14:	429a      	cmp	r2, r3
    ca16:	d027      	beq.n	ca68 <__swbuf_r+0x98>
    ca18:	89a3      	ldrh	r3, [r4, #12]
    ca1a:	07db      	lsls	r3, r3, #31
    ca1c:	d501      	bpl.n	ca22 <__swbuf_r+0x52>
    ca1e:	2d0a      	cmp	r5, #10
    ca20:	d022      	beq.n	ca68 <__swbuf_r+0x98>
    ca22:	4638      	mov	r0, r7
    ca24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ca26:	4621      	mov	r1, r4
    ca28:	4630      	mov	r0, r6
    ca2a:	f7ff fddf 	bl	c5ec <__swsetup_r>
    ca2e:	bb08      	cbnz	r0, ca74 <__swbuf_r+0xa4>
    ca30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    ca34:	6923      	ldr	r3, [r4, #16]
    ca36:	b290      	uxth	r0, r2
    ca38:	b2ed      	uxtb	r5, r5
    ca3a:	0481      	lsls	r1, r0, #18
    ca3c:	462f      	mov	r7, r5
    ca3e:	d4dc      	bmi.n	c9fa <__swbuf_r+0x2a>
    ca40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    ca44:	81a2      	strh	r2, [r4, #12]
    ca46:	6e62      	ldr	r2, [r4, #100]	; 0x64
    ca48:	6961      	ldr	r1, [r4, #20]
    ca4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    ca4e:	6662      	str	r2, [r4, #100]	; 0x64
    ca50:	6822      	ldr	r2, [r4, #0]
    ca52:	1ad3      	subs	r3, r2, r3
    ca54:	4299      	cmp	r1, r3
    ca56:	dcd5      	bgt.n	ca04 <__swbuf_r+0x34>
    ca58:	4621      	mov	r1, r4
    ca5a:	4630      	mov	r0, r6
    ca5c:	f7fd fa8a 	bl	9f74 <_fflush_r>
    ca60:	b940      	cbnz	r0, ca74 <__swbuf_r+0xa4>
    ca62:	6822      	ldr	r2, [r4, #0]
    ca64:	2301      	movs	r3, #1
    ca66:	e7ce      	b.n	ca06 <__swbuf_r+0x36>
    ca68:	4621      	mov	r1, r4
    ca6a:	4630      	mov	r0, r6
    ca6c:	f7fd fa82 	bl	9f74 <_fflush_r>
    ca70:	2800      	cmp	r0, #0
    ca72:	d0d6      	beq.n	ca22 <__swbuf_r+0x52>
    ca74:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    ca78:	e7d3      	b.n	ca22 <__swbuf_r+0x52>
    ca7a:	f7fa fbe3 	bl	7244 <__sinit>
    ca7e:	e7af      	b.n	c9e0 <__swbuf_r+0x10>

0000ca80 <_fstat_r>:
    ca80:	b570      	push	{r4, r5, r6, lr}
    ca82:	460c      	mov	r4, r1
    ca84:	4d08      	ldr	r5, [pc, #32]	; (caa8 <_fstat_r+0x28>)
    ca86:	4603      	mov	r3, r0
    ca88:	2600      	movs	r6, #0
    ca8a:	4620      	mov	r0, r4
    ca8c:	4611      	mov	r1, r2
    ca8e:	461c      	mov	r4, r3
    ca90:	602e      	str	r6, [r5, #0]
    ca92:	f7f8 fbeb 	bl	526c <_fstat>
    ca96:	1c43      	adds	r3, r0, #1
    ca98:	d000      	beq.n	ca9c <_fstat_r+0x1c>
    ca9a:	bd70      	pop	{r4, r5, r6, pc}
    ca9c:	682b      	ldr	r3, [r5, #0]
    ca9e:	2b00      	cmp	r3, #0
    caa0:	d0fb      	beq.n	ca9a <_fstat_r+0x1a>
    caa2:	6023      	str	r3, [r4, #0]
    caa4:	bd70      	pop	{r4, r5, r6, pc}
    caa6:	bf00      	nop
    caa8:	2001aba8 	.word	0x2001aba8

0000caac <_isatty_r>:
    caac:	b538      	push	{r3, r4, r5, lr}
    caae:	4d07      	ldr	r5, [pc, #28]	; (cacc <_isatty_r+0x20>)
    cab0:	2200      	movs	r2, #0
    cab2:	4604      	mov	r4, r0
    cab4:	4608      	mov	r0, r1
    cab6:	602a      	str	r2, [r5, #0]
    cab8:	f7f8 fbde 	bl	5278 <_isatty>
    cabc:	1c43      	adds	r3, r0, #1
    cabe:	d000      	beq.n	cac2 <_isatty_r+0x16>
    cac0:	bd38      	pop	{r3, r4, r5, pc}
    cac2:	682b      	ldr	r3, [r5, #0]
    cac4:	2b00      	cmp	r3, #0
    cac6:	d0fb      	beq.n	cac0 <_isatty_r+0x14>
    cac8:	6023      	str	r3, [r4, #0]
    caca:	bd38      	pop	{r3, r4, r5, pc}
    cacc:	2001aba8 	.word	0x2001aba8

0000cad0 <___init_veneer>:
    cad0:	f85f f000 	ldr.w	pc, [pc]	; cad4 <___init_veneer+0x4>
    cad4:	60001aad 	.word	0x60001aad

0000cad8 <___reboot_Teensyduino__veneer>:
    cad8:	f85f f000 	ldr.w	pc, [pc]	; cadc <___reboot_Teensyduino__veneer+0x4>
    cadc:	60001a59 	.word	0x60001a59

Disassembly of section .fini:

0000cae0 <_fini>:
    cae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cae2:	bf00      	nop
